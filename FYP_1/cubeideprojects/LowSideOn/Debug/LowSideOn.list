
LowSideOn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004060  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004314  08004314  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004314  08004314  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004314  08004314  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800431c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000060  0800437c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  0800437c  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000baef  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb7  00000000  00000000  0002bbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0002d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096b  00000000  00000000  0002e378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001769a  00000000  00000000  0002ece3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d96e  00000000  00000000  0004637d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008824e  00000000  00000000  00053ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038bc  00000000  00000000  000dbf3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000df7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08004154 	.word	0x08004154

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08004154 	.word	0x08004154

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	4942      	ldr	r1, [pc, #264]	; (8000780 <HAL_UART_RxCpltCallback+0x114>)
 8000678:	4842      	ldr	r0, [pc, #264]	; (8000784 <HAL_UART_RxCpltCallback+0x118>)
 800067a:	f002 fa88 	bl	8002b8e <HAL_UART_Receive_IT>
	if(rx_buffer[0] == '\n')
 800067e:	4b40      	ldr	r3, [pc, #256]	; (8000780 <HAL_UART_RxCpltCallback+0x114>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b0a      	cmp	r3, #10
 8000684:	d164      	bne.n	8000750 <HAL_UART_RxCpltCallback+0xe4>
	{
		recieved_buffer[strlen((char*)rx_buffer) - 1] = '\0';
 8000686:	2300      	movs	r3, #0
 8000688:	3b01      	subs	r3, #1
 800068a:	4a3f      	ldr	r2, [pc, #252]	; (8000788 <HAL_UART_RxCpltCallback+0x11c>)
 800068c:	2100      	movs	r1, #0
 800068e:	54d1      	strb	r1, [r2, r3]
		if(strcmp((char*)recieved_buffer, COUNTER_CLOCKWISE_TEXT) == 0)
 8000690:	493e      	ldr	r1, [pc, #248]	; (800078c <HAL_UART_RxCpltCallback+0x120>)
 8000692:	483d      	ldr	r0, [pc, #244]	; (8000788 <HAL_UART_RxCpltCallback+0x11c>)
 8000694:	f7ff fd5a 	bl	800014c <strcmp>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d106      	bne.n	80006ac <HAL_UART_RxCpltCallback+0x40>
		{
			//move clockwise
			changeMotorDirection = 1;
 800069e:	4b3c      	ldr	r3, [pc, #240]	; (8000790 <HAL_UART_RxCpltCallback+0x124>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
			motorDirection = CounterClockWise;
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <HAL_UART_RxCpltCallback+0x128>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e043      	b.n	8000734 <HAL_UART_RxCpltCallback+0xc8>
		}
		else if(strcmp((char*)recieved_buffer, CLOCKWISE_TEXT) == 0)
 80006ac:	493a      	ldr	r1, [pc, #232]	; (8000798 <HAL_UART_RxCpltCallback+0x12c>)
 80006ae:	4836      	ldr	r0, [pc, #216]	; (8000788 <HAL_UART_RxCpltCallback+0x11c>)
 80006b0:	f7ff fd4c 	bl	800014c <strcmp>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d106      	bne.n	80006c8 <HAL_UART_RxCpltCallback+0x5c>
		{
			//Move clockwise
			changeMotorDirection = 1;
 80006ba:	4b35      	ldr	r3, [pc, #212]	; (8000790 <HAL_UART_RxCpltCallback+0x124>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
			motorDirection = ClockWise;
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_UART_RxCpltCallback+0x128>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e035      	b.n	8000734 <HAL_UART_RxCpltCallback+0xc8>
		}
		else{
			changePWM_DutyCycle = 1;
 80006c8:	4b34      	ldr	r3, [pc, #208]	; (800079c <HAL_UART_RxCpltCallback+0x130>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
			uint16_t duty_cycle = (uint16_t)atoi((char*) recieved_buffer);
 80006ce:	482e      	ldr	r0, [pc, #184]	; (8000788 <HAL_UART_RxCpltCallback+0x11c>)
 80006d0:	f003 f802 	bl	80036d8 <atoi>
 80006d4:	4603      	mov	r3, r0
 80006d6:	81fb      	strh	r3, [r7, #14]
			sprintf(pwm_msg, "PWM Duty Cycle: %u%%\r\n", duty_cycle);
 80006d8:	89fb      	ldrh	r3, [r7, #14]
 80006da:	461a      	mov	r2, r3
 80006dc:	4930      	ldr	r1, [pc, #192]	; (80007a0 <HAL_UART_RxCpltCallback+0x134>)
 80006de:	4831      	ldr	r0, [pc, #196]	; (80007a4 <HAL_UART_RxCpltCallback+0x138>)
 80006e0:	f003 f886 	bl	80037f0 <siprintf>
			if(duty_cycle > 100)
 80006e4:	89fb      	ldrh	r3, [r7, #14]
 80006e6:	2b64      	cmp	r3, #100	; 0x64
 80006e8:	d903      	bls.n	80006f2 <HAL_UART_RxCpltCallback+0x86>
			{
				sprintf(pwm_msg, "Invalid input!\n");
 80006ea:	492f      	ldr	r1, [pc, #188]	; (80007a8 <HAL_UART_RxCpltCallback+0x13c>)
 80006ec:	482d      	ldr	r0, [pc, #180]	; (80007a4 <HAL_UART_RxCpltCallback+0x138>)
 80006ee:	f003 f87f 	bl	80037f0 <siprintf>
			}
			HAL_UART_Transmit(&huart1, (uint8_t*)pwm_msg, strlen((char*)pwm_msg), HAL_MAX_DELAY);
 80006f2:	482c      	ldr	r0, [pc, #176]	; (80007a4 <HAL_UART_RxCpltCallback+0x138>)
 80006f4:	f7ff fd34 	bl	8000160 <strlen>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	4928      	ldr	r1, [pc, #160]	; (80007a4 <HAL_UART_RxCpltCallback+0x138>)
 8000702:	4820      	ldr	r0, [pc, #128]	; (8000784 <HAL_UART_RxCpltCallback+0x118>)
 8000704:	f002 f9c0 	bl	8002a88 <HAL_UART_Transmit>
			//Set Period
			PWM_countingDutyCycle = (uint8_t)(((float)duty_cycle / 100.0f) * (float)(255));
 8000708:	89fb      	ldrh	r3, [r7, #14]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fde6 	bl	80002dc <__aeabi_ui2f>
 8000710:	4603      	mov	r3, r0
 8000712:	4926      	ldr	r1, [pc, #152]	; (80007ac <HAL_UART_RxCpltCallback+0x140>)
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff feed 	bl	80004f4 <__aeabi_fdiv>
 800071a:	4603      	mov	r3, r0
 800071c:	4924      	ldr	r1, [pc, #144]	; (80007b0 <HAL_UART_RxCpltCallback+0x144>)
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fe34 	bl	800038c <__aeabi_fmul>
 8000724:	4603      	mov	r3, r0
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff80 	bl	800062c <__aeabi_f2uiz>
 800072c:	4603      	mov	r3, r0
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <HAL_UART_RxCpltCallback+0x148>)
 8000732:	701a      	strb	r2, [r3, #0]
		}
		memset(recieved_buffer, 0, RECIEVED_BUFFER_SIZE);
 8000734:	2204      	movs	r2, #4
 8000736:	2100      	movs	r1, #0
 8000738:	4813      	ldr	r0, [pc, #76]	; (8000788 <HAL_UART_RxCpltCallback+0x11c>)
 800073a:	f003 f879 	bl	8003830 <memset>
		memset(pwm_msg, 0, PWM_MSG_SIZE);
 800073e:	2222      	movs	r2, #34	; 0x22
 8000740:	2100      	movs	r1, #0
 8000742:	4818      	ldr	r0, [pc, #96]	; (80007a4 <HAL_UART_RxCpltCallback+0x138>)
 8000744:	f003 f874 	bl	8003830 <memset>
		recieved_buffer_index = 0;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_UART_RxCpltCallback+0x14c>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
	{
		recieved_buffer[recieved_buffer_index] = rx_buffer[0];
		recieved_buffer_index++;
		recieved_buffer_index = recieved_buffer_index % RECIEVED_BUFFER_SIZE;
	}
}
 800074e:	e013      	b.n	8000778 <HAL_UART_RxCpltCallback+0x10c>
		recieved_buffer[recieved_buffer_index] = rx_buffer[0];
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <HAL_UART_RxCpltCallback+0x14c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <HAL_UART_RxCpltCallback+0x114>)
 8000758:	7819      	ldrb	r1, [r3, #0]
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_UART_RxCpltCallback+0x11c>)
 800075c:	5499      	strb	r1, [r3, r2]
		recieved_buffer_index++;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <HAL_UART_RxCpltCallback+0x14c>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_UART_RxCpltCallback+0x14c>)
 8000768:	701a      	strb	r2, [r3, #0]
		recieved_buffer_index = recieved_buffer_index % RECIEVED_BUFFER_SIZE;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <HAL_UART_RxCpltCallback+0x14c>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	f003 0303 	and.w	r3, r3, #3
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_UART_RxCpltCallback+0x14c>)
 8000776:	701a      	strb	r2, [r3, #0]
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000010c 	.word	0x2000010c
 8000784:	200000c4 	.word	0x200000c4
 8000788:	20000110 	.word	0x20000110
 800078c:	0800416c 	.word	0x0800416c
 8000790:	20000140 	.word	0x20000140
 8000794:	2000013a 	.word	0x2000013a
 8000798:	08004170 	.word	0x08004170
 800079c:	20000141 	.word	0x20000141
 80007a0:	08004174 	.word	0x08004174
 80007a4:	20000118 	.word	0x20000118
 80007a8:	0800418c 	.word	0x0800418c
 80007ac:	42c80000 	.word	0x42c80000
 80007b0:	437f0000 	.word	0x437f0000
 80007b4:	20000000 	.word	0x20000000
 80007b8:	20000114 	.word	0x20000114

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 fb67 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f8dd 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 f9c7 	bl	8000b5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007ce:	f000 f99b 	bl	8000b08 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80007d2:	f000 f917 	bl	8000a04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 80007d6:	2201      	movs	r2, #1
 80007d8:	495f      	ldr	r1, [pc, #380]	; (8000958 <main+0x19c>)
 80007da:	4860      	ldr	r0, [pc, #384]	; (800095c <main+0x1a0>)
 80007dc:	f002 f9d7 	bl	8002b8e <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007e0:	2100      	movs	r1, #0
 80007e2:	485f      	ldr	r0, [pc, #380]	; (8000960 <main+0x1a4>)
 80007e4:	f001 fbe8 	bl	8001fb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007e8:	2104      	movs	r1, #4
 80007ea:	485d      	ldr	r0, [pc, #372]	; (8000960 <main+0x1a4>)
 80007ec:	f001 fbe4 	bl	8001fb8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 80007f0:	4b5b      	ldr	r3, [pc, #364]	; (8000960 <main+0x1a4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2200      	movs	r2, #0
 80007f6:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fe:	4859      	ldr	r0, [pc, #356]	; (8000964 <main+0x1a8>)
 8000800:	f000 ff0a 	bl	8001618 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800080a:	4856      	ldr	r0, [pc, #344]	; (8000964 <main+0x1a8>)
 800080c:	f000 ff04 	bl	8001618 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(changeMotorDirection)
 8000810:	4b55      	ldr	r3, [pc, #340]	; (8000968 <main+0x1ac>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d070      	beq.n	80008fa <main+0x13e>
	  {
		  switch(motorDirection)
 8000818:	4b54      	ldr	r3, [pc, #336]	; (800096c <main+0x1b0>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <main+0x6a>
 8000820:	2b01      	cmp	r3, #1
 8000822:	d035      	beq.n	8000890 <main+0xd4>
 8000824:	e066      	b.n	80008f4 <main+0x138>
		  {
		  case ClockWise:
		  {
			  PWM_CurrentChannel = PWM_CLOCKWISE_CHANNEL;
 8000826:	4b52      	ldr	r3, [pc, #328]	; (8000970 <main+0x1b4>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 800082c:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <main+0x1a4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2200      	movs	r2, #0
 8000832:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, 0);
 8000834:	4b4a      	ldr	r3, [pc, #296]	; (8000960 <main+0x1a4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2200      	movs	r2, #0
 800083a:	635a      	str	r2, [r3, #52]	; 0x34
			  //delay here
			  HAL_Delay(PWM_DEADTIME_DELAY);
 800083c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000840:	f000 fb8a 	bl	8000f58 <HAL_Delay>
			  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, PWM_countingDutyCycle);
 8000844:	4b4b      	ldr	r3, [pc, #300]	; (8000974 <main+0x1b8>)
 8000846:	781a      	ldrb	r2, [r3, #0]
 8000848:	4b45      	ldr	r3, [pc, #276]	; (8000960 <main+0x1a4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000854:	4843      	ldr	r0, [pc, #268]	; (8000964 <main+0x1a8>)
 8000856:	f000 fedf 	bl	8001618 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000860:	4840      	ldr	r0, [pc, #256]	; (8000964 <main+0x1a8>)
 8000862:	f000 fed9 	bl	8001618 <HAL_GPIO_WritePin>
			  char buff[6];
			  sprintf(buff, "CW\n\r");
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4943      	ldr	r1, [pc, #268]	; (8000978 <main+0x1bc>)
 800086c:	4618      	mov	r0, r3
 800086e:	f002 ffbf 	bl	80037f0 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fc72 	bl	8000160 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	f107 0108 	add.w	r1, r7, #8
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	4834      	ldr	r0, [pc, #208]	; (800095c <main+0x1a0>)
 800088a:	f002 f8fd 	bl	8002a88 <HAL_UART_Transmit>
		  }break;
 800088e:	e031      	b.n	80008f4 <main+0x138>
		  case CounterClockWise:
		  {
			  PWM_CurrentChannel = PWM_COUNTER_CLOCKWISE_CHANNEL;
 8000890:	4b37      	ldr	r3, [pc, #220]	; (8000970 <main+0x1b4>)
 8000892:	2204      	movs	r2, #4
 8000894:	601a      	str	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, 0);
 8000896:	4b32      	ldr	r3, [pc, #200]	; (8000960 <main+0x1a4>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2200      	movs	r2, #0
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 800089e:	4b30      	ldr	r3, [pc, #192]	; (8000960 <main+0x1a4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2200      	movs	r2, #0
 80008a4:	639a      	str	r2, [r3, #56]	; 0x38
			  //delay here
			  HAL_Delay(PWM_DEADTIME_DELAY);
 80008a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008aa:	f000 fb55 	bl	8000f58 <HAL_Delay>
			  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, PWM_countingDutyCycle);
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <main+0x1b8>)
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <main+0x1a4>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	639a      	str	r2, [r3, #56]	; 0x38
			  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008be:	4829      	ldr	r0, [pc, #164]	; (8000964 <main+0x1a8>)
 80008c0:	f000 feaa 	bl	8001618 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ca:	4826      	ldr	r0, [pc, #152]	; (8000964 <main+0x1a8>)
 80008cc:	f000 fea4 	bl	8001618 <HAL_GPIO_WritePin>
			  char buff[6];
			  sprintf(buff, "CCW\n\r");
 80008d0:	463b      	mov	r3, r7
 80008d2:	492a      	ldr	r1, [pc, #168]	; (800097c <main+0x1c0>)
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 ff8b 	bl	80037f0 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 80008da:	463b      	mov	r3, r7
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fc3f 	bl	8000160 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	4639      	mov	r1, r7
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	481b      	ldr	r0, [pc, #108]	; (800095c <main+0x1a0>)
 80008ee:	f002 f8cb 	bl	8002a88 <HAL_UART_Transmit>
		  }break;
 80008f2:	bf00      	nop
		  }
		  changeMotorDirection = 0;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <main+0x1ac>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
	  }
	  if(changePWM_DutyCycle)
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <main+0x1c4>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d086      	beq.n	8000810 <main+0x54>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, PWM_countingDutyCycle);
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <main+0x1b4>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d105      	bne.n	8000916 <main+0x15a>
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <main+0x1b8>)
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <main+0x1a4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
 8000914:	e01b      	b.n	800094e <main+0x192>
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <main+0x1b4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b04      	cmp	r3, #4
 800091c:	d106      	bne.n	800092c <main+0x170>
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <main+0x1b8>)
 8000920:	7819      	ldrb	r1, [r3, #0]
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <main+0x1a4>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	460b      	mov	r3, r1
 8000928:	6393      	str	r3, [r2, #56]	; 0x38
 800092a:	e010      	b.n	800094e <main+0x192>
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <main+0x1b4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b08      	cmp	r3, #8
 8000932:	d106      	bne.n	8000942 <main+0x186>
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <main+0x1b8>)
 8000936:	7819      	ldrb	r1, [r3, #0]
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <main+0x1a4>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	460b      	mov	r3, r1
 800093e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000940:	e005      	b.n	800094e <main+0x192>
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <main+0x1b8>)
 8000944:	7819      	ldrb	r1, [r3, #0]
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <main+0x1a4>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	460b      	mov	r3, r1
 800094c:	6413      	str	r3, [r2, #64]	; 0x40

		  changePWM_DutyCycle = 0;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <main+0x1c4>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
	  if(changeMotorDirection)
 8000954:	e75c      	b.n	8000810 <main+0x54>
 8000956:	bf00      	nop
 8000958:	2000010c 	.word	0x2000010c
 800095c:	200000c4 	.word	0x200000c4
 8000960:	2000007c 	.word	0x2000007c
 8000964:	40010c00 	.word	0x40010c00
 8000968:	20000140 	.word	0x20000140
 800096c:	2000013a 	.word	0x2000013a
 8000970:	2000013c 	.word	0x2000013c
 8000974:	20000000 	.word	0x20000000
 8000978:	080041a4 	.word	0x080041a4
 800097c:	080041ac 	.word	0x080041ac
 8000980:	20000141 	.word	0x20000141

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b090      	sub	sp, #64	; 0x40
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	2228      	movs	r2, #40	; 0x28
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f002 ff4c 	bl	8003830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009aa:	2301      	movs	r3, #1
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ae:	2310      	movs	r3, #16
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009b6:	2300      	movs	r3, #0
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80009ba:	2300      	movs	r3, #0
 80009bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009be:	f107 0318 	add.w	r3, r7, #24
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fe40 	bl	8001648 <HAL_RCC_OscConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80009ce:	f000 f905 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	230f      	movs	r3, #15
 80009d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2302      	movs	r3, #2
 80009d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 f8ad 	bl	8001b4c <HAL_RCC_ClockConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009f8:	f000 f8f0 	bl	8000bdc <Error_Handler>
  }
}
 80009fc:	bf00      	nop
 80009fe:	3740      	adds	r7, #64	; 0x40
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08e      	sub	sp, #56	; 0x38
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a18:	f107 0320 	add.w	r3, r7, #32
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
 8000a30:	615a      	str	r2, [r3, #20]
 8000a32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a34:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a3c:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000a48:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a54:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a5a:	482a      	ldr	r0, [pc, #168]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000a5c:	f001 fa04 	bl	8001e68 <HAL_TIM_Base_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000a66:	f000 f8b9 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4823      	ldr	r0, [pc, #140]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000a78:	f001 fbfc 	bl	8002274 <HAL_TIM_ConfigClockSource>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a82:	f000 f8ab 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a86:	481f      	ldr	r0, [pc, #124]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000a88:	f001 fa3d 	bl	8001f06 <HAL_TIM_PWM_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a92:	f000 f8a3 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4817      	ldr	r0, [pc, #92]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000aa6:	f001 ff47 	bl	8002938 <HAL_TIMEx_MasterConfigSynchronization>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000ab0:	f000 f894 	bl	8000bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab4:	2360      	movs	r3, #96	; 0x60
 8000ab6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 8000ab8:	237d      	movs	r3, #125	; 0x7d
 8000aba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480e      	ldr	r0, [pc, #56]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000acc:	f001 fb10 	bl	80020f0 <HAL_TIM_PWM_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000ad6:	f000 f881 	bl	8000bdc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000ae6:	f001 fb03 	bl	80020f0 <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000af0:	f000 f874 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_TIM2_Init+0x100>)
 8000af6:	f000 f8b5 	bl	8000c64 <HAL_TIM_MspPostInit>

}
 8000afa:	bf00      	nop
 8000afc:	3738      	adds	r7, #56	; 0x38
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000007c 	.word	0x2000007c

08000b08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_USART1_UART_Init+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b40:	f001 ff52 	bl	80029e8 <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b4a:	f000 f847 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000c4 	.word	0x200000c4
 8000b58:	40013800 	.word	0x40013800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0308 	and.w	r3, r3, #8
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <MX_GPIO_Init+0x7c>)
 8000ba8:	f000 fd36 	bl	8001618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000bac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_GPIO_Init+0x7c>)
 8000bc6:	f000 fbab 	bl	8001320 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_MspInit+0x40>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <HAL_MspInit+0x40>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6193      	str	r3, [r2, #24]
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_MspInit+0x40>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_MspInit+0x40>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_MspInit+0x40>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	61d3      	str	r3, [r2, #28]
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_MspInit+0x40>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c3c:	d10b      	bne.n	8000c56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_TIM_Base_MspInit+0x34>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_TIM_Base_MspInit+0x34>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_TIM_Base_MspInit+0x34>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c82:	d117      	bne.n	8000cb4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_TIM_MspPostInit+0x58>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <HAL_TIM_MspPostInit+0x58>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_TIM_MspPostInit+0x58>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <HAL_TIM_MspPostInit+0x5c>)
 8000cb0:	f000 fb36 	bl	8001320 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010800 	.word	0x40010800

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a20      	ldr	r2, [pc, #128]	; (8000d60 <HAL_UART_MspInit+0x9c>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d139      	bne.n	8000d58 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <HAL_UART_MspInit+0xa0>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <HAL_UART_MspInit+0xa0>)
 8000cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_UART_MspInit+0xa0>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_UART_MspInit+0xa0>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0xa0>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_UART_MspInit+0xa0>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	4619      	mov	r1, r3
 8000d28:	480f      	ldr	r0, [pc, #60]	; (8000d68 <HAL_UART_MspInit+0xa4>)
 8000d2a:	f000 faf9 	bl	8001320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4619      	mov	r1, r3
 8000d42:	4809      	ldr	r0, [pc, #36]	; (8000d68 <HAL_UART_MspInit+0xa4>)
 8000d44:	f000 faec 	bl	8001320 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2025      	movs	r0, #37	; 0x25
 8000d4e:	f000 f9fe 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d52:	2025      	movs	r0, #37	; 0x25
 8000d54:	f000 fa17 	bl	8001186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40013800 	.word	0x40013800
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010800 	.word	0x40010800

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db2:	f000 f8b5 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <USART1_IRQHandler+0x10>)
 8000dc2:	f001 ff09 	bl	8002bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000c4 	.word	0x200000c4

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f002 fd1e 	bl	8003840 <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20002800 	.word	0x20002800
 8000e30:	00000400 	.word	0x00000400
 8000e34:	20000144 	.word	0x20000144
 8000e38:	20000298 	.word	0x20000298

08000e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e48:	f7ff fff8 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e4e:	490c      	ldr	r1, [pc, #48]	; (8000e80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e64:	4c09      	ldr	r4, [pc, #36]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f002 fceb 	bl	800384c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e76:	f7ff fca1 	bl	80007bc <main>
  bx lr
 8000e7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e84:	0800431c 	.word	0x0800431c
  ldr r2, =_sbss
 8000e88:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e8c:	20000294 	.word	0x20000294

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x28>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x28>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f947 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fe9a 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f95f 	bl	80011a2 <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f927 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000004 	.word	0x20000004
 8000f18:	2000000c 	.word	0x2000000c
 8000f1c:	20000008 	.word	0x20000008

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_IncTick+0x1c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x20>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <HAL_IncTick+0x20>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	2000000c 	.word	0x2000000c
 8000f40:	20000148 	.word	0x20000148

08000f44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <HAL_GetTick+0x10>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	20000148 	.word	0x20000148

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff fff0 	bl	8000f44 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffe0 	bl	8000f44 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000000c 	.word	0x2000000c

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4906      	ldr	r1, [pc, #24]	; (8001038 <__NVIC_EnableIRQ+0x34>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	; (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff90 	bl	800103c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff2d 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff42 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff90 	bl	8001090 <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5f 	bl	800103c <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff35 	bl	8001004 <__NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffa2 	bl	80010f4 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d008      	beq.n	80011e4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2204      	movs	r2, #4
 80011d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e020      	b.n	8001226 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 020e 	bic.w	r2, r2, #14
 80011f2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120c:	2101      	movs	r1, #1
 800120e:	fa01 f202 	lsl.w	r2, r1, r2
 8001212:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d005      	beq.n	8001254 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2204      	movs	r2, #4
 800124c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e051      	b.n	80012f8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 020e 	bic.w	r2, r2, #14
 8001262:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0201 	bic.w	r2, r2, #1
 8001272:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a22      	ldr	r2, [pc, #136]	; (8001304 <HAL_DMA_Abort_IT+0xd4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d029      	beq.n	80012d2 <HAL_DMA_Abort_IT+0xa2>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a21      	ldr	r2, [pc, #132]	; (8001308 <HAL_DMA_Abort_IT+0xd8>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d022      	beq.n	80012ce <HAL_DMA_Abort_IT+0x9e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1f      	ldr	r2, [pc, #124]	; (800130c <HAL_DMA_Abort_IT+0xdc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d01a      	beq.n	80012c8 <HAL_DMA_Abort_IT+0x98>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1e      	ldr	r2, [pc, #120]	; (8001310 <HAL_DMA_Abort_IT+0xe0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d012      	beq.n	80012c2 <HAL_DMA_Abort_IT+0x92>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <HAL_DMA_Abort_IT+0xe4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d00a      	beq.n	80012bc <HAL_DMA_Abort_IT+0x8c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <HAL_DMA_Abort_IT+0xe8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d102      	bne.n	80012b6 <HAL_DMA_Abort_IT+0x86>
 80012b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012b4:	e00e      	b.n	80012d4 <HAL_DMA_Abort_IT+0xa4>
 80012b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012ba:	e00b      	b.n	80012d4 <HAL_DMA_Abort_IT+0xa4>
 80012bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c0:	e008      	b.n	80012d4 <HAL_DMA_Abort_IT+0xa4>
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	e005      	b.n	80012d4 <HAL_DMA_Abort_IT+0xa4>
 80012c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012cc:	e002      	b.n	80012d4 <HAL_DMA_Abort_IT+0xa4>
 80012ce:	2310      	movs	r3, #16
 80012d0:	e000      	b.n	80012d4 <HAL_DMA_Abort_IT+0xa4>
 80012d2:	2301      	movs	r3, #1
 80012d4:	4a11      	ldr	r2, [pc, #68]	; (800131c <HAL_DMA_Abort_IT+0xec>)
 80012d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	4798      	blx	r3
    } 
  }
  return status;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020008 	.word	0x40020008
 8001308:	4002001c 	.word	0x4002001c
 800130c:	40020030 	.word	0x40020030
 8001310:	40020044 	.word	0x40020044
 8001314:	40020058 	.word	0x40020058
 8001318:	4002006c 	.word	0x4002006c
 800131c:	40020000 	.word	0x40020000

08001320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001320:	b480      	push	{r7}
 8001322:	b08b      	sub	sp, #44	; 0x2c
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001332:	e161      	b.n	80015f8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001334:	2201      	movs	r2, #1
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	429a      	cmp	r2, r3
 800134e:	f040 8150 	bne.w	80015f2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a97      	ldr	r2, [pc, #604]	; (80015b4 <HAL_GPIO_Init+0x294>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d05e      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 800135c:	4a95      	ldr	r2, [pc, #596]	; (80015b4 <HAL_GPIO_Init+0x294>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d875      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 8001362:	4a95      	ldr	r2, [pc, #596]	; (80015b8 <HAL_GPIO_Init+0x298>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d058      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 8001368:	4a93      	ldr	r2, [pc, #588]	; (80015b8 <HAL_GPIO_Init+0x298>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d86f      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 800136e:	4a93      	ldr	r2, [pc, #588]	; (80015bc <HAL_GPIO_Init+0x29c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d052      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 8001374:	4a91      	ldr	r2, [pc, #580]	; (80015bc <HAL_GPIO_Init+0x29c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d869      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 800137a:	4a91      	ldr	r2, [pc, #580]	; (80015c0 <HAL_GPIO_Init+0x2a0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d04c      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 8001380:	4a8f      	ldr	r2, [pc, #572]	; (80015c0 <HAL_GPIO_Init+0x2a0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d863      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 8001386:	4a8f      	ldr	r2, [pc, #572]	; (80015c4 <HAL_GPIO_Init+0x2a4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d046      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 800138c:	4a8d      	ldr	r2, [pc, #564]	; (80015c4 <HAL_GPIO_Init+0x2a4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d85d      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 8001392:	2b12      	cmp	r3, #18
 8001394:	d82a      	bhi.n	80013ec <HAL_GPIO_Init+0xcc>
 8001396:	2b12      	cmp	r3, #18
 8001398:	d859      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 800139a:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <HAL_GPIO_Init+0x80>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	0800141b 	.word	0x0800141b
 80013a4:	080013f5 	.word	0x080013f5
 80013a8:	08001407 	.word	0x08001407
 80013ac:	08001449 	.word	0x08001449
 80013b0:	0800144f 	.word	0x0800144f
 80013b4:	0800144f 	.word	0x0800144f
 80013b8:	0800144f 	.word	0x0800144f
 80013bc:	0800144f 	.word	0x0800144f
 80013c0:	0800144f 	.word	0x0800144f
 80013c4:	0800144f 	.word	0x0800144f
 80013c8:	0800144f 	.word	0x0800144f
 80013cc:	0800144f 	.word	0x0800144f
 80013d0:	0800144f 	.word	0x0800144f
 80013d4:	0800144f 	.word	0x0800144f
 80013d8:	0800144f 	.word	0x0800144f
 80013dc:	0800144f 	.word	0x0800144f
 80013e0:	0800144f 	.word	0x0800144f
 80013e4:	080013fd 	.word	0x080013fd
 80013e8:	08001411 	.word	0x08001411
 80013ec:	4a76      	ldr	r2, [pc, #472]	; (80015c8 <HAL_GPIO_Init+0x2a8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013f2:	e02c      	b.n	800144e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	623b      	str	r3, [r7, #32]
          break;
 80013fa:	e029      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	3304      	adds	r3, #4
 8001402:	623b      	str	r3, [r7, #32]
          break;
 8001404:	e024      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	3308      	adds	r3, #8
 800140c:	623b      	str	r3, [r7, #32]
          break;
 800140e:	e01f      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	330c      	adds	r3, #12
 8001416:	623b      	str	r3, [r7, #32]
          break;
 8001418:	e01a      	b.n	8001450 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001422:	2304      	movs	r3, #4
 8001424:	623b      	str	r3, [r7, #32]
          break;
 8001426:	e013      	b.n	8001450 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d105      	bne.n	800143c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001430:	2308      	movs	r3, #8
 8001432:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	611a      	str	r2, [r3, #16]
          break;
 800143a:	e009      	b.n	8001450 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800143c:	2308      	movs	r3, #8
 800143e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	615a      	str	r2, [r3, #20]
          break;
 8001446:	e003      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
          break;
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x130>
          break;
 800144e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2bff      	cmp	r3, #255	; 0xff
 8001454:	d801      	bhi.n	800145a <HAL_GPIO_Init+0x13a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	e001      	b.n	800145e <HAL_GPIO_Init+0x13e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3304      	adds	r3, #4
 800145e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2bff      	cmp	r3, #255	; 0xff
 8001464:	d802      	bhi.n	800146c <HAL_GPIO_Init+0x14c>
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	e002      	b.n	8001472 <HAL_GPIO_Init+0x152>
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	3b08      	subs	r3, #8
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	210f      	movs	r1, #15
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	401a      	ands	r2, r3
 8001484:	6a39      	ldr	r1, [r7, #32]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	431a      	orrs	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 80a9 	beq.w	80015f2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a0:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <HAL_GPIO_Init+0x2ac>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a49      	ldr	r2, [pc, #292]	; (80015cc <HAL_GPIO_Init+0x2ac>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_GPIO_Init+0x2ac>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b8:	4a45      	ldr	r2, [pc, #276]	; (80015d0 <HAL_GPIO_Init+0x2b0>)
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a3d      	ldr	r2, [pc, #244]	; (80015d4 <HAL_GPIO_Init+0x2b4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00d      	beq.n	8001500 <HAL_GPIO_Init+0x1e0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3c      	ldr	r2, [pc, #240]	; (80015d8 <HAL_GPIO_Init+0x2b8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x1dc>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3b      	ldr	r2, [pc, #236]	; (80015dc <HAL_GPIO_Init+0x2bc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_GPIO_Init+0x1d8>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e004      	b.n	8001502 <HAL_GPIO_Init+0x1e2>
 80014f8:	2303      	movs	r3, #3
 80014fa:	e002      	b.n	8001502 <HAL_GPIO_Init+0x1e2>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <HAL_GPIO_Init+0x1e2>
 8001500:	2300      	movs	r3, #0
 8001502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001504:	f002 0203 	and.w	r2, r2, #3
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	4093      	lsls	r3, r2
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001512:	492f      	ldr	r1, [pc, #188]	; (80015d0 <HAL_GPIO_Init+0x2b0>)
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800152c:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	492b      	ldr	r1, [pc, #172]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	608b      	str	r3, [r1, #8]
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	43db      	mvns	r3, r3
 8001542:	4927      	ldr	r1, [pc, #156]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 8001544:	4013      	ands	r3, r2
 8001546:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	4921      	ldr	r1, [pc, #132]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	60cb      	str	r3, [r1, #12]
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	43db      	mvns	r3, r3
 800156a:	491d      	ldr	r1, [pc, #116]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 800156c:	4013      	ands	r3, r2
 800156e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	4917      	ldr	r1, [pc, #92]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	43db      	mvns	r3, r3
 8001592:	4913      	ldr	r1, [pc, #76]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 8001594:	4013      	ands	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01f      	beq.n	80015e4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	490d      	ldr	r1, [pc, #52]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]
 80015b0:	e01f      	b.n	80015f2 <HAL_GPIO_Init+0x2d2>
 80015b2:	bf00      	nop
 80015b4:	10320000 	.word	0x10320000
 80015b8:	10310000 	.word	0x10310000
 80015bc:	10220000 	.word	0x10220000
 80015c0:	10210000 	.word	0x10210000
 80015c4:	10120000 	.word	0x10120000
 80015c8:	10110000 	.word	0x10110000
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010000 	.word	0x40010000
 80015d4:	40010800 	.word	0x40010800
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	40011000 	.word	0x40011000
 80015e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_GPIO_Init+0x2f4>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	4909      	ldr	r1, [pc, #36]	; (8001614 <HAL_GPIO_Init+0x2f4>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	3301      	adds	r3, #1
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	f47f ae96 	bne.w	8001334 <HAL_GPIO_Init+0x14>
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	372c      	adds	r7, #44	; 0x2c
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40010400 	.word	0x40010400

08001618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
 8001624:	4613      	mov	r3, r2
 8001626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001628:	787b      	ldrb	r3, [r7, #1]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001634:	e003      	b.n	800163e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	041a      	lsls	r2, r3, #16
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	611a      	str	r2, [r3, #16]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e272      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8087 	beq.w	8001776 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001668:	4b92      	ldr	r3, [pc, #584]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b04      	cmp	r3, #4
 8001672:	d00c      	beq.n	800168e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001674:	4b8f      	ldr	r3, [pc, #572]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b08      	cmp	r3, #8
 800167e:	d112      	bne.n	80016a6 <HAL_RCC_OscConfig+0x5e>
 8001680:	4b8c      	ldr	r3, [pc, #560]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d10b      	bne.n	80016a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168e:	4b89      	ldr	r3, [pc, #548]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d06c      	beq.n	8001774 <HAL_RCC_OscConfig+0x12c>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d168      	bne.n	8001774 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e24c      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x76>
 80016b0:	4b80      	ldr	r3, [pc, #512]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a7f      	ldr	r2, [pc, #508]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	e02e      	b.n	800171c <HAL_RCC_OscConfig+0xd4>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x98>
 80016c6:	4b7b      	ldr	r3, [pc, #492]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a7a      	ldr	r2, [pc, #488]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b78      	ldr	r3, [pc, #480]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a77      	ldr	r2, [pc, #476]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e01d      	b.n	800171c <HAL_RCC_OscConfig+0xd4>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0xbc>
 80016ea:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a71      	ldr	r2, [pc, #452]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b6f      	ldr	r3, [pc, #444]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a6e      	ldr	r2, [pc, #440]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0xd4>
 8001704:	4b6b      	ldr	r3, [pc, #428]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a6a      	ldr	r2, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 800170a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b68      	ldr	r3, [pc, #416]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a67      	ldr	r2, [pc, #412]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fc0e 	bl	8000f44 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fc0a 	bl	8000f44 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e200      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0xe4>
 800174a:	e014      	b.n	8001776 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fbfa 	bl	8000f44 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fbf6 	bl	8000f44 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1ec      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x10c>
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d063      	beq.n	800184a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001782:	4b4c      	ldr	r3, [pc, #304]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00b      	beq.n	80017a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b08      	cmp	r3, #8
 8001798:	d11c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x18c>
 800179a:	4b46      	ldr	r3, [pc, #280]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d116      	bne.n	80017d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_RCC_OscConfig+0x176>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e1c0      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4939      	ldr	r1, [pc, #228]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	e03a      	b.n	800184a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fbaf 	bl	8000f44 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ea:	f7ff fbab 	bl	8000f44 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e1a1      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4927      	ldr	r1, [pc, #156]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
 800181c:	e015      	b.n	800184a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fb8e 	bl	8000f44 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182c:	f7ff fb8a 	bl	8000f44 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e180      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d03a      	beq.n	80018cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d019      	beq.n	8001892 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001864:	f7ff fb6e 	bl	8000f44 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff fb6a 	bl	8000f44 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e160      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800188a:	2001      	movs	r0, #1
 800188c:	f000 face 	bl	8001e2c <RCC_Delay>
 8001890:	e01c      	b.n	80018cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001898:	f7ff fb54 	bl	8000f44 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189e:	e00f      	b.n	80018c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff fb50 	bl	8000f44 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d908      	bls.n	80018c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e146      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	42420000 	.word	0x42420000
 80018bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	4b92      	ldr	r3, [pc, #584]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1e9      	bne.n	80018a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a6 	beq.w	8001a26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018de:	4b8b      	ldr	r3, [pc, #556]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10d      	bne.n	8001906 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b88      	ldr	r3, [pc, #544]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a87      	ldr	r2, [pc, #540]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	61d3      	str	r3, [r2, #28]
 80018f6:	4b85      	ldr	r3, [pc, #532]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001902:	2301      	movs	r3, #1
 8001904:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001906:	4b82      	ldr	r3, [pc, #520]	; (8001b10 <HAL_RCC_OscConfig+0x4c8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d118      	bne.n	8001944 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001912:	4b7f      	ldr	r3, [pc, #508]	; (8001b10 <HAL_RCC_OscConfig+0x4c8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7e      	ldr	r2, [pc, #504]	; (8001b10 <HAL_RCC_OscConfig+0x4c8>)
 8001918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191e:	f7ff fb11 	bl	8000f44 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001926:	f7ff fb0d 	bl	8000f44 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b64      	cmp	r3, #100	; 0x64
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e103      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	4b75      	ldr	r3, [pc, #468]	; (8001b10 <HAL_RCC_OscConfig+0x4c8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x312>
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	4a6e      	ldr	r2, [pc, #440]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6213      	str	r3, [r2, #32]
 8001958:	e02d      	b.n	80019b6 <HAL_RCC_OscConfig+0x36e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0x334>
 8001962:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	4a69      	ldr	r2, [pc, #420]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	6213      	str	r3, [r2, #32]
 800196e:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4a66      	ldr	r2, [pc, #408]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	6213      	str	r3, [r2, #32]
 800197a:	e01c      	b.n	80019b6 <HAL_RCC_OscConfig+0x36e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b05      	cmp	r3, #5
 8001982:	d10c      	bne.n	800199e <HAL_RCC_OscConfig+0x356>
 8001984:	4b61      	ldr	r3, [pc, #388]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a60      	ldr	r2, [pc, #384]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6213      	str	r3, [r2, #32]
 8001990:	4b5e      	ldr	r3, [pc, #376]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4a5d      	ldr	r2, [pc, #372]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6213      	str	r3, [r2, #32]
 800199c:	e00b      	b.n	80019b6 <HAL_RCC_OscConfig+0x36e>
 800199e:	4b5b      	ldr	r3, [pc, #364]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a5a      	ldr	r2, [pc, #360]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b58      	ldr	r3, [pc, #352]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a57      	ldr	r2, [pc, #348]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d015      	beq.n	80019ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff fac1 	bl	8000f44 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff fabd 	bl	8000f44 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0b1      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019dc:	4b4b      	ldr	r3, [pc, #300]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0ee      	beq.n	80019c6 <HAL_RCC_OscConfig+0x37e>
 80019e8:	e014      	b.n	8001a14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7ff faab 	bl	8000f44 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff faa7 	bl	8000f44 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e09b      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a08:	4b40      	ldr	r3, [pc, #256]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1ee      	bne.n	80019f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d105      	bne.n	8001a26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1a:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a3b      	ldr	r2, [pc, #236]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8087 	beq.w	8001b3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a30:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d061      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d146      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a44:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <HAL_RCC_OscConfig+0x4cc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fa7b 	bl	8000f44 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a52:	f7ff fa77 	bl	8000f44 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e06d      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a78:	d108      	bne.n	8001a8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4921      	ldr	r1, [pc, #132]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a19      	ldr	r1, [r3, #32]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	491b      	ldr	r1, [pc, #108]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x4cc>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fa4b 	bl	8000f44 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff fa47 	bl	8000f44 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e03d      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x46a>
 8001ad0:	e035      	b.n	8001b3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <HAL_RCC_OscConfig+0x4cc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fa34 	bl	8000f44 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff fa30 	bl	8000f44 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e026      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x498>
 8001afe:	e01e      	b.n	8001b3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e019      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40007000 	.word	0x40007000
 8001b14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_OscConfig+0x500>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000

08001b4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0d0      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d910      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4965      	ldr	r1, [pc, #404]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0b8      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba8:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc0:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	494d      	ldr	r1, [pc, #308]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d040      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d115      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e07f      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0a:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e073      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e06b      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4936      	ldr	r1, [pc, #216]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7ff f982 	bl	8000f44 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff f97e 	bl	8000f44 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e053      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 020c 	and.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1eb      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d210      	bcs.n	8001c9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 0207 	bic.w	r2, r3, #7
 8001c82:	4922      	ldr	r1, [pc, #136]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e032      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4916      	ldr	r1, [pc, #88]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	490e      	ldr	r1, [pc, #56]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cda:	f000 f821 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	490a      	ldr	r1, [pc, #40]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cec:	5ccb      	ldrb	r3, [r1, r3]
 8001cee:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf2:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x1cc>)
 8001cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1d0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f8e0 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	080041b4 	.word	0x080041b4
 8001d18:	20000004 	.word	0x20000004
 8001d1c:	20000008 	.word	0x20000008

08001d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d002      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x30>
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d003      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x36>
 8001d4e:	e027      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d52:	613b      	str	r3, [r7, #16]
      break;
 8001d54:	e027      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	0c9b      	lsrs	r3, r3, #18
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d60:	5cd3      	ldrb	r3, [r2, r3]
 8001d62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d010      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	0c5b      	lsrs	r3, r3, #17
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	4a11      	ldr	r2, [pc, #68]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d82:	fb03 f202 	mul.w	r2, r3, r2
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	e004      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d94:	fb02 f303 	mul.w	r3, r2, r3
 8001d98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	613b      	str	r3, [r7, #16]
      break;
 8001d9e:	e002      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001da2:	613b      	str	r3, [r7, #16]
      break;
 8001da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da6:	693b      	ldr	r3, [r7, #16]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	007a1200 	.word	0x007a1200
 8001dbc:	080041cc 	.word	0x080041cc
 8001dc0:	080041dc 	.word	0x080041dc
 8001dc4:	003d0900 	.word	0x003d0900

08001dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dcc:	4b02      	ldr	r3, [pc, #8]	; (8001dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001de0:	f7ff fff2 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	4903      	ldr	r1, [pc, #12]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	080041c4 	.word	0x080041c4

08001e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e08:	f7ff ffde 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	0adb      	lsrs	r3, r3, #11
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	4903      	ldr	r1, [pc, #12]	; (8001e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	080041c4 	.word	0x080041c4

08001e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <RCC_Delay+0x34>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <RCC_Delay+0x38>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0a5b      	lsrs	r3, r3, #9
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e48:	bf00      	nop
  }
  while (Delay --);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1e5a      	subs	r2, r3, #1
 8001e4e:	60fa      	str	r2, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f9      	bne.n	8001e48 <RCC_Delay+0x1c>
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000004 	.word	0x20000004
 8001e64:	10624dd3 	.word	0x10624dd3

08001e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e041      	b.n	8001efe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe fecc 	bl	8000c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f000 faac 	bl	8002404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e041      	b.n	8001f9c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f839 	bl	8001fa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f000 fa5d 	bl	8002404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_TIM_PWM_Start+0x24>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	bf14      	ite	ne
 8001fd4:	2301      	movne	r3, #1
 8001fd6:	2300      	moveq	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	e022      	b.n	8002022 <HAL_TIM_PWM_Start+0x6a>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d109      	bne.n	8001ff6 <HAL_TIM_PWM_Start+0x3e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	e015      	b.n	8002022 <HAL_TIM_PWM_Start+0x6a>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d109      	bne.n	8002010 <HAL_TIM_PWM_Start+0x58>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b01      	cmp	r3, #1
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e008      	b.n	8002022 <HAL_TIM_PWM_Start+0x6a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e059      	b.n	80020de <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <HAL_TIM_PWM_Start+0x82>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002038:	e013      	b.n	8002062 <HAL_TIM_PWM_Start+0xaa>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d104      	bne.n	800204a <HAL_TIM_PWM_Start+0x92>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002048:	e00b      	b.n	8002062 <HAL_TIM_PWM_Start+0xaa>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d104      	bne.n	800205a <HAL_TIM_PWM_Start+0xa2>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002058:	e003      	b.n	8002062 <HAL_TIM_PWM_Start+0xaa>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2201      	movs	r2, #1
 8002068:	6839      	ldr	r1, [r7, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fc40 	bl	80028f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <HAL_TIM_PWM_Start+0x130>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d107      	bne.n	800208a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <HAL_TIM_PWM_Start+0x130>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d009      	beq.n	80020a8 <HAL_TIM_PWM_Start+0xf0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209c:	d004      	beq.n	80020a8 <HAL_TIM_PWM_Start+0xf0>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a12      	ldr	r2, [pc, #72]	; (80020ec <HAL_TIM_PWM_Start+0x134>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d111      	bne.n	80020cc <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d010      	beq.n	80020dc <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0201 	orr.w	r2, r2, #1
 80020c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ca:	e007      	b.n	80020dc <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40012c00 	.word	0x40012c00
 80020ec:	40000400 	.word	0x40000400

080020f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800210a:	2302      	movs	r3, #2
 800210c:	e0ae      	b.n	800226c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b0c      	cmp	r3, #12
 800211a:	f200 809f 	bhi.w	800225c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002159 	.word	0x08002159
 8002128:	0800225d 	.word	0x0800225d
 800212c:	0800225d 	.word	0x0800225d
 8002130:	0800225d 	.word	0x0800225d
 8002134:	08002199 	.word	0x08002199
 8002138:	0800225d 	.word	0x0800225d
 800213c:	0800225d 	.word	0x0800225d
 8002140:	0800225d 	.word	0x0800225d
 8002144:	080021db 	.word	0x080021db
 8002148:	0800225d 	.word	0x0800225d
 800214c:	0800225d 	.word	0x0800225d
 8002150:	0800225d 	.word	0x0800225d
 8002154:	0800221b 	.word	0x0800221b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f9a8 	bl	80024b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0208 	orr.w	r2, r2, #8
 8002172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0204 	bic.w	r2, r2, #4
 8002182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6999      	ldr	r1, [r3, #24]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	619a      	str	r2, [r3, #24]
      break;
 8002196:	e064      	b.n	8002262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f9ee 	bl	8002580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6999      	ldr	r1, [r3, #24]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	021a      	lsls	r2, r3, #8
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	619a      	str	r2, [r3, #24]
      break;
 80021d8:	e043      	b.n	8002262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fa37 	bl	8002654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0208 	orr.w	r2, r2, #8
 80021f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69da      	ldr	r2, [r3, #28]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0204 	bic.w	r2, r2, #4
 8002204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69d9      	ldr	r1, [r3, #28]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	61da      	str	r2, [r3, #28]
      break;
 8002218:	e023      	b.n	8002262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fa81 	bl	8002728 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69da      	ldr	r2, [r3, #28]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69d9      	ldr	r1, [r3, #28]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	021a      	lsls	r2, r3, #8
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	61da      	str	r2, [r3, #28]
      break;
 800225a:	e002      	b.n	8002262 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	75fb      	strb	r3, [r7, #23]
      break;
 8002260:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800226a:	7dfb      	ldrb	r3, [r7, #23]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_TIM_ConfigClockSource+0x1c>
 800228c:	2302      	movs	r3, #2
 800228e:	e0b4      	b.n	80023fa <HAL_TIM_ConfigClockSource+0x186>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c8:	d03e      	beq.n	8002348 <HAL_TIM_ConfigClockSource+0xd4>
 80022ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ce:	f200 8087 	bhi.w	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d6:	f000 8086 	beq.w	80023e6 <HAL_TIM_ConfigClockSource+0x172>
 80022da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022de:	d87f      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e0:	2b70      	cmp	r3, #112	; 0x70
 80022e2:	d01a      	beq.n	800231a <HAL_TIM_ConfigClockSource+0xa6>
 80022e4:	2b70      	cmp	r3, #112	; 0x70
 80022e6:	d87b      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e8:	2b60      	cmp	r3, #96	; 0x60
 80022ea:	d050      	beq.n	800238e <HAL_TIM_ConfigClockSource+0x11a>
 80022ec:	2b60      	cmp	r3, #96	; 0x60
 80022ee:	d877      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022f0:	2b50      	cmp	r3, #80	; 0x50
 80022f2:	d03c      	beq.n	800236e <HAL_TIM_ConfigClockSource+0xfa>
 80022f4:	2b50      	cmp	r3, #80	; 0x50
 80022f6:	d873      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d058      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0x13a>
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d86f      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002300:	2b30      	cmp	r3, #48	; 0x30
 8002302:	d064      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x15a>
 8002304:	2b30      	cmp	r3, #48	; 0x30
 8002306:	d86b      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002308:	2b20      	cmp	r3, #32
 800230a:	d060      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x15a>
 800230c:	2b20      	cmp	r3, #32
 800230e:	d867      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002310:	2b00      	cmp	r3, #0
 8002312:	d05c      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x15a>
 8002314:	2b10      	cmp	r3, #16
 8002316:	d05a      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x15a>
 8002318:	e062      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800232a:	f000 fac2 	bl	80028b2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800233c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	609a      	str	r2, [r3, #8]
      break;
 8002346:	e04f      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002358:	f000 faab 	bl	80028b2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800236a:	609a      	str	r2, [r3, #8]
      break;
 800236c:	e03c      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800237a:	461a      	mov	r2, r3
 800237c:	f000 fa22 	bl	80027c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2150      	movs	r1, #80	; 0x50
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fa79 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 800238c:	e02c      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800239a:	461a      	mov	r2, r3
 800239c:	f000 fa40 	bl	8002820 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2160      	movs	r1, #96	; 0x60
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fa69 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 80023ac:	e01c      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ba:	461a      	mov	r2, r3
 80023bc:	f000 fa02 	bl	80027c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2140      	movs	r1, #64	; 0x40
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fa59 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 80023cc:	e00c      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f000 fa50 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 80023de:	e003      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      break;
 80023e4:	e000      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a25      	ldr	r2, [pc, #148]	; (80024ac <TIM_Base_SetConfig+0xa8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <TIM_Base_SetConfig+0x28>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002422:	d003      	beq.n	800242c <TIM_Base_SetConfig+0x28>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <TIM_Base_SetConfig+0xac>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d108      	bne.n	800243e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <TIM_Base_SetConfig+0xa8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d007      	beq.n	8002456 <TIM_Base_SetConfig+0x52>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244c:	d003      	beq.n	8002456 <TIM_Base_SetConfig+0x52>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <TIM_Base_SetConfig+0xac>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d108      	bne.n	8002468 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a07      	ldr	r2, [pc, #28]	; (80024ac <TIM_Base_SetConfig+0xa8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d103      	bne.n	800249c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	615a      	str	r2, [r3, #20]
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	40012c00 	.word	0x40012c00
 80024b0:	40000400 	.word	0x40000400

080024b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f023 0201 	bic.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f023 0302 	bic.w	r3, r3, #2
 80024fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <TIM_OC1_SetConfig+0xc8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d10c      	bne.n	800252a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f023 0308 	bic.w	r3, r3, #8
 8002516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a13      	ldr	r2, [pc, #76]	; (800257c <TIM_OC1_SetConfig+0xc8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d111      	bne.n	8002556 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	621a      	str	r2, [r3, #32]
}
 8002570:	bf00      	nop
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40012c00 	.word	0x40012c00

08002580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f023 0210 	bic.w	r2, r3, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f023 0320 	bic.w	r3, r3, #32
 80025ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <TIM_OC2_SetConfig+0xd0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d10d      	bne.n	80025fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a14      	ldr	r2, [pc, #80]	; (8002650 <TIM_OC2_SetConfig+0xd0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d113      	bne.n	800262c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800260a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	621a      	str	r2, [r3, #32]
}
 8002646:	bf00      	nop
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	40012c00 	.word	0x40012c00

08002654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002654:	b480      	push	{r7}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800269c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <TIM_OC3_SetConfig+0xd0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d10d      	bne.n	80026ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <TIM_OC3_SetConfig+0xd0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d113      	bne.n	80026fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	621a      	str	r2, [r3, #32]
}
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40012c00 	.word	0x40012c00

08002728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	031b      	lsls	r3, r3, #12
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <TIM_OC4_SetConfig+0x98>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d109      	bne.n	800279c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800278e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	019b      	lsls	r3, r3, #6
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	621a      	str	r2, [r3, #32]
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	40012c00 	.word	0x40012c00

080027c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f023 0201 	bic.w	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f023 030a 	bic.w	r3, r3, #10
 8002800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	621a      	str	r2, [r3, #32]
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	f023 0210 	bic.w	r2, r3, #16
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800284a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	031b      	lsls	r3, r3, #12
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800285c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	621a      	str	r2, [r3, #32]
}
 8002874:	bf00      	nop
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	f043 0307 	orr.w	r3, r3, #7
 80028a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	609a      	str	r2, [r3, #8]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b087      	sub	sp, #28
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	021a      	lsls	r2, r3, #8
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4313      	orrs	r3, r2
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	609a      	str	r2, [r3, #8]
}
 80028e6:	bf00      	nop
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2201      	movs	r2, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a1a      	ldr	r2, [r3, #32]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	43db      	mvns	r3, r3
 8002912:	401a      	ands	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a1a      	ldr	r2, [r3, #32]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	621a      	str	r2, [r3, #32]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800294c:	2302      	movs	r3, #2
 800294e:	e041      	b.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d009      	beq.n	80029a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d004      	beq.n	80029a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10c      	bne.n	80029c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40000400 	.word	0x40000400

080029e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e042      	b.n	8002a80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe f958 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	; 0x24
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fdc5 	bl	80035bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d16d      	bne.n	8002b84 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_UART_Transmit+0x2c>
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e066      	b.n	8002b86 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2221      	movs	r2, #33	; 0x21
 8002ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ac6:	f7fe fa3d 	bl	8000f44 <HAL_GetTick>
 8002aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	88fa      	ldrh	r2, [r7, #6]
 8002ad6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae0:	d108      	bne.n	8002af4 <HAL_UART_Transmit+0x6c>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d104      	bne.n	8002af4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	e003      	b.n	8002afc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002afc:	e02a      	b.n	8002b54 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2200      	movs	r2, #0
 8002b06:	2180      	movs	r1, #128	; 0x80
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fb14 	bl	8003136 <UART_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e036      	b.n	8002b86 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10b      	bne.n	8002b36 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	3302      	adds	r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	e007      	b.n	8002b46 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3301      	adds	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1cf      	bne.n	8002afe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2200      	movs	r2, #0
 8002b66:	2140      	movs	r1, #64	; 0x40
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fae4 	bl	8003136 <UART_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e006      	b.n	8002b86 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e000      	b.n	8002b86 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d112      	bne.n	8002bce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_UART_Receive_IT+0x26>
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e00b      	b.n	8002bd0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fb24 	bl	8003212 <UART_Start_Receive_IT>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	e000      	b.n	8002bd0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
  }
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b0ba      	sub	sp, #232	; 0xe8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_UART_IRQHandler+0x66>
 8002c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fc01 	bl	800343e <UART_Receive_IT>
      return;
 8002c3c:	e25b      	b.n	80030f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80de 	beq.w	8002e04 <HAL_UART_IRQHandler+0x22c>
 8002c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d106      	bne.n	8002c62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80d1 	beq.w	8002e04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_UART_IRQHandler+0xae>
 8002c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_UART_IRQHandler+0xd2>
 8002c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f043 0202 	orr.w	r2, r3, #2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_UART_IRQHandler+0xf6>
 8002cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f043 0204 	orr.w	r2, r3, #4
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d011      	beq.n	8002cfe <HAL_UART_IRQHandler+0x126>
 8002cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d105      	bne.n	8002cf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f043 0208 	orr.w	r2, r3, #8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 81f2 	beq.w	80030ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_UART_IRQHandler+0x14e>
 8002d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fb8c 	bl	800343e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d103      	bne.n	8002d52 <HAL_UART_IRQHandler+0x17a>
 8002d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d04f      	beq.n	8002df2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa96 	bl	8003284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d041      	beq.n	8002dea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3314      	adds	r3, #20
 8002d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3314      	adds	r3, #20
 8002d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1d9      	bne.n	8002d66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d013      	beq.n	8002de2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	4a7e      	ldr	r2, [pc, #504]	; (8002fb8 <HAL_UART_IRQHandler+0x3e0>)
 8002dc0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe fa32 	bl	8001230 <HAL_DMA_Abort_IT>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de0:	e00e      	b.n	8002e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f993 	bl	800310e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de8:	e00a      	b.n	8002e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f98f 	bl	800310e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df0:	e006      	b.n	8002e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f98b 	bl	800310e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002dfe:	e175      	b.n	80030ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	bf00      	nop
    return;
 8002e02:	e173      	b.n	80030ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	f040 814f 	bne.w	80030ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8148 	beq.w	80030ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8141 	beq.w	80030ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80b6 	beq.w	8002fbc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8145 	beq.w	80030f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	f080 813e 	bcs.w	80030f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	f000 8088 	beq.w	8002f98 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002eb4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002eb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ec0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1d9      	bne.n	8002e88 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3314      	adds	r3, #20
 8002eda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ede:	e853 3f00 	ldrex	r3, [r3]
 8002ee2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3314      	adds	r3, #20
 8002ef4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ef8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002efc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e1      	bne.n	8002ed4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3314      	adds	r3, #20
 8002f16:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3314      	adds	r3, #20
 8002f30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f34:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e3      	bne.n	8002f10 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f68:	f023 0310 	bic.w	r3, r3, #16
 8002f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	330c      	adds	r3, #12
 8002f76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f7c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e3      	bne.n	8002f56 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe f911 	bl	80011ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f8b6 	bl	8003120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fb4:	e09c      	b.n	80030f0 <HAL_UART_IRQHandler+0x518>
 8002fb6:	bf00      	nop
 8002fb8:	08003349 	.word	0x08003349
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 808e 	beq.w	80030f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8089 	beq.w	80030f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	e853 3f00 	ldrex	r3, [r3]
 8002ff0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	330c      	adds	r3, #12
 8003002:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003006:	647a      	str	r2, [r7, #68]	; 0x44
 8003008:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800300c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800300e:	e841 2300 	strex	r3, r2, [r1]
 8003012:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e3      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3314      	adds	r3, #20
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	623b      	str	r3, [r7, #32]
   return(result);
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3314      	adds	r3, #20
 800303a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800303e:	633a      	str	r2, [r7, #48]	; 0x30
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e3      	bne.n	800301a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	330c      	adds	r3, #12
 8003066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	e853 3f00 	ldrex	r3, [r3]
 800306e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0310 	bic.w	r3, r3, #16
 8003076:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	330c      	adds	r3, #12
 8003080:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003084:	61fa      	str	r2, [r7, #28]
 8003086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003088:	69b9      	ldr	r1, [r7, #24]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	e841 2300 	strex	r3, r2, [r1]
 8003090:	617b      	str	r3, [r7, #20]
   return(result);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e3      	bne.n	8003060 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800309e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030a2:	4619      	mov	r1, r3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f83b 	bl	8003120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030aa:	e023      	b.n	80030f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d009      	beq.n	80030cc <HAL_UART_IRQHandler+0x4f4>
 80030b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f953 	bl	8003370 <UART_Transmit_IT>
    return;
 80030ca:	e014      	b.n	80030f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00e      	beq.n	80030f6 <HAL_UART_IRQHandler+0x51e>
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f992 	bl	800340e <UART_EndTransmit_IT>
    return;
 80030ea:	e004      	b.n	80030f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80030ec:	bf00      	nop
 80030ee:	e002      	b.n	80030f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80030f0:	bf00      	nop
 80030f2:	e000      	b.n	80030f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80030f4:	bf00      	nop
  }
}
 80030f6:	37e8      	adds	r7, #232	; 0xe8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr

0800310e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b090      	sub	sp, #64	; 0x40
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	4613      	mov	r3, r2
 8003144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003146:	e050      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314e:	d04c      	beq.n	80031ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0x30>
 8003156:	f7fd fef5 	bl	8000f44 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003162:	429a      	cmp	r2, r3
 8003164:	d241      	bcs.n	80031ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	330c      	adds	r3, #12
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800317c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	330c      	adds	r3, #12
 8003184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003186:	637a      	str	r2, [r7, #52]	; 0x34
 8003188:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800318c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1e5      	bne.n	8003166 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3314      	adds	r3, #20
 80031a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	613b      	str	r3, [r7, #16]
   return(result);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3314      	adds	r3, #20
 80031b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ba:	623a      	str	r2, [r7, #32]
 80031bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	69f9      	ldr	r1, [r7, #28]
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e5      	bne.n	800319a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e00f      	b.n	800320a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4013      	ands	r3, r2
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	429a      	cmp	r2, r3
 8003206:	d09f      	beq.n	8003148 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3740      	adds	r7, #64	; 0x40
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	4613      	mov	r3, r2
 800321e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2222      	movs	r2, #34	; 0x22
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003256:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0220 	orr.w	r2, r2, #32
 8003276:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003284:	b480      	push	{r7}
 8003286:	b095      	sub	sp, #84	; 0x54
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	330c      	adds	r3, #12
 8003292:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003296:	e853 3f00 	ldrex	r3, [r3]
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032ac:	643a      	str	r2, [r7, #64]	; 0x40
 80032ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032b4:	e841 2300 	strex	r3, r2, [r1]
 80032b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e5      	bne.n	800328c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3314      	adds	r3, #20
 80032c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3314      	adds	r3, #20
 80032de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e8:	e841 2300 	strex	r3, r2, [r1]
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1e5      	bne.n	80032c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d119      	bne.n	8003330 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	330c      	adds	r3, #12
 8003302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	e853 3f00 	ldrex	r3, [r3]
 800330a:	60bb      	str	r3, [r7, #8]
   return(result);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f023 0310 	bic.w	r3, r3, #16
 8003312:	647b      	str	r3, [r7, #68]	; 0x44
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	330c      	adds	r3, #12
 800331a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800331c:	61ba      	str	r2, [r7, #24]
 800331e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	6979      	ldr	r1, [r7, #20]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	613b      	str	r3, [r7, #16]
   return(result);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e5      	bne.n	80032fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800333e:	bf00      	nop
 8003340:	3754      	adds	r7, #84	; 0x54
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff fed3 	bl	800310e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b21      	cmp	r3, #33	; 0x21
 8003382:	d13e      	bne.n	8003402 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338c:	d114      	bne.n	80033b8 <UART_Transmit_IT+0x48>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d110      	bne.n	80033b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	1c9a      	adds	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	621a      	str	r2, [r3, #32]
 80033b6:	e008      	b.n	80033ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	1c59      	adds	r1, r3, #1
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6211      	str	r1, [r2, #32]
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4619      	mov	r1, r3
 80033d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10f      	bne.n	80033fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e000      	b.n	8003404 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003402:	2302      	movs	r3, #2
  }
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003424:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff fe64 	bl	80030fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b08c      	sub	sp, #48	; 0x30
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b22      	cmp	r3, #34	; 0x22
 8003450:	f040 80ae 	bne.w	80035b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345c:	d117      	bne.n	800348e <UART_Receive_IT+0x50>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d113      	bne.n	800348e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347c:	b29a      	uxth	r2, r3
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	1c9a      	adds	r2, r3, #2
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
 800348c:	e026      	b.n	80034dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003494:	2300      	movs	r3, #0
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a0:	d007      	beq.n	80034b2 <UART_Receive_IT+0x74>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <UART_Receive_IT+0x82>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e008      	b.n	80034d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4619      	mov	r1, r3
 80034ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d15d      	bne.n	80035ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0220 	bic.w	r2, r2, #32
 80034fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800350e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	2b01      	cmp	r3, #1
 8003534:	d135      	bne.n	80035a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	e853 3f00 	ldrex	r3, [r3]
 800354a:	613b      	str	r3, [r7, #16]
   return(result);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f023 0310 	bic.w	r3, r3, #16
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355c:	623a      	str	r2, [r7, #32]
 800355e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	69f9      	ldr	r1, [r7, #28]
 8003562:	6a3a      	ldr	r2, [r7, #32]
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	61bb      	str	r3, [r7, #24]
   return(result);
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e5      	bne.n	800353c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b10      	cmp	r3, #16
 800357c:	d10a      	bne.n	8003594 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fdc0 	bl	8003120 <HAL_UARTEx_RxEventCallback>
 80035a0:	e002      	b.n	80035a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd f862 	bl	800066c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e002      	b.n	80035b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e000      	b.n	80035b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
  }
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3730      	adds	r7, #48	; 0x30
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035f6:	f023 030c 	bic.w	r3, r3, #12
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	430b      	orrs	r3, r1
 8003602:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2c      	ldr	r2, [pc, #176]	; (80036d0 <UART_SetConfig+0x114>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d103      	bne.n	800362c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003624:	f7fe fbee 	bl	8001e04 <HAL_RCC_GetPCLK2Freq>
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	e002      	b.n	8003632 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800362c:	f7fe fbd6 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
 8003630:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009a      	lsls	r2, r3, #2
 800363c:	441a      	add	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	4a22      	ldr	r2, [pc, #136]	; (80036d4 <UART_SetConfig+0x118>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	0119      	lsls	r1, r3, #4
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009a      	lsls	r2, r3, #2
 800365c:	441a      	add	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	fbb2 f2f3 	udiv	r2, r2, r3
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <UART_SetConfig+0x118>)
 800366a:	fba3 0302 	umull	r0, r3, r3, r2
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	2064      	movs	r0, #100	; 0x64
 8003672:	fb00 f303 	mul.w	r3, r0, r3
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	3332      	adds	r3, #50	; 0x32
 800367c:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <UART_SetConfig+0x118>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003688:	4419      	add	r1, r3
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	009a      	lsls	r2, r3, #2
 8003694:	441a      	add	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <UART_SetConfig+0x118>)
 80036a2:	fba3 0302 	umull	r0, r3, r3, r2
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2064      	movs	r0, #100	; 0x64
 80036aa:	fb00 f303 	mul.w	r3, r0, r3
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	3332      	adds	r3, #50	; 0x32
 80036b4:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <UART_SetConfig+0x118>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	f003 020f 	and.w	r2, r3, #15
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	440a      	add	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40013800 	.word	0x40013800
 80036d4:	51eb851f 	.word	0x51eb851f

080036d8 <atoi>:
 80036d8:	220a      	movs	r2, #10
 80036da:	2100      	movs	r1, #0
 80036dc:	f000 b87e 	b.w	80037dc <strtol>

080036e0 <_strtol_l.constprop.0>:
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e6:	4686      	mov	lr, r0
 80036e8:	4690      	mov	r8, r2
 80036ea:	d001      	beq.n	80036f0 <_strtol_l.constprop.0+0x10>
 80036ec:	2b24      	cmp	r3, #36	; 0x24
 80036ee:	d906      	bls.n	80036fe <_strtol_l.constprop.0+0x1e>
 80036f0:	f000 f8a6 	bl	8003840 <__errno>
 80036f4:	2316      	movs	r3, #22
 80036f6:	6003      	str	r3, [r0, #0]
 80036f8:	2000      	movs	r0, #0
 80036fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fe:	460d      	mov	r5, r1
 8003700:	4835      	ldr	r0, [pc, #212]	; (80037d8 <_strtol_l.constprop.0+0xf8>)
 8003702:	462a      	mov	r2, r5
 8003704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003708:	5d06      	ldrb	r6, [r0, r4]
 800370a:	f016 0608 	ands.w	r6, r6, #8
 800370e:	d1f8      	bne.n	8003702 <_strtol_l.constprop.0+0x22>
 8003710:	2c2d      	cmp	r4, #45	; 0x2d
 8003712:	d12e      	bne.n	8003772 <_strtol_l.constprop.0+0x92>
 8003714:	2601      	movs	r6, #1
 8003716:	782c      	ldrb	r4, [r5, #0]
 8003718:	1c95      	adds	r5, r2, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d057      	beq.n	80037ce <_strtol_l.constprop.0+0xee>
 800371e:	2b10      	cmp	r3, #16
 8003720:	d109      	bne.n	8003736 <_strtol_l.constprop.0+0x56>
 8003722:	2c30      	cmp	r4, #48	; 0x30
 8003724:	d107      	bne.n	8003736 <_strtol_l.constprop.0+0x56>
 8003726:	782a      	ldrb	r2, [r5, #0]
 8003728:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800372c:	2a58      	cmp	r2, #88	; 0x58
 800372e:	d149      	bne.n	80037c4 <_strtol_l.constprop.0+0xe4>
 8003730:	2310      	movs	r3, #16
 8003732:	786c      	ldrb	r4, [r5, #1]
 8003734:	3502      	adds	r5, #2
 8003736:	2200      	movs	r2, #0
 8003738:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800373c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003740:	fbbc f9f3 	udiv	r9, ip, r3
 8003744:	4610      	mov	r0, r2
 8003746:	fb03 ca19 	mls	sl, r3, r9, ip
 800374a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800374e:	2f09      	cmp	r7, #9
 8003750:	d814      	bhi.n	800377c <_strtol_l.constprop.0+0x9c>
 8003752:	463c      	mov	r4, r7
 8003754:	42a3      	cmp	r3, r4
 8003756:	dd20      	ble.n	800379a <_strtol_l.constprop.0+0xba>
 8003758:	1c57      	adds	r7, r2, #1
 800375a:	d007      	beq.n	800376c <_strtol_l.constprop.0+0x8c>
 800375c:	4581      	cmp	r9, r0
 800375e:	d319      	bcc.n	8003794 <_strtol_l.constprop.0+0xb4>
 8003760:	d101      	bne.n	8003766 <_strtol_l.constprop.0+0x86>
 8003762:	45a2      	cmp	sl, r4
 8003764:	db16      	blt.n	8003794 <_strtol_l.constprop.0+0xb4>
 8003766:	2201      	movs	r2, #1
 8003768:	fb00 4003 	mla	r0, r0, r3, r4
 800376c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003770:	e7eb      	b.n	800374a <_strtol_l.constprop.0+0x6a>
 8003772:	2c2b      	cmp	r4, #43	; 0x2b
 8003774:	bf04      	itt	eq
 8003776:	782c      	ldrbeq	r4, [r5, #0]
 8003778:	1c95      	addeq	r5, r2, #2
 800377a:	e7ce      	b.n	800371a <_strtol_l.constprop.0+0x3a>
 800377c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003780:	2f19      	cmp	r7, #25
 8003782:	d801      	bhi.n	8003788 <_strtol_l.constprop.0+0xa8>
 8003784:	3c37      	subs	r4, #55	; 0x37
 8003786:	e7e5      	b.n	8003754 <_strtol_l.constprop.0+0x74>
 8003788:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800378c:	2f19      	cmp	r7, #25
 800378e:	d804      	bhi.n	800379a <_strtol_l.constprop.0+0xba>
 8003790:	3c57      	subs	r4, #87	; 0x57
 8003792:	e7df      	b.n	8003754 <_strtol_l.constprop.0+0x74>
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	e7e8      	b.n	800376c <_strtol_l.constprop.0+0x8c>
 800379a:	1c53      	adds	r3, r2, #1
 800379c:	d108      	bne.n	80037b0 <_strtol_l.constprop.0+0xd0>
 800379e:	2322      	movs	r3, #34	; 0x22
 80037a0:	4660      	mov	r0, ip
 80037a2:	f8ce 3000 	str.w	r3, [lr]
 80037a6:	f1b8 0f00 	cmp.w	r8, #0
 80037aa:	d0a6      	beq.n	80036fa <_strtol_l.constprop.0+0x1a>
 80037ac:	1e69      	subs	r1, r5, #1
 80037ae:	e006      	b.n	80037be <_strtol_l.constprop.0+0xde>
 80037b0:	b106      	cbz	r6, 80037b4 <_strtol_l.constprop.0+0xd4>
 80037b2:	4240      	negs	r0, r0
 80037b4:	f1b8 0f00 	cmp.w	r8, #0
 80037b8:	d09f      	beq.n	80036fa <_strtol_l.constprop.0+0x1a>
 80037ba:	2a00      	cmp	r2, #0
 80037bc:	d1f6      	bne.n	80037ac <_strtol_l.constprop.0+0xcc>
 80037be:	f8c8 1000 	str.w	r1, [r8]
 80037c2:	e79a      	b.n	80036fa <_strtol_l.constprop.0+0x1a>
 80037c4:	2430      	movs	r4, #48	; 0x30
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1b5      	bne.n	8003736 <_strtol_l.constprop.0+0x56>
 80037ca:	2308      	movs	r3, #8
 80037cc:	e7b3      	b.n	8003736 <_strtol_l.constprop.0+0x56>
 80037ce:	2c30      	cmp	r4, #48	; 0x30
 80037d0:	d0a9      	beq.n	8003726 <_strtol_l.constprop.0+0x46>
 80037d2:	230a      	movs	r3, #10
 80037d4:	e7af      	b.n	8003736 <_strtol_l.constprop.0+0x56>
 80037d6:	bf00      	nop
 80037d8:	080041df 	.word	0x080041df

080037dc <strtol>:
 80037dc:	4613      	mov	r3, r2
 80037de:	460a      	mov	r2, r1
 80037e0:	4601      	mov	r1, r0
 80037e2:	4802      	ldr	r0, [pc, #8]	; (80037ec <strtol+0x10>)
 80037e4:	6800      	ldr	r0, [r0, #0]
 80037e6:	f7ff bf7b 	b.w	80036e0 <_strtol_l.constprop.0>
 80037ea:	bf00      	nop
 80037ec:	2000005c 	.word	0x2000005c

080037f0 <siprintf>:
 80037f0:	b40e      	push	{r1, r2, r3}
 80037f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037f6:	b500      	push	{lr}
 80037f8:	b09c      	sub	sp, #112	; 0x70
 80037fa:	ab1d      	add	r3, sp, #116	; 0x74
 80037fc:	9002      	str	r0, [sp, #8]
 80037fe:	9006      	str	r0, [sp, #24]
 8003800:	9107      	str	r1, [sp, #28]
 8003802:	9104      	str	r1, [sp, #16]
 8003804:	4808      	ldr	r0, [pc, #32]	; (8003828 <siprintf+0x38>)
 8003806:	4909      	ldr	r1, [pc, #36]	; (800382c <siprintf+0x3c>)
 8003808:	f853 2b04 	ldr.w	r2, [r3], #4
 800380c:	9105      	str	r1, [sp, #20]
 800380e:	6800      	ldr	r0, [r0, #0]
 8003810:	a902      	add	r1, sp, #8
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	f000 f98e 	bl	8003b34 <_svfiprintf_r>
 8003818:	2200      	movs	r2, #0
 800381a:	9b02      	ldr	r3, [sp, #8]
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	b01c      	add	sp, #112	; 0x70
 8003820:	f85d eb04 	ldr.w	lr, [sp], #4
 8003824:	b003      	add	sp, #12
 8003826:	4770      	bx	lr
 8003828:	2000005c 	.word	0x2000005c
 800382c:	ffff0208 	.word	0xffff0208

08003830 <memset>:
 8003830:	4603      	mov	r3, r0
 8003832:	4402      	add	r2, r0
 8003834:	4293      	cmp	r3, r2
 8003836:	d100      	bne.n	800383a <memset+0xa>
 8003838:	4770      	bx	lr
 800383a:	f803 1b01 	strb.w	r1, [r3], #1
 800383e:	e7f9      	b.n	8003834 <memset+0x4>

08003840 <__errno>:
 8003840:	4b01      	ldr	r3, [pc, #4]	; (8003848 <__errno+0x8>)
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	2000005c 	.word	0x2000005c

0800384c <__libc_init_array>:
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	2600      	movs	r6, #0
 8003850:	4d0c      	ldr	r5, [pc, #48]	; (8003884 <__libc_init_array+0x38>)
 8003852:	4c0d      	ldr	r4, [pc, #52]	; (8003888 <__libc_init_array+0x3c>)
 8003854:	1b64      	subs	r4, r4, r5
 8003856:	10a4      	asrs	r4, r4, #2
 8003858:	42a6      	cmp	r6, r4
 800385a:	d109      	bne.n	8003870 <__libc_init_array+0x24>
 800385c:	f000 fc7a 	bl	8004154 <_init>
 8003860:	2600      	movs	r6, #0
 8003862:	4d0a      	ldr	r5, [pc, #40]	; (800388c <__libc_init_array+0x40>)
 8003864:	4c0a      	ldr	r4, [pc, #40]	; (8003890 <__libc_init_array+0x44>)
 8003866:	1b64      	subs	r4, r4, r5
 8003868:	10a4      	asrs	r4, r4, #2
 800386a:	42a6      	cmp	r6, r4
 800386c:	d105      	bne.n	800387a <__libc_init_array+0x2e>
 800386e:	bd70      	pop	{r4, r5, r6, pc}
 8003870:	f855 3b04 	ldr.w	r3, [r5], #4
 8003874:	4798      	blx	r3
 8003876:	3601      	adds	r6, #1
 8003878:	e7ee      	b.n	8003858 <__libc_init_array+0xc>
 800387a:	f855 3b04 	ldr.w	r3, [r5], #4
 800387e:	4798      	blx	r3
 8003880:	3601      	adds	r6, #1
 8003882:	e7f2      	b.n	800386a <__libc_init_array+0x1e>
 8003884:	08004314 	.word	0x08004314
 8003888:	08004314 	.word	0x08004314
 800388c:	08004314 	.word	0x08004314
 8003890:	08004318 	.word	0x08004318

08003894 <__retarget_lock_acquire_recursive>:
 8003894:	4770      	bx	lr

08003896 <__retarget_lock_release_recursive>:
 8003896:	4770      	bx	lr

08003898 <_free_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4605      	mov	r5, r0
 800389c:	2900      	cmp	r1, #0
 800389e:	d040      	beq.n	8003922 <_free_r+0x8a>
 80038a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038a4:	1f0c      	subs	r4, r1, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bfb8      	it	lt
 80038aa:	18e4      	addlt	r4, r4, r3
 80038ac:	f000 f8dc 	bl	8003a68 <__malloc_lock>
 80038b0:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <_free_r+0x8c>)
 80038b2:	6813      	ldr	r3, [r2, #0]
 80038b4:	b933      	cbnz	r3, 80038c4 <_free_r+0x2c>
 80038b6:	6063      	str	r3, [r4, #4]
 80038b8:	6014      	str	r4, [r2, #0]
 80038ba:	4628      	mov	r0, r5
 80038bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038c0:	f000 b8d8 	b.w	8003a74 <__malloc_unlock>
 80038c4:	42a3      	cmp	r3, r4
 80038c6:	d908      	bls.n	80038da <_free_r+0x42>
 80038c8:	6820      	ldr	r0, [r4, #0]
 80038ca:	1821      	adds	r1, r4, r0
 80038cc:	428b      	cmp	r3, r1
 80038ce:	bf01      	itttt	eq
 80038d0:	6819      	ldreq	r1, [r3, #0]
 80038d2:	685b      	ldreq	r3, [r3, #4]
 80038d4:	1809      	addeq	r1, r1, r0
 80038d6:	6021      	streq	r1, [r4, #0]
 80038d8:	e7ed      	b.n	80038b6 <_free_r+0x1e>
 80038da:	461a      	mov	r2, r3
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	b10b      	cbz	r3, 80038e4 <_free_r+0x4c>
 80038e0:	42a3      	cmp	r3, r4
 80038e2:	d9fa      	bls.n	80038da <_free_r+0x42>
 80038e4:	6811      	ldr	r1, [r2, #0]
 80038e6:	1850      	adds	r0, r2, r1
 80038e8:	42a0      	cmp	r0, r4
 80038ea:	d10b      	bne.n	8003904 <_free_r+0x6c>
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	4401      	add	r1, r0
 80038f0:	1850      	adds	r0, r2, r1
 80038f2:	4283      	cmp	r3, r0
 80038f4:	6011      	str	r1, [r2, #0]
 80038f6:	d1e0      	bne.n	80038ba <_free_r+0x22>
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4408      	add	r0, r1
 80038fe:	6010      	str	r0, [r2, #0]
 8003900:	6053      	str	r3, [r2, #4]
 8003902:	e7da      	b.n	80038ba <_free_r+0x22>
 8003904:	d902      	bls.n	800390c <_free_r+0x74>
 8003906:	230c      	movs	r3, #12
 8003908:	602b      	str	r3, [r5, #0]
 800390a:	e7d6      	b.n	80038ba <_free_r+0x22>
 800390c:	6820      	ldr	r0, [r4, #0]
 800390e:	1821      	adds	r1, r4, r0
 8003910:	428b      	cmp	r3, r1
 8003912:	bf01      	itttt	eq
 8003914:	6819      	ldreq	r1, [r3, #0]
 8003916:	685b      	ldreq	r3, [r3, #4]
 8003918:	1809      	addeq	r1, r1, r0
 800391a:	6021      	streq	r1, [r4, #0]
 800391c:	6063      	str	r3, [r4, #4]
 800391e:	6054      	str	r4, [r2, #4]
 8003920:	e7cb      	b.n	80038ba <_free_r+0x22>
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	2000028c 	.word	0x2000028c

08003928 <sbrk_aligned>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	4e0e      	ldr	r6, [pc, #56]	; (8003964 <sbrk_aligned+0x3c>)
 800392c:	460c      	mov	r4, r1
 800392e:	6831      	ldr	r1, [r6, #0]
 8003930:	4605      	mov	r5, r0
 8003932:	b911      	cbnz	r1, 800393a <sbrk_aligned+0x12>
 8003934:	f000 fbaa 	bl	800408c <_sbrk_r>
 8003938:	6030      	str	r0, [r6, #0]
 800393a:	4621      	mov	r1, r4
 800393c:	4628      	mov	r0, r5
 800393e:	f000 fba5 	bl	800408c <_sbrk_r>
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	d00a      	beq.n	800395c <sbrk_aligned+0x34>
 8003946:	1cc4      	adds	r4, r0, #3
 8003948:	f024 0403 	bic.w	r4, r4, #3
 800394c:	42a0      	cmp	r0, r4
 800394e:	d007      	beq.n	8003960 <sbrk_aligned+0x38>
 8003950:	1a21      	subs	r1, r4, r0
 8003952:	4628      	mov	r0, r5
 8003954:	f000 fb9a 	bl	800408c <_sbrk_r>
 8003958:	3001      	adds	r0, #1
 800395a:	d101      	bne.n	8003960 <sbrk_aligned+0x38>
 800395c:	f04f 34ff 	mov.w	r4, #4294967295
 8003960:	4620      	mov	r0, r4
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	20000290 	.word	0x20000290

08003968 <_malloc_r>:
 8003968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800396c:	1ccd      	adds	r5, r1, #3
 800396e:	f025 0503 	bic.w	r5, r5, #3
 8003972:	3508      	adds	r5, #8
 8003974:	2d0c      	cmp	r5, #12
 8003976:	bf38      	it	cc
 8003978:	250c      	movcc	r5, #12
 800397a:	2d00      	cmp	r5, #0
 800397c:	4607      	mov	r7, r0
 800397e:	db01      	blt.n	8003984 <_malloc_r+0x1c>
 8003980:	42a9      	cmp	r1, r5
 8003982:	d905      	bls.n	8003990 <_malloc_r+0x28>
 8003984:	230c      	movs	r3, #12
 8003986:	2600      	movs	r6, #0
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	4630      	mov	r0, r6
 800398c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003990:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a64 <_malloc_r+0xfc>
 8003994:	f000 f868 	bl	8003a68 <__malloc_lock>
 8003998:	f8d8 3000 	ldr.w	r3, [r8]
 800399c:	461c      	mov	r4, r3
 800399e:	bb5c      	cbnz	r4, 80039f8 <_malloc_r+0x90>
 80039a0:	4629      	mov	r1, r5
 80039a2:	4638      	mov	r0, r7
 80039a4:	f7ff ffc0 	bl	8003928 <sbrk_aligned>
 80039a8:	1c43      	adds	r3, r0, #1
 80039aa:	4604      	mov	r4, r0
 80039ac:	d155      	bne.n	8003a5a <_malloc_r+0xf2>
 80039ae:	f8d8 4000 	ldr.w	r4, [r8]
 80039b2:	4626      	mov	r6, r4
 80039b4:	2e00      	cmp	r6, #0
 80039b6:	d145      	bne.n	8003a44 <_malloc_r+0xdc>
 80039b8:	2c00      	cmp	r4, #0
 80039ba:	d048      	beq.n	8003a4e <_malloc_r+0xe6>
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	4631      	mov	r1, r6
 80039c0:	4638      	mov	r0, r7
 80039c2:	eb04 0903 	add.w	r9, r4, r3
 80039c6:	f000 fb61 	bl	800408c <_sbrk_r>
 80039ca:	4581      	cmp	r9, r0
 80039cc:	d13f      	bne.n	8003a4e <_malloc_r+0xe6>
 80039ce:	6821      	ldr	r1, [r4, #0]
 80039d0:	4638      	mov	r0, r7
 80039d2:	1a6d      	subs	r5, r5, r1
 80039d4:	4629      	mov	r1, r5
 80039d6:	f7ff ffa7 	bl	8003928 <sbrk_aligned>
 80039da:	3001      	adds	r0, #1
 80039dc:	d037      	beq.n	8003a4e <_malloc_r+0xe6>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	442b      	add	r3, r5
 80039e2:	6023      	str	r3, [r4, #0]
 80039e4:	f8d8 3000 	ldr.w	r3, [r8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d038      	beq.n	8003a5e <_malloc_r+0xf6>
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	42a2      	cmp	r2, r4
 80039f0:	d12b      	bne.n	8003a4a <_malloc_r+0xe2>
 80039f2:	2200      	movs	r2, #0
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	e00f      	b.n	8003a18 <_malloc_r+0xb0>
 80039f8:	6822      	ldr	r2, [r4, #0]
 80039fa:	1b52      	subs	r2, r2, r5
 80039fc:	d41f      	bmi.n	8003a3e <_malloc_r+0xd6>
 80039fe:	2a0b      	cmp	r2, #11
 8003a00:	d917      	bls.n	8003a32 <_malloc_r+0xca>
 8003a02:	1961      	adds	r1, r4, r5
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	6025      	str	r5, [r4, #0]
 8003a08:	bf18      	it	ne
 8003a0a:	6059      	strne	r1, [r3, #4]
 8003a0c:	6863      	ldr	r3, [r4, #4]
 8003a0e:	bf08      	it	eq
 8003a10:	f8c8 1000 	streq.w	r1, [r8]
 8003a14:	5162      	str	r2, [r4, r5]
 8003a16:	604b      	str	r3, [r1, #4]
 8003a18:	4638      	mov	r0, r7
 8003a1a:	f104 060b 	add.w	r6, r4, #11
 8003a1e:	f000 f829 	bl	8003a74 <__malloc_unlock>
 8003a22:	f026 0607 	bic.w	r6, r6, #7
 8003a26:	1d23      	adds	r3, r4, #4
 8003a28:	1af2      	subs	r2, r6, r3
 8003a2a:	d0ae      	beq.n	800398a <_malloc_r+0x22>
 8003a2c:	1b9b      	subs	r3, r3, r6
 8003a2e:	50a3      	str	r3, [r4, r2]
 8003a30:	e7ab      	b.n	800398a <_malloc_r+0x22>
 8003a32:	42a3      	cmp	r3, r4
 8003a34:	6862      	ldr	r2, [r4, #4]
 8003a36:	d1dd      	bne.n	80039f4 <_malloc_r+0x8c>
 8003a38:	f8c8 2000 	str.w	r2, [r8]
 8003a3c:	e7ec      	b.n	8003a18 <_malloc_r+0xb0>
 8003a3e:	4623      	mov	r3, r4
 8003a40:	6864      	ldr	r4, [r4, #4]
 8003a42:	e7ac      	b.n	800399e <_malloc_r+0x36>
 8003a44:	4634      	mov	r4, r6
 8003a46:	6876      	ldr	r6, [r6, #4]
 8003a48:	e7b4      	b.n	80039b4 <_malloc_r+0x4c>
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	e7cc      	b.n	80039e8 <_malloc_r+0x80>
 8003a4e:	230c      	movs	r3, #12
 8003a50:	4638      	mov	r0, r7
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	f000 f80e 	bl	8003a74 <__malloc_unlock>
 8003a58:	e797      	b.n	800398a <_malloc_r+0x22>
 8003a5a:	6025      	str	r5, [r4, #0]
 8003a5c:	e7dc      	b.n	8003a18 <_malloc_r+0xb0>
 8003a5e:	605b      	str	r3, [r3, #4]
 8003a60:	deff      	udf	#255	; 0xff
 8003a62:	bf00      	nop
 8003a64:	2000028c 	.word	0x2000028c

08003a68 <__malloc_lock>:
 8003a68:	4801      	ldr	r0, [pc, #4]	; (8003a70 <__malloc_lock+0x8>)
 8003a6a:	f7ff bf13 	b.w	8003894 <__retarget_lock_acquire_recursive>
 8003a6e:	bf00      	nop
 8003a70:	20000288 	.word	0x20000288

08003a74 <__malloc_unlock>:
 8003a74:	4801      	ldr	r0, [pc, #4]	; (8003a7c <__malloc_unlock+0x8>)
 8003a76:	f7ff bf0e 	b.w	8003896 <__retarget_lock_release_recursive>
 8003a7a:	bf00      	nop
 8003a7c:	20000288 	.word	0x20000288

08003a80 <__ssputs_r>:
 8003a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a84:	461f      	mov	r7, r3
 8003a86:	688e      	ldr	r6, [r1, #8]
 8003a88:	4682      	mov	sl, r0
 8003a8a:	42be      	cmp	r6, r7
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	4690      	mov	r8, r2
 8003a90:	680b      	ldr	r3, [r1, #0]
 8003a92:	d82c      	bhi.n	8003aee <__ssputs_r+0x6e>
 8003a94:	898a      	ldrh	r2, [r1, #12]
 8003a96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a9a:	d026      	beq.n	8003aea <__ssputs_r+0x6a>
 8003a9c:	6965      	ldr	r5, [r4, #20]
 8003a9e:	6909      	ldr	r1, [r1, #16]
 8003aa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aa4:	eba3 0901 	sub.w	r9, r3, r1
 8003aa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003aac:	1c7b      	adds	r3, r7, #1
 8003aae:	444b      	add	r3, r9
 8003ab0:	106d      	asrs	r5, r5, #1
 8003ab2:	429d      	cmp	r5, r3
 8003ab4:	bf38      	it	cc
 8003ab6:	461d      	movcc	r5, r3
 8003ab8:	0553      	lsls	r3, r2, #21
 8003aba:	d527      	bpl.n	8003b0c <__ssputs_r+0x8c>
 8003abc:	4629      	mov	r1, r5
 8003abe:	f7ff ff53 	bl	8003968 <_malloc_r>
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	b360      	cbz	r0, 8003b20 <__ssputs_r+0xa0>
 8003ac6:	464a      	mov	r2, r9
 8003ac8:	6921      	ldr	r1, [r4, #16]
 8003aca:	f000 fafd 	bl	80040c8 <memcpy>
 8003ace:	89a3      	ldrh	r3, [r4, #12]
 8003ad0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad8:	81a3      	strh	r3, [r4, #12]
 8003ada:	6126      	str	r6, [r4, #16]
 8003adc:	444e      	add	r6, r9
 8003ade:	6026      	str	r6, [r4, #0]
 8003ae0:	463e      	mov	r6, r7
 8003ae2:	6165      	str	r5, [r4, #20]
 8003ae4:	eba5 0509 	sub.w	r5, r5, r9
 8003ae8:	60a5      	str	r5, [r4, #8]
 8003aea:	42be      	cmp	r6, r7
 8003aec:	d900      	bls.n	8003af0 <__ssputs_r+0x70>
 8003aee:	463e      	mov	r6, r7
 8003af0:	4632      	mov	r2, r6
 8003af2:	4641      	mov	r1, r8
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	f000 faaf 	bl	8004058 <memmove>
 8003afa:	2000      	movs	r0, #0
 8003afc:	68a3      	ldr	r3, [r4, #8]
 8003afe:	1b9b      	subs	r3, r3, r6
 8003b00:	60a3      	str	r3, [r4, #8]
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	4433      	add	r3, r6
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b0c:	462a      	mov	r2, r5
 8003b0e:	f000 fae9 	bl	80040e4 <_realloc_r>
 8003b12:	4606      	mov	r6, r0
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d1e0      	bne.n	8003ada <__ssputs_r+0x5a>
 8003b18:	4650      	mov	r0, sl
 8003b1a:	6921      	ldr	r1, [r4, #16]
 8003b1c:	f7ff febc 	bl	8003898 <_free_r>
 8003b20:	230c      	movs	r3, #12
 8003b22:	f8ca 3000 	str.w	r3, [sl]
 8003b26:	89a3      	ldrh	r3, [r4, #12]
 8003b28:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	e7e9      	b.n	8003b08 <__ssputs_r+0x88>

08003b34 <_svfiprintf_r>:
 8003b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b38:	4698      	mov	r8, r3
 8003b3a:	898b      	ldrh	r3, [r1, #12]
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	061b      	lsls	r3, r3, #24
 8003b40:	460d      	mov	r5, r1
 8003b42:	4614      	mov	r4, r2
 8003b44:	b09d      	sub	sp, #116	; 0x74
 8003b46:	d50e      	bpl.n	8003b66 <_svfiprintf_r+0x32>
 8003b48:	690b      	ldr	r3, [r1, #16]
 8003b4a:	b963      	cbnz	r3, 8003b66 <_svfiprintf_r+0x32>
 8003b4c:	2140      	movs	r1, #64	; 0x40
 8003b4e:	f7ff ff0b 	bl	8003968 <_malloc_r>
 8003b52:	6028      	str	r0, [r5, #0]
 8003b54:	6128      	str	r0, [r5, #16]
 8003b56:	b920      	cbnz	r0, 8003b62 <_svfiprintf_r+0x2e>
 8003b58:	230c      	movs	r3, #12
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	e0d0      	b.n	8003d04 <_svfiprintf_r+0x1d0>
 8003b62:	2340      	movs	r3, #64	; 0x40
 8003b64:	616b      	str	r3, [r5, #20]
 8003b66:	2300      	movs	r3, #0
 8003b68:	9309      	str	r3, [sp, #36]	; 0x24
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b70:	2330      	movs	r3, #48	; 0x30
 8003b72:	f04f 0901 	mov.w	r9, #1
 8003b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b7a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003d1c <_svfiprintf_r+0x1e8>
 8003b7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b82:	4623      	mov	r3, r4
 8003b84:	469a      	mov	sl, r3
 8003b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b8a:	b10a      	cbz	r2, 8003b90 <_svfiprintf_r+0x5c>
 8003b8c:	2a25      	cmp	r2, #37	; 0x25
 8003b8e:	d1f9      	bne.n	8003b84 <_svfiprintf_r+0x50>
 8003b90:	ebba 0b04 	subs.w	fp, sl, r4
 8003b94:	d00b      	beq.n	8003bae <_svfiprintf_r+0x7a>
 8003b96:	465b      	mov	r3, fp
 8003b98:	4622      	mov	r2, r4
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	4638      	mov	r0, r7
 8003b9e:	f7ff ff6f 	bl	8003a80 <__ssputs_r>
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	f000 80a9 	beq.w	8003cfa <_svfiprintf_r+0x1c6>
 8003ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003baa:	445a      	add	r2, fp
 8003bac:	9209      	str	r2, [sp, #36]	; 0x24
 8003bae:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80a1 	beq.w	8003cfa <_svfiprintf_r+0x1c6>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bc2:	f10a 0a01 	add.w	sl, sl, #1
 8003bc6:	9304      	str	r3, [sp, #16]
 8003bc8:	9307      	str	r3, [sp, #28]
 8003bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bce:	931a      	str	r3, [sp, #104]	; 0x68
 8003bd0:	4654      	mov	r4, sl
 8003bd2:	2205      	movs	r2, #5
 8003bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd8:	4850      	ldr	r0, [pc, #320]	; (8003d1c <_svfiprintf_r+0x1e8>)
 8003bda:	f000 fa67 	bl	80040ac <memchr>
 8003bde:	9a04      	ldr	r2, [sp, #16]
 8003be0:	b9d8      	cbnz	r0, 8003c1a <_svfiprintf_r+0xe6>
 8003be2:	06d0      	lsls	r0, r2, #27
 8003be4:	bf44      	itt	mi
 8003be6:	2320      	movmi	r3, #32
 8003be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bec:	0711      	lsls	r1, r2, #28
 8003bee:	bf44      	itt	mi
 8003bf0:	232b      	movmi	r3, #43	; 0x2b
 8003bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8003bfc:	d015      	beq.n	8003c2a <_svfiprintf_r+0xf6>
 8003bfe:	4654      	mov	r4, sl
 8003c00:	2000      	movs	r0, #0
 8003c02:	f04f 0c0a 	mov.w	ip, #10
 8003c06:	9a07      	ldr	r2, [sp, #28]
 8003c08:	4621      	mov	r1, r4
 8003c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c0e:	3b30      	subs	r3, #48	; 0x30
 8003c10:	2b09      	cmp	r3, #9
 8003c12:	d94d      	bls.n	8003cb0 <_svfiprintf_r+0x17c>
 8003c14:	b1b0      	cbz	r0, 8003c44 <_svfiprintf_r+0x110>
 8003c16:	9207      	str	r2, [sp, #28]
 8003c18:	e014      	b.n	8003c44 <_svfiprintf_r+0x110>
 8003c1a:	eba0 0308 	sub.w	r3, r0, r8
 8003c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8003c22:	4313      	orrs	r3, r2
 8003c24:	46a2      	mov	sl, r4
 8003c26:	9304      	str	r3, [sp, #16]
 8003c28:	e7d2      	b.n	8003bd0 <_svfiprintf_r+0x9c>
 8003c2a:	9b03      	ldr	r3, [sp, #12]
 8003c2c:	1d19      	adds	r1, r3, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	9103      	str	r1, [sp, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bfbb      	ittet	lt
 8003c36:	425b      	neglt	r3, r3
 8003c38:	f042 0202 	orrlt.w	r2, r2, #2
 8003c3c:	9307      	strge	r3, [sp, #28]
 8003c3e:	9307      	strlt	r3, [sp, #28]
 8003c40:	bfb8      	it	lt
 8003c42:	9204      	strlt	r2, [sp, #16]
 8003c44:	7823      	ldrb	r3, [r4, #0]
 8003c46:	2b2e      	cmp	r3, #46	; 0x2e
 8003c48:	d10c      	bne.n	8003c64 <_svfiprintf_r+0x130>
 8003c4a:	7863      	ldrb	r3, [r4, #1]
 8003c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c4e:	d134      	bne.n	8003cba <_svfiprintf_r+0x186>
 8003c50:	9b03      	ldr	r3, [sp, #12]
 8003c52:	3402      	adds	r4, #2
 8003c54:	1d1a      	adds	r2, r3, #4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	9203      	str	r2, [sp, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bfb8      	it	lt
 8003c5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c62:	9305      	str	r3, [sp, #20]
 8003c64:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003d20 <_svfiprintf_r+0x1ec>
 8003c68:	2203      	movs	r2, #3
 8003c6a:	4650      	mov	r0, sl
 8003c6c:	7821      	ldrb	r1, [r4, #0]
 8003c6e:	f000 fa1d 	bl	80040ac <memchr>
 8003c72:	b138      	cbz	r0, 8003c84 <_svfiprintf_r+0x150>
 8003c74:	2240      	movs	r2, #64	; 0x40
 8003c76:	9b04      	ldr	r3, [sp, #16]
 8003c78:	eba0 000a 	sub.w	r0, r0, sl
 8003c7c:	4082      	lsls	r2, r0
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	3401      	adds	r4, #1
 8003c82:	9304      	str	r3, [sp, #16]
 8003c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c88:	2206      	movs	r2, #6
 8003c8a:	4826      	ldr	r0, [pc, #152]	; (8003d24 <_svfiprintf_r+0x1f0>)
 8003c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c90:	f000 fa0c 	bl	80040ac <memchr>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d038      	beq.n	8003d0a <_svfiprintf_r+0x1d6>
 8003c98:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <_svfiprintf_r+0x1f4>)
 8003c9a:	bb1b      	cbnz	r3, 8003ce4 <_svfiprintf_r+0x1b0>
 8003c9c:	9b03      	ldr	r3, [sp, #12]
 8003c9e:	3307      	adds	r3, #7
 8003ca0:	f023 0307 	bic.w	r3, r3, #7
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	9303      	str	r3, [sp, #12]
 8003ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003caa:	4433      	add	r3, r6
 8003cac:	9309      	str	r3, [sp, #36]	; 0x24
 8003cae:	e768      	b.n	8003b82 <_svfiprintf_r+0x4e>
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cb8:	e7a6      	b.n	8003c08 <_svfiprintf_r+0xd4>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f04f 0c0a 	mov.w	ip, #10
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	3401      	adds	r4, #1
 8003cc4:	9305      	str	r3, [sp, #20]
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ccc:	3a30      	subs	r2, #48	; 0x30
 8003cce:	2a09      	cmp	r2, #9
 8003cd0:	d903      	bls.n	8003cda <_svfiprintf_r+0x1a6>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0c6      	beq.n	8003c64 <_svfiprintf_r+0x130>
 8003cd6:	9105      	str	r1, [sp, #20]
 8003cd8:	e7c4      	b.n	8003c64 <_svfiprintf_r+0x130>
 8003cda:	4604      	mov	r4, r0
 8003cdc:	2301      	movs	r3, #1
 8003cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ce2:	e7f0      	b.n	8003cc6 <_svfiprintf_r+0x192>
 8003ce4:	ab03      	add	r3, sp, #12
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	462a      	mov	r2, r5
 8003cea:	4638      	mov	r0, r7
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <_svfiprintf_r+0x1f8>)
 8003cee:	a904      	add	r1, sp, #16
 8003cf0:	f3af 8000 	nop.w
 8003cf4:	1c42      	adds	r2, r0, #1
 8003cf6:	4606      	mov	r6, r0
 8003cf8:	d1d6      	bne.n	8003ca8 <_svfiprintf_r+0x174>
 8003cfa:	89ab      	ldrh	r3, [r5, #12]
 8003cfc:	065b      	lsls	r3, r3, #25
 8003cfe:	f53f af2d 	bmi.w	8003b5c <_svfiprintf_r+0x28>
 8003d02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d04:	b01d      	add	sp, #116	; 0x74
 8003d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d0a:	ab03      	add	r3, sp, #12
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	462a      	mov	r2, r5
 8003d10:	4638      	mov	r0, r7
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <_svfiprintf_r+0x1f8>)
 8003d14:	a904      	add	r1, sp, #16
 8003d16:	f000 f87d 	bl	8003e14 <_printf_i>
 8003d1a:	e7eb      	b.n	8003cf4 <_svfiprintf_r+0x1c0>
 8003d1c:	080042df 	.word	0x080042df
 8003d20:	080042e5 	.word	0x080042e5
 8003d24:	080042e9 	.word	0x080042e9
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	08003a81 	.word	0x08003a81

08003d30 <_printf_common>:
 8003d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d34:	4616      	mov	r6, r2
 8003d36:	4699      	mov	r9, r3
 8003d38:	688a      	ldr	r2, [r1, #8]
 8003d3a:	690b      	ldr	r3, [r1, #16]
 8003d3c:	4607      	mov	r7, r0
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	bfb8      	it	lt
 8003d42:	4613      	movlt	r3, r2
 8003d44:	6033      	str	r3, [r6, #0]
 8003d46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d50:	b10a      	cbz	r2, 8003d56 <_printf_common+0x26>
 8003d52:	3301      	adds	r3, #1
 8003d54:	6033      	str	r3, [r6, #0]
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	0699      	lsls	r1, r3, #26
 8003d5a:	bf42      	ittt	mi
 8003d5c:	6833      	ldrmi	r3, [r6, #0]
 8003d5e:	3302      	addmi	r3, #2
 8003d60:	6033      	strmi	r3, [r6, #0]
 8003d62:	6825      	ldr	r5, [r4, #0]
 8003d64:	f015 0506 	ands.w	r5, r5, #6
 8003d68:	d106      	bne.n	8003d78 <_printf_common+0x48>
 8003d6a:	f104 0a19 	add.w	sl, r4, #25
 8003d6e:	68e3      	ldr	r3, [r4, #12]
 8003d70:	6832      	ldr	r2, [r6, #0]
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	42ab      	cmp	r3, r5
 8003d76:	dc2b      	bgt.n	8003dd0 <_printf_common+0xa0>
 8003d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d7c:	1e13      	subs	r3, r2, #0
 8003d7e:	6822      	ldr	r2, [r4, #0]
 8003d80:	bf18      	it	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	0692      	lsls	r2, r2, #26
 8003d86:	d430      	bmi.n	8003dea <_printf_common+0xba>
 8003d88:	4649      	mov	r1, r9
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d90:	47c0      	blx	r8
 8003d92:	3001      	adds	r0, #1
 8003d94:	d023      	beq.n	8003dde <_printf_common+0xae>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	6922      	ldr	r2, [r4, #16]
 8003d9a:	f003 0306 	and.w	r3, r3, #6
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	bf14      	ite	ne
 8003da2:	2500      	movne	r5, #0
 8003da4:	6833      	ldreq	r3, [r6, #0]
 8003da6:	f04f 0600 	mov.w	r6, #0
 8003daa:	bf08      	it	eq
 8003dac:	68e5      	ldreq	r5, [r4, #12]
 8003dae:	f104 041a 	add.w	r4, r4, #26
 8003db2:	bf08      	it	eq
 8003db4:	1aed      	subeq	r5, r5, r3
 8003db6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003dba:	bf08      	it	eq
 8003dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bfc4      	itt	gt
 8003dc4:	1a9b      	subgt	r3, r3, r2
 8003dc6:	18ed      	addgt	r5, r5, r3
 8003dc8:	42b5      	cmp	r5, r6
 8003dca:	d11a      	bne.n	8003e02 <_printf_common+0xd2>
 8003dcc:	2000      	movs	r0, #0
 8003dce:	e008      	b.n	8003de2 <_printf_common+0xb2>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	4652      	mov	r2, sl
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	47c0      	blx	r8
 8003dda:	3001      	adds	r0, #1
 8003ddc:	d103      	bne.n	8003de6 <_printf_common+0xb6>
 8003dde:	f04f 30ff 	mov.w	r0, #4294967295
 8003de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de6:	3501      	adds	r5, #1
 8003de8:	e7c1      	b.n	8003d6e <_printf_common+0x3e>
 8003dea:	2030      	movs	r0, #48	; 0x30
 8003dec:	18e1      	adds	r1, r4, r3
 8003dee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003df8:	4422      	add	r2, r4
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e00:	e7c2      	b.n	8003d88 <_printf_common+0x58>
 8003e02:	2301      	movs	r3, #1
 8003e04:	4622      	mov	r2, r4
 8003e06:	4649      	mov	r1, r9
 8003e08:	4638      	mov	r0, r7
 8003e0a:	47c0      	blx	r8
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d0e6      	beq.n	8003dde <_printf_common+0xae>
 8003e10:	3601      	adds	r6, #1
 8003e12:	e7d9      	b.n	8003dc8 <_printf_common+0x98>

08003e14 <_printf_i>:
 8003e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e18:	7e0f      	ldrb	r7, [r1, #24]
 8003e1a:	4691      	mov	r9, r2
 8003e1c:	2f78      	cmp	r7, #120	; 0x78
 8003e1e:	4680      	mov	r8, r0
 8003e20:	460c      	mov	r4, r1
 8003e22:	469a      	mov	sl, r3
 8003e24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e2a:	d807      	bhi.n	8003e3c <_printf_i+0x28>
 8003e2c:	2f62      	cmp	r7, #98	; 0x62
 8003e2e:	d80a      	bhi.n	8003e46 <_printf_i+0x32>
 8003e30:	2f00      	cmp	r7, #0
 8003e32:	f000 80d5 	beq.w	8003fe0 <_printf_i+0x1cc>
 8003e36:	2f58      	cmp	r7, #88	; 0x58
 8003e38:	f000 80c1 	beq.w	8003fbe <_printf_i+0x1aa>
 8003e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e44:	e03a      	b.n	8003ebc <_printf_i+0xa8>
 8003e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e4a:	2b15      	cmp	r3, #21
 8003e4c:	d8f6      	bhi.n	8003e3c <_printf_i+0x28>
 8003e4e:	a101      	add	r1, pc, #4	; (adr r1, 8003e54 <_printf_i+0x40>)
 8003e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e54:	08003ead 	.word	0x08003ead
 8003e58:	08003ec1 	.word	0x08003ec1
 8003e5c:	08003e3d 	.word	0x08003e3d
 8003e60:	08003e3d 	.word	0x08003e3d
 8003e64:	08003e3d 	.word	0x08003e3d
 8003e68:	08003e3d 	.word	0x08003e3d
 8003e6c:	08003ec1 	.word	0x08003ec1
 8003e70:	08003e3d 	.word	0x08003e3d
 8003e74:	08003e3d 	.word	0x08003e3d
 8003e78:	08003e3d 	.word	0x08003e3d
 8003e7c:	08003e3d 	.word	0x08003e3d
 8003e80:	08003fc7 	.word	0x08003fc7
 8003e84:	08003eed 	.word	0x08003eed
 8003e88:	08003f81 	.word	0x08003f81
 8003e8c:	08003e3d 	.word	0x08003e3d
 8003e90:	08003e3d 	.word	0x08003e3d
 8003e94:	08003fe9 	.word	0x08003fe9
 8003e98:	08003e3d 	.word	0x08003e3d
 8003e9c:	08003eed 	.word	0x08003eed
 8003ea0:	08003e3d 	.word	0x08003e3d
 8003ea4:	08003e3d 	.word	0x08003e3d
 8003ea8:	08003f89 	.word	0x08003f89
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	602a      	str	r2, [r5, #0]
 8003eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0a0      	b.n	8004002 <_printf_i+0x1ee>
 8003ec0:	6820      	ldr	r0, [r4, #0]
 8003ec2:	682b      	ldr	r3, [r5, #0]
 8003ec4:	0607      	lsls	r7, r0, #24
 8003ec6:	f103 0104 	add.w	r1, r3, #4
 8003eca:	6029      	str	r1, [r5, #0]
 8003ecc:	d501      	bpl.n	8003ed2 <_printf_i+0xbe>
 8003ece:	681e      	ldr	r6, [r3, #0]
 8003ed0:	e003      	b.n	8003eda <_printf_i+0xc6>
 8003ed2:	0646      	lsls	r6, r0, #25
 8003ed4:	d5fb      	bpl.n	8003ece <_printf_i+0xba>
 8003ed6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003eda:	2e00      	cmp	r6, #0
 8003edc:	da03      	bge.n	8003ee6 <_printf_i+0xd2>
 8003ede:	232d      	movs	r3, #45	; 0x2d
 8003ee0:	4276      	negs	r6, r6
 8003ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee6:	230a      	movs	r3, #10
 8003ee8:	4859      	ldr	r0, [pc, #356]	; (8004050 <_printf_i+0x23c>)
 8003eea:	e012      	b.n	8003f12 <_printf_i+0xfe>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	6820      	ldr	r0, [r4, #0]
 8003ef0:	1d19      	adds	r1, r3, #4
 8003ef2:	6029      	str	r1, [r5, #0]
 8003ef4:	0605      	lsls	r5, r0, #24
 8003ef6:	d501      	bpl.n	8003efc <_printf_i+0xe8>
 8003ef8:	681e      	ldr	r6, [r3, #0]
 8003efa:	e002      	b.n	8003f02 <_printf_i+0xee>
 8003efc:	0641      	lsls	r1, r0, #25
 8003efe:	d5fb      	bpl.n	8003ef8 <_printf_i+0xe4>
 8003f00:	881e      	ldrh	r6, [r3, #0]
 8003f02:	2f6f      	cmp	r7, #111	; 0x6f
 8003f04:	bf0c      	ite	eq
 8003f06:	2308      	moveq	r3, #8
 8003f08:	230a      	movne	r3, #10
 8003f0a:	4851      	ldr	r0, [pc, #324]	; (8004050 <_printf_i+0x23c>)
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f12:	6865      	ldr	r5, [r4, #4]
 8003f14:	2d00      	cmp	r5, #0
 8003f16:	bfa8      	it	ge
 8003f18:	6821      	ldrge	r1, [r4, #0]
 8003f1a:	60a5      	str	r5, [r4, #8]
 8003f1c:	bfa4      	itt	ge
 8003f1e:	f021 0104 	bicge.w	r1, r1, #4
 8003f22:	6021      	strge	r1, [r4, #0]
 8003f24:	b90e      	cbnz	r6, 8003f2a <_printf_i+0x116>
 8003f26:	2d00      	cmp	r5, #0
 8003f28:	d04b      	beq.n	8003fc2 <_printf_i+0x1ae>
 8003f2a:	4615      	mov	r5, r2
 8003f2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f30:	fb03 6711 	mls	r7, r3, r1, r6
 8003f34:	5dc7      	ldrb	r7, [r0, r7]
 8003f36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f3a:	4637      	mov	r7, r6
 8003f3c:	42bb      	cmp	r3, r7
 8003f3e:	460e      	mov	r6, r1
 8003f40:	d9f4      	bls.n	8003f2c <_printf_i+0x118>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d10b      	bne.n	8003f5e <_printf_i+0x14a>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	07de      	lsls	r6, r3, #31
 8003f4a:	d508      	bpl.n	8003f5e <_printf_i+0x14a>
 8003f4c:	6923      	ldr	r3, [r4, #16]
 8003f4e:	6861      	ldr	r1, [r4, #4]
 8003f50:	4299      	cmp	r1, r3
 8003f52:	bfde      	ittt	le
 8003f54:	2330      	movle	r3, #48	; 0x30
 8003f56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f5e:	1b52      	subs	r2, r2, r5
 8003f60:	6122      	str	r2, [r4, #16]
 8003f62:	464b      	mov	r3, r9
 8003f64:	4621      	mov	r1, r4
 8003f66:	4640      	mov	r0, r8
 8003f68:	f8cd a000 	str.w	sl, [sp]
 8003f6c:	aa03      	add	r2, sp, #12
 8003f6e:	f7ff fedf 	bl	8003d30 <_printf_common>
 8003f72:	3001      	adds	r0, #1
 8003f74:	d14a      	bne.n	800400c <_printf_i+0x1f8>
 8003f76:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7a:	b004      	add	sp, #16
 8003f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	f043 0320 	orr.w	r3, r3, #32
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	2778      	movs	r7, #120	; 0x78
 8003f8a:	4832      	ldr	r0, [pc, #200]	; (8004054 <_printf_i+0x240>)
 8003f8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	6829      	ldr	r1, [r5, #0]
 8003f94:	061f      	lsls	r7, r3, #24
 8003f96:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f9a:	d402      	bmi.n	8003fa2 <_printf_i+0x18e>
 8003f9c:	065f      	lsls	r7, r3, #25
 8003f9e:	bf48      	it	mi
 8003fa0:	b2b6      	uxthmi	r6, r6
 8003fa2:	07df      	lsls	r7, r3, #31
 8003fa4:	bf48      	it	mi
 8003fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8003faa:	6029      	str	r1, [r5, #0]
 8003fac:	bf48      	it	mi
 8003fae:	6023      	strmi	r3, [r4, #0]
 8003fb0:	b91e      	cbnz	r6, 8003fba <_printf_i+0x1a6>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	f023 0320 	bic.w	r3, r3, #32
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	2310      	movs	r3, #16
 8003fbc:	e7a6      	b.n	8003f0c <_printf_i+0xf8>
 8003fbe:	4824      	ldr	r0, [pc, #144]	; (8004050 <_printf_i+0x23c>)
 8003fc0:	e7e4      	b.n	8003f8c <_printf_i+0x178>
 8003fc2:	4615      	mov	r5, r2
 8003fc4:	e7bd      	b.n	8003f42 <_printf_i+0x12e>
 8003fc6:	682b      	ldr	r3, [r5, #0]
 8003fc8:	6826      	ldr	r6, [r4, #0]
 8003fca:	1d18      	adds	r0, r3, #4
 8003fcc:	6961      	ldr	r1, [r4, #20]
 8003fce:	6028      	str	r0, [r5, #0]
 8003fd0:	0635      	lsls	r5, r6, #24
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	d501      	bpl.n	8003fda <_printf_i+0x1c6>
 8003fd6:	6019      	str	r1, [r3, #0]
 8003fd8:	e002      	b.n	8003fe0 <_printf_i+0x1cc>
 8003fda:	0670      	lsls	r0, r6, #25
 8003fdc:	d5fb      	bpl.n	8003fd6 <_printf_i+0x1c2>
 8003fde:	8019      	strh	r1, [r3, #0]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	4615      	mov	r5, r2
 8003fe4:	6123      	str	r3, [r4, #16]
 8003fe6:	e7bc      	b.n	8003f62 <_printf_i+0x14e>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	2100      	movs	r1, #0
 8003fec:	1d1a      	adds	r2, r3, #4
 8003fee:	602a      	str	r2, [r5, #0]
 8003ff0:	681d      	ldr	r5, [r3, #0]
 8003ff2:	6862      	ldr	r2, [r4, #4]
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	f000 f859 	bl	80040ac <memchr>
 8003ffa:	b108      	cbz	r0, 8004000 <_printf_i+0x1ec>
 8003ffc:	1b40      	subs	r0, r0, r5
 8003ffe:	6060      	str	r0, [r4, #4]
 8004000:	6863      	ldr	r3, [r4, #4]
 8004002:	6123      	str	r3, [r4, #16]
 8004004:	2300      	movs	r3, #0
 8004006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800400a:	e7aa      	b.n	8003f62 <_printf_i+0x14e>
 800400c:	462a      	mov	r2, r5
 800400e:	4649      	mov	r1, r9
 8004010:	4640      	mov	r0, r8
 8004012:	6923      	ldr	r3, [r4, #16]
 8004014:	47d0      	blx	sl
 8004016:	3001      	adds	r0, #1
 8004018:	d0ad      	beq.n	8003f76 <_printf_i+0x162>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	079b      	lsls	r3, r3, #30
 800401e:	d413      	bmi.n	8004048 <_printf_i+0x234>
 8004020:	68e0      	ldr	r0, [r4, #12]
 8004022:	9b03      	ldr	r3, [sp, #12]
 8004024:	4298      	cmp	r0, r3
 8004026:	bfb8      	it	lt
 8004028:	4618      	movlt	r0, r3
 800402a:	e7a6      	b.n	8003f7a <_printf_i+0x166>
 800402c:	2301      	movs	r3, #1
 800402e:	4632      	mov	r2, r6
 8004030:	4649      	mov	r1, r9
 8004032:	4640      	mov	r0, r8
 8004034:	47d0      	blx	sl
 8004036:	3001      	adds	r0, #1
 8004038:	d09d      	beq.n	8003f76 <_printf_i+0x162>
 800403a:	3501      	adds	r5, #1
 800403c:	68e3      	ldr	r3, [r4, #12]
 800403e:	9903      	ldr	r1, [sp, #12]
 8004040:	1a5b      	subs	r3, r3, r1
 8004042:	42ab      	cmp	r3, r5
 8004044:	dcf2      	bgt.n	800402c <_printf_i+0x218>
 8004046:	e7eb      	b.n	8004020 <_printf_i+0x20c>
 8004048:	2500      	movs	r5, #0
 800404a:	f104 0619 	add.w	r6, r4, #25
 800404e:	e7f5      	b.n	800403c <_printf_i+0x228>
 8004050:	080042f0 	.word	0x080042f0
 8004054:	08004301 	.word	0x08004301

08004058 <memmove>:
 8004058:	4288      	cmp	r0, r1
 800405a:	b510      	push	{r4, lr}
 800405c:	eb01 0402 	add.w	r4, r1, r2
 8004060:	d902      	bls.n	8004068 <memmove+0x10>
 8004062:	4284      	cmp	r4, r0
 8004064:	4623      	mov	r3, r4
 8004066:	d807      	bhi.n	8004078 <memmove+0x20>
 8004068:	1e43      	subs	r3, r0, #1
 800406a:	42a1      	cmp	r1, r4
 800406c:	d008      	beq.n	8004080 <memmove+0x28>
 800406e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004076:	e7f8      	b.n	800406a <memmove+0x12>
 8004078:	4601      	mov	r1, r0
 800407a:	4402      	add	r2, r0
 800407c:	428a      	cmp	r2, r1
 800407e:	d100      	bne.n	8004082 <memmove+0x2a>
 8004080:	bd10      	pop	{r4, pc}
 8004082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800408a:	e7f7      	b.n	800407c <memmove+0x24>

0800408c <_sbrk_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	2300      	movs	r3, #0
 8004090:	4d05      	ldr	r5, [pc, #20]	; (80040a8 <_sbrk_r+0x1c>)
 8004092:	4604      	mov	r4, r0
 8004094:	4608      	mov	r0, r1
 8004096:	602b      	str	r3, [r5, #0]
 8004098:	f7fc fe9a 	bl	8000dd0 <_sbrk>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d102      	bne.n	80040a6 <_sbrk_r+0x1a>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	b103      	cbz	r3, 80040a6 <_sbrk_r+0x1a>
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	bd38      	pop	{r3, r4, r5, pc}
 80040a8:	20000284 	.word	0x20000284

080040ac <memchr>:
 80040ac:	4603      	mov	r3, r0
 80040ae:	b510      	push	{r4, lr}
 80040b0:	b2c9      	uxtb	r1, r1
 80040b2:	4402      	add	r2, r0
 80040b4:	4293      	cmp	r3, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	d101      	bne.n	80040be <memchr+0x12>
 80040ba:	2000      	movs	r0, #0
 80040bc:	e003      	b.n	80040c6 <memchr+0x1a>
 80040be:	7804      	ldrb	r4, [r0, #0]
 80040c0:	3301      	adds	r3, #1
 80040c2:	428c      	cmp	r4, r1
 80040c4:	d1f6      	bne.n	80040b4 <memchr+0x8>
 80040c6:	bd10      	pop	{r4, pc}

080040c8 <memcpy>:
 80040c8:	440a      	add	r2, r1
 80040ca:	4291      	cmp	r1, r2
 80040cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80040d0:	d100      	bne.n	80040d4 <memcpy+0xc>
 80040d2:	4770      	bx	lr
 80040d4:	b510      	push	{r4, lr}
 80040d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040da:	4291      	cmp	r1, r2
 80040dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040e0:	d1f9      	bne.n	80040d6 <memcpy+0xe>
 80040e2:	bd10      	pop	{r4, pc}

080040e4 <_realloc_r>:
 80040e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e8:	4680      	mov	r8, r0
 80040ea:	4614      	mov	r4, r2
 80040ec:	460e      	mov	r6, r1
 80040ee:	b921      	cbnz	r1, 80040fa <_realloc_r+0x16>
 80040f0:	4611      	mov	r1, r2
 80040f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040f6:	f7ff bc37 	b.w	8003968 <_malloc_r>
 80040fa:	b92a      	cbnz	r2, 8004108 <_realloc_r+0x24>
 80040fc:	f7ff fbcc 	bl	8003898 <_free_r>
 8004100:	4625      	mov	r5, r4
 8004102:	4628      	mov	r0, r5
 8004104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004108:	f000 f81b 	bl	8004142 <_malloc_usable_size_r>
 800410c:	4284      	cmp	r4, r0
 800410e:	4607      	mov	r7, r0
 8004110:	d802      	bhi.n	8004118 <_realloc_r+0x34>
 8004112:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004116:	d812      	bhi.n	800413e <_realloc_r+0x5a>
 8004118:	4621      	mov	r1, r4
 800411a:	4640      	mov	r0, r8
 800411c:	f7ff fc24 	bl	8003968 <_malloc_r>
 8004120:	4605      	mov	r5, r0
 8004122:	2800      	cmp	r0, #0
 8004124:	d0ed      	beq.n	8004102 <_realloc_r+0x1e>
 8004126:	42bc      	cmp	r4, r7
 8004128:	4622      	mov	r2, r4
 800412a:	4631      	mov	r1, r6
 800412c:	bf28      	it	cs
 800412e:	463a      	movcs	r2, r7
 8004130:	f7ff ffca 	bl	80040c8 <memcpy>
 8004134:	4631      	mov	r1, r6
 8004136:	4640      	mov	r0, r8
 8004138:	f7ff fbae 	bl	8003898 <_free_r>
 800413c:	e7e1      	b.n	8004102 <_realloc_r+0x1e>
 800413e:	4635      	mov	r5, r6
 8004140:	e7df      	b.n	8004102 <_realloc_r+0x1e>

08004142 <_malloc_usable_size_r>:
 8004142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004146:	1f18      	subs	r0, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	bfbc      	itt	lt
 800414c:	580b      	ldrlt	r3, [r1, r0]
 800414e:	18c0      	addlt	r0, r0, r3
 8004150:	4770      	bx	lr
	...

08004154 <_init>:
 8004154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004156:	bf00      	nop
 8004158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415a:	bc08      	pop	{r3}
 800415c:	469e      	mov	lr, r3
 800415e:	4770      	bx	lr

08004160 <_fini>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	bf00      	nop
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr
