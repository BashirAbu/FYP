
Learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08003f74  08003f74  00013f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004104  08004104  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004104  08004104  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004104  08004104  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800410c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000005c  08004168  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08004168  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb4a  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bd6  00000000  00000000  0002bc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  0002d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000970  00000000  00000000  0002e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001765e  00000000  00000000  0002ed60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8f1  00000000  00000000  000463be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000880fd  00000000  00000000  00053caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038b4  00000000  00000000  000dbdac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000df660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f5c 	.word	0x08003f5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003f5c 	.word	0x08003f5c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	4933      	ldr	r1, [pc, #204]	; (8000730 <HAL_UART_RxCpltCallback+0xd8>)
 8000664:	4833      	ldr	r0, [pc, #204]	; (8000734 <HAL_UART_RxCpltCallback+0xdc>)
 8000666:	f002 f996 	bl	8002996 <HAL_UART_Receive_IT>
	if(rx_buffer[0] == '\n')
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <HAL_UART_RxCpltCallback+0xd8>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b0a      	cmp	r3, #10
 8000670:	d145      	bne.n	80006fe <HAL_UART_RxCpltCallback+0xa6>
	{
		recieved_duty_cycle_buffer[3] = '\0';
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 8000674:	2200      	movs	r2, #0
 8000676:	70da      	strb	r2, [r3, #3]
		uint16_t duty_cycle = (uint16_t)atoi((char*) recieved_duty_cycle_buffer);
 8000678:	482f      	ldr	r0, [pc, #188]	; (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 800067a:	f002 ff31 	bl	80034e0 <atoi>
 800067e:	4603      	mov	r3, r0
 8000680:	81fb      	strh	r3, [r7, #14]
		sprintf(pwm_msg, "PWM Duty Cycle: %u%%\r\n", duty_cycle);
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	461a      	mov	r2, r3
 8000686:	492d      	ldr	r1, [pc, #180]	; (800073c <HAL_UART_RxCpltCallback+0xe4>)
 8000688:	482d      	ldr	r0, [pc, #180]	; (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 800068a:	f002 ffb5 	bl	80035f8 <siprintf>
		if(duty_cycle > 100)
 800068e:	89fb      	ldrh	r3, [r7, #14]
 8000690:	2b64      	cmp	r3, #100	; 0x64
 8000692:	d903      	bls.n	800069c <HAL_UART_RxCpltCallback+0x44>
		{
			sprintf(pwm_msg, "Invalid input!\n");
 8000694:	492b      	ldr	r1, [pc, #172]	; (8000744 <HAL_UART_RxCpltCallback+0xec>)
 8000696:	482a      	ldr	r0, [pc, #168]	; (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 8000698:	f002 ffae 	bl	80035f8 <siprintf>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)pwm_msg, strlen((char*)pwm_msg), HAL_MAX_DELAY);
 800069c:	4828      	ldr	r0, [pc, #160]	; (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 800069e:	f7ff fd55 	bl	800014c <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	4925      	ldr	r1, [pc, #148]	; (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 80006ac:	4821      	ldr	r0, [pc, #132]	; (8000734 <HAL_UART_RxCpltCallback+0xdc>)
 80006ae:	f002 f8ef 	bl	8002890 <HAL_UART_Transmit>
		memset(recieved_duty_cycle_buffer, 0, 4);
 80006b2:	2204      	movs	r2, #4
 80006b4:	2100      	movs	r1, #0
 80006b6:	4820      	ldr	r0, [pc, #128]	; (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 80006b8:	f002 ffbe 	bl	8003638 <memset>
		memset(pwm_msg, 0, 34);
 80006bc:	2222      	movs	r2, #34	; 0x22
 80006be:	2100      	movs	r1, #0
 80006c0:	481f      	ldr	r0, [pc, #124]	; (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 80006c2:	f002 ffb9 	bl	8003638 <memset>
		recieved_duty_cyccle_buffer_index = 0;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
		//Set Period
		uint8_t counting_duty_cycle = (uint8_t)(((float)duty_cycle / 100.0f) * (float)(255));
 80006cc:	89fb      	ldrh	r3, [r7, #14]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fdfa 	bl	80002c8 <__aeabi_ui2f>
 80006d4:	4603      	mov	r3, r0
 80006d6:	491d      	ldr	r1, [pc, #116]	; (800074c <HAL_UART_RxCpltCallback+0xf4>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff01 	bl	80004e0 <__aeabi_fdiv>
 80006de:	4603      	mov	r3, r0
 80006e0:	491b      	ldr	r1, [pc, #108]	; (8000750 <HAL_UART_RxCpltCallback+0xf8>)
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fe48 	bl	8000378 <__aeabi_fmul>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff94 	bl	8000618 <__aeabi_f2uiz>
 80006f0:	4603      	mov	r3, r0
 80006f2:	737b      	strb	r3, [r7, #13]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, counting_duty_cycle);
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <HAL_UART_RxCpltCallback+0xfc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	7b7a      	ldrb	r2, [r7, #13]
 80006fa:	635a      	str	r2, [r3, #52]	; 0x34
	{
		recieved_duty_cycle_buffer[recieved_duty_cyccle_buffer_index] = rx_buffer[0];
		recieved_duty_cyccle_buffer_index++;
		recieved_duty_cyccle_buffer_index = recieved_duty_cyccle_buffer_index % 4;
	}
}
 80006fc:	e013      	b.n	8000726 <HAL_UART_RxCpltCallback+0xce>
		recieved_duty_cycle_buffer[recieved_duty_cyccle_buffer_index] = rx_buffer[0];
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_UART_RxCpltCallback+0xd8>)
 8000706:	7819      	ldrb	r1, [r3, #0]
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 800070a:	5499      	strb	r1, [r3, r2]
		recieved_duty_cyccle_buffer_index++;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 8000716:	701a      	strb	r2, [r3, #0]
		recieved_duty_cyccle_buffer_index = recieved_duty_cyccle_buffer_index % 4;
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f003 0303 	and.w	r3, r3, #3
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 8000724:	701a      	strb	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000108 	.word	0x20000108
 8000734:	200000c0 	.word	0x200000c0
 8000738:	2000010c 	.word	0x2000010c
 800073c:	08003f74 	.word	0x08003f74
 8000740:	20000114 	.word	0x20000114
 8000744:	08003f8c 	.word	0x08003f8c
 8000748:	20000110 	.word	0x20000110
 800074c:	42c80000 	.word	0x42c80000
 8000750:	437f0000 	.word	0x437f0000
 8000754:	20000078 	.word	0x20000078

08000758 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_12)
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000768:	d113      	bne.n	8000792 <HAL_GPIO_EXTI_Callback+0x3a>
  {
	  char buff[5];
	  sprintf(buff, "Hi\n\r");;
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	490b      	ldr	r1, [pc, #44]	; (800079c <HAL_GPIO_EXTI_Callback+0x44>)
 8000770:	4618      	mov	r0, r3
 8000772:	f002 ff41 	bl	80035f8 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fce6 	bl	800014c <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	b29a      	uxth	r2, r3
 8000784:	f107 0108 	add.w	r1, r7, #8
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x48>)
 800078e:	f002 f87f 	bl	8002890 <HAL_UART_Transmit>
  }
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08003f9c 	.word	0x08003f9c
 80007a0:	200000c0 	.word	0x200000c0

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 fa9c 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f816 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 f8f2 	bl	8000998 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007b4:	f000 f8c6 	bl	8000944 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80007b8:	f000 f850 	bl	800085c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 80007bc:	2201      	movs	r2, #1
 80007be:	4904      	ldr	r1, [pc, #16]	; (80007d0 <main+0x2c>)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <main+0x30>)
 80007c2:	f002 f8e8 	bl	8002996 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007c6:	2100      	movs	r1, #0
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <main+0x34>)
 80007ca:	f001 faf9 	bl	8001dc0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <main+0x2a>
 80007d0:	20000108 	.word	0x20000108
 80007d4:	200000c0 	.word	0x200000c0
 80007d8:	20000078 	.word	0x20000078

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b090      	sub	sp, #64	; 0x40
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	2228      	movs	r2, #40	; 0x28
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 ff24 	bl	8003638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fe:	2302      	movs	r3, #2
 8000800:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000802:	2301      	movs	r3, #1
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	2310      	movs	r3, #16
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800080e:	2300      	movs	r3, #0
 8000810:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000812:	2300      	movs	r3, #0
 8000814:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0318 	add.w	r3, r7, #24
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fe18 	bl	8001450 <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000826:	f000 f8f9 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2302      	movs	r3, #2
 8000830:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f001 f885 	bl	8001954 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000850:	f000 f8e4 	bl	8000a1c <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3740      	adds	r7, #64	; 0x40
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
 8000888:	615a      	str	r2, [r3, #20]
 800088a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_TIM2_Init+0xe4>)
 800088e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000894:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <MX_TIM2_Init+0xe4>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_TIM2_Init+0xe4>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <MX_TIM2_Init+0xe4>)
 80008a2:	22ff      	movs	r2, #255	; 0xff
 80008a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_TIM2_Init+0xe4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <MX_TIM2_Init+0xe4>)
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b2:	4823      	ldr	r0, [pc, #140]	; (8000940 <MX_TIM2_Init+0xe4>)
 80008b4:	f001 f9dc 	bl	8001c70 <HAL_TIM_Base_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80008be:	f000 f8ad 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	; (8000940 <MX_TIM2_Init+0xe4>)
 80008d0:	f001 fbd4 	bl	800207c <HAL_TIM_ConfigClockSource>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80008da:	f000 f89f 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008de:	4818      	ldr	r0, [pc, #96]	; (8000940 <MX_TIM2_Init+0xe4>)
 80008e0:	f001 fa15 	bl	8001d0e <HAL_TIM_PWM_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80008ea:	f000 f897 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	4619      	mov	r1, r3
 80008fc:	4810      	ldr	r0, [pc, #64]	; (8000940 <MX_TIM2_Init+0xe4>)
 80008fe:	f001 ff1f 	bl	8002740 <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000908:	f000 f888 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090c:	2360      	movs	r3, #96	; 0x60
 800090e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 8000910:	237d      	movs	r3, #125	; 0x7d
 8000912:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	4619      	mov	r1, r3
 8000922:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_TIM2_Init+0xe4>)
 8000924:	f001 fae8 	bl	8001ef8 <HAL_TIM_PWM_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800092e:	f000 f875 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000932:	4803      	ldr	r0, [pc, #12]	; (8000940 <MX_TIM2_Init+0xe4>)
 8000934:	f000 f8b6 	bl	8000aa4 <HAL_TIM_MspPostInit>

}
 8000938:	bf00      	nop
 800093a:	3738      	adds	r7, #56	; 0x38
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000078 	.word	0x20000078

08000944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_USART1_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000950:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800097c:	f001 ff38 	bl	80027f0 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 f849 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200000c0 	.word	0x200000c0
 8000994:	40013800 	.word	0x40013800

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_GPIO_Init+0x78>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <MX_GPIO_Init+0x78>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_GPIO_Init+0x78>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_GPIO_Init+0x78>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <MX_GPIO_Init+0x78>)
 80009ca:	f043 0308 	orr.w	r3, r3, #8
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_GPIO_Init+0x78>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0308 	and.w	r3, r3, #8
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_GPIO_Init+0x7c>)
 80009e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4619      	mov	r1, r3
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <MX_GPIO_Init+0x80>)
 80009f2:	f000 fb99 	bl	8001128 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	2028      	movs	r0, #40	; 0x28
 80009fc:	f000 faab 	bl	8000f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a00:	2028      	movs	r0, #40	; 0x28
 8000a02:	f000 fac4 	bl	8000f8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	10210000 	.word	0x10210000
 8000a18:	40010c00 	.word	0x40010c00

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_MspInit+0x40>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <HAL_MspInit+0x40>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_MspInit+0x40>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_MspInit+0x40>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_MspInit+0x40>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_MspInit+0x40>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a7c:	d10b      	bne.n	8000a96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_TIM_Base_MspInit+0x34>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_TIM_Base_MspInit+0x34>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	61d3      	str	r3, [r2, #28]
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_TIM_Base_MspInit+0x34>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ac2:	d117      	bne.n	8000af4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_TIM_MspPostInit+0x58>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <HAL_TIM_MspPostInit+0x58>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_TIM_MspPostInit+0x58>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000adc:	2301      	movs	r3, #1
 8000ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <HAL_TIM_MspPostInit+0x5c>)
 8000af0:	f000 fb1a 	bl	8001128 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010800 	.word	0x40010800

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a20      	ldr	r2, [pc, #128]	; (8000ba0 <HAL_UART_MspInit+0x9c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d139      	bne.n	8000b98 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <HAL_UART_MspInit+0xa0>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <HAL_UART_MspInit+0xa0>)
 8000b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_UART_MspInit+0xa0>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0xa0>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <HAL_UART_MspInit+0xa0>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_UART_MspInit+0xa0>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4619      	mov	r1, r3
 8000b68:	480f      	ldr	r0, [pc, #60]	; (8000ba8 <HAL_UART_MspInit+0xa4>)
 8000b6a:	f000 fadd 	bl	8001128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <HAL_UART_MspInit+0xa4>)
 8000b84:	f000 fad0 	bl	8001128 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2025      	movs	r0, #37	; 0x25
 8000b8e:	f000 f9e2 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b92:	2025      	movs	r0, #37	; 0x25
 8000b94:	f000 f9fb 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40013800 	.word	0x40013800
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010800 	.word	0x40010800

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf2:	f000 f8bd 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <USART1_IRQHandler+0x10>)
 8000c02:	f001 feed 	bl	80029e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000c0 	.word	0x200000c0

08000c10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000c14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c18:	f000 fc02 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f002 fcfa 	bl	8003648 <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20002800 	.word	0x20002800
 8000c80:	00000400 	.word	0x00000400
 8000c84:	20000138 	.word	0x20000138
 8000c88:	20000288 	.word	0x20000288

08000c8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c98:	f7ff fff8 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c9e:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ca0:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cb4:	4c09      	ldr	r4, [pc, #36]	; (8000cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f002 fcc7 	bl	8003654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc6:	f7ff fd6d 	bl	80007a4 <main>
  bx lr
 8000cca:	4770      	bx	lr
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cd4:	0800410c 	.word	0x0800410c
  ldr r2, =_sbss
 8000cd8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cdc:	20000288 	.word	0x20000288

08000ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_2_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_Init+0x28>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_Init+0x28>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f923 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	200f      	movs	r0, #15
 8000cfc:	f000 f808 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fe92 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40022000 	.word	0x40022000

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x54>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f93b 	bl	8000faa <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00e      	b.n	8000d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 f903 	bl	8000f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_InitTick+0x5c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <HAL_IncTick+0x20>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	2000013c 	.word	0x2000013c

08000d94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	2000013c 	.word	0x2000013c

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 021f 	and.w	r2, r3, #31
 8000e24:	4906      	ldr	r1, [pc, #24]	; (8000e40 <__NVIC_EnableIRQ+0x34>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f7ff ff90 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff2d 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff42 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff90 	bl	8000e98 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5f 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff35 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffa2 	bl	8000efc <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d008      	beq.n	8000fec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2204      	movs	r2, #4
 8000fde:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e020      	b.n	800102e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 020e 	bic.w	r2, r2, #14
 8000ffa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0201 	bic.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001014:	2101      	movs	r1, #1
 8001016:	fa01 f202 	lsl.w	r2, r1, r2
 800101a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d005      	beq.n	800105c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2204      	movs	r2, #4
 8001054:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e051      	b.n	8001100 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 020e 	bic.w	r2, r2, #14
 800106a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0201 	bic.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a22      	ldr	r2, [pc, #136]	; (800110c <HAL_DMA_Abort_IT+0xd4>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d029      	beq.n	80010da <HAL_DMA_Abort_IT+0xa2>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a21      	ldr	r2, [pc, #132]	; (8001110 <HAL_DMA_Abort_IT+0xd8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d022      	beq.n	80010d6 <HAL_DMA_Abort_IT+0x9e>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1f      	ldr	r2, [pc, #124]	; (8001114 <HAL_DMA_Abort_IT+0xdc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d01a      	beq.n	80010d0 <HAL_DMA_Abort_IT+0x98>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <HAL_DMA_Abort_IT+0xe0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d012      	beq.n	80010ca <HAL_DMA_Abort_IT+0x92>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_DMA_Abort_IT+0xe4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d00a      	beq.n	80010c4 <HAL_DMA_Abort_IT+0x8c>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <HAL_DMA_Abort_IT+0xe8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d102      	bne.n	80010be <HAL_DMA_Abort_IT+0x86>
 80010b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010bc:	e00e      	b.n	80010dc <HAL_DMA_Abort_IT+0xa4>
 80010be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010c2:	e00b      	b.n	80010dc <HAL_DMA_Abort_IT+0xa4>
 80010c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c8:	e008      	b.n	80010dc <HAL_DMA_Abort_IT+0xa4>
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	e005      	b.n	80010dc <HAL_DMA_Abort_IT+0xa4>
 80010d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d4:	e002      	b.n	80010dc <HAL_DMA_Abort_IT+0xa4>
 80010d6:	2310      	movs	r3, #16
 80010d8:	e000      	b.n	80010dc <HAL_DMA_Abort_IT+0xa4>
 80010da:	2301      	movs	r3, #1
 80010dc:	4a11      	ldr	r2, [pc, #68]	; (8001124 <HAL_DMA_Abort_IT+0xec>)
 80010de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	4798      	blx	r3
    } 
  }
  return status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020008 	.word	0x40020008
 8001110:	4002001c 	.word	0x4002001c
 8001114:	40020030 	.word	0x40020030
 8001118:	40020044 	.word	0x40020044
 800111c:	40020058 	.word	0x40020058
 8001120:	4002006c 	.word	0x4002006c
 8001124:	40020000 	.word	0x40020000

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b08b      	sub	sp, #44	; 0x2c
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	e161      	b.n	8001400 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800113c:	2201      	movs	r2, #1
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 8150 	bne.w	80013fa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4a97      	ldr	r2, [pc, #604]	; (80013bc <HAL_GPIO_Init+0x294>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d05e      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001164:	4a95      	ldr	r2, [pc, #596]	; (80013bc <HAL_GPIO_Init+0x294>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d875      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 800116a:	4a95      	ldr	r2, [pc, #596]	; (80013c0 <HAL_GPIO_Init+0x298>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d058      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001170:	4a93      	ldr	r2, [pc, #588]	; (80013c0 <HAL_GPIO_Init+0x298>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d86f      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 8001176:	4a93      	ldr	r2, [pc, #588]	; (80013c4 <HAL_GPIO_Init+0x29c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d052      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 800117c:	4a91      	ldr	r2, [pc, #580]	; (80013c4 <HAL_GPIO_Init+0x29c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d869      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 8001182:	4a91      	ldr	r2, [pc, #580]	; (80013c8 <HAL_GPIO_Init+0x2a0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d04c      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001188:	4a8f      	ldr	r2, [pc, #572]	; (80013c8 <HAL_GPIO_Init+0x2a0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d863      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 800118e:	4a8f      	ldr	r2, [pc, #572]	; (80013cc <HAL_GPIO_Init+0x2a4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d046      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001194:	4a8d      	ldr	r2, [pc, #564]	; (80013cc <HAL_GPIO_Init+0x2a4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d85d      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 800119a:	2b12      	cmp	r3, #18
 800119c:	d82a      	bhi.n	80011f4 <HAL_GPIO_Init+0xcc>
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d859      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <HAL_GPIO_Init+0x80>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	08001223 	.word	0x08001223
 80011ac:	080011fd 	.word	0x080011fd
 80011b0:	0800120f 	.word	0x0800120f
 80011b4:	08001251 	.word	0x08001251
 80011b8:	08001257 	.word	0x08001257
 80011bc:	08001257 	.word	0x08001257
 80011c0:	08001257 	.word	0x08001257
 80011c4:	08001257 	.word	0x08001257
 80011c8:	08001257 	.word	0x08001257
 80011cc:	08001257 	.word	0x08001257
 80011d0:	08001257 	.word	0x08001257
 80011d4:	08001257 	.word	0x08001257
 80011d8:	08001257 	.word	0x08001257
 80011dc:	08001257 	.word	0x08001257
 80011e0:	08001257 	.word	0x08001257
 80011e4:	08001257 	.word	0x08001257
 80011e8:	08001257 	.word	0x08001257
 80011ec:	08001205 	.word	0x08001205
 80011f0:	08001219 	.word	0x08001219
 80011f4:	4a76      	ldr	r2, [pc, #472]	; (80013d0 <HAL_GPIO_Init+0x2a8>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011fa:	e02c      	b.n	8001256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	623b      	str	r3, [r7, #32]
          break;
 8001202:	e029      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	3304      	adds	r3, #4
 800120a:	623b      	str	r3, [r7, #32]
          break;
 800120c:	e024      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	3308      	adds	r3, #8
 8001214:	623b      	str	r3, [r7, #32]
          break;
 8001216:	e01f      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	330c      	adds	r3, #12
 800121e:	623b      	str	r3, [r7, #32]
          break;
 8001220:	e01a      	b.n	8001258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800122a:	2304      	movs	r3, #4
 800122c:	623b      	str	r3, [r7, #32]
          break;
 800122e:	e013      	b.n	8001258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d105      	bne.n	8001244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001238:	2308      	movs	r3, #8
 800123a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	611a      	str	r2, [r3, #16]
          break;
 8001242:	e009      	b.n	8001258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2308      	movs	r3, #8
 8001246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	615a      	str	r2, [r3, #20]
          break;
 800124e:	e003      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
          break;
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x130>
          break;
 8001256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2bff      	cmp	r3, #255	; 0xff
 800125c:	d801      	bhi.n	8001262 <HAL_GPIO_Init+0x13a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	e001      	b.n	8001266 <HAL_GPIO_Init+0x13e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3304      	adds	r3, #4
 8001266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2bff      	cmp	r3, #255	; 0xff
 800126c:	d802      	bhi.n	8001274 <HAL_GPIO_Init+0x14c>
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	e002      	b.n	800127a <HAL_GPIO_Init+0x152>
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	3b08      	subs	r3, #8
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	210f      	movs	r1, #15
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	401a      	ands	r2, r3
 800128c:	6a39      	ldr	r1, [r7, #32]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	431a      	orrs	r2, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 80a9 	beq.w	80013fa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012a8:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <HAL_GPIO_Init+0x2ac>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a49      	ldr	r2, [pc, #292]	; (80013d4 <HAL_GPIO_Init+0x2ac>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_GPIO_Init+0x2ac>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012c0:	4a45      	ldr	r2, [pc, #276]	; (80013d8 <HAL_GPIO_Init+0x2b0>)
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	220f      	movs	r2, #15
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a3d      	ldr	r2, [pc, #244]	; (80013dc <HAL_GPIO_Init+0x2b4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d00d      	beq.n	8001308 <HAL_GPIO_Init+0x1e0>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a3c      	ldr	r2, [pc, #240]	; (80013e0 <HAL_GPIO_Init+0x2b8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_Init+0x1dc>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a3b      	ldr	r2, [pc, #236]	; (80013e4 <HAL_GPIO_Init+0x2bc>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d101      	bne.n	8001300 <HAL_GPIO_Init+0x1d8>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e004      	b.n	800130a <HAL_GPIO_Init+0x1e2>
 8001300:	2303      	movs	r3, #3
 8001302:	e002      	b.n	800130a <HAL_GPIO_Init+0x1e2>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_GPIO_Init+0x1e2>
 8001308:	2300      	movs	r3, #0
 800130a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	4093      	lsls	r3, r2
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800131a:	492f      	ldr	r1, [pc, #188]	; (80013d8 <HAL_GPIO_Init+0x2b0>)
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	492b      	ldr	r1, [pc, #172]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	608b      	str	r3, [r1, #8]
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001342:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	43db      	mvns	r3, r3
 800134a:	4927      	ldr	r1, [pc, #156]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 800134c:	4013      	ands	r3, r2
 800134e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	4921      	ldr	r1, [pc, #132]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	60cb      	str	r3, [r1, #12]
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	43db      	mvns	r3, r3
 8001372:	491d      	ldr	r1, [pc, #116]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001374:	4013      	ands	r3, r2
 8001376:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	4917      	ldr	r1, [pc, #92]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	43db      	mvns	r3, r3
 800139a:	4913      	ldr	r1, [pc, #76]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 800139c:	4013      	ands	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d01f      	beq.n	80013ec <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	490d      	ldr	r1, [pc, #52]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e01f      	b.n	80013fa <HAL_GPIO_Init+0x2d2>
 80013ba:	bf00      	nop
 80013bc:	10320000 	.word	0x10320000
 80013c0:	10310000 	.word	0x10310000
 80013c4:	10220000 	.word	0x10220000
 80013c8:	10210000 	.word	0x10210000
 80013cc:	10120000 	.word	0x10120000
 80013d0:	10110000 	.word	0x10110000
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000
 80013dc:	40010800 	.word	0x40010800
 80013e0:	40010c00 	.word	0x40010c00
 80013e4:	40011000 	.word	0x40011000
 80013e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_GPIO_Init+0x2f4>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	4909      	ldr	r1, [pc, #36]	; (800141c <HAL_GPIO_Init+0x2f4>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	3301      	adds	r3, #1
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	fa22 f303 	lsr.w	r3, r2, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	f47f ae96 	bne.w	800113c <HAL_GPIO_Init+0x14>
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	372c      	adds	r7, #44	; 0x2c
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40010400 	.word	0x40010400

08001420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f98a 	bl	8000758 <HAL_GPIO_EXTI_Callback>
  }
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010400 	.word	0x40010400

08001450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e272      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8087 	beq.w	800157e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001470:	4b92      	ldr	r3, [pc, #584]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b04      	cmp	r3, #4
 800147a:	d00c      	beq.n	8001496 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800147c:	4b8f      	ldr	r3, [pc, #572]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 030c 	and.w	r3, r3, #12
 8001484:	2b08      	cmp	r3, #8
 8001486:	d112      	bne.n	80014ae <HAL_RCC_OscConfig+0x5e>
 8001488:	4b8c      	ldr	r3, [pc, #560]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d10b      	bne.n	80014ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001496:	4b89      	ldr	r3, [pc, #548]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d06c      	beq.n	800157c <HAL_RCC_OscConfig+0x12c>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d168      	bne.n	800157c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e24c      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x76>
 80014b8:	4b80      	ldr	r3, [pc, #512]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a7f      	ldr	r2, [pc, #508]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e02e      	b.n	8001524 <HAL_RCC_OscConfig+0xd4>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x98>
 80014ce:	4b7b      	ldr	r3, [pc, #492]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a7a      	ldr	r2, [pc, #488]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b78      	ldr	r3, [pc, #480]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a77      	ldr	r2, [pc, #476]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e01d      	b.n	8001524 <HAL_RCC_OscConfig+0xd4>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0xbc>
 80014f2:	4b72      	ldr	r3, [pc, #456]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a71      	ldr	r2, [pc, #452]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b6f      	ldr	r3, [pc, #444]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6e      	ldr	r2, [pc, #440]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0xd4>
 800150c:	4b6b      	ldr	r3, [pc, #428]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a6a      	ldr	r2, [pc, #424]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b68      	ldr	r3, [pc, #416]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a67      	ldr	r2, [pc, #412]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fc32 	bl	8000d94 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fc2e 	bl	8000d94 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e200      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b5d      	ldr	r3, [pc, #372]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0xe4>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fc1e 	bl	8000d94 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fc1a 	bl	8000d94 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e1ec      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	4b53      	ldr	r3, [pc, #332]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x10c>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d063      	beq.n	8001652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800158a:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d11c      	bne.n	80015dc <HAL_RCC_OscConfig+0x18c>
 80015a2:	4b46      	ldr	r3, [pc, #280]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	4b43      	ldr	r3, [pc, #268]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x176>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e1c0      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4939      	ldr	r1, [pc, #228]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	e03a      	b.n	8001652 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fbd3 	bl	8000d94 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fbcf 	bl	8000d94 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e1a1      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4927      	ldr	r1, [pc, #156]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
 8001624:	e015      	b.n	8001652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fbb2 	bl	8000d94 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001634:	f7ff fbae 	bl	8000d94 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e180      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d03a      	beq.n	80016d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d019      	beq.n	800169a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_RCC_OscConfig+0x274>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7ff fb92 	bl	8000d94 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fb8e 	bl	8000d94 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e160      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_RCC_OscConfig+0x26c>)
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001692:	2001      	movs	r0, #1
 8001694:	f000 face 	bl	8001c34 <RCC_Delay>
 8001698:	e01c      	b.n	80016d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_RCC_OscConfig+0x274>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a0:	f7ff fb78 	bl	8000d94 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a6:	e00f      	b.n	80016c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff fb74 	bl	8000d94 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d908      	bls.n	80016c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e146      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000
 80016c0:	42420000 	.word	0x42420000
 80016c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c8:	4b92      	ldr	r3, [pc, #584]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1e9      	bne.n	80016a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80a6 	beq.w	800182e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e6:	4b8b      	ldr	r3, [pc, #556]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10d      	bne.n	800170e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b88      	ldr	r3, [pc, #544]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a87      	ldr	r2, [pc, #540]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b85      	ldr	r3, [pc, #532]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170a:	2301      	movs	r3, #1
 800170c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	4b82      	ldr	r3, [pc, #520]	; (8001918 <HAL_RCC_OscConfig+0x4c8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d118      	bne.n	800174c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171a:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <HAL_RCC_OscConfig+0x4c8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a7e      	ldr	r2, [pc, #504]	; (8001918 <HAL_RCC_OscConfig+0x4c8>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001726:	f7ff fb35 	bl	8000d94 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172e:	f7ff fb31 	bl	8000d94 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b64      	cmp	r3, #100	; 0x64
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e103      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	4b75      	ldr	r3, [pc, #468]	; (8001918 <HAL_RCC_OscConfig+0x4c8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x312>
 8001754:	4b6f      	ldr	r3, [pc, #444]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4a6e      	ldr	r2, [pc, #440]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6213      	str	r3, [r2, #32]
 8001760:	e02d      	b.n	80017be <HAL_RCC_OscConfig+0x36e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x334>
 800176a:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a69      	ldr	r2, [pc, #420]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4a66      	ldr	r2, [pc, #408]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	6213      	str	r3, [r2, #32]
 8001782:	e01c      	b.n	80017be <HAL_RCC_OscConfig+0x36e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_OscConfig+0x356>
 800178c:	4b61      	ldr	r3, [pc, #388]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a60      	ldr	r2, [pc, #384]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6213      	str	r3, [r2, #32]
 8001798:	4b5e      	ldr	r3, [pc, #376]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a5d      	ldr	r2, [pc, #372]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6213      	str	r3, [r2, #32]
 80017a4:	e00b      	b.n	80017be <HAL_RCC_OscConfig+0x36e>
 80017a6:	4b5b      	ldr	r3, [pc, #364]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4a5a      	ldr	r2, [pc, #360]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6213      	str	r3, [r2, #32]
 80017b2:	4b58      	ldr	r3, [pc, #352]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a57      	ldr	r2, [pc, #348]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d015      	beq.n	80017f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fae5 	bl	8000d94 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fae1 	bl	8000d94 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0b1      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ee      	beq.n	80017ce <HAL_RCC_OscConfig+0x37e>
 80017f0:	e014      	b.n	800181c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7ff facf 	bl	8000d94 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff facb 	bl	8000d94 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e09b      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	4b40      	ldr	r3, [pc, #256]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ee      	bne.n	80017fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d105      	bne.n	800182e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001822:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	4a3b      	ldr	r2, [pc, #236]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8087 	beq.w	8001946 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b08      	cmp	r3, #8
 8001842:	d061      	beq.n	8001908 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d146      	bne.n	80018da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <HAL_RCC_OscConfig+0x4cc>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fa9f 	bl	8000d94 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff fa9b 	bl	8000d94 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e06d      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001880:	d108      	bne.n	8001894 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4921      	ldr	r1, [pc, #132]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a19      	ldr	r1, [r3, #32]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	430b      	orrs	r3, r1
 80018a6:	491b      	ldr	r1, [pc, #108]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x4cc>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fa6f 	bl	8000d94 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff fa6b 	bl	8000d94 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e03d      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x46a>
 80018d8:	e035      	b.n	8001946 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_RCC_OscConfig+0x4cc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fa58 	bl	8000d94 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fa54 	bl	8000d94 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e026      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x498>
 8001906:	e01e      	b.n	8001946 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d107      	bne.n	8001920 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e019      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
 8001914:	40021000 	.word	0x40021000
 8001918:	40007000 	.word	0x40007000
 800191c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_OscConfig+0x500>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	429a      	cmp	r2, r3
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d001      	beq.n	8001946 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000

08001954 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0d0      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d910      	bls.n	8001998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0207 	bic.w	r2, r3, #7
 800197e:	4965      	ldr	r1, [pc, #404]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b63      	ldr	r3, [pc, #396]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0b8      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b0:	4b59      	ldr	r3, [pc, #356]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a58      	ldr	r2, [pc, #352]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c8:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a52      	ldr	r2, [pc, #328]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b50      	ldr	r3, [pc, #320]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	494d      	ldr	r1, [pc, #308]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d040      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d115      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e07f      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a12:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e073      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a22:	4b3d      	ldr	r3, [pc, #244]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e06b      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a32:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4936      	ldr	r1, [pc, #216]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a44:	f7ff f9a6 	bl	8000d94 <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff f9a2 	bl	8000d94 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e053      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 020c 	and.w	r2, r3, #12
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1eb      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a74:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d210      	bcs.n	8001aa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 0207 	bic.w	r2, r3, #7
 8001a8a:	4922      	ldr	r1, [pc, #136]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e032      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4916      	ldr	r1, [pc, #88]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d009      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	490e      	ldr	r1, [pc, #56]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ae2:	f000 f821 	bl	8001b28 <HAL_RCC_GetSysClockFreq>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	490a      	ldr	r1, [pc, #40]	; (8001b1c <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	5ccb      	ldrb	r3, [r1, r3]
 8001af6:	fa22 f303 	lsr.w	r3, r2, r3
 8001afa:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <HAL_RCC_ClockConfig+0x1cc>)
 8001afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1d0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f904 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40022000 	.word	0x40022000
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	08003fa4 	.word	0x08003fa4
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000004 	.word	0x20000004

08001b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d002      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x30>
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x36>
 8001b56:	e027      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b5a:	613b      	str	r3, [r7, #16]
      break;
 8001b5c:	e027      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	0c9b      	lsrs	r3, r3, #18
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b68:	5cd3      	ldrb	r3, [r2, r3]
 8001b6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d010      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	0c5b      	lsrs	r3, r3, #17
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b8a:	fb03 f202 	mul.w	r2, r3, r2
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e004      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ba0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	613b      	str	r3, [r7, #16]
      break;
 8001ba6:	e002      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001baa:	613b      	str	r3, [r7, #16]
      break;
 8001bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bae:	693b      	ldr	r3, [r7, #16]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	007a1200 	.word	0x007a1200
 8001bc4:	08003fbc 	.word	0x08003fbc
 8001bc8:	08003fcc 	.word	0x08003fcc
 8001bcc:	003d0900 	.word	0x003d0900

08001bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000000 	.word	0x20000000

08001be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001be8:	f7ff fff2 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4903      	ldr	r1, [pc, #12]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08003fb4 	.word	0x08003fb4

08001c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c10:	f7ff ffde 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0adb      	lsrs	r3, r3, #11
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	08003fb4 	.word	0x08003fb4

08001c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <RCC_Delay+0x34>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <RCC_Delay+0x38>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	0a5b      	lsrs	r3, r3, #9
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c50:	bf00      	nop
  }
  while (Delay --);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1e5a      	subs	r2, r3, #1
 8001c56:	60fa      	str	r2, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f9      	bne.n	8001c50 <RCC_Delay+0x1c>
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	10624dd3 	.word	0x10624dd3

08001c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e041      	b.n	8001d06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fee8 	bl	8000a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3304      	adds	r3, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f000 faac 	bl	800220c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e041      	b.n	8001da4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d106      	bne.n	8001d3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f839 	bl	8001dac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	f000 fa5d 	bl	800220c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <HAL_TIM_PWM_Start+0x24>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	bf14      	ite	ne
 8001ddc:	2301      	movne	r3, #1
 8001dde:	2300      	moveq	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e022      	b.n	8001e2a <HAL_TIM_PWM_Start+0x6a>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d109      	bne.n	8001dfe <HAL_TIM_PWM_Start+0x3e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	bf14      	ite	ne
 8001df6:	2301      	movne	r3, #1
 8001df8:	2300      	moveq	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	e015      	b.n	8001e2a <HAL_TIM_PWM_Start+0x6a>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d109      	bne.n	8001e18 <HAL_TIM_PWM_Start+0x58>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	bf14      	ite	ne
 8001e10:	2301      	movne	r3, #1
 8001e12:	2300      	moveq	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e008      	b.n	8001e2a <HAL_TIM_PWM_Start+0x6a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e059      	b.n	8001ee6 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d104      	bne.n	8001e42 <HAL_TIM_PWM_Start+0x82>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e40:	e013      	b.n	8001e6a <HAL_TIM_PWM_Start+0xaa>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d104      	bne.n	8001e52 <HAL_TIM_PWM_Start+0x92>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e50:	e00b      	b.n	8001e6a <HAL_TIM_PWM_Start+0xaa>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d104      	bne.n	8001e62 <HAL_TIM_PWM_Start+0xa2>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e60:	e003      	b.n	8001e6a <HAL_TIM_PWM_Start+0xaa>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2202      	movs	r2, #2
 8001e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	6839      	ldr	r1, [r7, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fc40 	bl	80026f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_TIM_PWM_Start+0x130>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d107      	bne.n	8001e92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <HAL_TIM_PWM_Start+0x130>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d009      	beq.n	8001eb0 <HAL_TIM_PWM_Start+0xf0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea4:	d004      	beq.n	8001eb0 <HAL_TIM_PWM_Start+0xf0>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <HAL_TIM_PWM_Start+0x134>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d111      	bne.n	8001ed4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d010      	beq.n	8001ee4 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed2:	e007      	b.n	8001ee4 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40012c00 	.word	0x40012c00
 8001ef4:	40000400 	.word	0x40000400

08001ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e0ae      	b.n	8002074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	f200 809f 	bhi.w	8002064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f26:	a201      	add	r2, pc, #4	; (adr r2, 8001f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2c:	08001f61 	.word	0x08001f61
 8001f30:	08002065 	.word	0x08002065
 8001f34:	08002065 	.word	0x08002065
 8001f38:	08002065 	.word	0x08002065
 8001f3c:	08001fa1 	.word	0x08001fa1
 8001f40:	08002065 	.word	0x08002065
 8001f44:	08002065 	.word	0x08002065
 8001f48:	08002065 	.word	0x08002065
 8001f4c:	08001fe3 	.word	0x08001fe3
 8001f50:	08002065 	.word	0x08002065
 8001f54:	08002065 	.word	0x08002065
 8001f58:	08002065 	.word	0x08002065
 8001f5c:	08002023 	.word	0x08002023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f9a8 	bl	80022bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0208 	orr.w	r2, r2, #8
 8001f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0204 	bic.w	r2, r2, #4
 8001f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6999      	ldr	r1, [r3, #24]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	619a      	str	r2, [r3, #24]
      break;
 8001f9e:	e064      	b.n	800206a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f9ee 	bl	8002388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6999      	ldr	r1, [r3, #24]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	021a      	lsls	r2, r3, #8
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	619a      	str	r2, [r3, #24]
      break;
 8001fe0:	e043      	b.n	800206a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fa37 	bl	800245c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0208 	orr.w	r2, r2, #8
 8001ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0204 	bic.w	r2, r2, #4
 800200c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69d9      	ldr	r1, [r3, #28]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	61da      	str	r2, [r3, #28]
      break;
 8002020:	e023      	b.n	800206a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fa81 	bl	8002530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800203c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69d9      	ldr	r1, [r3, #28]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	021a      	lsls	r2, r3, #8
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	61da      	str	r2, [r3, #28]
      break;
 8002062:	e002      	b.n	800206a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	75fb      	strb	r3, [r7, #23]
      break;
 8002068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002072:	7dfb      	ldrb	r3, [r7, #23]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_TIM_ConfigClockSource+0x1c>
 8002094:	2302      	movs	r3, #2
 8002096:	e0b4      	b.n	8002202 <HAL_TIM_ConfigClockSource+0x186>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d0:	d03e      	beq.n	8002150 <HAL_TIM_ConfigClockSource+0xd4>
 80020d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d6:	f200 8087 	bhi.w	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 80020da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020de:	f000 8086 	beq.w	80021ee <HAL_TIM_ConfigClockSource+0x172>
 80020e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e6:	d87f      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 80020e8:	2b70      	cmp	r3, #112	; 0x70
 80020ea:	d01a      	beq.n	8002122 <HAL_TIM_ConfigClockSource+0xa6>
 80020ec:	2b70      	cmp	r3, #112	; 0x70
 80020ee:	d87b      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 80020f0:	2b60      	cmp	r3, #96	; 0x60
 80020f2:	d050      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x11a>
 80020f4:	2b60      	cmp	r3, #96	; 0x60
 80020f6:	d877      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 80020f8:	2b50      	cmp	r3, #80	; 0x50
 80020fa:	d03c      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0xfa>
 80020fc:	2b50      	cmp	r3, #80	; 0x50
 80020fe:	d873      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d058      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	d86f      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002108:	2b30      	cmp	r3, #48	; 0x30
 800210a:	d064      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x15a>
 800210c:	2b30      	cmp	r3, #48	; 0x30
 800210e:	d86b      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002110:	2b20      	cmp	r3, #32
 8002112:	d060      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002114:	2b20      	cmp	r3, #32
 8002116:	d867      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002118:	2b00      	cmp	r3, #0
 800211a:	d05c      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x15a>
 800211c:	2b10      	cmp	r3, #16
 800211e:	d05a      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002120:	e062      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002132:	f000 fac2 	bl	80026ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	609a      	str	r2, [r3, #8]
      break;
 800214e:	e04f      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002160:	f000 faab 	bl	80026ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002172:	609a      	str	r2, [r3, #8]
      break;
 8002174:	e03c      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002182:	461a      	mov	r2, r3
 8002184:	f000 fa22 	bl	80025cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2150      	movs	r1, #80	; 0x50
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fa79 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 8002194:	e02c      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021a2:	461a      	mov	r2, r3
 80021a4:	f000 fa40 	bl	8002628 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2160      	movs	r1, #96	; 0x60
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fa69 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 80021b4:	e01c      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c2:	461a      	mov	r2, r3
 80021c4:	f000 fa02 	bl	80025cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2140      	movs	r1, #64	; 0x40
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fa59 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 80021d4:	e00c      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f000 fa50 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 80021e6:	e003      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      break;
 80021ec:	e000      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <TIM_Base_SetConfig+0xa8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d007      	beq.n	8002234 <TIM_Base_SetConfig+0x28>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222a:	d003      	beq.n	8002234 <TIM_Base_SetConfig+0x28>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <TIM_Base_SetConfig+0xac>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d108      	bne.n	8002246 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <TIM_Base_SetConfig+0xa8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <TIM_Base_SetConfig+0x52>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002254:	d003      	beq.n	800225e <TIM_Base_SetConfig+0x52>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <TIM_Base_SetConfig+0xac>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d108      	bne.n	8002270 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <TIM_Base_SetConfig+0xa8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d103      	bne.n	80022a4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	615a      	str	r2, [r3, #20]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40000400 	.word	0x40000400

080022bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f023 0201 	bic.w	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f023 0302 	bic.w	r3, r3, #2
 8002304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <TIM_OC1_SetConfig+0xc8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d10c      	bne.n	8002332 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f023 0308 	bic.w	r3, r3, #8
 800231e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a13      	ldr	r2, [pc, #76]	; (8002384 <TIM_OC1_SetConfig+0xc8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d111      	bne.n	800235e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	621a      	str	r2, [r3, #32]
}
 8002378:	bf00      	nop
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40012c00 	.word	0x40012c00

08002388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f023 0210 	bic.w	r2, r3, #16
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f023 0320 	bic.w	r3, r3, #32
 80023d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <TIM_OC2_SetConfig+0xd0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d10d      	bne.n	8002404 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002402:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a14      	ldr	r2, [pc, #80]	; (8002458 <TIM_OC2_SetConfig+0xd0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d113      	bne.n	8002434 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800241a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	621a      	str	r2, [r3, #32]
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40012c00 	.word	0x40012c00

0800245c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0303 	bic.w	r3, r3, #3
 8002492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a1d      	ldr	r2, [pc, #116]	; (800252c <TIM_OC3_SetConfig+0xd0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10d      	bne.n	80024d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <TIM_OC3_SetConfig+0xd0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d113      	bne.n	8002506 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	621a      	str	r2, [r3, #32]
}
 8002520:	bf00      	nop
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40012c00 	.word	0x40012c00

08002530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800257a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	031b      	lsls	r3, r3, #12
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <TIM_OC4_SetConfig+0x98>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d109      	bne.n	80025a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	019b      	lsls	r3, r3, #6
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	621a      	str	r2, [r3, #32]
}
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40012c00 	.word	0x40012c00

080025cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	f023 0201 	bic.w	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f023 030a 	bic.w	r3, r3, #10
 8002608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	621a      	str	r2, [r3, #32]
}
 800261e:	bf00      	nop
 8002620:	371c      	adds	r7, #28
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f023 0210 	bic.w	r2, r3, #16
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	031b      	lsls	r3, r3, #12
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002664:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	621a      	str	r2, [r3, #32]
}
 800267c:	bf00      	nop
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f043 0307 	orr.w	r3, r3, #7
 80026a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	609a      	str	r2, [r3, #8]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b087      	sub	sp, #28
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	021a      	lsls	r2, r3, #8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	431a      	orrs	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	609a      	str	r2, [r3, #8]
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2201      	movs	r2, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a1a      	ldr	r2, [r3, #32]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	43db      	mvns	r3, r3
 800271a:	401a      	ands	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a1a      	ldr	r2, [r3, #32]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	431a      	orrs	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	621a      	str	r2, [r3, #32]
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002754:	2302      	movs	r3, #2
 8002756:	e041      	b.n	80027dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a4:	d004      	beq.n	80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a10      	ldr	r2, [pc, #64]	; (80027ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d10c      	bne.n	80027ca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40000400 	.word	0x40000400

080027f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e042      	b.n	8002888 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe f974 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2224      	movs	r2, #36	; 0x24
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002832:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 fdc5 	bl	80033c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002848:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002858:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002868:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d16d      	bne.n	800298c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_UART_Transmit+0x2c>
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e066      	b.n	800298e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2221      	movs	r2, #33	; 0x21
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ce:	f7fe fa61 	bl	8000d94 <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	88fa      	ldrh	r2, [r7, #6]
 80028de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	d108      	bne.n	80028fc <HAL_UART_Transmit+0x6c>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d104      	bne.n	80028fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e003      	b.n	8002904 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002904:	e02a      	b.n	800295c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2200      	movs	r2, #0
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fb14 	bl	8002f3e <UART_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e036      	b.n	800298e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10b      	bne.n	800293e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002934:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	3302      	adds	r3, #2
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	e007      	b.n	800294e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	3301      	adds	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1cf      	bne.n	8002906 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2200      	movs	r2, #0
 800296e:	2140      	movs	r1, #64	; 0x40
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fae4 	bl	8002f3e <UART_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e006      	b.n	800298e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	e000      	b.n	800298e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800298c:	2302      	movs	r3, #2
  }
}
 800298e:	4618      	mov	r0, r3
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	4613      	mov	r3, r2
 80029a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d112      	bne.n	80029d6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_UART_Receive_IT+0x26>
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e00b      	b.n	80029d8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	461a      	mov	r2, r3
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fb24 	bl	800301a <UART_Start_Receive_IT>
 80029d2:	4603      	mov	r3, r0
 80029d4:	e000      	b.n	80029d8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
  }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b0ba      	sub	sp, #232	; 0xe8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10f      	bne.n	8002a46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_UART_IRQHandler+0x66>
 8002a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fc01 	bl	8003246 <UART_Receive_IT>
      return;
 8002a44:	e25b      	b.n	8002efe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80de 	beq.w	8002c0c <HAL_UART_IRQHandler+0x22c>
 8002a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d106      	bne.n	8002a6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80d1 	beq.w	8002c0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <HAL_UART_IRQHandler+0xae>
 8002a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_UART_IRQHandler+0xd2>
 8002a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f043 0202 	orr.w	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <HAL_UART_IRQHandler+0xf6>
 8002abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f043 0204 	orr.w	r2, r3, #4
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d011      	beq.n	8002b06 <HAL_UART_IRQHandler+0x126>
 8002ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f043 0208 	orr.w	r2, r3, #8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 81f2 	beq.w	8002ef4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_UART_IRQHandler+0x14e>
 8002b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fb8c 	bl	8003246 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf14      	ite	ne
 8002b3c:	2301      	movne	r3, #1
 8002b3e:	2300      	moveq	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <HAL_UART_IRQHandler+0x17a>
 8002b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d04f      	beq.n	8002bfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fa96 	bl	800308c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d041      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3314      	adds	r3, #20
 8002b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b7c:	e853 3f00 	ldrex	r3, [r3]
 8002b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3314      	adds	r3, #20
 8002b96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ba6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1d9      	bne.n	8002b6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d013      	beq.n	8002bea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	4a7e      	ldr	r2, [pc, #504]	; (8002dc0 <HAL_UART_IRQHandler+0x3e0>)
 8002bc8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fa32 	bl	8001038 <HAL_DMA_Abort_IT>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002be4:	4610      	mov	r0, r2
 8002be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be8:	e00e      	b.n	8002c08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f993 	bl	8002f16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf0:	e00a      	b.n	8002c08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f98f 	bl	8002f16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	e006      	b.n	8002c08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f98b 	bl	8002f16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002c06:	e175      	b.n	8002ef4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	bf00      	nop
    return;
 8002c0a:	e173      	b.n	8002ef4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	f040 814f 	bne.w	8002eb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8148 	beq.w	8002eb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8141 	beq.w	8002eb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80b6 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8145 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c76:	429a      	cmp	r2, r3
 8002c78:	f080 813e 	bcs.w	8002ef8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	f000 8088 	beq.w	8002da0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	330c      	adds	r3, #12
 8002c96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c9e:	e853 3f00 	ldrex	r3, [r3]
 8002ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002caa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	330c      	adds	r3, #12
 8002cb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002cbc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ccc:	e841 2300 	strex	r3, r2, [r1]
 8002cd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1d9      	bne.n	8002c90 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3314      	adds	r3, #20
 8002ce2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3314      	adds	r3, #20
 8002cfc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d00:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d06:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e1      	bne.n	8002cdc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3314      	adds	r3, #20
 8002d1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3314      	adds	r3, #20
 8002d38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d3c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d44:	e841 2300 	strex	r3, r2, [r1]
 8002d48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e3      	bne.n	8002d18 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d70:	f023 0310 	bic.w	r3, r3, #16
 8002d74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d82:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d84:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e3      	bne.n	8002d5e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe f911 	bl	8000fc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4619      	mov	r1, r3
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f8b6 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dbc:	e09c      	b.n	8002ef8 <HAL_UART_IRQHandler+0x518>
 8002dbe:	bf00      	nop
 8002dc0:	08003151 	.word	0x08003151
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 808e 	beq.w	8002efc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8089 	beq.w	8002efc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	e853 3f00 	ldrex	r3, [r3]
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	330c      	adds	r3, #12
 8002e0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e0e:	647a      	str	r2, [r7, #68]	; 0x44
 8002e10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e16:	e841 2300 	strex	r3, r2, [r1]
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1e3      	bne.n	8002dea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3314      	adds	r3, #20
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	623b      	str	r3, [r7, #32]
   return(result);
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3314      	adds	r3, #20
 8002e42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e46:	633a      	str	r2, [r7, #48]	; 0x30
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e3      	bne.n	8002e22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	e853 3f00 	ldrex	r3, [r3]
 8002e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0310 	bic.w	r3, r3, #16
 8002e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	330c      	adds	r3, #12
 8002e88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e8c:	61fa      	str	r2, [r7, #28]
 8002e8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	69b9      	ldr	r1, [r7, #24]
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	617b      	str	r3, [r7, #20]
   return(result);
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e3      	bne.n	8002e68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ea6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f83b 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002eb2:	e023      	b.n	8002efc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x4f4>
 8002ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f953 	bl	8003178 <UART_Transmit_IT>
    return;
 8002ed2:	e014      	b.n	8002efe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00e      	beq.n	8002efe <HAL_UART_IRQHandler+0x51e>
 8002ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f992 	bl	8003216 <UART_EndTransmit_IT>
    return;
 8002ef2:	e004      	b.n	8002efe <HAL_UART_IRQHandler+0x51e>
    return;
 8002ef4:	bf00      	nop
 8002ef6:	e002      	b.n	8002efe <HAL_UART_IRQHandler+0x51e>
      return;
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <HAL_UART_IRQHandler+0x51e>
      return;
 8002efc:	bf00      	nop
  }
}
 8002efe:	37e8      	adds	r7, #232	; 0xe8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b090      	sub	sp, #64	; 0x40
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4e:	e050      	b.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f56:	d04c      	beq.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f5e:	f7fd ff19 	bl	8000d94 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d241      	bcs.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f8e:	637a      	str	r2, [r7, #52]	; 0x34
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e5      	bne.n	8002f6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fc2:	623a      	str	r2, [r7, #32]
 8002fc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	69f9      	ldr	r1, [r7, #28]
 8002fc8:	6a3a      	ldr	r2, [r7, #32]
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e5      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e00f      	b.n	8003012 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	429a      	cmp	r2, r3
 800300e:	d09f      	beq.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3740      	adds	r7, #64	; 0x40
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	4613      	mov	r3, r2
 8003026:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	88fa      	ldrh	r2, [r7, #6]
 8003032:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2222      	movs	r2, #34	; 0x22
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800305e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0220 	orr.w	r2, r2, #32
 800307e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800308c:	b480      	push	{r7}
 800308e:	b095      	sub	sp, #84	; 0x54
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	330c      	adds	r3, #12
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	e853 3f00 	ldrex	r3, [r3]
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030b4:	643a      	str	r2, [r7, #64]	; 0x40
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030bc:	e841 2300 	strex	r3, r2, [r1]
 80030c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e5      	bne.n	8003094 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3314      	adds	r3, #20
 80030ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	e853 3f00 	ldrex	r3, [r3]
 80030d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3314      	adds	r3, #20
 80030e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e5      	bne.n	80030c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	2b01      	cmp	r3, #1
 8003102:	d119      	bne.n	8003138 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	330c      	adds	r3, #12
 800310a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	e853 3f00 	ldrex	r3, [r3]
 8003112:	60bb      	str	r3, [r7, #8]
   return(result);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f023 0310 	bic.w	r3, r3, #16
 800311a:	647b      	str	r3, [r7, #68]	; 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003124:	61ba      	str	r2, [r7, #24]
 8003126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	6979      	ldr	r1, [r7, #20]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	e841 2300 	strex	r3, r2, [r1]
 8003130:	613b      	str	r3, [r7, #16]
   return(result);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e5      	bne.n	8003104 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003146:	bf00      	nop
 8003148:	3754      	adds	r7, #84	; 0x54
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f7ff fed3 	bl	8002f16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b21      	cmp	r3, #33	; 0x21
 800318a:	d13e      	bne.n	800320a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003194:	d114      	bne.n	80031c0 <UART_Transmit_IT+0x48>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d110      	bne.n	80031c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	1c9a      	adds	r2, r3, #2
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	621a      	str	r2, [r3, #32]
 80031be:	e008      	b.n	80031d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	1c59      	adds	r1, r3, #1
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6211      	str	r1, [r2, #32]
 80031ca:	781a      	ldrb	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29b      	uxth	r3, r3
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4619      	mov	r1, r3
 80031e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10f      	bne.n	8003206 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003204:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff fe64 	bl	8002f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b08c      	sub	sp, #48	; 0x30
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b22      	cmp	r3, #34	; 0x22
 8003258:	f040 80ae 	bne.w	80033b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003264:	d117      	bne.n	8003296 <UART_Receive_IT+0x50>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d113      	bne.n	8003296 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800326e:	2300      	movs	r3, #0
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	b29b      	uxth	r3, r3
 8003280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003284:	b29a      	uxth	r2, r3
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	1c9a      	adds	r2, r3, #2
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
 8003294:	e026      	b.n	80032e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800329c:	2300      	movs	r3, #0
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a8:	d007      	beq.n	80032ba <UART_Receive_IT+0x74>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <UART_Receive_IT+0x82>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e008      	b.n	80032da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4619      	mov	r1, r3
 80032f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d15d      	bne.n	80033b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0220 	bic.w	r2, r2, #32
 8003306:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	2b01      	cmp	r3, #1
 800333c:	d135      	bne.n	80033aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	330c      	adds	r3, #12
 800334a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	e853 3f00 	ldrex	r3, [r3]
 8003352:	613b      	str	r3, [r7, #16]
   return(result);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f023 0310 	bic.w	r3, r3, #16
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	330c      	adds	r3, #12
 8003362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003364:	623a      	str	r2, [r7, #32]
 8003366:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003368:	69f9      	ldr	r1, [r7, #28]
 800336a:	6a3a      	ldr	r2, [r7, #32]
 800336c:	e841 2300 	strex	r3, r2, [r1]
 8003370:	61bb      	str	r3, [r7, #24]
   return(result);
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1e5      	bne.n	8003344 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b10      	cmp	r3, #16
 8003384:	d10a      	bne.n	800339c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033a0:	4619      	mov	r1, r3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fdc0 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
 80033a8:	e002      	b.n	80033b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fd f954 	bl	8000658 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	e002      	b.n	80033ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e000      	b.n	80033ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
  }
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3730      	adds	r7, #48	; 0x30
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033fe:	f023 030c 	bic.w	r3, r3, #12
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	430b      	orrs	r3, r1
 800340a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699a      	ldr	r2, [r3, #24]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2c      	ldr	r2, [pc, #176]	; (80034d8 <UART_SetConfig+0x114>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d103      	bne.n	8003434 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800342c:	f7fe fbee 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	e002      	b.n	800343a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003434:	f7fe fbd6 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8003438:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009a      	lsls	r2, r3, #2
 8003444:	441a      	add	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003450:	4a22      	ldr	r2, [pc, #136]	; (80034dc <UART_SetConfig+0x118>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	0119      	lsls	r1, r3, #4
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	009a      	lsls	r2, r3, #2
 8003464:	441a      	add	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003470:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <UART_SetConfig+0x118>)
 8003472:	fba3 0302 	umull	r0, r3, r3, r2
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2064      	movs	r0, #100	; 0x64
 800347a:	fb00 f303 	mul.w	r3, r0, r3
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	3332      	adds	r3, #50	; 0x32
 8003484:	4a15      	ldr	r2, [pc, #84]	; (80034dc <UART_SetConfig+0x118>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003490:	4419      	add	r1, r3
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	009a      	lsls	r2, r3, #2
 800349c:	441a      	add	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <UART_SetConfig+0x118>)
 80034aa:	fba3 0302 	umull	r0, r3, r3, r2
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2064      	movs	r0, #100	; 0x64
 80034b2:	fb00 f303 	mul.w	r3, r0, r3
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	3332      	adds	r3, #50	; 0x32
 80034bc:	4a07      	ldr	r2, [pc, #28]	; (80034dc <UART_SetConfig+0x118>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	f003 020f 	and.w	r2, r3, #15
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	440a      	add	r2, r1
 80034ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40013800 	.word	0x40013800
 80034dc:	51eb851f 	.word	0x51eb851f

080034e0 <atoi>:
 80034e0:	220a      	movs	r2, #10
 80034e2:	2100      	movs	r1, #0
 80034e4:	f000 b87e 	b.w	80035e4 <strtol>

080034e8 <_strtol_l.constprop.0>:
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ee:	4686      	mov	lr, r0
 80034f0:	4690      	mov	r8, r2
 80034f2:	d001      	beq.n	80034f8 <_strtol_l.constprop.0+0x10>
 80034f4:	2b24      	cmp	r3, #36	; 0x24
 80034f6:	d906      	bls.n	8003506 <_strtol_l.constprop.0+0x1e>
 80034f8:	f000 f8a6 	bl	8003648 <__errno>
 80034fc:	2316      	movs	r3, #22
 80034fe:	6003      	str	r3, [r0, #0]
 8003500:	2000      	movs	r0, #0
 8003502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003506:	460d      	mov	r5, r1
 8003508:	4835      	ldr	r0, [pc, #212]	; (80035e0 <_strtol_l.constprop.0+0xf8>)
 800350a:	462a      	mov	r2, r5
 800350c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003510:	5d06      	ldrb	r6, [r0, r4]
 8003512:	f016 0608 	ands.w	r6, r6, #8
 8003516:	d1f8      	bne.n	800350a <_strtol_l.constprop.0+0x22>
 8003518:	2c2d      	cmp	r4, #45	; 0x2d
 800351a:	d12e      	bne.n	800357a <_strtol_l.constprop.0+0x92>
 800351c:	2601      	movs	r6, #1
 800351e:	782c      	ldrb	r4, [r5, #0]
 8003520:	1c95      	adds	r5, r2, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d057      	beq.n	80035d6 <_strtol_l.constprop.0+0xee>
 8003526:	2b10      	cmp	r3, #16
 8003528:	d109      	bne.n	800353e <_strtol_l.constprop.0+0x56>
 800352a:	2c30      	cmp	r4, #48	; 0x30
 800352c:	d107      	bne.n	800353e <_strtol_l.constprop.0+0x56>
 800352e:	782a      	ldrb	r2, [r5, #0]
 8003530:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003534:	2a58      	cmp	r2, #88	; 0x58
 8003536:	d149      	bne.n	80035cc <_strtol_l.constprop.0+0xe4>
 8003538:	2310      	movs	r3, #16
 800353a:	786c      	ldrb	r4, [r5, #1]
 800353c:	3502      	adds	r5, #2
 800353e:	2200      	movs	r2, #0
 8003540:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8003544:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003548:	fbbc f9f3 	udiv	r9, ip, r3
 800354c:	4610      	mov	r0, r2
 800354e:	fb03 ca19 	mls	sl, r3, r9, ip
 8003552:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003556:	2f09      	cmp	r7, #9
 8003558:	d814      	bhi.n	8003584 <_strtol_l.constprop.0+0x9c>
 800355a:	463c      	mov	r4, r7
 800355c:	42a3      	cmp	r3, r4
 800355e:	dd20      	ble.n	80035a2 <_strtol_l.constprop.0+0xba>
 8003560:	1c57      	adds	r7, r2, #1
 8003562:	d007      	beq.n	8003574 <_strtol_l.constprop.0+0x8c>
 8003564:	4581      	cmp	r9, r0
 8003566:	d319      	bcc.n	800359c <_strtol_l.constprop.0+0xb4>
 8003568:	d101      	bne.n	800356e <_strtol_l.constprop.0+0x86>
 800356a:	45a2      	cmp	sl, r4
 800356c:	db16      	blt.n	800359c <_strtol_l.constprop.0+0xb4>
 800356e:	2201      	movs	r2, #1
 8003570:	fb00 4003 	mla	r0, r0, r3, r4
 8003574:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003578:	e7eb      	b.n	8003552 <_strtol_l.constprop.0+0x6a>
 800357a:	2c2b      	cmp	r4, #43	; 0x2b
 800357c:	bf04      	itt	eq
 800357e:	782c      	ldrbeq	r4, [r5, #0]
 8003580:	1c95      	addeq	r5, r2, #2
 8003582:	e7ce      	b.n	8003522 <_strtol_l.constprop.0+0x3a>
 8003584:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003588:	2f19      	cmp	r7, #25
 800358a:	d801      	bhi.n	8003590 <_strtol_l.constprop.0+0xa8>
 800358c:	3c37      	subs	r4, #55	; 0x37
 800358e:	e7e5      	b.n	800355c <_strtol_l.constprop.0+0x74>
 8003590:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003594:	2f19      	cmp	r7, #25
 8003596:	d804      	bhi.n	80035a2 <_strtol_l.constprop.0+0xba>
 8003598:	3c57      	subs	r4, #87	; 0x57
 800359a:	e7df      	b.n	800355c <_strtol_l.constprop.0+0x74>
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	e7e8      	b.n	8003574 <_strtol_l.constprop.0+0x8c>
 80035a2:	1c53      	adds	r3, r2, #1
 80035a4:	d108      	bne.n	80035b8 <_strtol_l.constprop.0+0xd0>
 80035a6:	2322      	movs	r3, #34	; 0x22
 80035a8:	4660      	mov	r0, ip
 80035aa:	f8ce 3000 	str.w	r3, [lr]
 80035ae:	f1b8 0f00 	cmp.w	r8, #0
 80035b2:	d0a6      	beq.n	8003502 <_strtol_l.constprop.0+0x1a>
 80035b4:	1e69      	subs	r1, r5, #1
 80035b6:	e006      	b.n	80035c6 <_strtol_l.constprop.0+0xde>
 80035b8:	b106      	cbz	r6, 80035bc <_strtol_l.constprop.0+0xd4>
 80035ba:	4240      	negs	r0, r0
 80035bc:	f1b8 0f00 	cmp.w	r8, #0
 80035c0:	d09f      	beq.n	8003502 <_strtol_l.constprop.0+0x1a>
 80035c2:	2a00      	cmp	r2, #0
 80035c4:	d1f6      	bne.n	80035b4 <_strtol_l.constprop.0+0xcc>
 80035c6:	f8c8 1000 	str.w	r1, [r8]
 80035ca:	e79a      	b.n	8003502 <_strtol_l.constprop.0+0x1a>
 80035cc:	2430      	movs	r4, #48	; 0x30
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1b5      	bne.n	800353e <_strtol_l.constprop.0+0x56>
 80035d2:	2308      	movs	r3, #8
 80035d4:	e7b3      	b.n	800353e <_strtol_l.constprop.0+0x56>
 80035d6:	2c30      	cmp	r4, #48	; 0x30
 80035d8:	d0a9      	beq.n	800352e <_strtol_l.constprop.0+0x46>
 80035da:	230a      	movs	r3, #10
 80035dc:	e7af      	b.n	800353e <_strtol_l.constprop.0+0x56>
 80035de:	bf00      	nop
 80035e0:	08003fcf 	.word	0x08003fcf

080035e4 <strtol>:
 80035e4:	4613      	mov	r3, r2
 80035e6:	460a      	mov	r2, r1
 80035e8:	4601      	mov	r1, r0
 80035ea:	4802      	ldr	r0, [pc, #8]	; (80035f4 <strtol+0x10>)
 80035ec:	6800      	ldr	r0, [r0, #0]
 80035ee:	f7ff bf7b 	b.w	80034e8 <_strtol_l.constprop.0>
 80035f2:	bf00      	nop
 80035f4:	20000058 	.word	0x20000058

080035f8 <siprintf>:
 80035f8:	b40e      	push	{r1, r2, r3}
 80035fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035fe:	b500      	push	{lr}
 8003600:	b09c      	sub	sp, #112	; 0x70
 8003602:	ab1d      	add	r3, sp, #116	; 0x74
 8003604:	9002      	str	r0, [sp, #8]
 8003606:	9006      	str	r0, [sp, #24]
 8003608:	9107      	str	r1, [sp, #28]
 800360a:	9104      	str	r1, [sp, #16]
 800360c:	4808      	ldr	r0, [pc, #32]	; (8003630 <siprintf+0x38>)
 800360e:	4909      	ldr	r1, [pc, #36]	; (8003634 <siprintf+0x3c>)
 8003610:	f853 2b04 	ldr.w	r2, [r3], #4
 8003614:	9105      	str	r1, [sp, #20]
 8003616:	6800      	ldr	r0, [r0, #0]
 8003618:	a902      	add	r1, sp, #8
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	f000 f98e 	bl	800393c <_svfiprintf_r>
 8003620:	2200      	movs	r2, #0
 8003622:	9b02      	ldr	r3, [sp, #8]
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	b01c      	add	sp, #112	; 0x70
 8003628:	f85d eb04 	ldr.w	lr, [sp], #4
 800362c:	b003      	add	sp, #12
 800362e:	4770      	bx	lr
 8003630:	20000058 	.word	0x20000058
 8003634:	ffff0208 	.word	0xffff0208

08003638 <memset>:
 8003638:	4603      	mov	r3, r0
 800363a:	4402      	add	r2, r0
 800363c:	4293      	cmp	r3, r2
 800363e:	d100      	bne.n	8003642 <memset+0xa>
 8003640:	4770      	bx	lr
 8003642:	f803 1b01 	strb.w	r1, [r3], #1
 8003646:	e7f9      	b.n	800363c <memset+0x4>

08003648 <__errno>:
 8003648:	4b01      	ldr	r3, [pc, #4]	; (8003650 <__errno+0x8>)
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000058 	.word	0x20000058

08003654 <__libc_init_array>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	2600      	movs	r6, #0
 8003658:	4d0c      	ldr	r5, [pc, #48]	; (800368c <__libc_init_array+0x38>)
 800365a:	4c0d      	ldr	r4, [pc, #52]	; (8003690 <__libc_init_array+0x3c>)
 800365c:	1b64      	subs	r4, r4, r5
 800365e:	10a4      	asrs	r4, r4, #2
 8003660:	42a6      	cmp	r6, r4
 8003662:	d109      	bne.n	8003678 <__libc_init_array+0x24>
 8003664:	f000 fc7a 	bl	8003f5c <_init>
 8003668:	2600      	movs	r6, #0
 800366a:	4d0a      	ldr	r5, [pc, #40]	; (8003694 <__libc_init_array+0x40>)
 800366c:	4c0a      	ldr	r4, [pc, #40]	; (8003698 <__libc_init_array+0x44>)
 800366e:	1b64      	subs	r4, r4, r5
 8003670:	10a4      	asrs	r4, r4, #2
 8003672:	42a6      	cmp	r6, r4
 8003674:	d105      	bne.n	8003682 <__libc_init_array+0x2e>
 8003676:	bd70      	pop	{r4, r5, r6, pc}
 8003678:	f855 3b04 	ldr.w	r3, [r5], #4
 800367c:	4798      	blx	r3
 800367e:	3601      	adds	r6, #1
 8003680:	e7ee      	b.n	8003660 <__libc_init_array+0xc>
 8003682:	f855 3b04 	ldr.w	r3, [r5], #4
 8003686:	4798      	blx	r3
 8003688:	3601      	adds	r6, #1
 800368a:	e7f2      	b.n	8003672 <__libc_init_array+0x1e>
 800368c:	08004104 	.word	0x08004104
 8003690:	08004104 	.word	0x08004104
 8003694:	08004104 	.word	0x08004104
 8003698:	08004108 	.word	0x08004108

0800369c <__retarget_lock_acquire_recursive>:
 800369c:	4770      	bx	lr

0800369e <__retarget_lock_release_recursive>:
 800369e:	4770      	bx	lr

080036a0 <_free_r>:
 80036a0:	b538      	push	{r3, r4, r5, lr}
 80036a2:	4605      	mov	r5, r0
 80036a4:	2900      	cmp	r1, #0
 80036a6:	d040      	beq.n	800372a <_free_r+0x8a>
 80036a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036ac:	1f0c      	subs	r4, r1, #4
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bfb8      	it	lt
 80036b2:	18e4      	addlt	r4, r4, r3
 80036b4:	f000 f8dc 	bl	8003870 <__malloc_lock>
 80036b8:	4a1c      	ldr	r2, [pc, #112]	; (800372c <_free_r+0x8c>)
 80036ba:	6813      	ldr	r3, [r2, #0]
 80036bc:	b933      	cbnz	r3, 80036cc <_free_r+0x2c>
 80036be:	6063      	str	r3, [r4, #4]
 80036c0:	6014      	str	r4, [r2, #0]
 80036c2:	4628      	mov	r0, r5
 80036c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036c8:	f000 b8d8 	b.w	800387c <__malloc_unlock>
 80036cc:	42a3      	cmp	r3, r4
 80036ce:	d908      	bls.n	80036e2 <_free_r+0x42>
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	1821      	adds	r1, r4, r0
 80036d4:	428b      	cmp	r3, r1
 80036d6:	bf01      	itttt	eq
 80036d8:	6819      	ldreq	r1, [r3, #0]
 80036da:	685b      	ldreq	r3, [r3, #4]
 80036dc:	1809      	addeq	r1, r1, r0
 80036de:	6021      	streq	r1, [r4, #0]
 80036e0:	e7ed      	b.n	80036be <_free_r+0x1e>
 80036e2:	461a      	mov	r2, r3
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	b10b      	cbz	r3, 80036ec <_free_r+0x4c>
 80036e8:	42a3      	cmp	r3, r4
 80036ea:	d9fa      	bls.n	80036e2 <_free_r+0x42>
 80036ec:	6811      	ldr	r1, [r2, #0]
 80036ee:	1850      	adds	r0, r2, r1
 80036f0:	42a0      	cmp	r0, r4
 80036f2:	d10b      	bne.n	800370c <_free_r+0x6c>
 80036f4:	6820      	ldr	r0, [r4, #0]
 80036f6:	4401      	add	r1, r0
 80036f8:	1850      	adds	r0, r2, r1
 80036fa:	4283      	cmp	r3, r0
 80036fc:	6011      	str	r1, [r2, #0]
 80036fe:	d1e0      	bne.n	80036c2 <_free_r+0x22>
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4408      	add	r0, r1
 8003706:	6010      	str	r0, [r2, #0]
 8003708:	6053      	str	r3, [r2, #4]
 800370a:	e7da      	b.n	80036c2 <_free_r+0x22>
 800370c:	d902      	bls.n	8003714 <_free_r+0x74>
 800370e:	230c      	movs	r3, #12
 8003710:	602b      	str	r3, [r5, #0]
 8003712:	e7d6      	b.n	80036c2 <_free_r+0x22>
 8003714:	6820      	ldr	r0, [r4, #0]
 8003716:	1821      	adds	r1, r4, r0
 8003718:	428b      	cmp	r3, r1
 800371a:	bf01      	itttt	eq
 800371c:	6819      	ldreq	r1, [r3, #0]
 800371e:	685b      	ldreq	r3, [r3, #4]
 8003720:	1809      	addeq	r1, r1, r0
 8003722:	6021      	streq	r1, [r4, #0]
 8003724:	6063      	str	r3, [r4, #4]
 8003726:	6054      	str	r4, [r2, #4]
 8003728:	e7cb      	b.n	80036c2 <_free_r+0x22>
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	20000280 	.word	0x20000280

08003730 <sbrk_aligned>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4e0e      	ldr	r6, [pc, #56]	; (800376c <sbrk_aligned+0x3c>)
 8003734:	460c      	mov	r4, r1
 8003736:	6831      	ldr	r1, [r6, #0]
 8003738:	4605      	mov	r5, r0
 800373a:	b911      	cbnz	r1, 8003742 <sbrk_aligned+0x12>
 800373c:	f000 fbaa 	bl	8003e94 <_sbrk_r>
 8003740:	6030      	str	r0, [r6, #0]
 8003742:	4621      	mov	r1, r4
 8003744:	4628      	mov	r0, r5
 8003746:	f000 fba5 	bl	8003e94 <_sbrk_r>
 800374a:	1c43      	adds	r3, r0, #1
 800374c:	d00a      	beq.n	8003764 <sbrk_aligned+0x34>
 800374e:	1cc4      	adds	r4, r0, #3
 8003750:	f024 0403 	bic.w	r4, r4, #3
 8003754:	42a0      	cmp	r0, r4
 8003756:	d007      	beq.n	8003768 <sbrk_aligned+0x38>
 8003758:	1a21      	subs	r1, r4, r0
 800375a:	4628      	mov	r0, r5
 800375c:	f000 fb9a 	bl	8003e94 <_sbrk_r>
 8003760:	3001      	adds	r0, #1
 8003762:	d101      	bne.n	8003768 <sbrk_aligned+0x38>
 8003764:	f04f 34ff 	mov.w	r4, #4294967295
 8003768:	4620      	mov	r0, r4
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	20000284 	.word	0x20000284

08003770 <_malloc_r>:
 8003770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003774:	1ccd      	adds	r5, r1, #3
 8003776:	f025 0503 	bic.w	r5, r5, #3
 800377a:	3508      	adds	r5, #8
 800377c:	2d0c      	cmp	r5, #12
 800377e:	bf38      	it	cc
 8003780:	250c      	movcc	r5, #12
 8003782:	2d00      	cmp	r5, #0
 8003784:	4607      	mov	r7, r0
 8003786:	db01      	blt.n	800378c <_malloc_r+0x1c>
 8003788:	42a9      	cmp	r1, r5
 800378a:	d905      	bls.n	8003798 <_malloc_r+0x28>
 800378c:	230c      	movs	r3, #12
 800378e:	2600      	movs	r6, #0
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4630      	mov	r0, r6
 8003794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003798:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800386c <_malloc_r+0xfc>
 800379c:	f000 f868 	bl	8003870 <__malloc_lock>
 80037a0:	f8d8 3000 	ldr.w	r3, [r8]
 80037a4:	461c      	mov	r4, r3
 80037a6:	bb5c      	cbnz	r4, 8003800 <_malloc_r+0x90>
 80037a8:	4629      	mov	r1, r5
 80037aa:	4638      	mov	r0, r7
 80037ac:	f7ff ffc0 	bl	8003730 <sbrk_aligned>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	4604      	mov	r4, r0
 80037b4:	d155      	bne.n	8003862 <_malloc_r+0xf2>
 80037b6:	f8d8 4000 	ldr.w	r4, [r8]
 80037ba:	4626      	mov	r6, r4
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d145      	bne.n	800384c <_malloc_r+0xdc>
 80037c0:	2c00      	cmp	r4, #0
 80037c2:	d048      	beq.n	8003856 <_malloc_r+0xe6>
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	4631      	mov	r1, r6
 80037c8:	4638      	mov	r0, r7
 80037ca:	eb04 0903 	add.w	r9, r4, r3
 80037ce:	f000 fb61 	bl	8003e94 <_sbrk_r>
 80037d2:	4581      	cmp	r9, r0
 80037d4:	d13f      	bne.n	8003856 <_malloc_r+0xe6>
 80037d6:	6821      	ldr	r1, [r4, #0]
 80037d8:	4638      	mov	r0, r7
 80037da:	1a6d      	subs	r5, r5, r1
 80037dc:	4629      	mov	r1, r5
 80037de:	f7ff ffa7 	bl	8003730 <sbrk_aligned>
 80037e2:	3001      	adds	r0, #1
 80037e4:	d037      	beq.n	8003856 <_malloc_r+0xe6>
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	442b      	add	r3, r5
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	f8d8 3000 	ldr.w	r3, [r8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d038      	beq.n	8003866 <_malloc_r+0xf6>
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	42a2      	cmp	r2, r4
 80037f8:	d12b      	bne.n	8003852 <_malloc_r+0xe2>
 80037fa:	2200      	movs	r2, #0
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	e00f      	b.n	8003820 <_malloc_r+0xb0>
 8003800:	6822      	ldr	r2, [r4, #0]
 8003802:	1b52      	subs	r2, r2, r5
 8003804:	d41f      	bmi.n	8003846 <_malloc_r+0xd6>
 8003806:	2a0b      	cmp	r2, #11
 8003808:	d917      	bls.n	800383a <_malloc_r+0xca>
 800380a:	1961      	adds	r1, r4, r5
 800380c:	42a3      	cmp	r3, r4
 800380e:	6025      	str	r5, [r4, #0]
 8003810:	bf18      	it	ne
 8003812:	6059      	strne	r1, [r3, #4]
 8003814:	6863      	ldr	r3, [r4, #4]
 8003816:	bf08      	it	eq
 8003818:	f8c8 1000 	streq.w	r1, [r8]
 800381c:	5162      	str	r2, [r4, r5]
 800381e:	604b      	str	r3, [r1, #4]
 8003820:	4638      	mov	r0, r7
 8003822:	f104 060b 	add.w	r6, r4, #11
 8003826:	f000 f829 	bl	800387c <__malloc_unlock>
 800382a:	f026 0607 	bic.w	r6, r6, #7
 800382e:	1d23      	adds	r3, r4, #4
 8003830:	1af2      	subs	r2, r6, r3
 8003832:	d0ae      	beq.n	8003792 <_malloc_r+0x22>
 8003834:	1b9b      	subs	r3, r3, r6
 8003836:	50a3      	str	r3, [r4, r2]
 8003838:	e7ab      	b.n	8003792 <_malloc_r+0x22>
 800383a:	42a3      	cmp	r3, r4
 800383c:	6862      	ldr	r2, [r4, #4]
 800383e:	d1dd      	bne.n	80037fc <_malloc_r+0x8c>
 8003840:	f8c8 2000 	str.w	r2, [r8]
 8003844:	e7ec      	b.n	8003820 <_malloc_r+0xb0>
 8003846:	4623      	mov	r3, r4
 8003848:	6864      	ldr	r4, [r4, #4]
 800384a:	e7ac      	b.n	80037a6 <_malloc_r+0x36>
 800384c:	4634      	mov	r4, r6
 800384e:	6876      	ldr	r6, [r6, #4]
 8003850:	e7b4      	b.n	80037bc <_malloc_r+0x4c>
 8003852:	4613      	mov	r3, r2
 8003854:	e7cc      	b.n	80037f0 <_malloc_r+0x80>
 8003856:	230c      	movs	r3, #12
 8003858:	4638      	mov	r0, r7
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	f000 f80e 	bl	800387c <__malloc_unlock>
 8003860:	e797      	b.n	8003792 <_malloc_r+0x22>
 8003862:	6025      	str	r5, [r4, #0]
 8003864:	e7dc      	b.n	8003820 <_malloc_r+0xb0>
 8003866:	605b      	str	r3, [r3, #4]
 8003868:	deff      	udf	#255	; 0xff
 800386a:	bf00      	nop
 800386c:	20000280 	.word	0x20000280

08003870 <__malloc_lock>:
 8003870:	4801      	ldr	r0, [pc, #4]	; (8003878 <__malloc_lock+0x8>)
 8003872:	f7ff bf13 	b.w	800369c <__retarget_lock_acquire_recursive>
 8003876:	bf00      	nop
 8003878:	2000027c 	.word	0x2000027c

0800387c <__malloc_unlock>:
 800387c:	4801      	ldr	r0, [pc, #4]	; (8003884 <__malloc_unlock+0x8>)
 800387e:	f7ff bf0e 	b.w	800369e <__retarget_lock_release_recursive>
 8003882:	bf00      	nop
 8003884:	2000027c 	.word	0x2000027c

08003888 <__ssputs_r>:
 8003888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800388c:	461f      	mov	r7, r3
 800388e:	688e      	ldr	r6, [r1, #8]
 8003890:	4682      	mov	sl, r0
 8003892:	42be      	cmp	r6, r7
 8003894:	460c      	mov	r4, r1
 8003896:	4690      	mov	r8, r2
 8003898:	680b      	ldr	r3, [r1, #0]
 800389a:	d82c      	bhi.n	80038f6 <__ssputs_r+0x6e>
 800389c:	898a      	ldrh	r2, [r1, #12]
 800389e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038a2:	d026      	beq.n	80038f2 <__ssputs_r+0x6a>
 80038a4:	6965      	ldr	r5, [r4, #20]
 80038a6:	6909      	ldr	r1, [r1, #16]
 80038a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038ac:	eba3 0901 	sub.w	r9, r3, r1
 80038b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038b4:	1c7b      	adds	r3, r7, #1
 80038b6:	444b      	add	r3, r9
 80038b8:	106d      	asrs	r5, r5, #1
 80038ba:	429d      	cmp	r5, r3
 80038bc:	bf38      	it	cc
 80038be:	461d      	movcc	r5, r3
 80038c0:	0553      	lsls	r3, r2, #21
 80038c2:	d527      	bpl.n	8003914 <__ssputs_r+0x8c>
 80038c4:	4629      	mov	r1, r5
 80038c6:	f7ff ff53 	bl	8003770 <_malloc_r>
 80038ca:	4606      	mov	r6, r0
 80038cc:	b360      	cbz	r0, 8003928 <__ssputs_r+0xa0>
 80038ce:	464a      	mov	r2, r9
 80038d0:	6921      	ldr	r1, [r4, #16]
 80038d2:	f000 fafd 	bl	8003ed0 <memcpy>
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e0:	81a3      	strh	r3, [r4, #12]
 80038e2:	6126      	str	r6, [r4, #16]
 80038e4:	444e      	add	r6, r9
 80038e6:	6026      	str	r6, [r4, #0]
 80038e8:	463e      	mov	r6, r7
 80038ea:	6165      	str	r5, [r4, #20]
 80038ec:	eba5 0509 	sub.w	r5, r5, r9
 80038f0:	60a5      	str	r5, [r4, #8]
 80038f2:	42be      	cmp	r6, r7
 80038f4:	d900      	bls.n	80038f8 <__ssputs_r+0x70>
 80038f6:	463e      	mov	r6, r7
 80038f8:	4632      	mov	r2, r6
 80038fa:	4641      	mov	r1, r8
 80038fc:	6820      	ldr	r0, [r4, #0]
 80038fe:	f000 faaf 	bl	8003e60 <memmove>
 8003902:	2000      	movs	r0, #0
 8003904:	68a3      	ldr	r3, [r4, #8]
 8003906:	1b9b      	subs	r3, r3, r6
 8003908:	60a3      	str	r3, [r4, #8]
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	4433      	add	r3, r6
 800390e:	6023      	str	r3, [r4, #0]
 8003910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003914:	462a      	mov	r2, r5
 8003916:	f000 fae9 	bl	8003eec <_realloc_r>
 800391a:	4606      	mov	r6, r0
 800391c:	2800      	cmp	r0, #0
 800391e:	d1e0      	bne.n	80038e2 <__ssputs_r+0x5a>
 8003920:	4650      	mov	r0, sl
 8003922:	6921      	ldr	r1, [r4, #16]
 8003924:	f7ff febc 	bl	80036a0 <_free_r>
 8003928:	230c      	movs	r3, #12
 800392a:	f8ca 3000 	str.w	r3, [sl]
 800392e:	89a3      	ldrh	r3, [r4, #12]
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003938:	81a3      	strh	r3, [r4, #12]
 800393a:	e7e9      	b.n	8003910 <__ssputs_r+0x88>

0800393c <_svfiprintf_r>:
 800393c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003940:	4698      	mov	r8, r3
 8003942:	898b      	ldrh	r3, [r1, #12]
 8003944:	4607      	mov	r7, r0
 8003946:	061b      	lsls	r3, r3, #24
 8003948:	460d      	mov	r5, r1
 800394a:	4614      	mov	r4, r2
 800394c:	b09d      	sub	sp, #116	; 0x74
 800394e:	d50e      	bpl.n	800396e <_svfiprintf_r+0x32>
 8003950:	690b      	ldr	r3, [r1, #16]
 8003952:	b963      	cbnz	r3, 800396e <_svfiprintf_r+0x32>
 8003954:	2140      	movs	r1, #64	; 0x40
 8003956:	f7ff ff0b 	bl	8003770 <_malloc_r>
 800395a:	6028      	str	r0, [r5, #0]
 800395c:	6128      	str	r0, [r5, #16]
 800395e:	b920      	cbnz	r0, 800396a <_svfiprintf_r+0x2e>
 8003960:	230c      	movs	r3, #12
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	e0d0      	b.n	8003b0c <_svfiprintf_r+0x1d0>
 800396a:	2340      	movs	r3, #64	; 0x40
 800396c:	616b      	str	r3, [r5, #20]
 800396e:	2300      	movs	r3, #0
 8003970:	9309      	str	r3, [sp, #36]	; 0x24
 8003972:	2320      	movs	r3, #32
 8003974:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003978:	2330      	movs	r3, #48	; 0x30
 800397a:	f04f 0901 	mov.w	r9, #1
 800397e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003982:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003b24 <_svfiprintf_r+0x1e8>
 8003986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800398a:	4623      	mov	r3, r4
 800398c:	469a      	mov	sl, r3
 800398e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003992:	b10a      	cbz	r2, 8003998 <_svfiprintf_r+0x5c>
 8003994:	2a25      	cmp	r2, #37	; 0x25
 8003996:	d1f9      	bne.n	800398c <_svfiprintf_r+0x50>
 8003998:	ebba 0b04 	subs.w	fp, sl, r4
 800399c:	d00b      	beq.n	80039b6 <_svfiprintf_r+0x7a>
 800399e:	465b      	mov	r3, fp
 80039a0:	4622      	mov	r2, r4
 80039a2:	4629      	mov	r1, r5
 80039a4:	4638      	mov	r0, r7
 80039a6:	f7ff ff6f 	bl	8003888 <__ssputs_r>
 80039aa:	3001      	adds	r0, #1
 80039ac:	f000 80a9 	beq.w	8003b02 <_svfiprintf_r+0x1c6>
 80039b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039b2:	445a      	add	r2, fp
 80039b4:	9209      	str	r2, [sp, #36]	; 0x24
 80039b6:	f89a 3000 	ldrb.w	r3, [sl]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80a1 	beq.w	8003b02 <_svfiprintf_r+0x1c6>
 80039c0:	2300      	movs	r3, #0
 80039c2:	f04f 32ff 	mov.w	r2, #4294967295
 80039c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039ca:	f10a 0a01 	add.w	sl, sl, #1
 80039ce:	9304      	str	r3, [sp, #16]
 80039d0:	9307      	str	r3, [sp, #28]
 80039d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039d6:	931a      	str	r3, [sp, #104]	; 0x68
 80039d8:	4654      	mov	r4, sl
 80039da:	2205      	movs	r2, #5
 80039dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039e0:	4850      	ldr	r0, [pc, #320]	; (8003b24 <_svfiprintf_r+0x1e8>)
 80039e2:	f000 fa67 	bl	8003eb4 <memchr>
 80039e6:	9a04      	ldr	r2, [sp, #16]
 80039e8:	b9d8      	cbnz	r0, 8003a22 <_svfiprintf_r+0xe6>
 80039ea:	06d0      	lsls	r0, r2, #27
 80039ec:	bf44      	itt	mi
 80039ee:	2320      	movmi	r3, #32
 80039f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039f4:	0711      	lsls	r1, r2, #28
 80039f6:	bf44      	itt	mi
 80039f8:	232b      	movmi	r3, #43	; 0x2b
 80039fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003a02:	2b2a      	cmp	r3, #42	; 0x2a
 8003a04:	d015      	beq.n	8003a32 <_svfiprintf_r+0xf6>
 8003a06:	4654      	mov	r4, sl
 8003a08:	2000      	movs	r0, #0
 8003a0a:	f04f 0c0a 	mov.w	ip, #10
 8003a0e:	9a07      	ldr	r2, [sp, #28]
 8003a10:	4621      	mov	r1, r4
 8003a12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a16:	3b30      	subs	r3, #48	; 0x30
 8003a18:	2b09      	cmp	r3, #9
 8003a1a:	d94d      	bls.n	8003ab8 <_svfiprintf_r+0x17c>
 8003a1c:	b1b0      	cbz	r0, 8003a4c <_svfiprintf_r+0x110>
 8003a1e:	9207      	str	r2, [sp, #28]
 8003a20:	e014      	b.n	8003a4c <_svfiprintf_r+0x110>
 8003a22:	eba0 0308 	sub.w	r3, r0, r8
 8003a26:	fa09 f303 	lsl.w	r3, r9, r3
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	46a2      	mov	sl, r4
 8003a2e:	9304      	str	r3, [sp, #16]
 8003a30:	e7d2      	b.n	80039d8 <_svfiprintf_r+0x9c>
 8003a32:	9b03      	ldr	r3, [sp, #12]
 8003a34:	1d19      	adds	r1, r3, #4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	9103      	str	r1, [sp, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bfbb      	ittet	lt
 8003a3e:	425b      	neglt	r3, r3
 8003a40:	f042 0202 	orrlt.w	r2, r2, #2
 8003a44:	9307      	strge	r3, [sp, #28]
 8003a46:	9307      	strlt	r3, [sp, #28]
 8003a48:	bfb8      	it	lt
 8003a4a:	9204      	strlt	r2, [sp, #16]
 8003a4c:	7823      	ldrb	r3, [r4, #0]
 8003a4e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a50:	d10c      	bne.n	8003a6c <_svfiprintf_r+0x130>
 8003a52:	7863      	ldrb	r3, [r4, #1]
 8003a54:	2b2a      	cmp	r3, #42	; 0x2a
 8003a56:	d134      	bne.n	8003ac2 <_svfiprintf_r+0x186>
 8003a58:	9b03      	ldr	r3, [sp, #12]
 8003a5a:	3402      	adds	r4, #2
 8003a5c:	1d1a      	adds	r2, r3, #4
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	9203      	str	r2, [sp, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bfb8      	it	lt
 8003a66:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a6a:	9305      	str	r3, [sp, #20]
 8003a6c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003b28 <_svfiprintf_r+0x1ec>
 8003a70:	2203      	movs	r2, #3
 8003a72:	4650      	mov	r0, sl
 8003a74:	7821      	ldrb	r1, [r4, #0]
 8003a76:	f000 fa1d 	bl	8003eb4 <memchr>
 8003a7a:	b138      	cbz	r0, 8003a8c <_svfiprintf_r+0x150>
 8003a7c:	2240      	movs	r2, #64	; 0x40
 8003a7e:	9b04      	ldr	r3, [sp, #16]
 8003a80:	eba0 000a 	sub.w	r0, r0, sl
 8003a84:	4082      	lsls	r2, r0
 8003a86:	4313      	orrs	r3, r2
 8003a88:	3401      	adds	r4, #1
 8003a8a:	9304      	str	r3, [sp, #16]
 8003a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a90:	2206      	movs	r2, #6
 8003a92:	4826      	ldr	r0, [pc, #152]	; (8003b2c <_svfiprintf_r+0x1f0>)
 8003a94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a98:	f000 fa0c 	bl	8003eb4 <memchr>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d038      	beq.n	8003b12 <_svfiprintf_r+0x1d6>
 8003aa0:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <_svfiprintf_r+0x1f4>)
 8003aa2:	bb1b      	cbnz	r3, 8003aec <_svfiprintf_r+0x1b0>
 8003aa4:	9b03      	ldr	r3, [sp, #12]
 8003aa6:	3307      	adds	r3, #7
 8003aa8:	f023 0307 	bic.w	r3, r3, #7
 8003aac:	3308      	adds	r3, #8
 8003aae:	9303      	str	r3, [sp, #12]
 8003ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ab2:	4433      	add	r3, r6
 8003ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ab6:	e768      	b.n	800398a <_svfiprintf_r+0x4e>
 8003ab8:	460c      	mov	r4, r1
 8003aba:	2001      	movs	r0, #1
 8003abc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ac0:	e7a6      	b.n	8003a10 <_svfiprintf_r+0xd4>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f04f 0c0a 	mov.w	ip, #10
 8003ac8:	4619      	mov	r1, r3
 8003aca:	3401      	adds	r4, #1
 8003acc:	9305      	str	r3, [sp, #20]
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ad4:	3a30      	subs	r2, #48	; 0x30
 8003ad6:	2a09      	cmp	r2, #9
 8003ad8:	d903      	bls.n	8003ae2 <_svfiprintf_r+0x1a6>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0c6      	beq.n	8003a6c <_svfiprintf_r+0x130>
 8003ade:	9105      	str	r1, [sp, #20]
 8003ae0:	e7c4      	b.n	8003a6c <_svfiprintf_r+0x130>
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aea:	e7f0      	b.n	8003ace <_svfiprintf_r+0x192>
 8003aec:	ab03      	add	r3, sp, #12
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	462a      	mov	r2, r5
 8003af2:	4638      	mov	r0, r7
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <_svfiprintf_r+0x1f8>)
 8003af6:	a904      	add	r1, sp, #16
 8003af8:	f3af 8000 	nop.w
 8003afc:	1c42      	adds	r2, r0, #1
 8003afe:	4606      	mov	r6, r0
 8003b00:	d1d6      	bne.n	8003ab0 <_svfiprintf_r+0x174>
 8003b02:	89ab      	ldrh	r3, [r5, #12]
 8003b04:	065b      	lsls	r3, r3, #25
 8003b06:	f53f af2d 	bmi.w	8003964 <_svfiprintf_r+0x28>
 8003b0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b0c:	b01d      	add	sp, #116	; 0x74
 8003b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b12:	ab03      	add	r3, sp, #12
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	462a      	mov	r2, r5
 8003b18:	4638      	mov	r0, r7
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <_svfiprintf_r+0x1f8>)
 8003b1c:	a904      	add	r1, sp, #16
 8003b1e:	f000 f87d 	bl	8003c1c <_printf_i>
 8003b22:	e7eb      	b.n	8003afc <_svfiprintf_r+0x1c0>
 8003b24:	080040cf 	.word	0x080040cf
 8003b28:	080040d5 	.word	0x080040d5
 8003b2c:	080040d9 	.word	0x080040d9
 8003b30:	00000000 	.word	0x00000000
 8003b34:	08003889 	.word	0x08003889

08003b38 <_printf_common>:
 8003b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b3c:	4616      	mov	r6, r2
 8003b3e:	4699      	mov	r9, r3
 8003b40:	688a      	ldr	r2, [r1, #8]
 8003b42:	690b      	ldr	r3, [r1, #16]
 8003b44:	4607      	mov	r7, r0
 8003b46:	4293      	cmp	r3, r2
 8003b48:	bfb8      	it	lt
 8003b4a:	4613      	movlt	r3, r2
 8003b4c:	6033      	str	r3, [r6, #0]
 8003b4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b52:	460c      	mov	r4, r1
 8003b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b58:	b10a      	cbz	r2, 8003b5e <_printf_common+0x26>
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	6033      	str	r3, [r6, #0]
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	0699      	lsls	r1, r3, #26
 8003b62:	bf42      	ittt	mi
 8003b64:	6833      	ldrmi	r3, [r6, #0]
 8003b66:	3302      	addmi	r3, #2
 8003b68:	6033      	strmi	r3, [r6, #0]
 8003b6a:	6825      	ldr	r5, [r4, #0]
 8003b6c:	f015 0506 	ands.w	r5, r5, #6
 8003b70:	d106      	bne.n	8003b80 <_printf_common+0x48>
 8003b72:	f104 0a19 	add.w	sl, r4, #25
 8003b76:	68e3      	ldr	r3, [r4, #12]
 8003b78:	6832      	ldr	r2, [r6, #0]
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	42ab      	cmp	r3, r5
 8003b7e:	dc2b      	bgt.n	8003bd8 <_printf_common+0xa0>
 8003b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b84:	1e13      	subs	r3, r2, #0
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	bf18      	it	ne
 8003b8a:	2301      	movne	r3, #1
 8003b8c:	0692      	lsls	r2, r2, #26
 8003b8e:	d430      	bmi.n	8003bf2 <_printf_common+0xba>
 8003b90:	4649      	mov	r1, r9
 8003b92:	4638      	mov	r0, r7
 8003b94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b98:	47c0      	blx	r8
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	d023      	beq.n	8003be6 <_printf_common+0xae>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	6922      	ldr	r2, [r4, #16]
 8003ba2:	f003 0306 	and.w	r3, r3, #6
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	bf14      	ite	ne
 8003baa:	2500      	movne	r5, #0
 8003bac:	6833      	ldreq	r3, [r6, #0]
 8003bae:	f04f 0600 	mov.w	r6, #0
 8003bb2:	bf08      	it	eq
 8003bb4:	68e5      	ldreq	r5, [r4, #12]
 8003bb6:	f104 041a 	add.w	r4, r4, #26
 8003bba:	bf08      	it	eq
 8003bbc:	1aed      	subeq	r5, r5, r3
 8003bbe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003bc2:	bf08      	it	eq
 8003bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bfc4      	itt	gt
 8003bcc:	1a9b      	subgt	r3, r3, r2
 8003bce:	18ed      	addgt	r5, r5, r3
 8003bd0:	42b5      	cmp	r5, r6
 8003bd2:	d11a      	bne.n	8003c0a <_printf_common+0xd2>
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	e008      	b.n	8003bea <_printf_common+0xb2>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	4652      	mov	r2, sl
 8003bdc:	4649      	mov	r1, r9
 8003bde:	4638      	mov	r0, r7
 8003be0:	47c0      	blx	r8
 8003be2:	3001      	adds	r0, #1
 8003be4:	d103      	bne.n	8003bee <_printf_common+0xb6>
 8003be6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bee:	3501      	adds	r5, #1
 8003bf0:	e7c1      	b.n	8003b76 <_printf_common+0x3e>
 8003bf2:	2030      	movs	r0, #48	; 0x30
 8003bf4:	18e1      	adds	r1, r4, r3
 8003bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c00:	4422      	add	r2, r4
 8003c02:	3302      	adds	r3, #2
 8003c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c08:	e7c2      	b.n	8003b90 <_printf_common+0x58>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	4622      	mov	r2, r4
 8003c0e:	4649      	mov	r1, r9
 8003c10:	4638      	mov	r0, r7
 8003c12:	47c0      	blx	r8
 8003c14:	3001      	adds	r0, #1
 8003c16:	d0e6      	beq.n	8003be6 <_printf_common+0xae>
 8003c18:	3601      	adds	r6, #1
 8003c1a:	e7d9      	b.n	8003bd0 <_printf_common+0x98>

08003c1c <_printf_i>:
 8003c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c20:	7e0f      	ldrb	r7, [r1, #24]
 8003c22:	4691      	mov	r9, r2
 8003c24:	2f78      	cmp	r7, #120	; 0x78
 8003c26:	4680      	mov	r8, r0
 8003c28:	460c      	mov	r4, r1
 8003c2a:	469a      	mov	sl, r3
 8003c2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c32:	d807      	bhi.n	8003c44 <_printf_i+0x28>
 8003c34:	2f62      	cmp	r7, #98	; 0x62
 8003c36:	d80a      	bhi.n	8003c4e <_printf_i+0x32>
 8003c38:	2f00      	cmp	r7, #0
 8003c3a:	f000 80d5 	beq.w	8003de8 <_printf_i+0x1cc>
 8003c3e:	2f58      	cmp	r7, #88	; 0x58
 8003c40:	f000 80c1 	beq.w	8003dc6 <_printf_i+0x1aa>
 8003c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c4c:	e03a      	b.n	8003cc4 <_printf_i+0xa8>
 8003c4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c52:	2b15      	cmp	r3, #21
 8003c54:	d8f6      	bhi.n	8003c44 <_printf_i+0x28>
 8003c56:	a101      	add	r1, pc, #4	; (adr r1, 8003c5c <_printf_i+0x40>)
 8003c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c5c:	08003cb5 	.word	0x08003cb5
 8003c60:	08003cc9 	.word	0x08003cc9
 8003c64:	08003c45 	.word	0x08003c45
 8003c68:	08003c45 	.word	0x08003c45
 8003c6c:	08003c45 	.word	0x08003c45
 8003c70:	08003c45 	.word	0x08003c45
 8003c74:	08003cc9 	.word	0x08003cc9
 8003c78:	08003c45 	.word	0x08003c45
 8003c7c:	08003c45 	.word	0x08003c45
 8003c80:	08003c45 	.word	0x08003c45
 8003c84:	08003c45 	.word	0x08003c45
 8003c88:	08003dcf 	.word	0x08003dcf
 8003c8c:	08003cf5 	.word	0x08003cf5
 8003c90:	08003d89 	.word	0x08003d89
 8003c94:	08003c45 	.word	0x08003c45
 8003c98:	08003c45 	.word	0x08003c45
 8003c9c:	08003df1 	.word	0x08003df1
 8003ca0:	08003c45 	.word	0x08003c45
 8003ca4:	08003cf5 	.word	0x08003cf5
 8003ca8:	08003c45 	.word	0x08003c45
 8003cac:	08003c45 	.word	0x08003c45
 8003cb0:	08003d91 	.word	0x08003d91
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	1d1a      	adds	r2, r3, #4
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	602a      	str	r2, [r5, #0]
 8003cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0a0      	b.n	8003e0a <_printf_i+0x1ee>
 8003cc8:	6820      	ldr	r0, [r4, #0]
 8003cca:	682b      	ldr	r3, [r5, #0]
 8003ccc:	0607      	lsls	r7, r0, #24
 8003cce:	f103 0104 	add.w	r1, r3, #4
 8003cd2:	6029      	str	r1, [r5, #0]
 8003cd4:	d501      	bpl.n	8003cda <_printf_i+0xbe>
 8003cd6:	681e      	ldr	r6, [r3, #0]
 8003cd8:	e003      	b.n	8003ce2 <_printf_i+0xc6>
 8003cda:	0646      	lsls	r6, r0, #25
 8003cdc:	d5fb      	bpl.n	8003cd6 <_printf_i+0xba>
 8003cde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ce2:	2e00      	cmp	r6, #0
 8003ce4:	da03      	bge.n	8003cee <_printf_i+0xd2>
 8003ce6:	232d      	movs	r3, #45	; 0x2d
 8003ce8:	4276      	negs	r6, r6
 8003cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cee:	230a      	movs	r3, #10
 8003cf0:	4859      	ldr	r0, [pc, #356]	; (8003e58 <_printf_i+0x23c>)
 8003cf2:	e012      	b.n	8003d1a <_printf_i+0xfe>
 8003cf4:	682b      	ldr	r3, [r5, #0]
 8003cf6:	6820      	ldr	r0, [r4, #0]
 8003cf8:	1d19      	adds	r1, r3, #4
 8003cfa:	6029      	str	r1, [r5, #0]
 8003cfc:	0605      	lsls	r5, r0, #24
 8003cfe:	d501      	bpl.n	8003d04 <_printf_i+0xe8>
 8003d00:	681e      	ldr	r6, [r3, #0]
 8003d02:	e002      	b.n	8003d0a <_printf_i+0xee>
 8003d04:	0641      	lsls	r1, r0, #25
 8003d06:	d5fb      	bpl.n	8003d00 <_printf_i+0xe4>
 8003d08:	881e      	ldrh	r6, [r3, #0]
 8003d0a:	2f6f      	cmp	r7, #111	; 0x6f
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2308      	moveq	r3, #8
 8003d10:	230a      	movne	r3, #10
 8003d12:	4851      	ldr	r0, [pc, #324]	; (8003e58 <_printf_i+0x23c>)
 8003d14:	2100      	movs	r1, #0
 8003d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d1a:	6865      	ldr	r5, [r4, #4]
 8003d1c:	2d00      	cmp	r5, #0
 8003d1e:	bfa8      	it	ge
 8003d20:	6821      	ldrge	r1, [r4, #0]
 8003d22:	60a5      	str	r5, [r4, #8]
 8003d24:	bfa4      	itt	ge
 8003d26:	f021 0104 	bicge.w	r1, r1, #4
 8003d2a:	6021      	strge	r1, [r4, #0]
 8003d2c:	b90e      	cbnz	r6, 8003d32 <_printf_i+0x116>
 8003d2e:	2d00      	cmp	r5, #0
 8003d30:	d04b      	beq.n	8003dca <_printf_i+0x1ae>
 8003d32:	4615      	mov	r5, r2
 8003d34:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d38:	fb03 6711 	mls	r7, r3, r1, r6
 8003d3c:	5dc7      	ldrb	r7, [r0, r7]
 8003d3e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d42:	4637      	mov	r7, r6
 8003d44:	42bb      	cmp	r3, r7
 8003d46:	460e      	mov	r6, r1
 8003d48:	d9f4      	bls.n	8003d34 <_printf_i+0x118>
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d10b      	bne.n	8003d66 <_printf_i+0x14a>
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	07de      	lsls	r6, r3, #31
 8003d52:	d508      	bpl.n	8003d66 <_printf_i+0x14a>
 8003d54:	6923      	ldr	r3, [r4, #16]
 8003d56:	6861      	ldr	r1, [r4, #4]
 8003d58:	4299      	cmp	r1, r3
 8003d5a:	bfde      	ittt	le
 8003d5c:	2330      	movle	r3, #48	; 0x30
 8003d5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d66:	1b52      	subs	r2, r2, r5
 8003d68:	6122      	str	r2, [r4, #16]
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	4640      	mov	r0, r8
 8003d70:	f8cd a000 	str.w	sl, [sp]
 8003d74:	aa03      	add	r2, sp, #12
 8003d76:	f7ff fedf 	bl	8003b38 <_printf_common>
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	d14a      	bne.n	8003e14 <_printf_i+0x1f8>
 8003d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d82:	b004      	add	sp, #16
 8003d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	f043 0320 	orr.w	r3, r3, #32
 8003d8e:	6023      	str	r3, [r4, #0]
 8003d90:	2778      	movs	r7, #120	; 0x78
 8003d92:	4832      	ldr	r0, [pc, #200]	; (8003e5c <_printf_i+0x240>)
 8003d94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	6829      	ldr	r1, [r5, #0]
 8003d9c:	061f      	lsls	r7, r3, #24
 8003d9e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003da2:	d402      	bmi.n	8003daa <_printf_i+0x18e>
 8003da4:	065f      	lsls	r7, r3, #25
 8003da6:	bf48      	it	mi
 8003da8:	b2b6      	uxthmi	r6, r6
 8003daa:	07df      	lsls	r7, r3, #31
 8003dac:	bf48      	it	mi
 8003dae:	f043 0320 	orrmi.w	r3, r3, #32
 8003db2:	6029      	str	r1, [r5, #0]
 8003db4:	bf48      	it	mi
 8003db6:	6023      	strmi	r3, [r4, #0]
 8003db8:	b91e      	cbnz	r6, 8003dc2 <_printf_i+0x1a6>
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	f023 0320 	bic.w	r3, r3, #32
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	2310      	movs	r3, #16
 8003dc4:	e7a6      	b.n	8003d14 <_printf_i+0xf8>
 8003dc6:	4824      	ldr	r0, [pc, #144]	; (8003e58 <_printf_i+0x23c>)
 8003dc8:	e7e4      	b.n	8003d94 <_printf_i+0x178>
 8003dca:	4615      	mov	r5, r2
 8003dcc:	e7bd      	b.n	8003d4a <_printf_i+0x12e>
 8003dce:	682b      	ldr	r3, [r5, #0]
 8003dd0:	6826      	ldr	r6, [r4, #0]
 8003dd2:	1d18      	adds	r0, r3, #4
 8003dd4:	6961      	ldr	r1, [r4, #20]
 8003dd6:	6028      	str	r0, [r5, #0]
 8003dd8:	0635      	lsls	r5, r6, #24
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	d501      	bpl.n	8003de2 <_printf_i+0x1c6>
 8003dde:	6019      	str	r1, [r3, #0]
 8003de0:	e002      	b.n	8003de8 <_printf_i+0x1cc>
 8003de2:	0670      	lsls	r0, r6, #25
 8003de4:	d5fb      	bpl.n	8003dde <_printf_i+0x1c2>
 8003de6:	8019      	strh	r1, [r3, #0]
 8003de8:	2300      	movs	r3, #0
 8003dea:	4615      	mov	r5, r2
 8003dec:	6123      	str	r3, [r4, #16]
 8003dee:	e7bc      	b.n	8003d6a <_printf_i+0x14e>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	2100      	movs	r1, #0
 8003df4:	1d1a      	adds	r2, r3, #4
 8003df6:	602a      	str	r2, [r5, #0]
 8003df8:	681d      	ldr	r5, [r3, #0]
 8003dfa:	6862      	ldr	r2, [r4, #4]
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f000 f859 	bl	8003eb4 <memchr>
 8003e02:	b108      	cbz	r0, 8003e08 <_printf_i+0x1ec>
 8003e04:	1b40      	subs	r0, r0, r5
 8003e06:	6060      	str	r0, [r4, #4]
 8003e08:	6863      	ldr	r3, [r4, #4]
 8003e0a:	6123      	str	r3, [r4, #16]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e12:	e7aa      	b.n	8003d6a <_printf_i+0x14e>
 8003e14:	462a      	mov	r2, r5
 8003e16:	4649      	mov	r1, r9
 8003e18:	4640      	mov	r0, r8
 8003e1a:	6923      	ldr	r3, [r4, #16]
 8003e1c:	47d0      	blx	sl
 8003e1e:	3001      	adds	r0, #1
 8003e20:	d0ad      	beq.n	8003d7e <_printf_i+0x162>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	079b      	lsls	r3, r3, #30
 8003e26:	d413      	bmi.n	8003e50 <_printf_i+0x234>
 8003e28:	68e0      	ldr	r0, [r4, #12]
 8003e2a:	9b03      	ldr	r3, [sp, #12]
 8003e2c:	4298      	cmp	r0, r3
 8003e2e:	bfb8      	it	lt
 8003e30:	4618      	movlt	r0, r3
 8003e32:	e7a6      	b.n	8003d82 <_printf_i+0x166>
 8003e34:	2301      	movs	r3, #1
 8003e36:	4632      	mov	r2, r6
 8003e38:	4649      	mov	r1, r9
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	47d0      	blx	sl
 8003e3e:	3001      	adds	r0, #1
 8003e40:	d09d      	beq.n	8003d7e <_printf_i+0x162>
 8003e42:	3501      	adds	r5, #1
 8003e44:	68e3      	ldr	r3, [r4, #12]
 8003e46:	9903      	ldr	r1, [sp, #12]
 8003e48:	1a5b      	subs	r3, r3, r1
 8003e4a:	42ab      	cmp	r3, r5
 8003e4c:	dcf2      	bgt.n	8003e34 <_printf_i+0x218>
 8003e4e:	e7eb      	b.n	8003e28 <_printf_i+0x20c>
 8003e50:	2500      	movs	r5, #0
 8003e52:	f104 0619 	add.w	r6, r4, #25
 8003e56:	e7f5      	b.n	8003e44 <_printf_i+0x228>
 8003e58:	080040e0 	.word	0x080040e0
 8003e5c:	080040f1 	.word	0x080040f1

08003e60 <memmove>:
 8003e60:	4288      	cmp	r0, r1
 8003e62:	b510      	push	{r4, lr}
 8003e64:	eb01 0402 	add.w	r4, r1, r2
 8003e68:	d902      	bls.n	8003e70 <memmove+0x10>
 8003e6a:	4284      	cmp	r4, r0
 8003e6c:	4623      	mov	r3, r4
 8003e6e:	d807      	bhi.n	8003e80 <memmove+0x20>
 8003e70:	1e43      	subs	r3, r0, #1
 8003e72:	42a1      	cmp	r1, r4
 8003e74:	d008      	beq.n	8003e88 <memmove+0x28>
 8003e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e7e:	e7f8      	b.n	8003e72 <memmove+0x12>
 8003e80:	4601      	mov	r1, r0
 8003e82:	4402      	add	r2, r0
 8003e84:	428a      	cmp	r2, r1
 8003e86:	d100      	bne.n	8003e8a <memmove+0x2a>
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e92:	e7f7      	b.n	8003e84 <memmove+0x24>

08003e94 <_sbrk_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	2300      	movs	r3, #0
 8003e98:	4d05      	ldr	r5, [pc, #20]	; (8003eb0 <_sbrk_r+0x1c>)
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	602b      	str	r3, [r5, #0]
 8003ea0:	f7fc febe 	bl	8000c20 <_sbrk>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d102      	bne.n	8003eae <_sbrk_r+0x1a>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	b103      	cbz	r3, 8003eae <_sbrk_r+0x1a>
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	20000278 	.word	0x20000278

08003eb4 <memchr>:
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	b510      	push	{r4, lr}
 8003eb8:	b2c9      	uxtb	r1, r1
 8003eba:	4402      	add	r2, r0
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	d101      	bne.n	8003ec6 <memchr+0x12>
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	e003      	b.n	8003ece <memchr+0x1a>
 8003ec6:	7804      	ldrb	r4, [r0, #0]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	428c      	cmp	r4, r1
 8003ecc:	d1f6      	bne.n	8003ebc <memchr+0x8>
 8003ece:	bd10      	pop	{r4, pc}

08003ed0 <memcpy>:
 8003ed0:	440a      	add	r2, r1
 8003ed2:	4291      	cmp	r1, r2
 8003ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ed8:	d100      	bne.n	8003edc <memcpy+0xc>
 8003eda:	4770      	bx	lr
 8003edc:	b510      	push	{r4, lr}
 8003ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee2:	4291      	cmp	r1, r2
 8003ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee8:	d1f9      	bne.n	8003ede <memcpy+0xe>
 8003eea:	bd10      	pop	{r4, pc}

08003eec <_realloc_r>:
 8003eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef0:	4680      	mov	r8, r0
 8003ef2:	4614      	mov	r4, r2
 8003ef4:	460e      	mov	r6, r1
 8003ef6:	b921      	cbnz	r1, 8003f02 <_realloc_r+0x16>
 8003ef8:	4611      	mov	r1, r2
 8003efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003efe:	f7ff bc37 	b.w	8003770 <_malloc_r>
 8003f02:	b92a      	cbnz	r2, 8003f10 <_realloc_r+0x24>
 8003f04:	f7ff fbcc 	bl	80036a0 <_free_r>
 8003f08:	4625      	mov	r5, r4
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f10:	f000 f81b 	bl	8003f4a <_malloc_usable_size_r>
 8003f14:	4284      	cmp	r4, r0
 8003f16:	4607      	mov	r7, r0
 8003f18:	d802      	bhi.n	8003f20 <_realloc_r+0x34>
 8003f1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f1e:	d812      	bhi.n	8003f46 <_realloc_r+0x5a>
 8003f20:	4621      	mov	r1, r4
 8003f22:	4640      	mov	r0, r8
 8003f24:	f7ff fc24 	bl	8003770 <_malloc_r>
 8003f28:	4605      	mov	r5, r0
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d0ed      	beq.n	8003f0a <_realloc_r+0x1e>
 8003f2e:	42bc      	cmp	r4, r7
 8003f30:	4622      	mov	r2, r4
 8003f32:	4631      	mov	r1, r6
 8003f34:	bf28      	it	cs
 8003f36:	463a      	movcs	r2, r7
 8003f38:	f7ff ffca 	bl	8003ed0 <memcpy>
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	4640      	mov	r0, r8
 8003f40:	f7ff fbae 	bl	80036a0 <_free_r>
 8003f44:	e7e1      	b.n	8003f0a <_realloc_r+0x1e>
 8003f46:	4635      	mov	r5, r6
 8003f48:	e7df      	b.n	8003f0a <_realloc_r+0x1e>

08003f4a <_malloc_usable_size_r>:
 8003f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f4e:	1f18      	subs	r0, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bfbc      	itt	lt
 8003f54:	580b      	ldrlt	r3, [r1, r0]
 8003f56:	18c0      	addlt	r0, r0, r3
 8003f58:	4770      	bx	lr
	...

08003f5c <_init>:
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	bf00      	nop
 8003f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f62:	bc08      	pop	{r3}
 8003f64:	469e      	mov	lr, r3
 8003f66:	4770      	bx	lr

08003f68 <_fini>:
 8003f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6a:	bf00      	nop
 8003f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6e:	bc08      	pop	{r3}
 8003f70:	469e      	mov	lr, r3
 8003f72:	4770      	bx	lr
