
Learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040ac  080040ac  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080040ac  080040ac  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040ac  080040ac  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080040b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000005c  08004110  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08004110  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b9bb  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ba1  00000000  00000000  0002ba83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  0002d628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000963  00000000  00000000  0002e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001765e  00000000  00000000  0002eb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8bb  00000000  00000000  000461e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000880e3  00000000  00000000  00053a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003874  00000000  00000000  000dbb80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000df3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f0c 	.word	0x08003f0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003f0c 	.word	0x08003f0c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	4933      	ldr	r1, [pc, #204]	; (8000730 <HAL_UART_RxCpltCallback+0xd8>)
 8000664:	4833      	ldr	r0, [pc, #204]	; (8000734 <HAL_UART_RxCpltCallback+0xdc>)
 8000666:	f002 f96e 	bl	8002946 <HAL_UART_Receive_IT>
	if(rx_buffer[0] == '\n')
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <HAL_UART_RxCpltCallback+0xd8>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b0a      	cmp	r3, #10
 8000670:	d145      	bne.n	80006fe <HAL_UART_RxCpltCallback+0xa6>
	{
		recieved_duty_cycle_buffer[3] = '\0';
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 8000674:	2200      	movs	r2, #0
 8000676:	70da      	strb	r2, [r3, #3]
		uint16_t duty_cycle = (uint16_t)atoi((char*) recieved_duty_cycle_buffer);
 8000678:	482f      	ldr	r0, [pc, #188]	; (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 800067a:	f002 ff09 	bl	8003490 <atoi>
 800067e:	4603      	mov	r3, r0
 8000680:	81fb      	strh	r3, [r7, #14]
		sprintf(pwm_msg, "PWM Duty Cycle: %u%%\r\n", duty_cycle);
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	461a      	mov	r2, r3
 8000686:	492d      	ldr	r1, [pc, #180]	; (800073c <HAL_UART_RxCpltCallback+0xe4>)
 8000688:	482d      	ldr	r0, [pc, #180]	; (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 800068a:	f002 ff8d 	bl	80035a8 <siprintf>
		if(duty_cycle > 100)
 800068e:	89fb      	ldrh	r3, [r7, #14]
 8000690:	2b64      	cmp	r3, #100	; 0x64
 8000692:	d903      	bls.n	800069c <HAL_UART_RxCpltCallback+0x44>
		{
			sprintf(pwm_msg, "Invalid input!\n");
 8000694:	492b      	ldr	r1, [pc, #172]	; (8000744 <HAL_UART_RxCpltCallback+0xec>)
 8000696:	482a      	ldr	r0, [pc, #168]	; (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 8000698:	f002 ff86 	bl	80035a8 <siprintf>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)pwm_msg, strlen((char*)pwm_msg), HAL_MAX_DELAY);
 800069c:	4828      	ldr	r0, [pc, #160]	; (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 800069e:	f7ff fd55 	bl	800014c <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	4925      	ldr	r1, [pc, #148]	; (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 80006ac:	4821      	ldr	r0, [pc, #132]	; (8000734 <HAL_UART_RxCpltCallback+0xdc>)
 80006ae:	f002 f8c7 	bl	8002840 <HAL_UART_Transmit>
		memset(recieved_duty_cycle_buffer, 0, 4);
 80006b2:	2204      	movs	r2, #4
 80006b4:	2100      	movs	r1, #0
 80006b6:	4820      	ldr	r0, [pc, #128]	; (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 80006b8:	f002 ff96 	bl	80035e8 <memset>
		memset(pwm_msg, 0, 34);
 80006bc:	2222      	movs	r2, #34	; 0x22
 80006be:	2100      	movs	r1, #0
 80006c0:	481f      	ldr	r0, [pc, #124]	; (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 80006c2:	f002 ff91 	bl	80035e8 <memset>
		recieved_duty_cyccle_buffer_index = 0;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
		//Set Period
		uint8_t counting_duty_cycle = (uint8_t)(((float)duty_cycle / 100.0f) * (float)(255));
 80006cc:	89fb      	ldrh	r3, [r7, #14]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fdfa 	bl	80002c8 <__aeabi_ui2f>
 80006d4:	4603      	mov	r3, r0
 80006d6:	491d      	ldr	r1, [pc, #116]	; (800074c <HAL_UART_RxCpltCallback+0xf4>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff01 	bl	80004e0 <__aeabi_fdiv>
 80006de:	4603      	mov	r3, r0
 80006e0:	491b      	ldr	r1, [pc, #108]	; (8000750 <HAL_UART_RxCpltCallback+0xf8>)
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fe48 	bl	8000378 <__aeabi_fmul>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff94 	bl	8000618 <__aeabi_f2uiz>
 80006f0:	4603      	mov	r3, r0
 80006f2:	737b      	strb	r3, [r7, #13]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, counting_duty_cycle);
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <HAL_UART_RxCpltCallback+0xfc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	7b7a      	ldrb	r2, [r7, #13]
 80006fa:	635a      	str	r2, [r3, #52]	; 0x34
	{
		recieved_duty_cycle_buffer[recieved_duty_cyccle_buffer_index] = rx_buffer[0];
		recieved_duty_cyccle_buffer_index++;
		recieved_duty_cyccle_buffer_index = recieved_duty_cyccle_buffer_index % 4;
	}
}
 80006fc:	e013      	b.n	8000726 <HAL_UART_RxCpltCallback+0xce>
		recieved_duty_cycle_buffer[recieved_duty_cyccle_buffer_index] = rx_buffer[0];
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_UART_RxCpltCallback+0xd8>)
 8000706:	7819      	ldrb	r1, [r3, #0]
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 800070a:	5499      	strb	r1, [r3, r2]
		recieved_duty_cyccle_buffer_index++;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 8000716:	701a      	strb	r2, [r3, #0]
		recieved_duty_cyccle_buffer_index = recieved_duty_cyccle_buffer_index % 4;
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f003 0303 	and.w	r3, r3, #3
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 8000724:	701a      	strb	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000108 	.word	0x20000108
 8000734:	200000c0 	.word	0x200000c0
 8000738:	2000010c 	.word	0x2000010c
 800073c:	08003f24 	.word	0x08003f24
 8000740:	20000114 	.word	0x20000114
 8000744:	08003f3c 	.word	0x08003f3c
 8000748:	20000110 	.word	0x20000110
 800074c:	42c80000 	.word	0x42c80000
 8000750:	437f0000 	.word	0x437f0000
 8000754:	20000078 	.word	0x20000078

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075c:	f000 fa9a 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f81e 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f000 f8fa 	bl	800095c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000768:	f000 f8ce 	bl	8000908 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800076c:	f000 f858 	bl	8000820 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <main+0x38>)
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <main+0x3c>)
 8000776:	f002 f8e6 	bl	8002946 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800077a:	2100      	movs	r1, #0
 800077c:	4806      	ldr	r0, [pc, #24]	; (8000798 <main+0x40>)
 800077e:	f001 faf7 	bl	8001d70 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <main+0x44>)
 800078a:	f000 fe21 	bl	80013d0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078e:	e7fe      	b.n	800078e <main+0x36>
 8000790:	20000108 	.word	0x20000108
 8000794:	200000c0 	.word	0x200000c0
 8000798:	20000078 	.word	0x20000078
 800079c:	40010c00 	.word	0x40010c00

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b090      	sub	sp, #64	; 0x40
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	2228      	movs	r2, #40	; 0x28
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 ff1a 	bl	80035e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c6:	2301      	movs	r3, #1
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2310      	movs	r3, #16
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80007d6:	2300      	movs	r3, #0
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0318 	add.w	r3, r7, #24
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fe0e 	bl	8001400 <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80007ea:	f000 f8f7 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f001 f87c 	bl	8001904 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000812:	f000 f8e3 	bl	80009dc <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3740      	adds	r7, #64	; 0x40
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08e      	sub	sp, #56	; 0x38
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000850:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <MX_TIM2_Init+0xe4>)
 8000852:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000856:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000858:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <MX_TIM2_Init+0xe4>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b29      	ldr	r3, [pc, #164]	; (8000904 <MX_TIM2_Init+0xe4>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <MX_TIM2_Init+0xe4>)
 8000866:	22ff      	movs	r2, #255	; 0xff
 8000868:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086a:	4b26      	ldr	r3, [pc, #152]	; (8000904 <MX_TIM2_Init+0xe4>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000870:	4b24      	ldr	r3, [pc, #144]	; (8000904 <MX_TIM2_Init+0xe4>)
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000876:	4823      	ldr	r0, [pc, #140]	; (8000904 <MX_TIM2_Init+0xe4>)
 8000878:	f001 f9d2 	bl	8001c20 <HAL_TIM_Base_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000882:	f000 f8ab 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800088c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000890:	4619      	mov	r1, r3
 8000892:	481c      	ldr	r0, [pc, #112]	; (8000904 <MX_TIM2_Init+0xe4>)
 8000894:	f001 fbca 	bl	800202c <HAL_TIM_ConfigClockSource>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800089e:	f000 f89d 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008a2:	4818      	ldr	r0, [pc, #96]	; (8000904 <MX_TIM2_Init+0xe4>)
 80008a4:	f001 fa0b 	bl	8001cbe <HAL_TIM_PWM_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80008ae:	f000 f895 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	4619      	mov	r1, r3
 80008c0:	4810      	ldr	r0, [pc, #64]	; (8000904 <MX_TIM2_Init+0xe4>)
 80008c2:	f001 ff15 	bl	80026f0 <HAL_TIMEx_MasterConfigSynchronization>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80008cc:	f000 f886 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d0:	2360      	movs	r3, #96	; 0x60
 80008d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 80008d4:	237d      	movs	r3, #125	; 0x7d
 80008d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	4619      	mov	r1, r3
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <MX_TIM2_Init+0xe4>)
 80008e8:	f001 fade 	bl	8001ea8 <HAL_TIM_PWM_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80008f2:	f000 f873 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008f6:	4803      	ldr	r0, [pc, #12]	; (8000904 <MX_TIM2_Init+0xe4>)
 80008f8:	f000 f8b4 	bl	8000a64 <HAL_TIM_MspPostInit>

}
 80008fc:	bf00      	nop
 80008fe:	3738      	adds	r7, #56	; 0x38
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000078 	.word	0x20000078

08000908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <MX_USART1_UART_Init+0x50>)
 8000910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 8000914:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 8000940:	f001 ff2e 	bl	80027a0 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800094a:	f000 f847 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000c0 	.word	0x200000c0
 8000958:	40013800 	.word	0x40013800

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_GPIO_Init+0x78>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <MX_GPIO_Init+0x78>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_GPIO_Init+0x78>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_GPIO_Init+0x78>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <MX_GPIO_Init+0x78>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_GPIO_Init+0x78>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_GPIO_Init+0x7c>)
 80009a8:	f000 fd12 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2302      	movs	r3, #2
 80009bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	4619      	mov	r1, r3
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0x7c>)
 80009c6:	f000 fb87 	bl	80010d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010c00 	.word	0x40010c00

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_MspInit+0x40>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <HAL_MspInit+0x40>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6193      	str	r3, [r2, #24]
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_MspInit+0x40>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_MspInit+0x40>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_MspInit+0x40>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_MspInit+0x40>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a3c:	d10b      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_TIM_Base_MspInit+0x34>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_TIM_Base_MspInit+0x34>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_TIM_Base_MspInit+0x34>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a82:	d117      	bne.n	8000ab4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <HAL_TIM_MspPostInit+0x58>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <HAL_TIM_MspPostInit+0x58>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_TIM_MspPostInit+0x58>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <HAL_TIM_MspPostInit+0x5c>)
 8000ab0:	f000 fb12 	bl	80010d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	3720      	adds	r7, #32
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40010800 	.word	0x40010800

08000ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a20      	ldr	r2, [pc, #128]	; (8000b60 <HAL_UART_MspInit+0x9c>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d139      	bne.n	8000b58 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <HAL_UART_MspInit+0xa0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <HAL_UART_MspInit+0xa0>)
 8000aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_UART_MspInit+0xa0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_UART_MspInit+0xa0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <HAL_UART_MspInit+0xa0>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <HAL_UART_MspInit+0xa0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	4619      	mov	r1, r3
 8000b28:	480f      	ldr	r0, [pc, #60]	; (8000b68 <HAL_UART_MspInit+0xa4>)
 8000b2a:	f000 fad5 	bl	80010d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	4809      	ldr	r0, [pc, #36]	; (8000b68 <HAL_UART_MspInit+0xa4>)
 8000b44:	f000 fac8 	bl	80010d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2025      	movs	r0, #37	; 0x25
 8000b4e:	f000 f9da 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b52:	2025      	movs	r0, #37	; 0x25
 8000b54:	f000 f9f3 	bl	8000f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40013800 	.word	0x40013800
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010800 	.word	0x40010800

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 f8b5 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <USART1_IRQHandler+0x10>)
 8000bc2:	f001 fee5 	bl	8002990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000c0 	.word	0x200000c0

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f002 fcfa 	bl	80035f8 <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20002800 	.word	0x20002800
 8000c30:	00000400 	.word	0x00000400
 8000c34:	20000138 	.word	0x20000138
 8000c38:	20000288 	.word	0x20000288

08000c3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c48:	f7ff fff8 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c4c:	480b      	ldr	r0, [pc, #44]	; (8000c7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c4e:	490c      	ldr	r1, [pc, #48]	; (8000c80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c50:	4a0c      	ldr	r2, [pc, #48]	; (8000c84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c64:	4c09      	ldr	r4, [pc, #36]	; (8000c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f002 fcc7 	bl	8003604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c76:	f7ff fd6f 	bl	8000758 <main>
  bx lr
 8000c7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c84:	080040b4 	.word	0x080040b4
  ldr r2, =_sbss
 8000c88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c8c:	20000288 	.word	0x20000288

08000c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_2_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x28>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x28>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f923 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	200f      	movs	r0, #15
 8000cac:	f000 f808 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fe9a 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40022000 	.word	0x40022000

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x54>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x58>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f93b 	bl	8000f5a <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f000 f903 	bl	8000f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x5c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000004 	.word	0x20000004

08000d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_IncTick+0x1c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_IncTick+0x20>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <HAL_IncTick+0x20>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	2000013c 	.word	0x2000013c

08000d44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <HAL_GetTick+0x10>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	2000013c 	.word	0x2000013c

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4906      	ldr	r1, [pc, #24]	; (8000df0 <__NVIC_EnableIRQ+0x34>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff90 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff2d 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff42 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff90 	bl	8000e48 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5f 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff35 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa2 	bl	8000eac <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d008      	beq.n	8000f9c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e020      	b.n	8000fde <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 020e 	bic.w	r2, r2, #14
 8000faa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d005      	beq.n	800100c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2204      	movs	r2, #4
 8001004:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e051      	b.n	80010b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 020e 	bic.w	r2, r2, #14
 800101a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a22      	ldr	r2, [pc, #136]	; (80010bc <HAL_DMA_Abort_IT+0xd4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d029      	beq.n	800108a <HAL_DMA_Abort_IT+0xa2>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <HAL_DMA_Abort_IT+0xd8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d022      	beq.n	8001086 <HAL_DMA_Abort_IT+0x9e>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <HAL_DMA_Abort_IT+0xdc>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01a      	beq.n	8001080 <HAL_DMA_Abort_IT+0x98>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <HAL_DMA_Abort_IT+0xe0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d012      	beq.n	800107a <HAL_DMA_Abort_IT+0x92>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_DMA_Abort_IT+0xe4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00a      	beq.n	8001074 <HAL_DMA_Abort_IT+0x8c>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <HAL_DMA_Abort_IT+0xe8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d102      	bne.n	800106e <HAL_DMA_Abort_IT+0x86>
 8001068:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800106c:	e00e      	b.n	800108c <HAL_DMA_Abort_IT+0xa4>
 800106e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001072:	e00b      	b.n	800108c <HAL_DMA_Abort_IT+0xa4>
 8001074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001078:	e008      	b.n	800108c <HAL_DMA_Abort_IT+0xa4>
 800107a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107e:	e005      	b.n	800108c <HAL_DMA_Abort_IT+0xa4>
 8001080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001084:	e002      	b.n	800108c <HAL_DMA_Abort_IT+0xa4>
 8001086:	2310      	movs	r3, #16
 8001088:	e000      	b.n	800108c <HAL_DMA_Abort_IT+0xa4>
 800108a:	2301      	movs	r3, #1
 800108c:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <HAL_DMA_Abort_IT+0xec>)
 800108e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	4798      	blx	r3
    } 
  }
  return status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020008 	.word	0x40020008
 80010c0:	4002001c 	.word	0x4002001c
 80010c4:	40020030 	.word	0x40020030
 80010c8:	40020044 	.word	0x40020044
 80010cc:	40020058 	.word	0x40020058
 80010d0:	4002006c 	.word	0x4002006c
 80010d4:	40020000 	.word	0x40020000

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b08b      	sub	sp, #44	; 0x2c
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e161      	b.n	80013b0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010ec:	2201      	movs	r2, #1
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8150 	bne.w	80013aa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a97      	ldr	r2, [pc, #604]	; (800136c <HAL_GPIO_Init+0x294>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d05e      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001114:	4a95      	ldr	r2, [pc, #596]	; (800136c <HAL_GPIO_Init+0x294>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d875      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800111a:	4a95      	ldr	r2, [pc, #596]	; (8001370 <HAL_GPIO_Init+0x298>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d058      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001120:	4a93      	ldr	r2, [pc, #588]	; (8001370 <HAL_GPIO_Init+0x298>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d86f      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001126:	4a93      	ldr	r2, [pc, #588]	; (8001374 <HAL_GPIO_Init+0x29c>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d052      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 800112c:	4a91      	ldr	r2, [pc, #580]	; (8001374 <HAL_GPIO_Init+0x29c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d869      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001132:	4a91      	ldr	r2, [pc, #580]	; (8001378 <HAL_GPIO_Init+0x2a0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d04c      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001138:	4a8f      	ldr	r2, [pc, #572]	; (8001378 <HAL_GPIO_Init+0x2a0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d863      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800113e:	4a8f      	ldr	r2, [pc, #572]	; (800137c <HAL_GPIO_Init+0x2a4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d046      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001144:	4a8d      	ldr	r2, [pc, #564]	; (800137c <HAL_GPIO_Init+0x2a4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d85d      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800114a:	2b12      	cmp	r3, #18
 800114c:	d82a      	bhi.n	80011a4 <HAL_GPIO_Init+0xcc>
 800114e:	2b12      	cmp	r3, #18
 8001150:	d859      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <HAL_GPIO_Init+0x80>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	080011d3 	.word	0x080011d3
 800115c:	080011ad 	.word	0x080011ad
 8001160:	080011bf 	.word	0x080011bf
 8001164:	08001201 	.word	0x08001201
 8001168:	08001207 	.word	0x08001207
 800116c:	08001207 	.word	0x08001207
 8001170:	08001207 	.word	0x08001207
 8001174:	08001207 	.word	0x08001207
 8001178:	08001207 	.word	0x08001207
 800117c:	08001207 	.word	0x08001207
 8001180:	08001207 	.word	0x08001207
 8001184:	08001207 	.word	0x08001207
 8001188:	08001207 	.word	0x08001207
 800118c:	08001207 	.word	0x08001207
 8001190:	08001207 	.word	0x08001207
 8001194:	08001207 	.word	0x08001207
 8001198:	08001207 	.word	0x08001207
 800119c:	080011b5 	.word	0x080011b5
 80011a0:	080011c9 	.word	0x080011c9
 80011a4:	4a76      	ldr	r2, [pc, #472]	; (8001380 <HAL_GPIO_Init+0x2a8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011aa:	e02c      	b.n	8001206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e029      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	3304      	adds	r3, #4
 80011ba:	623b      	str	r3, [r7, #32]
          break;
 80011bc:	e024      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	3308      	adds	r3, #8
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e01f      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	330c      	adds	r3, #12
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	e01a      	b.n	8001208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011da:	2304      	movs	r3, #4
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e013      	b.n	8001208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e8:	2308      	movs	r3, #8
 80011ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	611a      	str	r2, [r3, #16]
          break;
 80011f2:	e009      	b.n	8001208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	615a      	str	r2, [r3, #20]
          break;
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x130>
          break;
 8001206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	d801      	bhi.n	8001212 <HAL_GPIO_Init+0x13a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	e001      	b.n	8001216 <HAL_GPIO_Init+0x13e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3304      	adds	r3, #4
 8001216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2bff      	cmp	r3, #255	; 0xff
 800121c:	d802      	bhi.n	8001224 <HAL_GPIO_Init+0x14c>
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x152>
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	3b08      	subs	r3, #8
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	210f      	movs	r1, #15
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	6a39      	ldr	r1, [r7, #32]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	431a      	orrs	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80a9 	beq.w	80013aa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001258:	4b4a      	ldr	r3, [pc, #296]	; (8001384 <HAL_GPIO_Init+0x2ac>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a49      	ldr	r2, [pc, #292]	; (8001384 <HAL_GPIO_Init+0x2ac>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b47      	ldr	r3, [pc, #284]	; (8001384 <HAL_GPIO_Init+0x2ac>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001270:	4a45      	ldr	r2, [pc, #276]	; (8001388 <HAL_GPIO_Init+0x2b0>)
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a3d      	ldr	r2, [pc, #244]	; (800138c <HAL_GPIO_Init+0x2b4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d00d      	beq.n	80012b8 <HAL_GPIO_Init+0x1e0>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3c      	ldr	r2, [pc, #240]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d007      	beq.n	80012b4 <HAL_GPIO_Init+0x1dc>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3b      	ldr	r2, [pc, #236]	; (8001394 <HAL_GPIO_Init+0x2bc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d101      	bne.n	80012b0 <HAL_GPIO_Init+0x1d8>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e004      	b.n	80012ba <HAL_GPIO_Init+0x1e2>
 80012b0:	2303      	movs	r3, #3
 80012b2:	e002      	b.n	80012ba <HAL_GPIO_Init+0x1e2>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <HAL_GPIO_Init+0x1e2>
 80012b8:	2300      	movs	r3, #0
 80012ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012bc:	f002 0203 	and.w	r2, r2, #3
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	4093      	lsls	r3, r2
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ca:	492f      	ldr	r1, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x2b0>)
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e4:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	492b      	ldr	r1, [pc, #172]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	608b      	str	r3, [r1, #8]
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4927      	ldr	r1, [pc, #156]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	4921      	ldr	r1, [pc, #132]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	60cb      	str	r3, [r1, #12]
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	43db      	mvns	r3, r3
 8001322:	491d      	ldr	r1, [pc, #116]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 8001324:	4013      	ands	r3, r2
 8001326:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	4917      	ldr	r1, [pc, #92]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	43db      	mvns	r3, r3
 800134a:	4913      	ldr	r1, [pc, #76]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 800134c:	4013      	ands	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d01f      	beq.n	800139c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	490d      	ldr	r1, [pc, #52]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
 8001368:	e01f      	b.n	80013aa <HAL_GPIO_Init+0x2d2>
 800136a:	bf00      	nop
 800136c:	10320000 	.word	0x10320000
 8001370:	10310000 	.word	0x10310000
 8001374:	10220000 	.word	0x10220000
 8001378:	10210000 	.word	0x10210000
 800137c:	10120000 	.word	0x10120000
 8001380:	10110000 	.word	0x10110000
 8001384:	40021000 	.word	0x40021000
 8001388:	40010000 	.word	0x40010000
 800138c:	40010800 	.word	0x40010800
 8001390:	40010c00 	.word	0x40010c00
 8001394:	40011000 	.word	0x40011000
 8001398:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_GPIO_Init+0x2f4>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	4909      	ldr	r1, [pc, #36]	; (80013cc <HAL_GPIO_Init+0x2f4>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	3301      	adds	r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f47f ae96 	bne.w	80010ec <HAL_GPIO_Init+0x14>
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	372c      	adds	r7, #44	; 0x2c
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	40010400 	.word	0x40010400

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	611a      	str	r2, [r3, #16]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e272      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8087 	beq.w	800152e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001420:	4b92      	ldr	r3, [pc, #584]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 030c 	and.w	r3, r3, #12
 8001428:	2b04      	cmp	r3, #4
 800142a:	d00c      	beq.n	8001446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800142c:	4b8f      	ldr	r3, [pc, #572]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b08      	cmp	r3, #8
 8001436:	d112      	bne.n	800145e <HAL_RCC_OscConfig+0x5e>
 8001438:	4b8c      	ldr	r3, [pc, #560]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d10b      	bne.n	800145e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001446:	4b89      	ldr	r3, [pc, #548]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d06c      	beq.n	800152c <HAL_RCC_OscConfig+0x12c>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d168      	bne.n	800152c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e24c      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x76>
 8001468:	4b80      	ldr	r3, [pc, #512]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a7f      	ldr	r2, [pc, #508]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800146e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e02e      	b.n	80014d4 <HAL_RCC_OscConfig+0xd4>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x98>
 800147e:	4b7b      	ldr	r3, [pc, #492]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a7a      	ldr	r2, [pc, #488]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b78      	ldr	r3, [pc, #480]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a77      	ldr	r2, [pc, #476]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e01d      	b.n	80014d4 <HAL_RCC_OscConfig+0xd4>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0xbc>
 80014a2:	4b72      	ldr	r3, [pc, #456]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a71      	ldr	r2, [pc, #452]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b6f      	ldr	r3, [pc, #444]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6e      	ldr	r2, [pc, #440]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0xd4>
 80014bc:	4b6b      	ldr	r3, [pc, #428]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a6a      	ldr	r2, [pc, #424]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a67      	ldr	r2, [pc, #412]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fc32 	bl	8000d44 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fc2e 	bl	8000d44 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e200      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b5d      	ldr	r3, [pc, #372]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0xe4>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fc1e 	bl	8000d44 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fc1a 	bl	8000d44 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1ec      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	4b53      	ldr	r3, [pc, #332]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x10c>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d063      	beq.n	8001602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800153a:	4b4c      	ldr	r3, [pc, #304]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b08      	cmp	r3, #8
 8001550:	d11c      	bne.n	800158c <HAL_RCC_OscConfig+0x18c>
 8001552:	4b46      	ldr	r3, [pc, #280]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d116      	bne.n	800158c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	4b43      	ldr	r3, [pc, #268]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_RCC_OscConfig+0x176>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e1c0      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001576:	4b3d      	ldr	r3, [pc, #244]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4939      	ldr	r1, [pc, #228]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	e03a      	b.n	8001602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001594:	4b36      	ldr	r3, [pc, #216]	; (8001670 <HAL_RCC_OscConfig+0x270>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fbd3 	bl	8000d44 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fbcf 	bl	8000d44 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1a1      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4927      	ldr	r1, [pc, #156]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_RCC_OscConfig+0x270>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fbb2 	bl	8000d44 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fbae 	bl	8000d44 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e180      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d03a      	beq.n	8001684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d019      	beq.n	800164a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_RCC_OscConfig+0x274>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fb92 	bl	8000d44 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fb8e 	bl	8000d44 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e160      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001642:	2001      	movs	r0, #1
 8001644:	f000 face 	bl	8001be4 <RCC_Delay>
 8001648:	e01c      	b.n	8001684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_RCC_OscConfig+0x274>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fb78 	bl	8000d44 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001656:	e00f      	b.n	8001678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff fb74 	bl	8000d44 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d908      	bls.n	8001678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e146      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	42420000 	.word	0x42420000
 8001674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	4b92      	ldr	r3, [pc, #584]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1e9      	bne.n	8001658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a6 	beq.w	80017de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4b8b      	ldr	r3, [pc, #556]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10d      	bne.n	80016be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a87      	ldr	r2, [pc, #540]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b85      	ldr	r3, [pc, #532]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ba:	2301      	movs	r3, #1
 80016bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	4b82      	ldr	r3, [pc, #520]	; (80018c8 <HAL_RCC_OscConfig+0x4c8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ca:	4b7f      	ldr	r3, [pc, #508]	; (80018c8 <HAL_RCC_OscConfig+0x4c8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7e      	ldr	r2, [pc, #504]	; (80018c8 <HAL_RCC_OscConfig+0x4c8>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb35 	bl	8000d44 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff fb31 	bl	8000d44 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b64      	cmp	r3, #100	; 0x64
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e103      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b75      	ldr	r3, [pc, #468]	; (80018c8 <HAL_RCC_OscConfig+0x4c8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x312>
 8001704:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a6e      	ldr	r2, [pc, #440]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6213      	str	r3, [r2, #32]
 8001710:	e02d      	b.n	800176e <HAL_RCC_OscConfig+0x36e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x334>
 800171a:	4b6a      	ldr	r3, [pc, #424]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4a69      	ldr	r2, [pc, #420]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	4b67      	ldr	r3, [pc, #412]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4a66      	ldr	r2, [pc, #408]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	6213      	str	r3, [r2, #32]
 8001732:	e01c      	b.n	800176e <HAL_RCC_OscConfig+0x36e>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b05      	cmp	r3, #5
 800173a:	d10c      	bne.n	8001756 <HAL_RCC_OscConfig+0x356>
 800173c:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4a60      	ldr	r2, [pc, #384]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6213      	str	r3, [r2, #32]
 8001748:	4b5e      	ldr	r3, [pc, #376]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a5d      	ldr	r2, [pc, #372]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	e00b      	b.n	800176e <HAL_RCC_OscConfig+0x36e>
 8001756:	4b5b      	ldr	r3, [pc, #364]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a5a      	ldr	r2, [pc, #360]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6213      	str	r3, [r2, #32]
 8001762:	4b58      	ldr	r3, [pc, #352]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a57      	ldr	r2, [pc, #348]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d015      	beq.n	80017a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff fae5 	bl	8000d44 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7ff fae1 	bl	8000d44 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f241 3288 	movw	r2, #5000	; 0x1388
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0b1      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001794:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ee      	beq.n	800177e <HAL_RCC_OscConfig+0x37e>
 80017a0:	e014      	b.n	80017cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff facf 	bl	8000d44 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7ff facb 	bl	8000d44 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e09b      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c0:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1ee      	bne.n	80017aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d105      	bne.n	80017de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d2:	4b3c      	ldr	r3, [pc, #240]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a3b      	ldr	r2, [pc, #236]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8087 	beq.w	80018f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e8:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d061      	beq.n	80018b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d146      	bne.n	800188a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <HAL_RCC_OscConfig+0x4cc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff fa9f 	bl	8000d44 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff fa9b 	bl	8000d44 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e06d      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f0      	bne.n	800180a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001830:	d108      	bne.n	8001844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4921      	ldr	r1, [pc, #132]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a19      	ldr	r1, [r3, #32]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	430b      	orrs	r3, r1
 8001856:	491b      	ldr	r1, [pc, #108]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x4cc>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fa6f 	bl	8000d44 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff fa6b 	bl	8000d44 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e03d      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x46a>
 8001888:	e035      	b.n	80018f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_RCC_OscConfig+0x4cc>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fa58 	bl	8000d44 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff fa54 	bl	8000d44 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e026      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x498>
 80018b6:	e01e      	b.n	80018f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e019      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40007000 	.word	0x40007000
 80018cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000

08001904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0d0      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001918:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d910      	bls.n	8001948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 0207 	bic.w	r2, r3, #7
 800192e:	4965      	ldr	r1, [pc, #404]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b8      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800196a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001982:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	494d      	ldr	r1, [pc, #308]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d040      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d115      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e07f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e073      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06b      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e2:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f023 0203 	bic.w	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4936      	ldr	r1, [pc, #216]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f4:	f7ff f9a6 	bl	8000d44 <HAL_GetTick>
 80019f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fc:	f7ff f9a2 	bl	8000d44 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e053      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 020c 	and.w	r2, r3, #12
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1eb      	bne.n	80019fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d210      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 0207 	bic.w	r2, r3, #7
 8001a3a:	4922      	ldr	r1, [pc, #136]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e032      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4916      	ldr	r1, [pc, #88]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a92:	f000 f821 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	490a      	ldr	r1, [pc, #40]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8001aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f904 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40022000 	.word	0x40022000
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	08003f4c 	.word	0x08003f4c
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d002      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x30>
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d003      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x36>
 8001b06:	e027      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b0a:	613b      	str	r3, [r7, #16]
      break;
 8001b0c:	e027      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	0c9b      	lsrs	r3, r3, #18
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	4a17      	ldr	r2, [pc, #92]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b18:	5cd3      	ldrb	r3, [r2, r3]
 8001b1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d010      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0c5b      	lsrs	r3, r3, #17
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b3a:	fb03 f202 	mul.w	r2, r3, r2
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e004      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b4c:	fb02 f303 	mul.w	r3, r2, r3
 8001b50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	613b      	str	r3, [r7, #16]
      break;
 8001b56:	e002      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b5a:	613b      	str	r3, [r7, #16]
      break;
 8001b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5e:	693b      	ldr	r3, [r7, #16]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	007a1200 	.word	0x007a1200
 8001b74:	08003f64 	.word	0x08003f64
 8001b78:	08003f74 	.word	0x08003f74
 8001b7c:	003d0900 	.word	0x003d0900

08001b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b84:	4b02      	ldr	r3, [pc, #8]	; (8001b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000000 	.word	0x20000000

08001b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b98:	f7ff fff2 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4903      	ldr	r1, [pc, #12]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	08003f5c 	.word	0x08003f5c

08001bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bc0:	f7ff ffde 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	0adb      	lsrs	r3, r3, #11
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4903      	ldr	r1, [pc, #12]	; (8001be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	08003f5c 	.word	0x08003f5c

08001be4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <RCC_Delay+0x34>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <RCC_Delay+0x38>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0a5b      	lsrs	r3, r3, #9
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c00:	bf00      	nop
  }
  while (Delay --);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1e5a      	subs	r2, r3, #1
 8001c06:	60fa      	str	r2, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f9      	bne.n	8001c00 <RCC_Delay+0x1c>
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	10624dd3 	.word	0x10624dd3

08001c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e041      	b.n	8001cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe fef0 	bl	8000a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f000 faac 	bl	80021bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e041      	b.n	8001d54 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d106      	bne.n	8001cea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f839 	bl	8001d5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2202      	movs	r2, #2
 8001cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f000 fa5d 	bl	80021bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_TIM_PWM_Start+0x24>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	bf14      	ite	ne
 8001d8c:	2301      	movne	r3, #1
 8001d8e:	2300      	moveq	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	e022      	b.n	8001dda <HAL_TIM_PWM_Start+0x6a>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d109      	bne.n	8001dae <HAL_TIM_PWM_Start+0x3e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	e015      	b.n	8001dda <HAL_TIM_PWM_Start+0x6a>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d109      	bne.n	8001dc8 <HAL_TIM_PWM_Start+0x58>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	bf14      	ite	ne
 8001dc0:	2301      	movne	r3, #1
 8001dc2:	2300      	moveq	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	e008      	b.n	8001dda <HAL_TIM_PWM_Start+0x6a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	bf14      	ite	ne
 8001dd4:	2301      	movne	r3, #1
 8001dd6:	2300      	moveq	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e059      	b.n	8001e96 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d104      	bne.n	8001df2 <HAL_TIM_PWM_Start+0x82>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df0:	e013      	b.n	8001e1a <HAL_TIM_PWM_Start+0xaa>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d104      	bne.n	8001e02 <HAL_TIM_PWM_Start+0x92>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e00:	e00b      	b.n	8001e1a <HAL_TIM_PWM_Start+0xaa>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d104      	bne.n	8001e12 <HAL_TIM_PWM_Start+0xa2>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e10:	e003      	b.n	8001e1a <HAL_TIM_PWM_Start+0xaa>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2202      	movs	r2, #2
 8001e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	6839      	ldr	r1, [r7, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fc40 	bl	80026a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <HAL_TIM_PWM_Start+0x130>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d107      	bne.n	8001e42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <HAL_TIM_PWM_Start+0x130>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_TIM_PWM_Start+0xf0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e54:	d004      	beq.n	8001e60 <HAL_TIM_PWM_Start+0xf0>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <HAL_TIM_PWM_Start+0x134>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d111      	bne.n	8001e84 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d010      	beq.n	8001e94 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e82:	e007      	b.n	8001e94 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40012c00 	.word	0x40012c00
 8001ea4:	40000400 	.word	0x40000400

08001ea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e0ae      	b.n	8002024 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0c      	cmp	r3, #12
 8001ed2:	f200 809f 	bhi.w	8002014 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ed6:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001f11 	.word	0x08001f11
 8001ee0:	08002015 	.word	0x08002015
 8001ee4:	08002015 	.word	0x08002015
 8001ee8:	08002015 	.word	0x08002015
 8001eec:	08001f51 	.word	0x08001f51
 8001ef0:	08002015 	.word	0x08002015
 8001ef4:	08002015 	.word	0x08002015
 8001ef8:	08002015 	.word	0x08002015
 8001efc:	08001f93 	.word	0x08001f93
 8001f00:	08002015 	.word	0x08002015
 8001f04:	08002015 	.word	0x08002015
 8001f08:	08002015 	.word	0x08002015
 8001f0c:	08001fd3 	.word	0x08001fd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f9a8 	bl	800226c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0208 	orr.w	r2, r2, #8
 8001f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0204 	bic.w	r2, r2, #4
 8001f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6999      	ldr	r1, [r3, #24]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	619a      	str	r2, [r3, #24]
      break;
 8001f4e:	e064      	b.n	800201a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f9ee 	bl	8002338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6999      	ldr	r1, [r3, #24]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	021a      	lsls	r2, r3, #8
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	619a      	str	r2, [r3, #24]
      break;
 8001f90:	e043      	b.n	800201a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fa37 	bl	800240c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69da      	ldr	r2, [r3, #28]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0208 	orr.w	r2, r2, #8
 8001fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69da      	ldr	r2, [r3, #28]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0204 	bic.w	r2, r2, #4
 8001fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69d9      	ldr	r1, [r3, #28]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	61da      	str	r2, [r3, #28]
      break;
 8001fd0:	e023      	b.n	800201a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fa81 	bl	80024e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69d9      	ldr	r1, [r3, #28]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	021a      	lsls	r2, r3, #8
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	61da      	str	r2, [r3, #28]
      break;
 8002012:	e002      	b.n	800201a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	75fb      	strb	r3, [r7, #23]
      break;
 8002018:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002022:	7dfb      	ldrb	r3, [r7, #23]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_TIM_ConfigClockSource+0x1c>
 8002044:	2302      	movs	r3, #2
 8002046:	e0b4      	b.n	80021b2 <HAL_TIM_ConfigClockSource+0x186>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800206e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002080:	d03e      	beq.n	8002100 <HAL_TIM_ConfigClockSource+0xd4>
 8002082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002086:	f200 8087 	bhi.w	8002198 <HAL_TIM_ConfigClockSource+0x16c>
 800208a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208e:	f000 8086 	beq.w	800219e <HAL_TIM_ConfigClockSource+0x172>
 8002092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002096:	d87f      	bhi.n	8002198 <HAL_TIM_ConfigClockSource+0x16c>
 8002098:	2b70      	cmp	r3, #112	; 0x70
 800209a:	d01a      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0xa6>
 800209c:	2b70      	cmp	r3, #112	; 0x70
 800209e:	d87b      	bhi.n	8002198 <HAL_TIM_ConfigClockSource+0x16c>
 80020a0:	2b60      	cmp	r3, #96	; 0x60
 80020a2:	d050      	beq.n	8002146 <HAL_TIM_ConfigClockSource+0x11a>
 80020a4:	2b60      	cmp	r3, #96	; 0x60
 80020a6:	d877      	bhi.n	8002198 <HAL_TIM_ConfigClockSource+0x16c>
 80020a8:	2b50      	cmp	r3, #80	; 0x50
 80020aa:	d03c      	beq.n	8002126 <HAL_TIM_ConfigClockSource+0xfa>
 80020ac:	2b50      	cmp	r3, #80	; 0x50
 80020ae:	d873      	bhi.n	8002198 <HAL_TIM_ConfigClockSource+0x16c>
 80020b0:	2b40      	cmp	r3, #64	; 0x40
 80020b2:	d058      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0x13a>
 80020b4:	2b40      	cmp	r3, #64	; 0x40
 80020b6:	d86f      	bhi.n	8002198 <HAL_TIM_ConfigClockSource+0x16c>
 80020b8:	2b30      	cmp	r3, #48	; 0x30
 80020ba:	d064      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0x15a>
 80020bc:	2b30      	cmp	r3, #48	; 0x30
 80020be:	d86b      	bhi.n	8002198 <HAL_TIM_ConfigClockSource+0x16c>
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d060      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0x15a>
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d867      	bhi.n	8002198 <HAL_TIM_ConfigClockSource+0x16c>
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d05c      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0x15a>
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d05a      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0x15a>
 80020d0:	e062      	b.n	8002198 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020e2:	f000 fac2 	bl	800266a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	609a      	str	r2, [r3, #8]
      break;
 80020fe:	e04f      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002110:	f000 faab 	bl	800266a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002122:	609a      	str	r2, [r3, #8]
      break;
 8002124:	e03c      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002132:	461a      	mov	r2, r3
 8002134:	f000 fa22 	bl	800257c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2150      	movs	r1, #80	; 0x50
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fa79 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 8002144:	e02c      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002152:	461a      	mov	r2, r3
 8002154:	f000 fa40 	bl	80025d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2160      	movs	r1, #96	; 0x60
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fa69 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 8002164:	e01c      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002172:	461a      	mov	r2, r3
 8002174:	f000 fa02 	bl	800257c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2140      	movs	r1, #64	; 0x40
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fa59 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 8002184:	e00c      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4619      	mov	r1, r3
 8002190:	4610      	mov	r0, r2
 8002192:	f000 fa50 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 8002196:	e003      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
      break;
 800219c:	e000      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800219e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a25      	ldr	r2, [pc, #148]	; (8002264 <TIM_Base_SetConfig+0xa8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <TIM_Base_SetConfig+0x28>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021da:	d003      	beq.n	80021e4 <TIM_Base_SetConfig+0x28>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a22      	ldr	r2, [pc, #136]	; (8002268 <TIM_Base_SetConfig+0xac>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d108      	bne.n	80021f6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <TIM_Base_SetConfig+0xa8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <TIM_Base_SetConfig+0x52>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002204:	d003      	beq.n	800220e <TIM_Base_SetConfig+0x52>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a17      	ldr	r2, [pc, #92]	; (8002268 <TIM_Base_SetConfig+0xac>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d108      	bne.n	8002220 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a07      	ldr	r2, [pc, #28]	; (8002264 <TIM_Base_SetConfig+0xa8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d103      	bne.n	8002254 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	615a      	str	r2, [r3, #20]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40000400 	.word	0x40000400

0800226c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f023 0201 	bic.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f023 0302 	bic.w	r3, r3, #2
 80022b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <TIM_OC1_SetConfig+0xc8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d10c      	bne.n	80022e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f023 0308 	bic.w	r3, r3, #8
 80022ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a13      	ldr	r2, [pc, #76]	; (8002334 <TIM_OC1_SetConfig+0xc8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d111      	bne.n	800230e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	621a      	str	r2, [r3, #32]
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40012c00 	.word	0x40012c00

08002338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f023 0210 	bic.w	r2, r3, #16
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800236e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f023 0320 	bic.w	r3, r3, #32
 8002382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <TIM_OC2_SetConfig+0xd0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d10d      	bne.n	80023b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800239e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a14      	ldr	r2, [pc, #80]	; (8002408 <TIM_OC2_SetConfig+0xd0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d113      	bne.n	80023e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	621a      	str	r2, [r3, #32]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	40012c00 	.word	0x40012c00

0800240c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <TIM_OC3_SetConfig+0xd0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10d      	bne.n	8002486 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <TIM_OC3_SetConfig+0xd0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d113      	bne.n	80024b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800249c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	621a      	str	r2, [r3, #32]
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40012c00 	.word	0x40012c00

080024e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800250e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800252a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	031b      	lsls	r3, r3, #12
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a0f      	ldr	r2, [pc, #60]	; (8002578 <TIM_OC4_SetConfig+0x98>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d109      	bne.n	8002554 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	019b      	lsls	r3, r3, #6
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	621a      	str	r2, [r3, #32]
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	40012c00 	.word	0x40012c00

0800257c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f023 0201 	bic.w	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f023 030a 	bic.w	r3, r3, #10
 80025b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f023 0210 	bic.w	r2, r3, #16
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	031b      	lsls	r3, r3, #12
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002614:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	621a      	str	r2, [r3, #32]
}
 800262c:	bf00      	nop
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	f043 0307 	orr.w	r3, r3, #7
 8002658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800266a:	b480      	push	{r7}
 800266c:	b087      	sub	sp, #28
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002684:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	021a      	lsls	r2, r3, #8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	431a      	orrs	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4313      	orrs	r3, r2
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	609a      	str	r2, [r3, #8]
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2201      	movs	r2, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a1a      	ldr	r2, [r3, #32]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a1a      	ldr	r2, [r3, #32]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	431a      	orrs	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002704:	2302      	movs	r3, #2
 8002706:	e041      	b.n	800278c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d009      	beq.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002754:	d004      	beq.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a10      	ldr	r2, [pc, #64]	; (800279c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d10c      	bne.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002766:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	4313      	orrs	r3, r2
 8002770:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40012c00 	.word	0x40012c00
 800279c:	40000400 	.word	0x40000400

080027a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e042      	b.n	8002838 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe f97c 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2224      	movs	r2, #36	; 0x24
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fdc5 	bl	8003374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b20      	cmp	r3, #32
 800285e:	d16d      	bne.n	800293c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_UART_Transmit+0x2c>
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e066      	b.n	800293e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2221      	movs	r2, #33	; 0x21
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800287e:	f7fe fa61 	bl	8000d44 <HAL_GetTick>
 8002882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	88fa      	ldrh	r2, [r7, #6]
 8002888:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	88fa      	ldrh	r2, [r7, #6]
 800288e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002898:	d108      	bne.n	80028ac <HAL_UART_Transmit+0x6c>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d104      	bne.n	80028ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	e003      	b.n	80028b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028b4:	e02a      	b.n	800290c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2200      	movs	r2, #0
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fb14 	bl	8002eee <UART_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e036      	b.n	800293e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	3302      	adds	r3, #2
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	e007      	b.n	80028fe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	3301      	adds	r3, #1
 80028fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1cf      	bne.n	80028b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	2140      	movs	r1, #64	; 0x40
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fae4 	bl	8002eee <UART_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e006      	b.n	800293e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	4613      	mov	r3, r2
 8002952:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	d112      	bne.n	8002986 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_UART_Receive_IT+0x26>
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e00b      	b.n	8002988 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	461a      	mov	r2, r3
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fb24 	bl	8002fca <UART_Start_Receive_IT>
 8002982:	4603      	mov	r3, r0
 8002984:	e000      	b.n	8002988 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b0ba      	sub	sp, #232	; 0xe8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029bc:	2300      	movs	r3, #0
 80029be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_UART_IRQHandler+0x66>
 80029e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fc01 	bl	80031f6 <UART_Receive_IT>
      return;
 80029f4:	e25b      	b.n	8002eae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80de 	beq.w	8002bbc <HAL_UART_IRQHandler+0x22c>
 8002a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d106      	bne.n	8002a1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80d1 	beq.w	8002bbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_UART_IRQHandler+0xae>
 8002a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f043 0201 	orr.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_UART_IRQHandler+0xd2>
 8002a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f043 0202 	orr.w	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_UART_IRQHandler+0xf6>
 8002a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f043 0204 	orr.w	r2, r3, #4
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d011      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x126>
 8002a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d105      	bne.n	8002aaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f043 0208 	orr.w	r2, r3, #8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 81f2 	beq.w	8002ea4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_UART_IRQHandler+0x14e>
 8002acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fb8c 	bl	80031f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <HAL_UART_IRQHandler+0x17a>
 8002b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d04f      	beq.n	8002baa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fa96 	bl	800303c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d041      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3314      	adds	r3, #20
 8002b24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b2c:	e853 3f00 	ldrex	r3, [r3]
 8002b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3314      	adds	r3, #20
 8002b46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1d9      	bne.n	8002b1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d013      	beq.n	8002b9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	4a7e      	ldr	r2, [pc, #504]	; (8002d70 <HAL_UART_IRQHandler+0x3e0>)
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fa32 	bl	8000fe8 <HAL_DMA_Abort_IT>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d016      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b94:	4610      	mov	r0, r2
 8002b96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b98:	e00e      	b.n	8002bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f993 	bl	8002ec6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba0:	e00a      	b.n	8002bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f98f 	bl	8002ec6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba8:	e006      	b.n	8002bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f98b 	bl	8002ec6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002bb6:	e175      	b.n	8002ea4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb8:	bf00      	nop
    return;
 8002bba:	e173      	b.n	8002ea4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	f040 814f 	bne.w	8002e64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8148 	beq.w	8002e64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8141 	beq.w	8002e64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80b6 	beq.w	8002d74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8145 	beq.w	8002ea8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c26:	429a      	cmp	r2, r3
 8002c28:	f080 813e 	bcs.w	8002ea8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	f000 8088 	beq.w	8002d50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	330c      	adds	r3, #12
 8002c68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c6c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c7c:	e841 2300 	strex	r3, r2, [r1]
 8002c80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1d9      	bne.n	8002c40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3314      	adds	r3, #20
 8002c92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c96:	e853 3f00 	ldrex	r3, [r3]
 8002c9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3314      	adds	r3, #20
 8002cac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cb0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cbc:	e841 2300 	strex	r3, r2, [r1]
 8002cc0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e1      	bne.n	8002c8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3314      	adds	r3, #20
 8002cce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3314      	adds	r3, #20
 8002ce8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cf4:	e841 2300 	strex	r3, r2, [r1]
 8002cf8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e3      	bne.n	8002cc8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	330c      	adds	r3, #12
 8002d14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d18:	e853 3f00 	ldrex	r3, [r3]
 8002d1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d20:	f023 0310 	bic.w	r3, r3, #16
 8002d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d32:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d34:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d3a:	e841 2300 	strex	r3, r2, [r1]
 8002d3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1e3      	bne.n	8002d0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe f911 	bl	8000f72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	4619      	mov	r1, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8b6 	bl	8002ed8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d6c:	e09c      	b.n	8002ea8 <HAL_UART_IRQHandler+0x518>
 8002d6e:	bf00      	nop
 8002d70:	08003101 	.word	0x08003101
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 808e 	beq.w	8002eac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8089 	beq.w	8002eac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002db0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002dbe:	647a      	str	r2, [r7, #68]	; 0x44
 8002dc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dc6:	e841 2300 	strex	r3, r2, [r1]
 8002dca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1e3      	bne.n	8002d9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3314      	adds	r3, #20
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	623b      	str	r3, [r7, #32]
   return(result);
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3314      	adds	r3, #20
 8002df2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002df6:	633a      	str	r2, [r7, #48]	; 0x30
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e3      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	e853 3f00 	ldrex	r3, [r3]
 8002e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0310 	bic.w	r3, r3, #16
 8002e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	330c      	adds	r3, #12
 8002e38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e3c:	61fa      	str	r2, [r7, #28]
 8002e3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	69b9      	ldr	r1, [r7, #24]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	e841 2300 	strex	r3, r2, [r1]
 8002e48:	617b      	str	r3, [r7, #20]
   return(result);
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e3      	bne.n	8002e18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f83b 	bl	8002ed8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e62:	e023      	b.n	8002eac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <HAL_UART_IRQHandler+0x4f4>
 8002e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f953 	bl	8003128 <UART_Transmit_IT>
    return;
 8002e82:	e014      	b.n	8002eae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <HAL_UART_IRQHandler+0x51e>
 8002e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f992 	bl	80031c6 <UART_EndTransmit_IT>
    return;
 8002ea2:	e004      	b.n	8002eae <HAL_UART_IRQHandler+0x51e>
    return;
 8002ea4:	bf00      	nop
 8002ea6:	e002      	b.n	8002eae <HAL_UART_IRQHandler+0x51e>
      return;
 8002ea8:	bf00      	nop
 8002eaa:	e000      	b.n	8002eae <HAL_UART_IRQHandler+0x51e>
      return;
 8002eac:	bf00      	nop
  }
}
 8002eae:	37e8      	adds	r7, #232	; 0xe8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b090      	sub	sp, #64	; 0x40
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	4613      	mov	r3, r2
 8002efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002efe:	e050      	b.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d04c      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f0e:	f7fd ff19 	bl	8000d44 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d241      	bcs.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	330c      	adds	r3, #12
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f3e:	637a      	str	r2, [r7, #52]	; 0x34
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f46:	e841 2300 	strex	r3, r2, [r1]
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1e5      	bne.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3314      	adds	r3, #20
 8002f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	613b      	str	r3, [r7, #16]
   return(result);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3314      	adds	r3, #20
 8002f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f72:	623a      	str	r2, [r7, #32]
 8002f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	69f9      	ldr	r1, [r7, #28]
 8002f78:	6a3a      	ldr	r2, [r7, #32]
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e5      	bne.n	8002f52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e00f      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d09f      	beq.n	8002f00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3740      	adds	r7, #64	; 0x40
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	88fa      	ldrh	r2, [r7, #6]
 8002fe2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	88fa      	ldrh	r2, [r7, #6]
 8002fe8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2222      	movs	r2, #34	; 0x22
 8002ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800300e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0220 	orr.w	r2, r2, #32
 800302e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800303c:	b480      	push	{r7}
 800303e:	b095      	sub	sp, #84	; 0x54
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304e:	e853 3f00 	ldrex	r3, [r3]
 8003052:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	330c      	adds	r3, #12
 8003062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003064:	643a      	str	r2, [r7, #64]	; 0x40
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003068:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800306a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800306c:	e841 2300 	strex	r3, r2, [r1]
 8003070:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e5      	bne.n	8003044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3314      	adds	r3, #20
 800307e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	e853 3f00 	ldrex	r3, [r3]
 8003086:	61fb      	str	r3, [r7, #28]
   return(result);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3314      	adds	r3, #20
 8003096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003098:	62fa      	str	r2, [r7, #44]	; 0x2c
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800309e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e5      	bne.n	8003078 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d119      	bne.n	80030e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	330c      	adds	r3, #12
 80030ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	e853 3f00 	ldrex	r3, [r3]
 80030c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f023 0310 	bic.w	r3, r3, #16
 80030ca:	647b      	str	r3, [r7, #68]	; 0x44
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030d4:	61ba      	str	r2, [r7, #24]
 80030d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d8:	6979      	ldr	r1, [r7, #20]
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	e841 2300 	strex	r3, r2, [r1]
 80030e0:	613b      	str	r3, [r7, #16]
   return(result);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e5      	bne.n	80030b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030f6:	bf00      	nop
 80030f8:	3754      	adds	r7, #84	; 0x54
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f7ff fed3 	bl	8002ec6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b21      	cmp	r3, #33	; 0x21
 800313a:	d13e      	bne.n	80031ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003144:	d114      	bne.n	8003170 <UART_Transmit_IT+0x48>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d110      	bne.n	8003170 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003162:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	1c9a      	adds	r2, r3, #2
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	621a      	str	r2, [r3, #32]
 800316e:	e008      	b.n	8003182 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	1c59      	adds	r1, r3, #1
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6211      	str	r1, [r2, #32]
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29b      	uxth	r3, r3
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4619      	mov	r1, r3
 8003190:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10f      	bne.n	80031b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
  }
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff fe64 	bl	8002eb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b08c      	sub	sp, #48	; 0x30
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b22      	cmp	r3, #34	; 0x22
 8003208:	f040 80ae 	bne.w	8003368 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003214:	d117      	bne.n	8003246 <UART_Receive_IT+0x50>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d113      	bne.n	8003246 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003234:	b29a      	uxth	r2, r3
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	1c9a      	adds	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	629a      	str	r2, [r3, #40]	; 0x28
 8003244:	e026      	b.n	8003294 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800324c:	2300      	movs	r3, #0
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003258:	d007      	beq.n	800326a <UART_Receive_IT+0x74>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <UART_Receive_IT+0x82>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e008      	b.n	800328a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003284:	b2da      	uxtb	r2, r3
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29b      	uxth	r3, r3
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4619      	mov	r1, r3
 80032a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d15d      	bne.n	8003364 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0220 	bic.w	r2, r2, #32
 80032b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d135      	bne.n	800335a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	330c      	adds	r3, #12
 80032fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	e853 3f00 	ldrex	r3, [r3]
 8003302:	613b      	str	r3, [r7, #16]
   return(result);
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f023 0310 	bic.w	r3, r3, #16
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	330c      	adds	r3, #12
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	623a      	str	r2, [r7, #32]
 8003316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003318:	69f9      	ldr	r1, [r7, #28]
 800331a:	6a3a      	ldr	r2, [r7, #32]
 800331c:	e841 2300 	strex	r3, r2, [r1]
 8003320:	61bb      	str	r3, [r7, #24]
   return(result);
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1e5      	bne.n	80032f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b10      	cmp	r3, #16
 8003334:	d10a      	bne.n	800334c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff fdc0 	bl	8002ed8 <HAL_UARTEx_RxEventCallback>
 8003358:	e002      	b.n	8003360 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fd f97c 	bl	8000658 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e002      	b.n	800336a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3730      	adds	r7, #48	; 0x30
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033ae:	f023 030c 	bic.w	r3, r3, #12
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a2c      	ldr	r2, [pc, #176]	; (8003488 <UART_SetConfig+0x114>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d103      	bne.n	80033e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033dc:	f7fe fbee 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	e002      	b.n	80033ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033e4:	f7fe fbd6 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 80033e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009a      	lsls	r2, r3, #2
 80033f4:	441a      	add	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	4a22      	ldr	r2, [pc, #136]	; (800348c <UART_SetConfig+0x118>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	0119      	lsls	r1, r3, #4
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	009a      	lsls	r2, r3, #2
 8003414:	441a      	add	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003420:	4b1a      	ldr	r3, [pc, #104]	; (800348c <UART_SetConfig+0x118>)
 8003422:	fba3 0302 	umull	r0, r3, r3, r2
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2064      	movs	r0, #100	; 0x64
 800342a:	fb00 f303 	mul.w	r3, r0, r3
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	3332      	adds	r3, #50	; 0x32
 8003434:	4a15      	ldr	r2, [pc, #84]	; (800348c <UART_SetConfig+0x118>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003440:	4419      	add	r1, r3
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	009a      	lsls	r2, r3, #2
 800344c:	441a      	add	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	fbb2 f2f3 	udiv	r2, r2, r3
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <UART_SetConfig+0x118>)
 800345a:	fba3 0302 	umull	r0, r3, r3, r2
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2064      	movs	r0, #100	; 0x64
 8003462:	fb00 f303 	mul.w	r3, r0, r3
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	3332      	adds	r3, #50	; 0x32
 800346c:	4a07      	ldr	r2, [pc, #28]	; (800348c <UART_SetConfig+0x118>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	f003 020f 	and.w	r2, r3, #15
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	440a      	add	r2, r1
 800347e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40013800 	.word	0x40013800
 800348c:	51eb851f 	.word	0x51eb851f

08003490 <atoi>:
 8003490:	220a      	movs	r2, #10
 8003492:	2100      	movs	r1, #0
 8003494:	f000 b87e 	b.w	8003594 <strtol>

08003498 <_strtol_l.constprop.0>:
 8003498:	2b01      	cmp	r3, #1
 800349a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800349e:	4686      	mov	lr, r0
 80034a0:	4690      	mov	r8, r2
 80034a2:	d001      	beq.n	80034a8 <_strtol_l.constprop.0+0x10>
 80034a4:	2b24      	cmp	r3, #36	; 0x24
 80034a6:	d906      	bls.n	80034b6 <_strtol_l.constprop.0+0x1e>
 80034a8:	f000 f8a6 	bl	80035f8 <__errno>
 80034ac:	2316      	movs	r3, #22
 80034ae:	6003      	str	r3, [r0, #0]
 80034b0:	2000      	movs	r0, #0
 80034b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b6:	460d      	mov	r5, r1
 80034b8:	4835      	ldr	r0, [pc, #212]	; (8003590 <_strtol_l.constprop.0+0xf8>)
 80034ba:	462a      	mov	r2, r5
 80034bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034c0:	5d06      	ldrb	r6, [r0, r4]
 80034c2:	f016 0608 	ands.w	r6, r6, #8
 80034c6:	d1f8      	bne.n	80034ba <_strtol_l.constprop.0+0x22>
 80034c8:	2c2d      	cmp	r4, #45	; 0x2d
 80034ca:	d12e      	bne.n	800352a <_strtol_l.constprop.0+0x92>
 80034cc:	2601      	movs	r6, #1
 80034ce:	782c      	ldrb	r4, [r5, #0]
 80034d0:	1c95      	adds	r5, r2, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d057      	beq.n	8003586 <_strtol_l.constprop.0+0xee>
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d109      	bne.n	80034ee <_strtol_l.constprop.0+0x56>
 80034da:	2c30      	cmp	r4, #48	; 0x30
 80034dc:	d107      	bne.n	80034ee <_strtol_l.constprop.0+0x56>
 80034de:	782a      	ldrb	r2, [r5, #0]
 80034e0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80034e4:	2a58      	cmp	r2, #88	; 0x58
 80034e6:	d149      	bne.n	800357c <_strtol_l.constprop.0+0xe4>
 80034e8:	2310      	movs	r3, #16
 80034ea:	786c      	ldrb	r4, [r5, #1]
 80034ec:	3502      	adds	r5, #2
 80034ee:	2200      	movs	r2, #0
 80034f0:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80034f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80034f8:	fbbc f9f3 	udiv	r9, ip, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	fb03 ca19 	mls	sl, r3, r9, ip
 8003502:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003506:	2f09      	cmp	r7, #9
 8003508:	d814      	bhi.n	8003534 <_strtol_l.constprop.0+0x9c>
 800350a:	463c      	mov	r4, r7
 800350c:	42a3      	cmp	r3, r4
 800350e:	dd20      	ble.n	8003552 <_strtol_l.constprop.0+0xba>
 8003510:	1c57      	adds	r7, r2, #1
 8003512:	d007      	beq.n	8003524 <_strtol_l.constprop.0+0x8c>
 8003514:	4581      	cmp	r9, r0
 8003516:	d319      	bcc.n	800354c <_strtol_l.constprop.0+0xb4>
 8003518:	d101      	bne.n	800351e <_strtol_l.constprop.0+0x86>
 800351a:	45a2      	cmp	sl, r4
 800351c:	db16      	blt.n	800354c <_strtol_l.constprop.0+0xb4>
 800351e:	2201      	movs	r2, #1
 8003520:	fb00 4003 	mla	r0, r0, r3, r4
 8003524:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003528:	e7eb      	b.n	8003502 <_strtol_l.constprop.0+0x6a>
 800352a:	2c2b      	cmp	r4, #43	; 0x2b
 800352c:	bf04      	itt	eq
 800352e:	782c      	ldrbeq	r4, [r5, #0]
 8003530:	1c95      	addeq	r5, r2, #2
 8003532:	e7ce      	b.n	80034d2 <_strtol_l.constprop.0+0x3a>
 8003534:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003538:	2f19      	cmp	r7, #25
 800353a:	d801      	bhi.n	8003540 <_strtol_l.constprop.0+0xa8>
 800353c:	3c37      	subs	r4, #55	; 0x37
 800353e:	e7e5      	b.n	800350c <_strtol_l.constprop.0+0x74>
 8003540:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003544:	2f19      	cmp	r7, #25
 8003546:	d804      	bhi.n	8003552 <_strtol_l.constprop.0+0xba>
 8003548:	3c57      	subs	r4, #87	; 0x57
 800354a:	e7df      	b.n	800350c <_strtol_l.constprop.0+0x74>
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	e7e8      	b.n	8003524 <_strtol_l.constprop.0+0x8c>
 8003552:	1c53      	adds	r3, r2, #1
 8003554:	d108      	bne.n	8003568 <_strtol_l.constprop.0+0xd0>
 8003556:	2322      	movs	r3, #34	; 0x22
 8003558:	4660      	mov	r0, ip
 800355a:	f8ce 3000 	str.w	r3, [lr]
 800355e:	f1b8 0f00 	cmp.w	r8, #0
 8003562:	d0a6      	beq.n	80034b2 <_strtol_l.constprop.0+0x1a>
 8003564:	1e69      	subs	r1, r5, #1
 8003566:	e006      	b.n	8003576 <_strtol_l.constprop.0+0xde>
 8003568:	b106      	cbz	r6, 800356c <_strtol_l.constprop.0+0xd4>
 800356a:	4240      	negs	r0, r0
 800356c:	f1b8 0f00 	cmp.w	r8, #0
 8003570:	d09f      	beq.n	80034b2 <_strtol_l.constprop.0+0x1a>
 8003572:	2a00      	cmp	r2, #0
 8003574:	d1f6      	bne.n	8003564 <_strtol_l.constprop.0+0xcc>
 8003576:	f8c8 1000 	str.w	r1, [r8]
 800357a:	e79a      	b.n	80034b2 <_strtol_l.constprop.0+0x1a>
 800357c:	2430      	movs	r4, #48	; 0x30
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1b5      	bne.n	80034ee <_strtol_l.constprop.0+0x56>
 8003582:	2308      	movs	r3, #8
 8003584:	e7b3      	b.n	80034ee <_strtol_l.constprop.0+0x56>
 8003586:	2c30      	cmp	r4, #48	; 0x30
 8003588:	d0a9      	beq.n	80034de <_strtol_l.constprop.0+0x46>
 800358a:	230a      	movs	r3, #10
 800358c:	e7af      	b.n	80034ee <_strtol_l.constprop.0+0x56>
 800358e:	bf00      	nop
 8003590:	08003f77 	.word	0x08003f77

08003594 <strtol>:
 8003594:	4613      	mov	r3, r2
 8003596:	460a      	mov	r2, r1
 8003598:	4601      	mov	r1, r0
 800359a:	4802      	ldr	r0, [pc, #8]	; (80035a4 <strtol+0x10>)
 800359c:	6800      	ldr	r0, [r0, #0]
 800359e:	f7ff bf7b 	b.w	8003498 <_strtol_l.constprop.0>
 80035a2:	bf00      	nop
 80035a4:	20000058 	.word	0x20000058

080035a8 <siprintf>:
 80035a8:	b40e      	push	{r1, r2, r3}
 80035aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035ae:	b500      	push	{lr}
 80035b0:	b09c      	sub	sp, #112	; 0x70
 80035b2:	ab1d      	add	r3, sp, #116	; 0x74
 80035b4:	9002      	str	r0, [sp, #8]
 80035b6:	9006      	str	r0, [sp, #24]
 80035b8:	9107      	str	r1, [sp, #28]
 80035ba:	9104      	str	r1, [sp, #16]
 80035bc:	4808      	ldr	r0, [pc, #32]	; (80035e0 <siprintf+0x38>)
 80035be:	4909      	ldr	r1, [pc, #36]	; (80035e4 <siprintf+0x3c>)
 80035c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80035c4:	9105      	str	r1, [sp, #20]
 80035c6:	6800      	ldr	r0, [r0, #0]
 80035c8:	a902      	add	r1, sp, #8
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	f000 f98e 	bl	80038ec <_svfiprintf_r>
 80035d0:	2200      	movs	r2, #0
 80035d2:	9b02      	ldr	r3, [sp, #8]
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	b01c      	add	sp, #112	; 0x70
 80035d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035dc:	b003      	add	sp, #12
 80035de:	4770      	bx	lr
 80035e0:	20000058 	.word	0x20000058
 80035e4:	ffff0208 	.word	0xffff0208

080035e8 <memset>:
 80035e8:	4603      	mov	r3, r0
 80035ea:	4402      	add	r2, r0
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d100      	bne.n	80035f2 <memset+0xa>
 80035f0:	4770      	bx	lr
 80035f2:	f803 1b01 	strb.w	r1, [r3], #1
 80035f6:	e7f9      	b.n	80035ec <memset+0x4>

080035f8 <__errno>:
 80035f8:	4b01      	ldr	r3, [pc, #4]	; (8003600 <__errno+0x8>)
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000058 	.word	0x20000058

08003604 <__libc_init_array>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	2600      	movs	r6, #0
 8003608:	4d0c      	ldr	r5, [pc, #48]	; (800363c <__libc_init_array+0x38>)
 800360a:	4c0d      	ldr	r4, [pc, #52]	; (8003640 <__libc_init_array+0x3c>)
 800360c:	1b64      	subs	r4, r4, r5
 800360e:	10a4      	asrs	r4, r4, #2
 8003610:	42a6      	cmp	r6, r4
 8003612:	d109      	bne.n	8003628 <__libc_init_array+0x24>
 8003614:	f000 fc7a 	bl	8003f0c <_init>
 8003618:	2600      	movs	r6, #0
 800361a:	4d0a      	ldr	r5, [pc, #40]	; (8003644 <__libc_init_array+0x40>)
 800361c:	4c0a      	ldr	r4, [pc, #40]	; (8003648 <__libc_init_array+0x44>)
 800361e:	1b64      	subs	r4, r4, r5
 8003620:	10a4      	asrs	r4, r4, #2
 8003622:	42a6      	cmp	r6, r4
 8003624:	d105      	bne.n	8003632 <__libc_init_array+0x2e>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	f855 3b04 	ldr.w	r3, [r5], #4
 800362c:	4798      	blx	r3
 800362e:	3601      	adds	r6, #1
 8003630:	e7ee      	b.n	8003610 <__libc_init_array+0xc>
 8003632:	f855 3b04 	ldr.w	r3, [r5], #4
 8003636:	4798      	blx	r3
 8003638:	3601      	adds	r6, #1
 800363a:	e7f2      	b.n	8003622 <__libc_init_array+0x1e>
 800363c:	080040ac 	.word	0x080040ac
 8003640:	080040ac 	.word	0x080040ac
 8003644:	080040ac 	.word	0x080040ac
 8003648:	080040b0 	.word	0x080040b0

0800364c <__retarget_lock_acquire_recursive>:
 800364c:	4770      	bx	lr

0800364e <__retarget_lock_release_recursive>:
 800364e:	4770      	bx	lr

08003650 <_free_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4605      	mov	r5, r0
 8003654:	2900      	cmp	r1, #0
 8003656:	d040      	beq.n	80036da <_free_r+0x8a>
 8003658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800365c:	1f0c      	subs	r4, r1, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	bfb8      	it	lt
 8003662:	18e4      	addlt	r4, r4, r3
 8003664:	f000 f8dc 	bl	8003820 <__malloc_lock>
 8003668:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <_free_r+0x8c>)
 800366a:	6813      	ldr	r3, [r2, #0]
 800366c:	b933      	cbnz	r3, 800367c <_free_r+0x2c>
 800366e:	6063      	str	r3, [r4, #4]
 8003670:	6014      	str	r4, [r2, #0]
 8003672:	4628      	mov	r0, r5
 8003674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003678:	f000 b8d8 	b.w	800382c <__malloc_unlock>
 800367c:	42a3      	cmp	r3, r4
 800367e:	d908      	bls.n	8003692 <_free_r+0x42>
 8003680:	6820      	ldr	r0, [r4, #0]
 8003682:	1821      	adds	r1, r4, r0
 8003684:	428b      	cmp	r3, r1
 8003686:	bf01      	itttt	eq
 8003688:	6819      	ldreq	r1, [r3, #0]
 800368a:	685b      	ldreq	r3, [r3, #4]
 800368c:	1809      	addeq	r1, r1, r0
 800368e:	6021      	streq	r1, [r4, #0]
 8003690:	e7ed      	b.n	800366e <_free_r+0x1e>
 8003692:	461a      	mov	r2, r3
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	b10b      	cbz	r3, 800369c <_free_r+0x4c>
 8003698:	42a3      	cmp	r3, r4
 800369a:	d9fa      	bls.n	8003692 <_free_r+0x42>
 800369c:	6811      	ldr	r1, [r2, #0]
 800369e:	1850      	adds	r0, r2, r1
 80036a0:	42a0      	cmp	r0, r4
 80036a2:	d10b      	bne.n	80036bc <_free_r+0x6c>
 80036a4:	6820      	ldr	r0, [r4, #0]
 80036a6:	4401      	add	r1, r0
 80036a8:	1850      	adds	r0, r2, r1
 80036aa:	4283      	cmp	r3, r0
 80036ac:	6011      	str	r1, [r2, #0]
 80036ae:	d1e0      	bne.n	8003672 <_free_r+0x22>
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4408      	add	r0, r1
 80036b6:	6010      	str	r0, [r2, #0]
 80036b8:	6053      	str	r3, [r2, #4]
 80036ba:	e7da      	b.n	8003672 <_free_r+0x22>
 80036bc:	d902      	bls.n	80036c4 <_free_r+0x74>
 80036be:	230c      	movs	r3, #12
 80036c0:	602b      	str	r3, [r5, #0]
 80036c2:	e7d6      	b.n	8003672 <_free_r+0x22>
 80036c4:	6820      	ldr	r0, [r4, #0]
 80036c6:	1821      	adds	r1, r4, r0
 80036c8:	428b      	cmp	r3, r1
 80036ca:	bf01      	itttt	eq
 80036cc:	6819      	ldreq	r1, [r3, #0]
 80036ce:	685b      	ldreq	r3, [r3, #4]
 80036d0:	1809      	addeq	r1, r1, r0
 80036d2:	6021      	streq	r1, [r4, #0]
 80036d4:	6063      	str	r3, [r4, #4]
 80036d6:	6054      	str	r4, [r2, #4]
 80036d8:	e7cb      	b.n	8003672 <_free_r+0x22>
 80036da:	bd38      	pop	{r3, r4, r5, pc}
 80036dc:	20000280 	.word	0x20000280

080036e0 <sbrk_aligned>:
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	4e0e      	ldr	r6, [pc, #56]	; (800371c <sbrk_aligned+0x3c>)
 80036e4:	460c      	mov	r4, r1
 80036e6:	6831      	ldr	r1, [r6, #0]
 80036e8:	4605      	mov	r5, r0
 80036ea:	b911      	cbnz	r1, 80036f2 <sbrk_aligned+0x12>
 80036ec:	f000 fbaa 	bl	8003e44 <_sbrk_r>
 80036f0:	6030      	str	r0, [r6, #0]
 80036f2:	4621      	mov	r1, r4
 80036f4:	4628      	mov	r0, r5
 80036f6:	f000 fba5 	bl	8003e44 <_sbrk_r>
 80036fa:	1c43      	adds	r3, r0, #1
 80036fc:	d00a      	beq.n	8003714 <sbrk_aligned+0x34>
 80036fe:	1cc4      	adds	r4, r0, #3
 8003700:	f024 0403 	bic.w	r4, r4, #3
 8003704:	42a0      	cmp	r0, r4
 8003706:	d007      	beq.n	8003718 <sbrk_aligned+0x38>
 8003708:	1a21      	subs	r1, r4, r0
 800370a:	4628      	mov	r0, r5
 800370c:	f000 fb9a 	bl	8003e44 <_sbrk_r>
 8003710:	3001      	adds	r0, #1
 8003712:	d101      	bne.n	8003718 <sbrk_aligned+0x38>
 8003714:	f04f 34ff 	mov.w	r4, #4294967295
 8003718:	4620      	mov	r0, r4
 800371a:	bd70      	pop	{r4, r5, r6, pc}
 800371c:	20000284 	.word	0x20000284

08003720 <_malloc_r>:
 8003720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003724:	1ccd      	adds	r5, r1, #3
 8003726:	f025 0503 	bic.w	r5, r5, #3
 800372a:	3508      	adds	r5, #8
 800372c:	2d0c      	cmp	r5, #12
 800372e:	bf38      	it	cc
 8003730:	250c      	movcc	r5, #12
 8003732:	2d00      	cmp	r5, #0
 8003734:	4607      	mov	r7, r0
 8003736:	db01      	blt.n	800373c <_malloc_r+0x1c>
 8003738:	42a9      	cmp	r1, r5
 800373a:	d905      	bls.n	8003748 <_malloc_r+0x28>
 800373c:	230c      	movs	r3, #12
 800373e:	2600      	movs	r6, #0
 8003740:	603b      	str	r3, [r7, #0]
 8003742:	4630      	mov	r0, r6
 8003744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003748:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800381c <_malloc_r+0xfc>
 800374c:	f000 f868 	bl	8003820 <__malloc_lock>
 8003750:	f8d8 3000 	ldr.w	r3, [r8]
 8003754:	461c      	mov	r4, r3
 8003756:	bb5c      	cbnz	r4, 80037b0 <_malloc_r+0x90>
 8003758:	4629      	mov	r1, r5
 800375a:	4638      	mov	r0, r7
 800375c:	f7ff ffc0 	bl	80036e0 <sbrk_aligned>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	4604      	mov	r4, r0
 8003764:	d155      	bne.n	8003812 <_malloc_r+0xf2>
 8003766:	f8d8 4000 	ldr.w	r4, [r8]
 800376a:	4626      	mov	r6, r4
 800376c:	2e00      	cmp	r6, #0
 800376e:	d145      	bne.n	80037fc <_malloc_r+0xdc>
 8003770:	2c00      	cmp	r4, #0
 8003772:	d048      	beq.n	8003806 <_malloc_r+0xe6>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	4631      	mov	r1, r6
 8003778:	4638      	mov	r0, r7
 800377a:	eb04 0903 	add.w	r9, r4, r3
 800377e:	f000 fb61 	bl	8003e44 <_sbrk_r>
 8003782:	4581      	cmp	r9, r0
 8003784:	d13f      	bne.n	8003806 <_malloc_r+0xe6>
 8003786:	6821      	ldr	r1, [r4, #0]
 8003788:	4638      	mov	r0, r7
 800378a:	1a6d      	subs	r5, r5, r1
 800378c:	4629      	mov	r1, r5
 800378e:	f7ff ffa7 	bl	80036e0 <sbrk_aligned>
 8003792:	3001      	adds	r0, #1
 8003794:	d037      	beq.n	8003806 <_malloc_r+0xe6>
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	442b      	add	r3, r5
 800379a:	6023      	str	r3, [r4, #0]
 800379c:	f8d8 3000 	ldr.w	r3, [r8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d038      	beq.n	8003816 <_malloc_r+0xf6>
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	42a2      	cmp	r2, r4
 80037a8:	d12b      	bne.n	8003802 <_malloc_r+0xe2>
 80037aa:	2200      	movs	r2, #0
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	e00f      	b.n	80037d0 <_malloc_r+0xb0>
 80037b0:	6822      	ldr	r2, [r4, #0]
 80037b2:	1b52      	subs	r2, r2, r5
 80037b4:	d41f      	bmi.n	80037f6 <_malloc_r+0xd6>
 80037b6:	2a0b      	cmp	r2, #11
 80037b8:	d917      	bls.n	80037ea <_malloc_r+0xca>
 80037ba:	1961      	adds	r1, r4, r5
 80037bc:	42a3      	cmp	r3, r4
 80037be:	6025      	str	r5, [r4, #0]
 80037c0:	bf18      	it	ne
 80037c2:	6059      	strne	r1, [r3, #4]
 80037c4:	6863      	ldr	r3, [r4, #4]
 80037c6:	bf08      	it	eq
 80037c8:	f8c8 1000 	streq.w	r1, [r8]
 80037cc:	5162      	str	r2, [r4, r5]
 80037ce:	604b      	str	r3, [r1, #4]
 80037d0:	4638      	mov	r0, r7
 80037d2:	f104 060b 	add.w	r6, r4, #11
 80037d6:	f000 f829 	bl	800382c <__malloc_unlock>
 80037da:	f026 0607 	bic.w	r6, r6, #7
 80037de:	1d23      	adds	r3, r4, #4
 80037e0:	1af2      	subs	r2, r6, r3
 80037e2:	d0ae      	beq.n	8003742 <_malloc_r+0x22>
 80037e4:	1b9b      	subs	r3, r3, r6
 80037e6:	50a3      	str	r3, [r4, r2]
 80037e8:	e7ab      	b.n	8003742 <_malloc_r+0x22>
 80037ea:	42a3      	cmp	r3, r4
 80037ec:	6862      	ldr	r2, [r4, #4]
 80037ee:	d1dd      	bne.n	80037ac <_malloc_r+0x8c>
 80037f0:	f8c8 2000 	str.w	r2, [r8]
 80037f4:	e7ec      	b.n	80037d0 <_malloc_r+0xb0>
 80037f6:	4623      	mov	r3, r4
 80037f8:	6864      	ldr	r4, [r4, #4]
 80037fa:	e7ac      	b.n	8003756 <_malloc_r+0x36>
 80037fc:	4634      	mov	r4, r6
 80037fe:	6876      	ldr	r6, [r6, #4]
 8003800:	e7b4      	b.n	800376c <_malloc_r+0x4c>
 8003802:	4613      	mov	r3, r2
 8003804:	e7cc      	b.n	80037a0 <_malloc_r+0x80>
 8003806:	230c      	movs	r3, #12
 8003808:	4638      	mov	r0, r7
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	f000 f80e 	bl	800382c <__malloc_unlock>
 8003810:	e797      	b.n	8003742 <_malloc_r+0x22>
 8003812:	6025      	str	r5, [r4, #0]
 8003814:	e7dc      	b.n	80037d0 <_malloc_r+0xb0>
 8003816:	605b      	str	r3, [r3, #4]
 8003818:	deff      	udf	#255	; 0xff
 800381a:	bf00      	nop
 800381c:	20000280 	.word	0x20000280

08003820 <__malloc_lock>:
 8003820:	4801      	ldr	r0, [pc, #4]	; (8003828 <__malloc_lock+0x8>)
 8003822:	f7ff bf13 	b.w	800364c <__retarget_lock_acquire_recursive>
 8003826:	bf00      	nop
 8003828:	2000027c 	.word	0x2000027c

0800382c <__malloc_unlock>:
 800382c:	4801      	ldr	r0, [pc, #4]	; (8003834 <__malloc_unlock+0x8>)
 800382e:	f7ff bf0e 	b.w	800364e <__retarget_lock_release_recursive>
 8003832:	bf00      	nop
 8003834:	2000027c 	.word	0x2000027c

08003838 <__ssputs_r>:
 8003838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800383c:	461f      	mov	r7, r3
 800383e:	688e      	ldr	r6, [r1, #8]
 8003840:	4682      	mov	sl, r0
 8003842:	42be      	cmp	r6, r7
 8003844:	460c      	mov	r4, r1
 8003846:	4690      	mov	r8, r2
 8003848:	680b      	ldr	r3, [r1, #0]
 800384a:	d82c      	bhi.n	80038a6 <__ssputs_r+0x6e>
 800384c:	898a      	ldrh	r2, [r1, #12]
 800384e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003852:	d026      	beq.n	80038a2 <__ssputs_r+0x6a>
 8003854:	6965      	ldr	r5, [r4, #20]
 8003856:	6909      	ldr	r1, [r1, #16]
 8003858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800385c:	eba3 0901 	sub.w	r9, r3, r1
 8003860:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003864:	1c7b      	adds	r3, r7, #1
 8003866:	444b      	add	r3, r9
 8003868:	106d      	asrs	r5, r5, #1
 800386a:	429d      	cmp	r5, r3
 800386c:	bf38      	it	cc
 800386e:	461d      	movcc	r5, r3
 8003870:	0553      	lsls	r3, r2, #21
 8003872:	d527      	bpl.n	80038c4 <__ssputs_r+0x8c>
 8003874:	4629      	mov	r1, r5
 8003876:	f7ff ff53 	bl	8003720 <_malloc_r>
 800387a:	4606      	mov	r6, r0
 800387c:	b360      	cbz	r0, 80038d8 <__ssputs_r+0xa0>
 800387e:	464a      	mov	r2, r9
 8003880:	6921      	ldr	r1, [r4, #16]
 8003882:	f000 fafd 	bl	8003e80 <memcpy>
 8003886:	89a3      	ldrh	r3, [r4, #12]
 8003888:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800388c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003890:	81a3      	strh	r3, [r4, #12]
 8003892:	6126      	str	r6, [r4, #16]
 8003894:	444e      	add	r6, r9
 8003896:	6026      	str	r6, [r4, #0]
 8003898:	463e      	mov	r6, r7
 800389a:	6165      	str	r5, [r4, #20]
 800389c:	eba5 0509 	sub.w	r5, r5, r9
 80038a0:	60a5      	str	r5, [r4, #8]
 80038a2:	42be      	cmp	r6, r7
 80038a4:	d900      	bls.n	80038a8 <__ssputs_r+0x70>
 80038a6:	463e      	mov	r6, r7
 80038a8:	4632      	mov	r2, r6
 80038aa:	4641      	mov	r1, r8
 80038ac:	6820      	ldr	r0, [r4, #0]
 80038ae:	f000 faaf 	bl	8003e10 <memmove>
 80038b2:	2000      	movs	r0, #0
 80038b4:	68a3      	ldr	r3, [r4, #8]
 80038b6:	1b9b      	subs	r3, r3, r6
 80038b8:	60a3      	str	r3, [r4, #8]
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	4433      	add	r3, r6
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c4:	462a      	mov	r2, r5
 80038c6:	f000 fae9 	bl	8003e9c <_realloc_r>
 80038ca:	4606      	mov	r6, r0
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d1e0      	bne.n	8003892 <__ssputs_r+0x5a>
 80038d0:	4650      	mov	r0, sl
 80038d2:	6921      	ldr	r1, [r4, #16]
 80038d4:	f7ff febc 	bl	8003650 <_free_r>
 80038d8:	230c      	movs	r3, #12
 80038da:	f8ca 3000 	str.w	r3, [sl]
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e8:	81a3      	strh	r3, [r4, #12]
 80038ea:	e7e9      	b.n	80038c0 <__ssputs_r+0x88>

080038ec <_svfiprintf_r>:
 80038ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f0:	4698      	mov	r8, r3
 80038f2:	898b      	ldrh	r3, [r1, #12]
 80038f4:	4607      	mov	r7, r0
 80038f6:	061b      	lsls	r3, r3, #24
 80038f8:	460d      	mov	r5, r1
 80038fa:	4614      	mov	r4, r2
 80038fc:	b09d      	sub	sp, #116	; 0x74
 80038fe:	d50e      	bpl.n	800391e <_svfiprintf_r+0x32>
 8003900:	690b      	ldr	r3, [r1, #16]
 8003902:	b963      	cbnz	r3, 800391e <_svfiprintf_r+0x32>
 8003904:	2140      	movs	r1, #64	; 0x40
 8003906:	f7ff ff0b 	bl	8003720 <_malloc_r>
 800390a:	6028      	str	r0, [r5, #0]
 800390c:	6128      	str	r0, [r5, #16]
 800390e:	b920      	cbnz	r0, 800391a <_svfiprintf_r+0x2e>
 8003910:	230c      	movs	r3, #12
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	e0d0      	b.n	8003abc <_svfiprintf_r+0x1d0>
 800391a:	2340      	movs	r3, #64	; 0x40
 800391c:	616b      	str	r3, [r5, #20]
 800391e:	2300      	movs	r3, #0
 8003920:	9309      	str	r3, [sp, #36]	; 0x24
 8003922:	2320      	movs	r3, #32
 8003924:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003928:	2330      	movs	r3, #48	; 0x30
 800392a:	f04f 0901 	mov.w	r9, #1
 800392e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003932:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003ad4 <_svfiprintf_r+0x1e8>
 8003936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800393a:	4623      	mov	r3, r4
 800393c:	469a      	mov	sl, r3
 800393e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003942:	b10a      	cbz	r2, 8003948 <_svfiprintf_r+0x5c>
 8003944:	2a25      	cmp	r2, #37	; 0x25
 8003946:	d1f9      	bne.n	800393c <_svfiprintf_r+0x50>
 8003948:	ebba 0b04 	subs.w	fp, sl, r4
 800394c:	d00b      	beq.n	8003966 <_svfiprintf_r+0x7a>
 800394e:	465b      	mov	r3, fp
 8003950:	4622      	mov	r2, r4
 8003952:	4629      	mov	r1, r5
 8003954:	4638      	mov	r0, r7
 8003956:	f7ff ff6f 	bl	8003838 <__ssputs_r>
 800395a:	3001      	adds	r0, #1
 800395c:	f000 80a9 	beq.w	8003ab2 <_svfiprintf_r+0x1c6>
 8003960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003962:	445a      	add	r2, fp
 8003964:	9209      	str	r2, [sp, #36]	; 0x24
 8003966:	f89a 3000 	ldrb.w	r3, [sl]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 80a1 	beq.w	8003ab2 <_svfiprintf_r+0x1c6>
 8003970:	2300      	movs	r3, #0
 8003972:	f04f 32ff 	mov.w	r2, #4294967295
 8003976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800397a:	f10a 0a01 	add.w	sl, sl, #1
 800397e:	9304      	str	r3, [sp, #16]
 8003980:	9307      	str	r3, [sp, #28]
 8003982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003986:	931a      	str	r3, [sp, #104]	; 0x68
 8003988:	4654      	mov	r4, sl
 800398a:	2205      	movs	r2, #5
 800398c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003990:	4850      	ldr	r0, [pc, #320]	; (8003ad4 <_svfiprintf_r+0x1e8>)
 8003992:	f000 fa67 	bl	8003e64 <memchr>
 8003996:	9a04      	ldr	r2, [sp, #16]
 8003998:	b9d8      	cbnz	r0, 80039d2 <_svfiprintf_r+0xe6>
 800399a:	06d0      	lsls	r0, r2, #27
 800399c:	bf44      	itt	mi
 800399e:	2320      	movmi	r3, #32
 80039a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039a4:	0711      	lsls	r1, r2, #28
 80039a6:	bf44      	itt	mi
 80039a8:	232b      	movmi	r3, #43	; 0x2b
 80039aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ae:	f89a 3000 	ldrb.w	r3, [sl]
 80039b2:	2b2a      	cmp	r3, #42	; 0x2a
 80039b4:	d015      	beq.n	80039e2 <_svfiprintf_r+0xf6>
 80039b6:	4654      	mov	r4, sl
 80039b8:	2000      	movs	r0, #0
 80039ba:	f04f 0c0a 	mov.w	ip, #10
 80039be:	9a07      	ldr	r2, [sp, #28]
 80039c0:	4621      	mov	r1, r4
 80039c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039c6:	3b30      	subs	r3, #48	; 0x30
 80039c8:	2b09      	cmp	r3, #9
 80039ca:	d94d      	bls.n	8003a68 <_svfiprintf_r+0x17c>
 80039cc:	b1b0      	cbz	r0, 80039fc <_svfiprintf_r+0x110>
 80039ce:	9207      	str	r2, [sp, #28]
 80039d0:	e014      	b.n	80039fc <_svfiprintf_r+0x110>
 80039d2:	eba0 0308 	sub.w	r3, r0, r8
 80039d6:	fa09 f303 	lsl.w	r3, r9, r3
 80039da:	4313      	orrs	r3, r2
 80039dc:	46a2      	mov	sl, r4
 80039de:	9304      	str	r3, [sp, #16]
 80039e0:	e7d2      	b.n	8003988 <_svfiprintf_r+0x9c>
 80039e2:	9b03      	ldr	r3, [sp, #12]
 80039e4:	1d19      	adds	r1, r3, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	9103      	str	r1, [sp, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bfbb      	ittet	lt
 80039ee:	425b      	neglt	r3, r3
 80039f0:	f042 0202 	orrlt.w	r2, r2, #2
 80039f4:	9307      	strge	r3, [sp, #28]
 80039f6:	9307      	strlt	r3, [sp, #28]
 80039f8:	bfb8      	it	lt
 80039fa:	9204      	strlt	r2, [sp, #16]
 80039fc:	7823      	ldrb	r3, [r4, #0]
 80039fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003a00:	d10c      	bne.n	8003a1c <_svfiprintf_r+0x130>
 8003a02:	7863      	ldrb	r3, [r4, #1]
 8003a04:	2b2a      	cmp	r3, #42	; 0x2a
 8003a06:	d134      	bne.n	8003a72 <_svfiprintf_r+0x186>
 8003a08:	9b03      	ldr	r3, [sp, #12]
 8003a0a:	3402      	adds	r4, #2
 8003a0c:	1d1a      	adds	r2, r3, #4
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	9203      	str	r2, [sp, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bfb8      	it	lt
 8003a16:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a1a:	9305      	str	r3, [sp, #20]
 8003a1c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003ad8 <_svfiprintf_r+0x1ec>
 8003a20:	2203      	movs	r2, #3
 8003a22:	4650      	mov	r0, sl
 8003a24:	7821      	ldrb	r1, [r4, #0]
 8003a26:	f000 fa1d 	bl	8003e64 <memchr>
 8003a2a:	b138      	cbz	r0, 8003a3c <_svfiprintf_r+0x150>
 8003a2c:	2240      	movs	r2, #64	; 0x40
 8003a2e:	9b04      	ldr	r3, [sp, #16]
 8003a30:	eba0 000a 	sub.w	r0, r0, sl
 8003a34:	4082      	lsls	r2, r0
 8003a36:	4313      	orrs	r3, r2
 8003a38:	3401      	adds	r4, #1
 8003a3a:	9304      	str	r3, [sp, #16]
 8003a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a40:	2206      	movs	r2, #6
 8003a42:	4826      	ldr	r0, [pc, #152]	; (8003adc <_svfiprintf_r+0x1f0>)
 8003a44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a48:	f000 fa0c 	bl	8003e64 <memchr>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d038      	beq.n	8003ac2 <_svfiprintf_r+0x1d6>
 8003a50:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <_svfiprintf_r+0x1f4>)
 8003a52:	bb1b      	cbnz	r3, 8003a9c <_svfiprintf_r+0x1b0>
 8003a54:	9b03      	ldr	r3, [sp, #12]
 8003a56:	3307      	adds	r3, #7
 8003a58:	f023 0307 	bic.w	r3, r3, #7
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	9303      	str	r3, [sp, #12]
 8003a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a62:	4433      	add	r3, r6
 8003a64:	9309      	str	r3, [sp, #36]	; 0x24
 8003a66:	e768      	b.n	800393a <_svfiprintf_r+0x4e>
 8003a68:	460c      	mov	r4, r1
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a70:	e7a6      	b.n	80039c0 <_svfiprintf_r+0xd4>
 8003a72:	2300      	movs	r3, #0
 8003a74:	f04f 0c0a 	mov.w	ip, #10
 8003a78:	4619      	mov	r1, r3
 8003a7a:	3401      	adds	r4, #1
 8003a7c:	9305      	str	r3, [sp, #20]
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a84:	3a30      	subs	r2, #48	; 0x30
 8003a86:	2a09      	cmp	r2, #9
 8003a88:	d903      	bls.n	8003a92 <_svfiprintf_r+0x1a6>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0c6      	beq.n	8003a1c <_svfiprintf_r+0x130>
 8003a8e:	9105      	str	r1, [sp, #20]
 8003a90:	e7c4      	b.n	8003a1c <_svfiprintf_r+0x130>
 8003a92:	4604      	mov	r4, r0
 8003a94:	2301      	movs	r3, #1
 8003a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a9a:	e7f0      	b.n	8003a7e <_svfiprintf_r+0x192>
 8003a9c:	ab03      	add	r3, sp, #12
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	462a      	mov	r2, r5
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <_svfiprintf_r+0x1f8>)
 8003aa6:	a904      	add	r1, sp, #16
 8003aa8:	f3af 8000 	nop.w
 8003aac:	1c42      	adds	r2, r0, #1
 8003aae:	4606      	mov	r6, r0
 8003ab0:	d1d6      	bne.n	8003a60 <_svfiprintf_r+0x174>
 8003ab2:	89ab      	ldrh	r3, [r5, #12]
 8003ab4:	065b      	lsls	r3, r3, #25
 8003ab6:	f53f af2d 	bmi.w	8003914 <_svfiprintf_r+0x28>
 8003aba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003abc:	b01d      	add	sp, #116	; 0x74
 8003abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac2:	ab03      	add	r3, sp, #12
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	462a      	mov	r2, r5
 8003ac8:	4638      	mov	r0, r7
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <_svfiprintf_r+0x1f8>)
 8003acc:	a904      	add	r1, sp, #16
 8003ace:	f000 f87d 	bl	8003bcc <_printf_i>
 8003ad2:	e7eb      	b.n	8003aac <_svfiprintf_r+0x1c0>
 8003ad4:	08004077 	.word	0x08004077
 8003ad8:	0800407d 	.word	0x0800407d
 8003adc:	08004081 	.word	0x08004081
 8003ae0:	00000000 	.word	0x00000000
 8003ae4:	08003839 	.word	0x08003839

08003ae8 <_printf_common>:
 8003ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aec:	4616      	mov	r6, r2
 8003aee:	4699      	mov	r9, r3
 8003af0:	688a      	ldr	r2, [r1, #8]
 8003af2:	690b      	ldr	r3, [r1, #16]
 8003af4:	4607      	mov	r7, r0
 8003af6:	4293      	cmp	r3, r2
 8003af8:	bfb8      	it	lt
 8003afa:	4613      	movlt	r3, r2
 8003afc:	6033      	str	r3, [r6, #0]
 8003afe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b02:	460c      	mov	r4, r1
 8003b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b08:	b10a      	cbz	r2, 8003b0e <_printf_common+0x26>
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	6033      	str	r3, [r6, #0]
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	0699      	lsls	r1, r3, #26
 8003b12:	bf42      	ittt	mi
 8003b14:	6833      	ldrmi	r3, [r6, #0]
 8003b16:	3302      	addmi	r3, #2
 8003b18:	6033      	strmi	r3, [r6, #0]
 8003b1a:	6825      	ldr	r5, [r4, #0]
 8003b1c:	f015 0506 	ands.w	r5, r5, #6
 8003b20:	d106      	bne.n	8003b30 <_printf_common+0x48>
 8003b22:	f104 0a19 	add.w	sl, r4, #25
 8003b26:	68e3      	ldr	r3, [r4, #12]
 8003b28:	6832      	ldr	r2, [r6, #0]
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	42ab      	cmp	r3, r5
 8003b2e:	dc2b      	bgt.n	8003b88 <_printf_common+0xa0>
 8003b30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b34:	1e13      	subs	r3, r2, #0
 8003b36:	6822      	ldr	r2, [r4, #0]
 8003b38:	bf18      	it	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	0692      	lsls	r2, r2, #26
 8003b3e:	d430      	bmi.n	8003ba2 <_printf_common+0xba>
 8003b40:	4649      	mov	r1, r9
 8003b42:	4638      	mov	r0, r7
 8003b44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b48:	47c0      	blx	r8
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	d023      	beq.n	8003b96 <_printf_common+0xae>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	6922      	ldr	r2, [r4, #16]
 8003b52:	f003 0306 	and.w	r3, r3, #6
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	bf14      	ite	ne
 8003b5a:	2500      	movne	r5, #0
 8003b5c:	6833      	ldreq	r3, [r6, #0]
 8003b5e:	f04f 0600 	mov.w	r6, #0
 8003b62:	bf08      	it	eq
 8003b64:	68e5      	ldreq	r5, [r4, #12]
 8003b66:	f104 041a 	add.w	r4, r4, #26
 8003b6a:	bf08      	it	eq
 8003b6c:	1aed      	subeq	r5, r5, r3
 8003b6e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b72:	bf08      	it	eq
 8003b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bfc4      	itt	gt
 8003b7c:	1a9b      	subgt	r3, r3, r2
 8003b7e:	18ed      	addgt	r5, r5, r3
 8003b80:	42b5      	cmp	r5, r6
 8003b82:	d11a      	bne.n	8003bba <_printf_common+0xd2>
 8003b84:	2000      	movs	r0, #0
 8003b86:	e008      	b.n	8003b9a <_printf_common+0xb2>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	4652      	mov	r2, sl
 8003b8c:	4649      	mov	r1, r9
 8003b8e:	4638      	mov	r0, r7
 8003b90:	47c0      	blx	r8
 8003b92:	3001      	adds	r0, #1
 8003b94:	d103      	bne.n	8003b9e <_printf_common+0xb6>
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b9e:	3501      	adds	r5, #1
 8003ba0:	e7c1      	b.n	8003b26 <_printf_common+0x3e>
 8003ba2:	2030      	movs	r0, #48	; 0x30
 8003ba4:	18e1      	adds	r1, r4, r3
 8003ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bb0:	4422      	add	r2, r4
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bb8:	e7c2      	b.n	8003b40 <_printf_common+0x58>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	4638      	mov	r0, r7
 8003bc2:	47c0      	blx	r8
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d0e6      	beq.n	8003b96 <_printf_common+0xae>
 8003bc8:	3601      	adds	r6, #1
 8003bca:	e7d9      	b.n	8003b80 <_printf_common+0x98>

08003bcc <_printf_i>:
 8003bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd0:	7e0f      	ldrb	r7, [r1, #24]
 8003bd2:	4691      	mov	r9, r2
 8003bd4:	2f78      	cmp	r7, #120	; 0x78
 8003bd6:	4680      	mov	r8, r0
 8003bd8:	460c      	mov	r4, r1
 8003bda:	469a      	mov	sl, r3
 8003bdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003be2:	d807      	bhi.n	8003bf4 <_printf_i+0x28>
 8003be4:	2f62      	cmp	r7, #98	; 0x62
 8003be6:	d80a      	bhi.n	8003bfe <_printf_i+0x32>
 8003be8:	2f00      	cmp	r7, #0
 8003bea:	f000 80d5 	beq.w	8003d98 <_printf_i+0x1cc>
 8003bee:	2f58      	cmp	r7, #88	; 0x58
 8003bf0:	f000 80c1 	beq.w	8003d76 <_printf_i+0x1aa>
 8003bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bfc:	e03a      	b.n	8003c74 <_printf_i+0xa8>
 8003bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c02:	2b15      	cmp	r3, #21
 8003c04:	d8f6      	bhi.n	8003bf4 <_printf_i+0x28>
 8003c06:	a101      	add	r1, pc, #4	; (adr r1, 8003c0c <_printf_i+0x40>)
 8003c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c0c:	08003c65 	.word	0x08003c65
 8003c10:	08003c79 	.word	0x08003c79
 8003c14:	08003bf5 	.word	0x08003bf5
 8003c18:	08003bf5 	.word	0x08003bf5
 8003c1c:	08003bf5 	.word	0x08003bf5
 8003c20:	08003bf5 	.word	0x08003bf5
 8003c24:	08003c79 	.word	0x08003c79
 8003c28:	08003bf5 	.word	0x08003bf5
 8003c2c:	08003bf5 	.word	0x08003bf5
 8003c30:	08003bf5 	.word	0x08003bf5
 8003c34:	08003bf5 	.word	0x08003bf5
 8003c38:	08003d7f 	.word	0x08003d7f
 8003c3c:	08003ca5 	.word	0x08003ca5
 8003c40:	08003d39 	.word	0x08003d39
 8003c44:	08003bf5 	.word	0x08003bf5
 8003c48:	08003bf5 	.word	0x08003bf5
 8003c4c:	08003da1 	.word	0x08003da1
 8003c50:	08003bf5 	.word	0x08003bf5
 8003c54:	08003ca5 	.word	0x08003ca5
 8003c58:	08003bf5 	.word	0x08003bf5
 8003c5c:	08003bf5 	.word	0x08003bf5
 8003c60:	08003d41 	.word	0x08003d41
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	1d1a      	adds	r2, r3, #4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	602a      	str	r2, [r5, #0]
 8003c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0a0      	b.n	8003dba <_printf_i+0x1ee>
 8003c78:	6820      	ldr	r0, [r4, #0]
 8003c7a:	682b      	ldr	r3, [r5, #0]
 8003c7c:	0607      	lsls	r7, r0, #24
 8003c7e:	f103 0104 	add.w	r1, r3, #4
 8003c82:	6029      	str	r1, [r5, #0]
 8003c84:	d501      	bpl.n	8003c8a <_printf_i+0xbe>
 8003c86:	681e      	ldr	r6, [r3, #0]
 8003c88:	e003      	b.n	8003c92 <_printf_i+0xc6>
 8003c8a:	0646      	lsls	r6, r0, #25
 8003c8c:	d5fb      	bpl.n	8003c86 <_printf_i+0xba>
 8003c8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c92:	2e00      	cmp	r6, #0
 8003c94:	da03      	bge.n	8003c9e <_printf_i+0xd2>
 8003c96:	232d      	movs	r3, #45	; 0x2d
 8003c98:	4276      	negs	r6, r6
 8003c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	4859      	ldr	r0, [pc, #356]	; (8003e08 <_printf_i+0x23c>)
 8003ca2:	e012      	b.n	8003cca <_printf_i+0xfe>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	6820      	ldr	r0, [r4, #0]
 8003ca8:	1d19      	adds	r1, r3, #4
 8003caa:	6029      	str	r1, [r5, #0]
 8003cac:	0605      	lsls	r5, r0, #24
 8003cae:	d501      	bpl.n	8003cb4 <_printf_i+0xe8>
 8003cb0:	681e      	ldr	r6, [r3, #0]
 8003cb2:	e002      	b.n	8003cba <_printf_i+0xee>
 8003cb4:	0641      	lsls	r1, r0, #25
 8003cb6:	d5fb      	bpl.n	8003cb0 <_printf_i+0xe4>
 8003cb8:	881e      	ldrh	r6, [r3, #0]
 8003cba:	2f6f      	cmp	r7, #111	; 0x6f
 8003cbc:	bf0c      	ite	eq
 8003cbe:	2308      	moveq	r3, #8
 8003cc0:	230a      	movne	r3, #10
 8003cc2:	4851      	ldr	r0, [pc, #324]	; (8003e08 <_printf_i+0x23c>)
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cca:	6865      	ldr	r5, [r4, #4]
 8003ccc:	2d00      	cmp	r5, #0
 8003cce:	bfa8      	it	ge
 8003cd0:	6821      	ldrge	r1, [r4, #0]
 8003cd2:	60a5      	str	r5, [r4, #8]
 8003cd4:	bfa4      	itt	ge
 8003cd6:	f021 0104 	bicge.w	r1, r1, #4
 8003cda:	6021      	strge	r1, [r4, #0]
 8003cdc:	b90e      	cbnz	r6, 8003ce2 <_printf_i+0x116>
 8003cde:	2d00      	cmp	r5, #0
 8003ce0:	d04b      	beq.n	8003d7a <_printf_i+0x1ae>
 8003ce2:	4615      	mov	r5, r2
 8003ce4:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ce8:	fb03 6711 	mls	r7, r3, r1, r6
 8003cec:	5dc7      	ldrb	r7, [r0, r7]
 8003cee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cf2:	4637      	mov	r7, r6
 8003cf4:	42bb      	cmp	r3, r7
 8003cf6:	460e      	mov	r6, r1
 8003cf8:	d9f4      	bls.n	8003ce4 <_printf_i+0x118>
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d10b      	bne.n	8003d16 <_printf_i+0x14a>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	07de      	lsls	r6, r3, #31
 8003d02:	d508      	bpl.n	8003d16 <_printf_i+0x14a>
 8003d04:	6923      	ldr	r3, [r4, #16]
 8003d06:	6861      	ldr	r1, [r4, #4]
 8003d08:	4299      	cmp	r1, r3
 8003d0a:	bfde      	ittt	le
 8003d0c:	2330      	movle	r3, #48	; 0x30
 8003d0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d16:	1b52      	subs	r2, r2, r5
 8003d18:	6122      	str	r2, [r4, #16]
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4640      	mov	r0, r8
 8003d20:	f8cd a000 	str.w	sl, [sp]
 8003d24:	aa03      	add	r2, sp, #12
 8003d26:	f7ff fedf 	bl	8003ae8 <_printf_common>
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d14a      	bne.n	8003dc4 <_printf_i+0x1f8>
 8003d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d32:	b004      	add	sp, #16
 8003d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	f043 0320 	orr.w	r3, r3, #32
 8003d3e:	6023      	str	r3, [r4, #0]
 8003d40:	2778      	movs	r7, #120	; 0x78
 8003d42:	4832      	ldr	r0, [pc, #200]	; (8003e0c <_printf_i+0x240>)
 8003d44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	6829      	ldr	r1, [r5, #0]
 8003d4c:	061f      	lsls	r7, r3, #24
 8003d4e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d52:	d402      	bmi.n	8003d5a <_printf_i+0x18e>
 8003d54:	065f      	lsls	r7, r3, #25
 8003d56:	bf48      	it	mi
 8003d58:	b2b6      	uxthmi	r6, r6
 8003d5a:	07df      	lsls	r7, r3, #31
 8003d5c:	bf48      	it	mi
 8003d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d62:	6029      	str	r1, [r5, #0]
 8003d64:	bf48      	it	mi
 8003d66:	6023      	strmi	r3, [r4, #0]
 8003d68:	b91e      	cbnz	r6, 8003d72 <_printf_i+0x1a6>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	f023 0320 	bic.w	r3, r3, #32
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	2310      	movs	r3, #16
 8003d74:	e7a6      	b.n	8003cc4 <_printf_i+0xf8>
 8003d76:	4824      	ldr	r0, [pc, #144]	; (8003e08 <_printf_i+0x23c>)
 8003d78:	e7e4      	b.n	8003d44 <_printf_i+0x178>
 8003d7a:	4615      	mov	r5, r2
 8003d7c:	e7bd      	b.n	8003cfa <_printf_i+0x12e>
 8003d7e:	682b      	ldr	r3, [r5, #0]
 8003d80:	6826      	ldr	r6, [r4, #0]
 8003d82:	1d18      	adds	r0, r3, #4
 8003d84:	6961      	ldr	r1, [r4, #20]
 8003d86:	6028      	str	r0, [r5, #0]
 8003d88:	0635      	lsls	r5, r6, #24
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	d501      	bpl.n	8003d92 <_printf_i+0x1c6>
 8003d8e:	6019      	str	r1, [r3, #0]
 8003d90:	e002      	b.n	8003d98 <_printf_i+0x1cc>
 8003d92:	0670      	lsls	r0, r6, #25
 8003d94:	d5fb      	bpl.n	8003d8e <_printf_i+0x1c2>
 8003d96:	8019      	strh	r1, [r3, #0]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4615      	mov	r5, r2
 8003d9c:	6123      	str	r3, [r4, #16]
 8003d9e:	e7bc      	b.n	8003d1a <_printf_i+0x14e>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	2100      	movs	r1, #0
 8003da4:	1d1a      	adds	r2, r3, #4
 8003da6:	602a      	str	r2, [r5, #0]
 8003da8:	681d      	ldr	r5, [r3, #0]
 8003daa:	6862      	ldr	r2, [r4, #4]
 8003dac:	4628      	mov	r0, r5
 8003dae:	f000 f859 	bl	8003e64 <memchr>
 8003db2:	b108      	cbz	r0, 8003db8 <_printf_i+0x1ec>
 8003db4:	1b40      	subs	r0, r0, r5
 8003db6:	6060      	str	r0, [r4, #4]
 8003db8:	6863      	ldr	r3, [r4, #4]
 8003dba:	6123      	str	r3, [r4, #16]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dc2:	e7aa      	b.n	8003d1a <_printf_i+0x14e>
 8003dc4:	462a      	mov	r2, r5
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	4640      	mov	r0, r8
 8003dca:	6923      	ldr	r3, [r4, #16]
 8003dcc:	47d0      	blx	sl
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d0ad      	beq.n	8003d2e <_printf_i+0x162>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	079b      	lsls	r3, r3, #30
 8003dd6:	d413      	bmi.n	8003e00 <_printf_i+0x234>
 8003dd8:	68e0      	ldr	r0, [r4, #12]
 8003dda:	9b03      	ldr	r3, [sp, #12]
 8003ddc:	4298      	cmp	r0, r3
 8003dde:	bfb8      	it	lt
 8003de0:	4618      	movlt	r0, r3
 8003de2:	e7a6      	b.n	8003d32 <_printf_i+0x166>
 8003de4:	2301      	movs	r3, #1
 8003de6:	4632      	mov	r2, r6
 8003de8:	4649      	mov	r1, r9
 8003dea:	4640      	mov	r0, r8
 8003dec:	47d0      	blx	sl
 8003dee:	3001      	adds	r0, #1
 8003df0:	d09d      	beq.n	8003d2e <_printf_i+0x162>
 8003df2:	3501      	adds	r5, #1
 8003df4:	68e3      	ldr	r3, [r4, #12]
 8003df6:	9903      	ldr	r1, [sp, #12]
 8003df8:	1a5b      	subs	r3, r3, r1
 8003dfa:	42ab      	cmp	r3, r5
 8003dfc:	dcf2      	bgt.n	8003de4 <_printf_i+0x218>
 8003dfe:	e7eb      	b.n	8003dd8 <_printf_i+0x20c>
 8003e00:	2500      	movs	r5, #0
 8003e02:	f104 0619 	add.w	r6, r4, #25
 8003e06:	e7f5      	b.n	8003df4 <_printf_i+0x228>
 8003e08:	08004088 	.word	0x08004088
 8003e0c:	08004099 	.word	0x08004099

08003e10 <memmove>:
 8003e10:	4288      	cmp	r0, r1
 8003e12:	b510      	push	{r4, lr}
 8003e14:	eb01 0402 	add.w	r4, r1, r2
 8003e18:	d902      	bls.n	8003e20 <memmove+0x10>
 8003e1a:	4284      	cmp	r4, r0
 8003e1c:	4623      	mov	r3, r4
 8003e1e:	d807      	bhi.n	8003e30 <memmove+0x20>
 8003e20:	1e43      	subs	r3, r0, #1
 8003e22:	42a1      	cmp	r1, r4
 8003e24:	d008      	beq.n	8003e38 <memmove+0x28>
 8003e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e2e:	e7f8      	b.n	8003e22 <memmove+0x12>
 8003e30:	4601      	mov	r1, r0
 8003e32:	4402      	add	r2, r0
 8003e34:	428a      	cmp	r2, r1
 8003e36:	d100      	bne.n	8003e3a <memmove+0x2a>
 8003e38:	bd10      	pop	{r4, pc}
 8003e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e42:	e7f7      	b.n	8003e34 <memmove+0x24>

08003e44 <_sbrk_r>:
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	2300      	movs	r3, #0
 8003e48:	4d05      	ldr	r5, [pc, #20]	; (8003e60 <_sbrk_r+0x1c>)
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	602b      	str	r3, [r5, #0]
 8003e50:	f7fc febe 	bl	8000bd0 <_sbrk>
 8003e54:	1c43      	adds	r3, r0, #1
 8003e56:	d102      	bne.n	8003e5e <_sbrk_r+0x1a>
 8003e58:	682b      	ldr	r3, [r5, #0]
 8003e5a:	b103      	cbz	r3, 8003e5e <_sbrk_r+0x1a>
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	bd38      	pop	{r3, r4, r5, pc}
 8003e60:	20000278 	.word	0x20000278

08003e64 <memchr>:
 8003e64:	4603      	mov	r3, r0
 8003e66:	b510      	push	{r4, lr}
 8003e68:	b2c9      	uxtb	r1, r1
 8003e6a:	4402      	add	r2, r0
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	d101      	bne.n	8003e76 <memchr+0x12>
 8003e72:	2000      	movs	r0, #0
 8003e74:	e003      	b.n	8003e7e <memchr+0x1a>
 8003e76:	7804      	ldrb	r4, [r0, #0]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	428c      	cmp	r4, r1
 8003e7c:	d1f6      	bne.n	8003e6c <memchr+0x8>
 8003e7e:	bd10      	pop	{r4, pc}

08003e80 <memcpy>:
 8003e80:	440a      	add	r2, r1
 8003e82:	4291      	cmp	r1, r2
 8003e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e88:	d100      	bne.n	8003e8c <memcpy+0xc>
 8003e8a:	4770      	bx	lr
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e92:	4291      	cmp	r1, r2
 8003e94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e98:	d1f9      	bne.n	8003e8e <memcpy+0xe>
 8003e9a:	bd10      	pop	{r4, pc}

08003e9c <_realloc_r>:
 8003e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea0:	4680      	mov	r8, r0
 8003ea2:	4614      	mov	r4, r2
 8003ea4:	460e      	mov	r6, r1
 8003ea6:	b921      	cbnz	r1, 8003eb2 <_realloc_r+0x16>
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eae:	f7ff bc37 	b.w	8003720 <_malloc_r>
 8003eb2:	b92a      	cbnz	r2, 8003ec0 <_realloc_r+0x24>
 8003eb4:	f7ff fbcc 	bl	8003650 <_free_r>
 8003eb8:	4625      	mov	r5, r4
 8003eba:	4628      	mov	r0, r5
 8003ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ec0:	f000 f81b 	bl	8003efa <_malloc_usable_size_r>
 8003ec4:	4284      	cmp	r4, r0
 8003ec6:	4607      	mov	r7, r0
 8003ec8:	d802      	bhi.n	8003ed0 <_realloc_r+0x34>
 8003eca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ece:	d812      	bhi.n	8003ef6 <_realloc_r+0x5a>
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	f7ff fc24 	bl	8003720 <_malloc_r>
 8003ed8:	4605      	mov	r5, r0
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d0ed      	beq.n	8003eba <_realloc_r+0x1e>
 8003ede:	42bc      	cmp	r4, r7
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	bf28      	it	cs
 8003ee6:	463a      	movcs	r2, r7
 8003ee8:	f7ff ffca 	bl	8003e80 <memcpy>
 8003eec:	4631      	mov	r1, r6
 8003eee:	4640      	mov	r0, r8
 8003ef0:	f7ff fbae 	bl	8003650 <_free_r>
 8003ef4:	e7e1      	b.n	8003eba <_realloc_r+0x1e>
 8003ef6:	4635      	mov	r5, r6
 8003ef8:	e7df      	b.n	8003eba <_realloc_r+0x1e>

08003efa <_malloc_usable_size_r>:
 8003efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003efe:	1f18      	subs	r0, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bfbc      	itt	lt
 8003f04:	580b      	ldrlt	r3, [r1, r0]
 8003f06:	18c0      	addlt	r0, r0, r3
 8003f08:	4770      	bx	lr
	...

08003f0c <_init>:
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0e:	bf00      	nop
 8003f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f12:	bc08      	pop	{r3}
 8003f14:	469e      	mov	lr, r3
 8003f16:	4770      	bx	lr

08003f18 <_fini>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	bf00      	nop
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr
