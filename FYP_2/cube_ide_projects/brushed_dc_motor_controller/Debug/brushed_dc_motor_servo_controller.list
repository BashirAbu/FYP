
brushed_dc_motor_servo_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003c20  08003c20  00013c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c9c  08003c9c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003c9c  08003c9c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c9c  08003c9c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ca0  08003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000060  08003d04  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08003d04  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bdee  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c01  00000000  00000000  0002beba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  0002dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000970  00000000  00000000  0002e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001769a  00000000  00000000  0002f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d95e  00000000  00000000  000466d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000882a2  00000000  00000000  00054030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003780  00000000  00000000  000dc2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000dfa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c08 	.word	0x08003c08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003c08 	.word	0x08003c08

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t buffer[sizeof(ConfigData)];
uint8_t bufferIndex = 0;
ConfigData data;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000164:	2201      	movs	r2, #1
 8000166:	4915      	ldr	r1, [pc, #84]	; (80001bc <HAL_UART_RxCpltCallback+0x60>)
 8000168:	4815      	ldr	r0, [pc, #84]	; (80001c0 <HAL_UART_RxCpltCallback+0x64>)
 800016a:	f002 faf5 	bl	8002758 <HAL_UART_Receive_IT>
  buffer[bufferIndex] = rx_buffer[0];
 800016e:	4b15      	ldr	r3, [pc, #84]	; (80001c4 <HAL_UART_RxCpltCallback+0x68>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	461a      	mov	r2, r3
 8000174:	4b11      	ldr	r3, [pc, #68]	; (80001bc <HAL_UART_RxCpltCallback+0x60>)
 8000176:	7819      	ldrb	r1, [r3, #0]
 8000178:	4b13      	ldr	r3, [pc, #76]	; (80001c8 <HAL_UART_RxCpltCallback+0x6c>)
 800017a:	5499      	strb	r1, [r3, r2]
  bufferIndex++;
 800017c:	4b11      	ldr	r3, [pc, #68]	; (80001c4 <HAL_UART_RxCpltCallback+0x68>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	3301      	adds	r3, #1
 8000182:	b2da      	uxtb	r2, r3
 8000184:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <HAL_UART_RxCpltCallback+0x68>)
 8000186:	701a      	strb	r2, [r3, #0]
	if(bufferIndex == sizeof(ConfigData))
 8000188:	4b0e      	ldr	r3, [pc, #56]	; (80001c4 <HAL_UART_RxCpltCallback+0x68>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b1c      	cmp	r3, #28
 800018e:	d111      	bne.n	80001b4 <HAL_UART_RxCpltCallback+0x58>
	{
		bufferIndex = 0;
 8000190:	4b0c      	ldr	r3, [pc, #48]	; (80001c4 <HAL_UART_RxCpltCallback+0x68>)
 8000192:	2200      	movs	r2, #0
 8000194:	701a      	strb	r2, [r3, #0]
		memset(&data,0 , sizeof(data));
 8000196:	221c      	movs	r2, #28
 8000198:	2100      	movs	r1, #0
 800019a:	480c      	ldr	r0, [pc, #48]	; (80001cc <HAL_UART_RxCpltCallback+0x70>)
 800019c:	f003 f8a2 	bl	80032e4 <memset>
		memcpy(&data, buffer, sizeof(buffer));
 80001a0:	4a0a      	ldr	r2, [pc, #40]	; (80001cc <HAL_UART_RxCpltCallback+0x70>)
 80001a2:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <HAL_UART_RxCpltCallback+0x6c>)
 80001a4:	4614      	mov	r4, r2
 80001a6:	461d      	mov	r5, r3
 80001a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//	{
//		recieved_buffer[recieved_buffer_index] = rx_buffer[0];
//		recieved_buffer_index++;
//		recieved_buffer_index = recieved_buffer_index % RECIEVED_BUFFER_SIZE;
//	}
}
 80001b4:	bf00      	nop
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bdb0      	pop	{r4, r5, r7, pc}
 80001bc:	2000010c 	.word	0x2000010c
 80001c0:	200000c4 	.word	0x200000c4
 80001c4:	20000138 	.word	0x20000138
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	2000013c 	.word	0x2000013c

080001d0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b08c      	sub	sp, #48	; 0x30
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_6)
 80001da:	88fb      	ldrh	r3, [r7, #6]
 80001dc:	2b40      	cmp	r3, #64	; 0x40
 80001de:	d129      	bne.n	8000234 <HAL_GPIO_EXTI_Callback+0x64>
  {
	  int32_t inc = 0;
 80001e0:	2300      	movs	r3, #0
 80001e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80001e4:	2180      	movs	r1, #128	; 0x80
 80001e6:	4815      	ldr	r0, [pc, #84]	; (800023c <HAL_GPIO_EXTI_Callback+0x6c>)
 80001e8:	f000 ff96 	bl	8001118 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d002      	beq.n	80001f8 <HAL_GPIO_EXTI_Callback+0x28>
	  {
		   inc = 1;
 80001f2:	2301      	movs	r3, #1
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80001f6:	e002      	b.n	80001fe <HAL_GPIO_EXTI_Callback+0x2e>
	  }
	  else
	  {
		  inc = -1;
 80001f8:	f04f 33ff 	mov.w	r3, #4294967295
 80001fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }
	  motor_position += inc;
 80001fe:	4b10      	ldr	r3, [pc, #64]	; (8000240 <HAL_GPIO_EXTI_Callback+0x70>)
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000204:	4413      	add	r3, r2
 8000206:	4a0e      	ldr	r2, [pc, #56]	; (8000240 <HAL_GPIO_EXTI_Callback+0x70>)
 8000208:	6013      	str	r3, [r2, #0]
	  char buff[32];
	  sprintf(buff, "pos: %ld\n\r", motor_position);
 800020a:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <HAL_GPIO_EXTI_Callback+0x70>)
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	f107 030c 	add.w	r3, r7, #12
 8000212:	490c      	ldr	r1, [pc, #48]	; (8000244 <HAL_GPIO_EXTI_Callback+0x74>)
 8000214:	4618      	mov	r0, r3
 8000216:	f003 f845 	bl	80032a4 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, (uint8_t*)buff, strlen(buff));
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	4618      	mov	r0, r3
 8000220:	f7ff ff94 	bl	800014c <strlen>
 8000224:	4603      	mov	r3, r0
 8000226:	b29a      	uxth	r2, r3
 8000228:	f107 030c 	add.w	r3, r7, #12
 800022c:	4619      	mov	r1, r3
 800022e:	4806      	ldr	r0, [pc, #24]	; (8000248 <HAL_GPIO_EXTI_Callback+0x78>)
 8000230:	f002 fa5d 	bl	80026ee <HAL_UART_Transmit_IT>
  }
}
 8000234:	bf00      	nop
 8000236:	3730      	adds	r7, #48	; 0x30
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	40010c00 	.word	0x40010c00
 8000240:	20000110 	.word	0x20000110
 8000244:	08003c20 	.word	0x08003c20
 8000248:	200000c4 	.word	0x200000c4

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000252:	f000 fb9f 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000256:	f000 f8dd 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025a:	f000 f9c7 	bl	80005ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800025e:	f000 f99b 	bl	8000598 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000262:	f000 f917 	bl	8000494 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000266:	2201      	movs	r2, #1
 8000268:	495f      	ldr	r1, [pc, #380]	; (80003e8 <main+0x19c>)
 800026a:	4860      	ldr	r0, [pc, #384]	; (80003ec <main+0x1a0>)
 800026c:	f002 fa74 	bl	8002758 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000270:	2100      	movs	r1, #0
 8000272:	485f      	ldr	r0, [pc, #380]	; (80003f0 <main+0x1a4>)
 8000274:	f001 fc50 	bl	8001b18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000278:	2104      	movs	r1, #4
 800027a:	485d      	ldr	r0, [pc, #372]	; (80003f0 <main+0x1a4>)
 800027c:	f001 fc4c 	bl	8001b18 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 8000280:	4b5b      	ldr	r3, [pc, #364]	; (80003f0 <main+0x1a4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2200      	movs	r2, #0
 8000286:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028e:	4859      	ldr	r0, [pc, #356]	; (80003f4 <main+0x1a8>)
 8000290:	f000 ff59 	bl	8001146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800029a:	4856      	ldr	r0, [pc, #344]	; (80003f4 <main+0x1a8>)
 800029c:	f000 ff53 	bl	8001146 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(changeMotorDirection)
 80002a0:	4b55      	ldr	r3, [pc, #340]	; (80003f8 <main+0x1ac>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d070      	beq.n	800038a <main+0x13e>
	  {
		  switch(motorDirection)
 80002a8:	4b54      	ldr	r3, [pc, #336]	; (80003fc <main+0x1b0>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d002      	beq.n	80002b6 <main+0x6a>
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d035      	beq.n	8000320 <main+0xd4>
 80002b4:	e066      	b.n	8000384 <main+0x138>
		  {
		  case ClockWise:
		  {
			  PWM_CurrentChannel = PWM_CLOCKWISE_CHANNEL;
 80002b6:	4b52      	ldr	r3, [pc, #328]	; (8000400 <main+0x1b4>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 80002bc:	4b4c      	ldr	r3, [pc, #304]	; (80003f0 <main+0x1a4>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2200      	movs	r2, #0
 80002c2:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, 0);
 80002c4:	4b4a      	ldr	r3, [pc, #296]	; (80003f0 <main+0x1a4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2200      	movs	r2, #0
 80002ca:	635a      	str	r2, [r3, #52]	; 0x34
			  //delay here
			  HAL_Delay(PWM_DEADTIME_DELAY);
 80002cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d0:	f000 fbc2 	bl	8000a58 <HAL_Delay>
			  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, PWM_countingDutyCycle);
 80002d4:	4b4b      	ldr	r3, [pc, #300]	; (8000404 <main+0x1b8>)
 80002d6:	781a      	ldrb	r2, [r3, #0]
 80002d8:	4b45      	ldr	r3, [pc, #276]	; (80003f0 <main+0x1a4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_SET);
 80002de:	2201      	movs	r2, #1
 80002e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e4:	4843      	ldr	r0, [pc, #268]	; (80003f4 <main+0x1a8>)
 80002e6:	f000 ff2e 	bl	8001146 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f0:	4840      	ldr	r0, [pc, #256]	; (80003f4 <main+0x1a8>)
 80002f2:	f000 ff28 	bl	8001146 <HAL_GPIO_WritePin>
			  char buff[6];
			  sprintf(buff, "CW\n\r");
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	4943      	ldr	r1, [pc, #268]	; (8000408 <main+0x1bc>)
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 ffd1 	bl	80032a4 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff20 	bl	800014c <strlen>
 800030c:	4603      	mov	r3, r0
 800030e:	b29a      	uxth	r2, r3
 8000310:	f107 0108 	add.w	r1, r7, #8
 8000314:	f04f 33ff 	mov.w	r3, #4294967295
 8000318:	4834      	ldr	r0, [pc, #208]	; (80003ec <main+0x1a0>)
 800031a:	f002 f965 	bl	80025e8 <HAL_UART_Transmit>
		  }break;
 800031e:	e031      	b.n	8000384 <main+0x138>
		  case CounterClockWise:
		  {
			  PWM_CurrentChannel = PWM_COUNTER_CLOCKWISE_CHANNEL;
 8000320:	4b37      	ldr	r3, [pc, #220]	; (8000400 <main+0x1b4>)
 8000322:	2204      	movs	r2, #4
 8000324:	601a      	str	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, 0);
 8000326:	4b32      	ldr	r3, [pc, #200]	; (80003f0 <main+0x1a4>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2200      	movs	r2, #0
 800032c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 800032e:	4b30      	ldr	r3, [pc, #192]	; (80003f0 <main+0x1a4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2200      	movs	r2, #0
 8000334:	639a      	str	r2, [r3, #56]	; 0x38
			  //delay here
			  HAL_Delay(PWM_DEADTIME_DELAY);
 8000336:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800033a:	f000 fb8d 	bl	8000a58 <HAL_Delay>
			  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, PWM_countingDutyCycle);
 800033e:	4b31      	ldr	r3, [pc, #196]	; (8000404 <main+0x1b8>)
 8000340:	781a      	ldrb	r2, [r3, #0]
 8000342:	4b2b      	ldr	r3, [pc, #172]	; (80003f0 <main+0x1a4>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	639a      	str	r2, [r3, #56]	; 0x38
			  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800034e:	4829      	ldr	r0, [pc, #164]	; (80003f4 <main+0x1a8>)
 8000350:	f000 fef9 	bl	8001146 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035a:	4826      	ldr	r0, [pc, #152]	; (80003f4 <main+0x1a8>)
 800035c:	f000 fef3 	bl	8001146 <HAL_GPIO_WritePin>
			  char buff[6];
			  sprintf(buff, "CCW\n\r");
 8000360:	463b      	mov	r3, r7
 8000362:	492a      	ldr	r1, [pc, #168]	; (800040c <main+0x1c0>)
 8000364:	4618      	mov	r0, r3
 8000366:	f002 ff9d 	bl	80032a4 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 800036a:	463b      	mov	r3, r7
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff feed 	bl	800014c <strlen>
 8000372:	4603      	mov	r3, r0
 8000374:	b29a      	uxth	r2, r3
 8000376:	4639      	mov	r1, r7
 8000378:	f04f 33ff 	mov.w	r3, #4294967295
 800037c:	481b      	ldr	r0, [pc, #108]	; (80003ec <main+0x1a0>)
 800037e:	f002 f933 	bl	80025e8 <HAL_UART_Transmit>
		  }break;
 8000382:	bf00      	nop
		  }
		  changeMotorDirection = 0;
 8000384:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <main+0x1ac>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
	  }
	  if(changePWM_DutyCycle)
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <main+0x1c4>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d086      	beq.n	80002a0 <main+0x54>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, PWM_countingDutyCycle);
 8000392:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <main+0x1b4>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d105      	bne.n	80003a6 <main+0x15a>
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <main+0x1b8>)
 800039c:	781a      	ldrb	r2, [r3, #0]
 800039e:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <main+0x1a4>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	635a      	str	r2, [r3, #52]	; 0x34
 80003a4:	e01b      	b.n	80003de <main+0x192>
 80003a6:	4b16      	ldr	r3, [pc, #88]	; (8000400 <main+0x1b4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	d106      	bne.n	80003bc <main+0x170>
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <main+0x1b8>)
 80003b0:	7819      	ldrb	r1, [r3, #0]
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <main+0x1a4>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	460b      	mov	r3, r1
 80003b8:	6393      	str	r3, [r2, #56]	; 0x38
 80003ba:	e010      	b.n	80003de <main+0x192>
 80003bc:	4b10      	ldr	r3, [pc, #64]	; (8000400 <main+0x1b4>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b08      	cmp	r3, #8
 80003c2:	d106      	bne.n	80003d2 <main+0x186>
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <main+0x1b8>)
 80003c6:	7819      	ldrb	r1, [r3, #0]
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <main+0x1a4>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	460b      	mov	r3, r1
 80003ce:	63d3      	str	r3, [r2, #60]	; 0x3c
 80003d0:	e005      	b.n	80003de <main+0x192>
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <main+0x1b8>)
 80003d4:	7819      	ldrb	r1, [r3, #0]
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <main+0x1a4>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	460b      	mov	r3, r1
 80003dc:	6413      	str	r3, [r2, #64]	; 0x40

		  changePWM_DutyCycle = 0;
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <main+0x1c4>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
	  if(changeMotorDirection)
 80003e4:	e75c      	b.n	80002a0 <main+0x54>
 80003e6:	bf00      	nop
 80003e8:	2000010c 	.word	0x2000010c
 80003ec:	200000c4 	.word	0x200000c4
 80003f0:	2000007c 	.word	0x2000007c
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	20000118 	.word	0x20000118
 80003fc:	2000010d 	.word	0x2000010d
 8000400:	20000114 	.word	0x20000114
 8000404:	20000000 	.word	0x20000000
 8000408:	08003c2c 	.word	0x08003c2c
 800040c:	08003c34 	.word	0x08003c34
 8000410:	20000119 	.word	0x20000119

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b090      	sub	sp, #64	; 0x40
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	f107 0318 	add.w	r3, r7, #24
 800041e:	2228      	movs	r2, #40	; 0x28
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f002 ff5e 	bl	80032e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
 8000434:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000436:	2302      	movs	r3, #2
 8000438:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043a:	2301      	movs	r3, #1
 800043c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043e:	2310      	movs	r3, #16
 8000440:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000446:	2300      	movs	r3, #0
 8000448:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800044a:	2300      	movs	r3, #0
 800044c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044e:	f107 0318 	add.w	r3, r7, #24
 8000452:	4618      	mov	r0, r3
 8000454:	f000 fea8 	bl	80011a8 <HAL_RCC_OscConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800045e:	f000 f927 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000462:	230f      	movs	r3, #15
 8000464:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000466:	2302      	movs	r3, #2
 8000468:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800046e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2100      	movs	r1, #0
 800047c:	4618      	mov	r0, r3
 800047e:	f001 f915 	bl	80016ac <HAL_RCC_ClockConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000488:	f000 f912 	bl	80006b0 <Error_Handler>
  }
}
 800048c:	bf00      	nop
 800048e:	3740      	adds	r7, #64	; 0x40
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08e      	sub	sp, #56	; 0x38
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a8:	f107 0320 	add.w	r3, r7, #32
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
 80004c0:	615a      	str	r2, [r3, #20]
 80004c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004c4:	4b33      	ldr	r3, [pc, #204]	; (8000594 <MX_TIM2_Init+0x100>)
 80004c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004cc:	4b31      	ldr	r3, [pc, #196]	; (8000594 <MX_TIM2_Init+0x100>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d2:	4b30      	ldr	r3, [pc, #192]	; (8000594 <MX_TIM2_Init+0x100>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80004d8:	4b2e      	ldr	r3, [pc, #184]	; (8000594 <MX_TIM2_Init+0x100>)
 80004da:	22ff      	movs	r2, #255	; 0xff
 80004dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004de:	4b2d      	ldr	r3, [pc, #180]	; (8000594 <MX_TIM2_Init+0x100>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004e4:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <MX_TIM2_Init+0x100>)
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004ea:	482a      	ldr	r0, [pc, #168]	; (8000594 <MX_TIM2_Init+0x100>)
 80004ec:	f001 fa6c 	bl	80019c8 <HAL_TIM_Base_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80004f6:	f000 f8db 	bl	80006b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000500:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000504:	4619      	mov	r1, r3
 8000506:	4823      	ldr	r0, [pc, #140]	; (8000594 <MX_TIM2_Init+0x100>)
 8000508:	f001 fc64 	bl	8001dd4 <HAL_TIM_ConfigClockSource>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000512:	f000 f8cd 	bl	80006b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000516:	481f      	ldr	r0, [pc, #124]	; (8000594 <MX_TIM2_Init+0x100>)
 8000518:	f001 faa5 	bl	8001a66 <HAL_TIM_PWM_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000522:	f000 f8c5 	bl	80006b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000526:	2300      	movs	r3, #0
 8000528:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	4619      	mov	r1, r3
 8000534:	4817      	ldr	r0, [pc, #92]	; (8000594 <MX_TIM2_Init+0x100>)
 8000536:	f001 ffaf 	bl	8002498 <HAL_TIMEx_MasterConfigSynchronization>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000540:	f000 f8b6 	bl	80006b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000544:	2360      	movs	r3, #96	; 0x60
 8000546:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 8000548:	237d      	movs	r3, #125	; 0x7d
 800054a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	4619      	mov	r1, r3
 800055a:	480e      	ldr	r0, [pc, #56]	; (8000594 <MX_TIM2_Init+0x100>)
 800055c:	f001 fb78 	bl	8001c50 <HAL_TIM_PWM_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000566:	f000 f8a3 	bl	80006b0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2204      	movs	r2, #4
 8000572:	4619      	mov	r1, r3
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <MX_TIM2_Init+0x100>)
 8000576:	f001 fb6b 	bl	8001c50 <HAL_TIM_PWM_ConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000580:	f000 f896 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <MX_TIM2_Init+0x100>)
 8000586:	f000 f8e7 	bl	8000758 <HAL_TIM_MspPostInit>

}
 800058a:	bf00      	nop
 800058c:	3738      	adds	r7, #56	; 0x38
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000007c 	.word	0x2000007c

08000598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <MX_USART1_UART_Init+0x50>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_USART1_UART_Init+0x4c>)
 80005d0:	f001 ffba 	bl	8002548 <HAL_UART_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005da:	f000 f869 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000c4 	.word	0x200000c4
 80005e8:	40013800 	.word	0x40013800

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_GPIO_Init+0xb8>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <MX_GPIO_Init+0xb8>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <MX_GPIO_Init+0xb8>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_GPIO_Init+0xb8>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <MX_GPIO_Init+0xb8>)
 800061e:	f043 0308 	orr.w	r3, r3, #8
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_GPIO_Init+0xb8>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0308 	and.w	r3, r3, #8
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000636:	481c      	ldr	r0, [pc, #112]	; (80006a8 <MX_GPIO_Init+0xbc>)
 8000638:	f000 fd85 	bl	8001146 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800063c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000640:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2302      	movs	r3, #2
 800064c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	4619      	mov	r1, r3
 8000654:	4814      	ldr	r0, [pc, #80]	; (80006a8 <MX_GPIO_Init+0xbc>)
 8000656:	f000 fbe3 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800065a:	2340      	movs	r3, #64	; 0x40
 800065c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_GPIO_Init+0xc0>)
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	4619      	mov	r1, r3
 800066c:	480e      	ldr	r0, [pc, #56]	; (80006a8 <MX_GPIO_Init+0xbc>)
 800066e:	f000 fbd7 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4619      	mov	r1, r3
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <MX_GPIO_Init+0xbc>)
 8000686:	f000 fbcb 	bl	8000e20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2017      	movs	r0, #23
 8000690:	f000 fadd 	bl	8000c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000694:	2017      	movs	r0, #23
 8000696:	f000 faf6 	bl	8000c86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	10110000 	.word	0x10110000

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_MspInit+0x5c>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <HAL_MspInit+0x5c>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6193      	str	r3, [r2, #24]
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_MspInit+0x5c>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x5c>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_MspInit+0x5c>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	61d3      	str	r3, [r2, #28]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x5c>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_MspInit+0x60>)
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <HAL_MspInit+0x60>)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	40021000 	.word	0x40021000
 800071c:	40010000 	.word	0x40010000

08000720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000730:	d10b      	bne.n	800074a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_TIM_Base_MspInit+0x34>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_TIM_Base_MspInit+0x34>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_TIM_Base_MspInit+0x34>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000776:	d117      	bne.n	80007a8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <HAL_TIM_MspPostInit+0x58>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <HAL_TIM_MspPostInit+0x58>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_TIM_MspPostInit+0x58>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000790:	2303      	movs	r3, #3
 8000792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2302      	movs	r3, #2
 800079a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <HAL_TIM_MspPostInit+0x5c>)
 80007a4:	f000 fb3c 	bl	8000e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010800 	.word	0x40010800

080007b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a20      	ldr	r2, [pc, #128]	; (8000854 <HAL_UART_MspInit+0x9c>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d139      	bne.n	800084c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <HAL_UART_MspInit+0xa0>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <HAL_UART_MspInit+0xa0>)
 80007de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_UART_MspInit+0xa0>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <HAL_UART_MspInit+0xa0>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a18      	ldr	r2, [pc, #96]	; (8000858 <HAL_UART_MspInit+0xa0>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <HAL_UART_MspInit+0xa0>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800080c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	4619      	mov	r1, r3
 800081c:	480f      	ldr	r0, [pc, #60]	; (800085c <HAL_UART_MspInit+0xa4>)
 800081e:	f000 faff 	bl	8000e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	4809      	ldr	r0, [pc, #36]	; (800085c <HAL_UART_MspInit+0xa4>)
 8000838:	f000 faf2 	bl	8000e20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	2025      	movs	r0, #37	; 0x25
 8000842:	f000 fa04 	bl	8000c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000846:	2025      	movs	r0, #37	; 0x25
 8000848:	f000 fa1d 	bl	8000c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40013800 	.word	0x40013800
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a6:	f000 f8bb 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}

080008ae <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80008b2:	2040      	movs	r0, #64	; 0x40
 80008b4:	f000 fc60 	bl	8001178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <USART1_IRQHandler+0x10>)
 80008c2:	f001 ff6f 	bl	80027a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000c4 	.word	0x200000c4

080008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d8:	4a14      	ldr	r2, [pc, #80]	; (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000900:	f002 fcf8 	bl	80032f4 <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20002800 	.word	0x20002800
 8000930:	00000400 	.word	0x00000400
 8000934:	20000158 	.word	0x20000158
 8000938:	200002a8 	.word	0x200002a8

0800093c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000948:	f7ff fff8 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800094e:	490c      	ldr	r1, [pc, #48]	; (8000980 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a09      	ldr	r2, [pc, #36]	; (8000988 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000964:	4c09      	ldr	r4, [pc, #36]	; (800098c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000972:	f002 fcc5 	bl	8003300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000976:	f7ff fc69 	bl	800024c <main>
  bx lr
 800097a:	4770      	bx	lr
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000984:	08003ca4 	.word	0x08003ca4
  ldr r2, =_sbss
 8000988:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800098c:	200002a8 	.word	0x200002a8

08000990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_2_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_Init+0x28>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_Init+0x28>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f947 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 f808 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fe84 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40022000 	.word	0x40022000

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f95f 	bl	8000ca2 <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f000 f927 	bl	8000c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000004 	.word	0x20000004
 8000a18:	2000000c 	.word	0x2000000c
 8000a1c:	20000008 	.word	0x20000008

08000a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x1c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x20>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_IncTick+0x20>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	2000000c 	.word	0x2000000c
 8000a40:	2000015c 	.word	0x2000015c

08000a44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <HAL_GetTick+0x10>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	2000015c 	.word	0x2000015c

08000a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a60:	f7ff fff0 	bl	8000a44 <HAL_GetTick>
 8000a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a70:	d005      	beq.n	8000a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_Delay+0x44>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a7e:	bf00      	nop
 8000a80:	f7ff ffe0 	bl	8000a44 <HAL_GetTick>
 8000a84:	4602      	mov	r2, r0
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d8f7      	bhi.n	8000a80 <HAL_Delay+0x28>
  {
  }
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000000c 	.word	0x2000000c

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db0b      	blt.n	8000b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f003 021f 	and.w	r2, r3, #31
 8000b1c:	4906      	ldr	r1, [pc, #24]	; (8000b38 <__NVIC_EnableIRQ+0x34>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	095b      	lsrs	r3, r3, #5
 8000b24:	2001      	movs	r0, #1
 8000b26:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff90 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff2d 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff42 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff90 	bl	8000b90 <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5f 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff35 	bl	8000b04 <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffa2 	bl	8000bf4 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d008      	beq.n	8000ce4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e020      	b.n	8000d26 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 020e 	bic.w	r2, r2, #14
 8000cf2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 0201 	bic.w	r2, r2, #1
 8000d02:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d005      	beq.n	8000d54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e051      	b.n	8000df8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 020e 	bic.w	r2, r2, #14
 8000d62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0201 	bic.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <HAL_DMA_Abort_IT+0xd4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d029      	beq.n	8000dd2 <HAL_DMA_Abort_IT+0xa2>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a21      	ldr	r2, [pc, #132]	; (8000e08 <HAL_DMA_Abort_IT+0xd8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d022      	beq.n	8000dce <HAL_DMA_Abort_IT+0x9e>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <HAL_DMA_Abort_IT+0xdc>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d01a      	beq.n	8000dc8 <HAL_DMA_Abort_IT+0x98>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <HAL_DMA_Abort_IT+0xe0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d012      	beq.n	8000dc2 <HAL_DMA_Abort_IT+0x92>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <HAL_DMA_Abort_IT+0xe4>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d00a      	beq.n	8000dbc <HAL_DMA_Abort_IT+0x8c>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <HAL_DMA_Abort_IT+0xe8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d102      	bne.n	8000db6 <HAL_DMA_Abort_IT+0x86>
 8000db0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000db4:	e00e      	b.n	8000dd4 <HAL_DMA_Abort_IT+0xa4>
 8000db6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dba:	e00b      	b.n	8000dd4 <HAL_DMA_Abort_IT+0xa4>
 8000dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc0:	e008      	b.n	8000dd4 <HAL_DMA_Abort_IT+0xa4>
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	e005      	b.n	8000dd4 <HAL_DMA_Abort_IT+0xa4>
 8000dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dcc:	e002      	b.n	8000dd4 <HAL_DMA_Abort_IT+0xa4>
 8000dce:	2310      	movs	r3, #16
 8000dd0:	e000      	b.n	8000dd4 <HAL_DMA_Abort_IT+0xa4>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <HAL_DMA_Abort_IT+0xec>)
 8000dd6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	4798      	blx	r3
    } 
  }
  return status;
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40020008 	.word	0x40020008
 8000e08:	4002001c 	.word	0x4002001c
 8000e0c:	40020030 	.word	0x40020030
 8000e10:	40020044 	.word	0x40020044
 8000e14:	40020058 	.word	0x40020058
 8000e18:	4002006c 	.word	0x4002006c
 8000e1c:	40020000 	.word	0x40020000

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b08b      	sub	sp, #44	; 0x2c
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	e161      	b.n	80010f8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e34:	2201      	movs	r2, #1
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8150 	bne.w	80010f2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	4a97      	ldr	r2, [pc, #604]	; (80010b4 <HAL_GPIO_Init+0x294>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d05e      	beq.n	8000f1a <HAL_GPIO_Init+0xfa>
 8000e5c:	4a95      	ldr	r2, [pc, #596]	; (80010b4 <HAL_GPIO_Init+0x294>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d875      	bhi.n	8000f4e <HAL_GPIO_Init+0x12e>
 8000e62:	4a95      	ldr	r2, [pc, #596]	; (80010b8 <HAL_GPIO_Init+0x298>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d058      	beq.n	8000f1a <HAL_GPIO_Init+0xfa>
 8000e68:	4a93      	ldr	r2, [pc, #588]	; (80010b8 <HAL_GPIO_Init+0x298>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d86f      	bhi.n	8000f4e <HAL_GPIO_Init+0x12e>
 8000e6e:	4a93      	ldr	r2, [pc, #588]	; (80010bc <HAL_GPIO_Init+0x29c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d052      	beq.n	8000f1a <HAL_GPIO_Init+0xfa>
 8000e74:	4a91      	ldr	r2, [pc, #580]	; (80010bc <HAL_GPIO_Init+0x29c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d869      	bhi.n	8000f4e <HAL_GPIO_Init+0x12e>
 8000e7a:	4a91      	ldr	r2, [pc, #580]	; (80010c0 <HAL_GPIO_Init+0x2a0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d04c      	beq.n	8000f1a <HAL_GPIO_Init+0xfa>
 8000e80:	4a8f      	ldr	r2, [pc, #572]	; (80010c0 <HAL_GPIO_Init+0x2a0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d863      	bhi.n	8000f4e <HAL_GPIO_Init+0x12e>
 8000e86:	4a8f      	ldr	r2, [pc, #572]	; (80010c4 <HAL_GPIO_Init+0x2a4>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d046      	beq.n	8000f1a <HAL_GPIO_Init+0xfa>
 8000e8c:	4a8d      	ldr	r2, [pc, #564]	; (80010c4 <HAL_GPIO_Init+0x2a4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d85d      	bhi.n	8000f4e <HAL_GPIO_Init+0x12e>
 8000e92:	2b12      	cmp	r3, #18
 8000e94:	d82a      	bhi.n	8000eec <HAL_GPIO_Init+0xcc>
 8000e96:	2b12      	cmp	r3, #18
 8000e98:	d859      	bhi.n	8000f4e <HAL_GPIO_Init+0x12e>
 8000e9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <HAL_GPIO_Init+0x80>)
 8000e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea0:	08000f1b 	.word	0x08000f1b
 8000ea4:	08000ef5 	.word	0x08000ef5
 8000ea8:	08000f07 	.word	0x08000f07
 8000eac:	08000f49 	.word	0x08000f49
 8000eb0:	08000f4f 	.word	0x08000f4f
 8000eb4:	08000f4f 	.word	0x08000f4f
 8000eb8:	08000f4f 	.word	0x08000f4f
 8000ebc:	08000f4f 	.word	0x08000f4f
 8000ec0:	08000f4f 	.word	0x08000f4f
 8000ec4:	08000f4f 	.word	0x08000f4f
 8000ec8:	08000f4f 	.word	0x08000f4f
 8000ecc:	08000f4f 	.word	0x08000f4f
 8000ed0:	08000f4f 	.word	0x08000f4f
 8000ed4:	08000f4f 	.word	0x08000f4f
 8000ed8:	08000f4f 	.word	0x08000f4f
 8000edc:	08000f4f 	.word	0x08000f4f
 8000ee0:	08000f4f 	.word	0x08000f4f
 8000ee4:	08000efd 	.word	0x08000efd
 8000ee8:	08000f11 	.word	0x08000f11
 8000eec:	4a76      	ldr	r2, [pc, #472]	; (80010c8 <HAL_GPIO_Init+0x2a8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d013      	beq.n	8000f1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ef2:	e02c      	b.n	8000f4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	623b      	str	r3, [r7, #32]
          break;
 8000efa:	e029      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	3304      	adds	r3, #4
 8000f02:	623b      	str	r3, [r7, #32]
          break;
 8000f04:	e024      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	3308      	adds	r3, #8
 8000f0c:	623b      	str	r3, [r7, #32]
          break;
 8000f0e:	e01f      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	330c      	adds	r3, #12
 8000f16:	623b      	str	r3, [r7, #32]
          break;
 8000f18:	e01a      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d102      	bne.n	8000f28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f22:	2304      	movs	r3, #4
 8000f24:	623b      	str	r3, [r7, #32]
          break;
 8000f26:	e013      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d105      	bne.n	8000f3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f30:	2308      	movs	r3, #8
 8000f32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	611a      	str	r2, [r3, #16]
          break;
 8000f3a:	e009      	b.n	8000f50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	615a      	str	r2, [r3, #20]
          break;
 8000f46:	e003      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
          break;
 8000f4c:	e000      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          break;
 8000f4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	2bff      	cmp	r3, #255	; 0xff
 8000f54:	d801      	bhi.n	8000f5a <HAL_GPIO_Init+0x13a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	e001      	b.n	8000f5e <HAL_GPIO_Init+0x13e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	2bff      	cmp	r3, #255	; 0xff
 8000f64:	d802      	bhi.n	8000f6c <HAL_GPIO_Init+0x14c>
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	e002      	b.n	8000f72 <HAL_GPIO_Init+0x152>
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	3b08      	subs	r3, #8
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	210f      	movs	r1, #15
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	401a      	ands	r2, r3
 8000f84:	6a39      	ldr	r1, [r7, #32]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 80a9 	beq.w	80010f2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <HAL_GPIO_Init+0x2ac>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a49      	ldr	r2, [pc, #292]	; (80010cc <HAL_GPIO_Init+0x2ac>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b47      	ldr	r3, [pc, #284]	; (80010cc <HAL_GPIO_Init+0x2ac>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fb8:	4a45      	ldr	r2, [pc, #276]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a3d      	ldr	r2, [pc, #244]	; (80010d4 <HAL_GPIO_Init+0x2b4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d00d      	beq.n	8001000 <HAL_GPIO_Init+0x1e0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a3c      	ldr	r2, [pc, #240]	; (80010d8 <HAL_GPIO_Init+0x2b8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d007      	beq.n	8000ffc <HAL_GPIO_Init+0x1dc>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a3b      	ldr	r2, [pc, #236]	; (80010dc <HAL_GPIO_Init+0x2bc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d101      	bne.n	8000ff8 <HAL_GPIO_Init+0x1d8>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e004      	b.n	8001002 <HAL_GPIO_Init+0x1e2>
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_Init+0x1e2>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <HAL_GPIO_Init+0x1e2>
 8001000:	2300      	movs	r3, #0
 8001002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001004:	f002 0203 	and.w	r2, r2, #3
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	4093      	lsls	r3, r2
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001012:	492f      	ldr	r1, [pc, #188]	; (80010d0 <HAL_GPIO_Init+0x2b0>)
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d006      	beq.n	800103a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	492b      	ldr	r1, [pc, #172]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	608b      	str	r3, [r1, #8]
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	43db      	mvns	r3, r3
 8001042:	4927      	ldr	r1, [pc, #156]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 8001044:	4013      	ands	r3, r2
 8001046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	4921      	ldr	r1, [pc, #132]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	60cb      	str	r3, [r1, #12]
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	43db      	mvns	r3, r3
 800106a:	491d      	ldr	r1, [pc, #116]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 800106c:	4013      	ands	r3, r2
 800106e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	4917      	ldr	r1, [pc, #92]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	43db      	mvns	r3, r3
 8001092:	4913      	ldr	r1, [pc, #76]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 8001094:	4013      	ands	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d01f      	beq.n	80010e4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	490d      	ldr	r1, [pc, #52]	; (80010e0 <HAL_GPIO_Init+0x2c0>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	600b      	str	r3, [r1, #0]
 80010b0:	e01f      	b.n	80010f2 <HAL_GPIO_Init+0x2d2>
 80010b2:	bf00      	nop
 80010b4:	10320000 	.word	0x10320000
 80010b8:	10310000 	.word	0x10310000
 80010bc:	10220000 	.word	0x10220000
 80010c0:	10210000 	.word	0x10210000
 80010c4:	10120000 	.word	0x10120000
 80010c8:	10110000 	.word	0x10110000
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000
 80010d4:	40010800 	.word	0x40010800
 80010d8:	40010c00 	.word	0x40010c00
 80010dc:	40011000 	.word	0x40011000
 80010e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_GPIO_Init+0x2f4>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	4909      	ldr	r1, [pc, #36]	; (8001114 <HAL_GPIO_Init+0x2f4>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	3301      	adds	r3, #1
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	f47f ae96 	bne.w	8000e34 <HAL_GPIO_Init+0x14>
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	372c      	adds	r7, #44	; 0x2c
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e001      	b.n	800113a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	460b      	mov	r3, r1
 8001150:	807b      	strh	r3, [r7, #2]
 8001152:	4613      	mov	r3, r2
 8001154:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001156:	787b      	ldrb	r3, [r7, #1]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115c:	887a      	ldrh	r2, [r7, #2]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001162:	e003      	b.n	800116c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	041a      	lsls	r2, r3, #16
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	611a      	str	r2, [r3, #16]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
	...

08001178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	4013      	ands	r3, r2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f81a 	bl	80001d0 <HAL_GPIO_EXTI_Callback>
  }
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e272      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 8087 	beq.w	80012d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011c8:	4b92      	ldr	r3, [pc, #584]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d00c      	beq.n	80011ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011d4:	4b8f      	ldr	r3, [pc, #572]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d112      	bne.n	8001206 <HAL_RCC_OscConfig+0x5e>
 80011e0:	4b8c      	ldr	r3, [pc, #560]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ec:	d10b      	bne.n	8001206 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ee:	4b89      	ldr	r3, [pc, #548]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d06c      	beq.n	80012d4 <HAL_RCC_OscConfig+0x12c>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d168      	bne.n	80012d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e24c      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120e:	d106      	bne.n	800121e <HAL_RCC_OscConfig+0x76>
 8001210:	4b80      	ldr	r3, [pc, #512]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a7f      	ldr	r2, [pc, #508]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	e02e      	b.n	800127c <HAL_RCC_OscConfig+0xd4>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0x98>
 8001226:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a7a      	ldr	r2, [pc, #488]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800122c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b78      	ldr	r3, [pc, #480]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a77      	ldr	r2, [pc, #476]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e01d      	b.n	800127c <HAL_RCC_OscConfig+0xd4>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0xbc>
 800124a:	4b72      	ldr	r3, [pc, #456]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a71      	ldr	r2, [pc, #452]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b6f      	ldr	r3, [pc, #444]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6e      	ldr	r2, [pc, #440]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e00b      	b.n	800127c <HAL_RCC_OscConfig+0xd4>
 8001264:	4b6b      	ldr	r3, [pc, #428]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a6a      	ldr	r2, [pc, #424]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800126a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b68      	ldr	r3, [pc, #416]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a67      	ldr	r2, [pc, #412]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fbde 	bl	8000a44 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fbda 	bl	8000a44 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e200      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	4b5d      	ldr	r3, [pc, #372]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0xe4>
 80012aa:	e014      	b.n	80012d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fbca 	bl	8000a44 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fbc6 	bl	8000a44 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e1ec      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	4b53      	ldr	r3, [pc, #332]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x10c>
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d063      	beq.n	80013aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012e2:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00b      	beq.n	8001306 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ee:	4b49      	ldr	r3, [pc, #292]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d11c      	bne.n	8001334 <HAL_RCC_OscConfig+0x18c>
 80012fa:	4b46      	ldr	r3, [pc, #280]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d116      	bne.n	8001334 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	4b43      	ldr	r3, [pc, #268]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <HAL_RCC_OscConfig+0x176>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e1c0      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4939      	ldr	r1, [pc, #228]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001332:	e03a      	b.n	80013aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d020      	beq.n	800137e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001342:	f7ff fb7f 	bl	8000a44 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134a:	f7ff fb7b 	bl	8000a44 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e1a1      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001368:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4927      	ldr	r1, [pc, #156]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
 800137c:	e015      	b.n	80013aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fb5e 	bl	8000a44 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138c:	f7ff fb5a 	bl	8000a44 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e180      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d03a      	beq.n	800142c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d019      	beq.n	80013f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_RCC_OscConfig+0x274>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fb3e 	bl	8000a44 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff fb3a 	bl	8000a44 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e160      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f000 face 	bl	800198c <RCC_Delay>
 80013f0:	e01c      	b.n	800142c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_RCC_OscConfig+0x274>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f8:	f7ff fb24 	bl	8000a44 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fe:	e00f      	b.n	8001420 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fb20 	bl	8000a44 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d908      	bls.n	8001420 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e146      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	42420000 	.word	0x42420000
 800141c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	4b92      	ldr	r3, [pc, #584]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1e9      	bne.n	8001400 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80a6 	beq.w	8001586 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143e:	4b8b      	ldr	r3, [pc, #556]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10d      	bne.n	8001466 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4b88      	ldr	r3, [pc, #544]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a87      	ldr	r2, [pc, #540]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b85      	ldr	r3, [pc, #532]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b82      	ldr	r3, [pc, #520]	; (8001670 <HAL_RCC_OscConfig+0x4c8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b7f      	ldr	r3, [pc, #508]	; (8001670 <HAL_RCC_OscConfig+0x4c8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a7e      	ldr	r2, [pc, #504]	; (8001670 <HAL_RCC_OscConfig+0x4c8>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff fae1 	bl	8000a44 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001486:	f7ff fadd 	bl	8000a44 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b64      	cmp	r3, #100	; 0x64
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e103      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	4b75      	ldr	r3, [pc, #468]	; (8001670 <HAL_RCC_OscConfig+0x4c8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x312>
 80014ac:	4b6f      	ldr	r3, [pc, #444]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a6e      	ldr	r2, [pc, #440]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	e02d      	b.n	8001516 <HAL_RCC_OscConfig+0x36e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x334>
 80014c2:	4b6a      	ldr	r3, [pc, #424]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a69      	ldr	r2, [pc, #420]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	6213      	str	r3, [r2, #32]
 80014ce:	4b67      	ldr	r3, [pc, #412]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4a66      	ldr	r2, [pc, #408]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	f023 0304 	bic.w	r3, r3, #4
 80014d8:	6213      	str	r3, [r2, #32]
 80014da:	e01c      	b.n	8001516 <HAL_RCC_OscConfig+0x36e>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d10c      	bne.n	80014fe <HAL_RCC_OscConfig+0x356>
 80014e4:	4b61      	ldr	r3, [pc, #388]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4a60      	ldr	r2, [pc, #384]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6213      	str	r3, [r2, #32]
 80014f0:	4b5e      	ldr	r3, [pc, #376]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a5d      	ldr	r2, [pc, #372]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6213      	str	r3, [r2, #32]
 80014fc:	e00b      	b.n	8001516 <HAL_RCC_OscConfig+0x36e>
 80014fe:	4b5b      	ldr	r3, [pc, #364]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4a5a      	ldr	r2, [pc, #360]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6213      	str	r3, [r2, #32]
 800150a:	4b58      	ldr	r3, [pc, #352]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a57      	ldr	r2, [pc, #348]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d015      	beq.n	800154a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff fa91 	bl	8000a44 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001526:	f7ff fa8d 	bl	8000a44 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f241 3288 	movw	r2, #5000	; 0x1388
 8001534:	4293      	cmp	r3, r2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e0b1      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153c:	4b4b      	ldr	r3, [pc, #300]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0ee      	beq.n	8001526 <HAL_RCC_OscConfig+0x37e>
 8001548:	e014      	b.n	8001574 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154a:	f7ff fa7b 	bl	8000a44 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	e00a      	b.n	8001568 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f7ff fa77 	bl	8000a44 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001560:	4293      	cmp	r3, r2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e09b      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001568:	4b40      	ldr	r3, [pc, #256]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1ee      	bne.n	8001552 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d105      	bne.n	8001586 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a3b      	ldr	r2, [pc, #236]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001584:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 8087 	beq.w	800169e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001590:	4b36      	ldr	r3, [pc, #216]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b08      	cmp	r3, #8
 800159a:	d061      	beq.n	8001660 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d146      	bne.n	8001632 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <HAL_RCC_OscConfig+0x4cc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fa4b 	bl	8000a44 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b2:	f7ff fa47 	bl	8000a44 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e06d      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f0      	bne.n	80015b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d8:	d108      	bne.n	80015ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4921      	ldr	r1, [pc, #132]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a19      	ldr	r1, [r3, #32]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	430b      	orrs	r3, r1
 80015fe:	491b      	ldr	r1, [pc, #108]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_RCC_OscConfig+0x4cc>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fa1b 	bl	8000a44 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff fa17 	bl	8000a44 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e03d      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x46a>
 8001630:	e035      	b.n	800169e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_RCC_OscConfig+0x4cc>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fa04 	bl	8000a44 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff fa00 	bl	8000a44 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e026      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x498>
 800165e:	e01e      	b.n	800169e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d107      	bne.n	8001678 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e019      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
 800166c:	40021000 	.word	0x40021000
 8001670:	40007000 	.word	0x40007000
 8001674:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_RCC_OscConfig+0x500>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	429a      	cmp	r2, r3
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0d0      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016c0:	4b6a      	ldr	r3, [pc, #424]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d910      	bls.n	80016f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b67      	ldr	r3, [pc, #412]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 0207 	bic.w	r2, r3, #7
 80016d6:	4965      	ldr	r1, [pc, #404]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	4b63      	ldr	r3, [pc, #396]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0b8      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d020      	beq.n	800173e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001708:	4b59      	ldr	r3, [pc, #356]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a58      	ldr	r2, [pc, #352]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001712:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001720:	4b53      	ldr	r3, [pc, #332]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4a52      	ldr	r2, [pc, #328]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800172a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	494d      	ldr	r1, [pc, #308]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d040      	beq.n	80017cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b47      	ldr	r3, [pc, #284]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d115      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e07f      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	4b41      	ldr	r3, [pc, #260]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d109      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e073      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177a:	4b3d      	ldr	r3, [pc, #244]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e06b      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178a:	4b39      	ldr	r3, [pc, #228]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f023 0203 	bic.w	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4936      	ldr	r1, [pc, #216]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800179c:	f7ff f952 	bl	8000a44 <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a4:	f7ff f94e 	bl	8000a44 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e053      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 020c 	and.w	r2, r3, #12
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d1eb      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017cc:	4b27      	ldr	r3, [pc, #156]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d210      	bcs.n	80017fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 0207 	bic.w	r2, r3, #7
 80017e2:	4922      	ldr	r1, [pc, #136]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e032      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4916      	ldr	r1, [pc, #88]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	490e      	ldr	r1, [pc, #56]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800183a:	f000 f821 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 800183e:	4602      	mov	r2, r0
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	490a      	ldr	r1, [pc, #40]	; (8001874 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	5ccb      	ldrb	r3, [r1, r3]
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	4a09      	ldr	r2, [pc, #36]	; (8001878 <HAL_RCC_ClockConfig+0x1cc>)
 8001854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_RCC_ClockConfig+0x1d0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff f8b0 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40022000 	.word	0x40022000
 8001870:	40021000 	.word	0x40021000
 8001874:	08003c3c 	.word	0x08003c3c
 8001878:	20000004 	.word	0x20000004
 800187c:	20000008 	.word	0x20000008

08001880 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_RCC_GetSysClockFreq+0x94>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d002      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x30>
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d003      	beq.n	80018b6 <HAL_RCC_GetSysClockFreq+0x36>
 80018ae:	e027      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_GetSysClockFreq+0x98>)
 80018b2:	613b      	str	r3, [r7, #16]
      break;
 80018b4:	e027      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	0c9b      	lsrs	r3, r3, #18
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	4a17      	ldr	r2, [pc, #92]	; (800191c <HAL_RCC_GetSysClockFreq+0x9c>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d010      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_RCC_GetSysClockFreq+0x94>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	0c5b      	lsrs	r3, r3, #17
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	4a11      	ldr	r2, [pc, #68]	; (8001920 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_RCC_GetSysClockFreq+0x98>)
 80018e2:	fb03 f202 	mul.w	r2, r3, r2
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e004      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	613b      	str	r3, [r7, #16]
      break;
 80018fe:	e002      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetSysClockFreq+0x98>)
 8001902:	613b      	str	r3, [r7, #16]
      break;
 8001904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001906:	693b      	ldr	r3, [r7, #16]
}
 8001908:	4618      	mov	r0, r3
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	007a1200 	.word	0x007a1200
 800191c:	08003c54 	.word	0x08003c54
 8001920:	08003c64 	.word	0x08003c64
 8001924:	003d0900 	.word	0x003d0900

08001928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800192c:	4b02      	ldr	r3, [pc, #8]	; (8001938 <HAL_RCC_GetHCLKFreq+0x10>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001940:	f7ff fff2 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001944:	4602      	mov	r2, r0
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	4903      	ldr	r1, [pc, #12]	; (8001960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001952:	5ccb      	ldrb	r3, [r1, r3]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	08003c4c 	.word	0x08003c4c

08001964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001968:	f7ff ffde 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 800196c:	4602      	mov	r2, r0
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	0adb      	lsrs	r3, r3, #11
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	4903      	ldr	r1, [pc, #12]	; (8001988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	08003c4c 	.word	0x08003c4c

0800198c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <RCC_Delay+0x34>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <RCC_Delay+0x38>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0a5b      	lsrs	r3, r3, #9
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019a8:	bf00      	nop
  }
  while (Delay --);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1e5a      	subs	r2, r3, #1
 80019ae:	60fa      	str	r2, [r7, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f9      	bne.n	80019a8 <RCC_Delay+0x1c>
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	20000004 	.word	0x20000004
 80019c4:	10624dd3 	.word	0x10624dd3

080019c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e041      	b.n	8001a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe fe96 	bl	8000720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3304      	adds	r3, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f000 faac 	bl	8001f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e041      	b.n	8001afc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d106      	bne.n	8001a92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f839 	bl	8001b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2202      	movs	r2, #2
 8001a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	f000 fa5d 	bl	8001f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
	...

08001b18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_TIM_PWM_Start+0x24>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	bf14      	ite	ne
 8001b34:	2301      	movne	r3, #1
 8001b36:	2300      	moveq	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	e022      	b.n	8001b82 <HAL_TIM_PWM_Start+0x6a>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d109      	bne.n	8001b56 <HAL_TIM_PWM_Start+0x3e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	bf14      	ite	ne
 8001b4e:	2301      	movne	r3, #1
 8001b50:	2300      	moveq	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	e015      	b.n	8001b82 <HAL_TIM_PWM_Start+0x6a>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d109      	bne.n	8001b70 <HAL_TIM_PWM_Start+0x58>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	bf14      	ite	ne
 8001b68:	2301      	movne	r3, #1
 8001b6a:	2300      	moveq	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	e008      	b.n	8001b82 <HAL_TIM_PWM_Start+0x6a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e059      	b.n	8001c3e <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d104      	bne.n	8001b9a <HAL_TIM_PWM_Start+0x82>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b98:	e013      	b.n	8001bc2 <HAL_TIM_PWM_Start+0xaa>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d104      	bne.n	8001baa <HAL_TIM_PWM_Start+0x92>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba8:	e00b      	b.n	8001bc2 <HAL_TIM_PWM_Start+0xaa>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d104      	bne.n	8001bba <HAL_TIM_PWM_Start+0xa2>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb8:	e003      	b.n	8001bc2 <HAL_TIM_PWM_Start+0xaa>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	6839      	ldr	r1, [r7, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fc40 	bl	8002450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <HAL_TIM_PWM_Start+0x130>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d107      	bne.n	8001bea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001be8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a16      	ldr	r2, [pc, #88]	; (8001c48 <HAL_TIM_PWM_Start+0x130>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d009      	beq.n	8001c08 <HAL_TIM_PWM_Start+0xf0>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d004      	beq.n	8001c08 <HAL_TIM_PWM_Start+0xf0>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <HAL_TIM_PWM_Start+0x134>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d111      	bne.n	8001c2c <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d010      	beq.n	8001c3c <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2a:	e007      	b.n	8001c3c <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40012c00 	.word	0x40012c00
 8001c4c:	40000400 	.word	0x40000400

08001c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e0ae      	b.n	8001dcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	f200 809f 	bhi.w	8001dbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001cb9 	.word	0x08001cb9
 8001c88:	08001dbd 	.word	0x08001dbd
 8001c8c:	08001dbd 	.word	0x08001dbd
 8001c90:	08001dbd 	.word	0x08001dbd
 8001c94:	08001cf9 	.word	0x08001cf9
 8001c98:	08001dbd 	.word	0x08001dbd
 8001c9c:	08001dbd 	.word	0x08001dbd
 8001ca0:	08001dbd 	.word	0x08001dbd
 8001ca4:	08001d3b 	.word	0x08001d3b
 8001ca8:	08001dbd 	.word	0x08001dbd
 8001cac:	08001dbd 	.word	0x08001dbd
 8001cb0:	08001dbd 	.word	0x08001dbd
 8001cb4:	08001d7b 	.word	0x08001d7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f9a8 	bl	8002014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0208 	orr.w	r2, r2, #8
 8001cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0204 	bic.w	r2, r2, #4
 8001ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6999      	ldr	r1, [r3, #24]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	619a      	str	r2, [r3, #24]
      break;
 8001cf6:	e064      	b.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f9ee 	bl	80020e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6999      	ldr	r1, [r3, #24]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	021a      	lsls	r2, r3, #8
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	619a      	str	r2, [r3, #24]
      break;
 8001d38:	e043      	b.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fa37 	bl	80021b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69da      	ldr	r2, [r3, #28]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0208 	orr.w	r2, r2, #8
 8001d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0204 	bic.w	r2, r2, #4
 8001d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69d9      	ldr	r1, [r3, #28]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	61da      	str	r2, [r3, #28]
      break;
 8001d78:	e023      	b.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 fa81 	bl	8002288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69d9      	ldr	r1, [r3, #28]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	021a      	lsls	r2, r3, #8
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	61da      	str	r2, [r3, #28]
      break;
 8001dba:	e002      	b.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8001dc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_TIM_ConfigClockSource+0x1c>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e0b4      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x186>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e28:	d03e      	beq.n	8001ea8 <HAL_TIM_ConfigClockSource+0xd4>
 8001e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e2e:	f200 8087 	bhi.w	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e36:	f000 8086 	beq.w	8001f46 <HAL_TIM_ConfigClockSource+0x172>
 8001e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3e:	d87f      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e40:	2b70      	cmp	r3, #112	; 0x70
 8001e42:	d01a      	beq.n	8001e7a <HAL_TIM_ConfigClockSource+0xa6>
 8001e44:	2b70      	cmp	r3, #112	; 0x70
 8001e46:	d87b      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e48:	2b60      	cmp	r3, #96	; 0x60
 8001e4a:	d050      	beq.n	8001eee <HAL_TIM_ConfigClockSource+0x11a>
 8001e4c:	2b60      	cmp	r3, #96	; 0x60
 8001e4e:	d877      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e50:	2b50      	cmp	r3, #80	; 0x50
 8001e52:	d03c      	beq.n	8001ece <HAL_TIM_ConfigClockSource+0xfa>
 8001e54:	2b50      	cmp	r3, #80	; 0x50
 8001e56:	d873      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e58:	2b40      	cmp	r3, #64	; 0x40
 8001e5a:	d058      	beq.n	8001f0e <HAL_TIM_ConfigClockSource+0x13a>
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	d86f      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e60:	2b30      	cmp	r3, #48	; 0x30
 8001e62:	d064      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0x15a>
 8001e64:	2b30      	cmp	r3, #48	; 0x30
 8001e66:	d86b      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d060      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0x15a>
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d867      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d05c      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0x15a>
 8001e74:	2b10      	cmp	r3, #16
 8001e76:	d05a      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0x15a>
 8001e78:	e062      	b.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e8a:	f000 fac2 	bl	8002412 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	609a      	str	r2, [r3, #8]
      break;
 8001ea6:	e04f      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001eb8:	f000 faab 	bl	8002412 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eca:	609a      	str	r2, [r3, #8]
      break;
 8001ecc:	e03c      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eda:	461a      	mov	r2, r3
 8001edc:	f000 fa22 	bl	8002324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2150      	movs	r1, #80	; 0x50
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fa79 	bl	80023de <TIM_ITRx_SetConfig>
      break;
 8001eec:	e02c      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001efa:	461a      	mov	r2, r3
 8001efc:	f000 fa40 	bl	8002380 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2160      	movs	r1, #96	; 0x60
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fa69 	bl	80023de <TIM_ITRx_SetConfig>
      break;
 8001f0c:	e01c      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f000 fa02 	bl	8002324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2140      	movs	r1, #64	; 0x40
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fa59 	bl	80023de <TIM_ITRx_SetConfig>
      break;
 8001f2c:	e00c      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4619      	mov	r1, r3
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f000 fa50 	bl	80023de <TIM_ITRx_SetConfig>
      break;
 8001f3e:	e003      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
      break;
 8001f44:	e000      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a25      	ldr	r2, [pc, #148]	; (800200c <TIM_Base_SetConfig+0xa8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d007      	beq.n	8001f8c <TIM_Base_SetConfig+0x28>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f82:	d003      	beq.n	8001f8c <TIM_Base_SetConfig+0x28>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a22      	ldr	r2, [pc, #136]	; (8002010 <TIM_Base_SetConfig+0xac>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d108      	bne.n	8001f9e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1a      	ldr	r2, [pc, #104]	; (800200c <TIM_Base_SetConfig+0xa8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <TIM_Base_SetConfig+0x52>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fac:	d003      	beq.n	8001fb6 <TIM_Base_SetConfig+0x52>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <TIM_Base_SetConfig+0xac>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d108      	bne.n	8001fc8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a07      	ldr	r2, [pc, #28]	; (800200c <TIM_Base_SetConfig+0xa8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d103      	bne.n	8001ffc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	615a      	str	r2, [r3, #20]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40000400 	.word	0x40000400

08002014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f023 0201 	bic.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f023 0302 	bic.w	r3, r3, #2
 800205c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a1c      	ldr	r2, [pc, #112]	; (80020dc <TIM_OC1_SetConfig+0xc8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d10c      	bne.n	800208a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f023 0308 	bic.w	r3, r3, #8
 8002076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a13      	ldr	r2, [pc, #76]	; (80020dc <TIM_OC1_SetConfig+0xc8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d111      	bne.n	80020b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	621a      	str	r2, [r3, #32]
}
 80020d0:	bf00      	nop
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40012c00 	.word	0x40012c00

080020e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f023 0210 	bic.w	r2, r3, #16
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800210e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f023 0320 	bic.w	r3, r3, #32
 800212a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <TIM_OC2_SetConfig+0xd0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d10d      	bne.n	800215c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4313      	orrs	r3, r2
 8002152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800215a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <TIM_OC2_SetConfig+0xd0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d113      	bne.n	800218c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800216a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002172:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	621a      	str	r2, [r3, #32]
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	40012c00 	.word	0x40012c00

080021b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0303 	bic.w	r3, r3, #3
 80021ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <TIM_OC3_SetConfig+0xd0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d10d      	bne.n	800222e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800222c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <TIM_OC3_SetConfig+0xd0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d113      	bne.n	800225e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800223c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	621a      	str	r2, [r3, #32]
}
 8002278:	bf00      	nop
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40012c00 	.word	0x40012c00

08002288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	031b      	lsls	r3, r3, #12
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <TIM_OC4_SetConfig+0x98>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d109      	bne.n	80022fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	621a      	str	r2, [r3, #32]
}
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40012c00 	.word	0x40012c00

08002324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	f023 0201 	bic.w	r2, r3, #1
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800234e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f023 030a 	bic.w	r3, r3, #10
 8002360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
 8002368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	621a      	str	r2, [r3, #32]
}
 8002376:	bf00      	nop
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f023 0210 	bic.w	r2, r3, #16
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	031b      	lsls	r3, r3, #12
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	621a      	str	r2, [r3, #32]
}
 80023d4:	bf00      	nop
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f043 0307 	orr.w	r3, r3, #7
 8002400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	609a      	str	r2, [r3, #8]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002412:	b480      	push	{r7}
 8002414:	b087      	sub	sp, #28
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800242c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	021a      	lsls	r2, r3, #8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	431a      	orrs	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4313      	orrs	r3, r2
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	609a      	str	r2, [r3, #8]
}
 8002446:	bf00      	nop
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2201      	movs	r2, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a1a      	ldr	r2, [r3, #32]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a1a      	ldr	r2, [r3, #32]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	fa01 f303 	lsl.w	r3, r1, r3
 8002488:	431a      	orrs	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	621a      	str	r2, [r3, #32]
}
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e041      	b.n	8002534 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a14      	ldr	r2, [pc, #80]	; (8002540 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fc:	d004      	beq.n	8002508 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d10c      	bne.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800250e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	4313      	orrs	r3, r2
 8002518:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40012c00 	.word	0x40012c00
 8002544:	40000400 	.word	0x40000400

08002548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e042      	b.n	80025e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe f922 	bl	80007b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2224      	movs	r2, #36	; 0x24
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800258a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fdfb 	bl	8003188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b20      	cmp	r3, #32
 8002606:	d16d      	bne.n	80026e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <HAL_UART_Transmit+0x2c>
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e066      	b.n	80026e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2221      	movs	r2, #33	; 0x21
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002626:	f7fe fa0d 	bl	8000a44 <HAL_GetTick>
 800262a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	88fa      	ldrh	r2, [r7, #6]
 8002630:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	88fa      	ldrh	r2, [r7, #6]
 8002636:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002640:	d108      	bne.n	8002654 <HAL_UART_Transmit+0x6c>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d104      	bne.n	8002654 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	e003      	b.n	800265c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800265c:	e02a      	b.n	80026b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2200      	movs	r2, #0
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fb4a 	bl	8002d02 <UART_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e036      	b.n	80026e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10b      	bne.n	8002696 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800268c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	3302      	adds	r3, #2
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	e007      	b.n	80026a6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	781a      	ldrb	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3301      	adds	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1cf      	bne.n	800265e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2200      	movs	r2, #0
 80026c6:	2140      	movs	r1, #64	; 0x40
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fb1a 	bl	8002d02 <UART_WaitOnFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e006      	b.n	80026e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e000      	b.n	80026e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80026e4:	2302      	movs	r3, #2
  }
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b085      	sub	sp, #20
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	4613      	mov	r3, r2
 80026fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b20      	cmp	r3, #32
 8002706:	d121      	bne.n	800274c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_UART_Transmit_IT+0x26>
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e01a      	b.n	800274e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	88fa      	ldrh	r2, [r7, #6]
 8002722:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2221      	movs	r2, #33	; 0x21
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002746:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e000      	b.n	800274e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800274c:	2302      	movs	r3, #2
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b20      	cmp	r3, #32
 8002770:	d112      	bne.n	8002798 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_UART_Receive_IT+0x26>
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e00b      	b.n	800279a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	461a      	mov	r2, r3
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fb25 	bl	8002dde <UART_Start_Receive_IT>
 8002794:	4603      	mov	r3, r0
 8002796:	e000      	b.n	800279a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0ba      	sub	sp, #232	; 0xe8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10f      	bne.n	800280a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_UART_IRQHandler+0x66>
 80027f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fc01 	bl	800300a <UART_Receive_IT>
      return;
 8002808:	e25b      	b.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800280a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80de 	beq.w	80029d0 <HAL_UART_IRQHandler+0x22c>
 8002814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002824:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80d1 	beq.w	80029d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800282e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_UART_IRQHandler+0xae>
 800283a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_UART_IRQHandler+0xd2>
 800285e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_UART_IRQHandler+0xf6>
 8002882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f043 0204 	orr.w	r2, r3, #4
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800289a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d011      	beq.n	80028ca <HAL_UART_IRQHandler+0x126>
 80028a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f043 0208 	orr.w	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 81f2 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_UART_IRQHandler+0x14e>
 80028e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fb8c 	bl	800300a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d103      	bne.n	800291e <HAL_UART_IRQHandler+0x17a>
 8002916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d04f      	beq.n	80029be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fa96 	bl	8002e50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d041      	beq.n	80029b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3314      	adds	r3, #20
 8002938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800294c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3314      	adds	r3, #20
 800295a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800295e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800296a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800296e:	e841 2300 	strex	r3, r2, [r1]
 8002972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1d9      	bne.n	8002932 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d013      	beq.n	80029ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	4a7e      	ldr	r2, [pc, #504]	; (8002b84 <HAL_UART_IRQHandler+0x3e0>)
 800298c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe f9cc 	bl	8000d30 <HAL_DMA_Abort_IT>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d016      	beq.n	80029cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029a8:	4610      	mov	r0, r2
 80029aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	e00e      	b.n	80029cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f993 	bl	8002cda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b4:	e00a      	b.n	80029cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f98f 	bl	8002cda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029bc:	e006      	b.n	80029cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f98b 	bl	8002cda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80029ca:	e175      	b.n	8002cb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029cc:	bf00      	nop
    return;
 80029ce:	e173      	b.n	8002cb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	f040 814f 	bne.w	8002c78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8148 	beq.w	8002c78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8141 	beq.w	8002c78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80b6 	beq.w	8002b88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8145 	beq.w	8002cbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	f080 813e 	bcs.w	8002cbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	f000 8088 	beq.w	8002b64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a62:	e853 3f00 	ldrex	r3, [r3]
 8002a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a80:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a90:	e841 2300 	strex	r3, r2, [r1]
 8002a94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1d9      	bne.n	8002a54 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3314      	adds	r3, #20
 8002aa6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aaa:	e853 3f00 	ldrex	r3, [r3]
 8002aae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3314      	adds	r3, #20
 8002ac0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ac4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ac8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002acc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ad0:	e841 2300 	strex	r3, r2, [r1]
 8002ad4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e1      	bne.n	8002aa0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae6:	e853 3f00 	ldrex	r3, [r3]
 8002aea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3314      	adds	r3, #20
 8002afc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b08:	e841 2300 	strex	r3, r2, [r1]
 8002b0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e3      	bne.n	8002adc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	330c      	adds	r3, #12
 8002b28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2c:	e853 3f00 	ldrex	r3, [r3]
 8002b30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b34:	f023 0310 	bic.w	r3, r3, #16
 8002b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	330c      	adds	r3, #12
 8002b42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b46:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b4e:	e841 2300 	strex	r3, r2, [r1]
 8002b52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1e3      	bne.n	8002b22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe f8ab 	bl	8000cba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8b6 	bl	8002cec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b80:	e09c      	b.n	8002cbc <HAL_UART_IRQHandler+0x518>
 8002b82:	bf00      	nop
 8002b84:	08002f15 	.word	0x08002f15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 808e 	beq.w	8002cc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8089 	beq.w	8002cc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb8:	e853 3f00 	ldrex	r3, [r3]
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bd2:	647a      	str	r2, [r7, #68]	; 0x44
 8002bd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e3      	bne.n	8002bae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3314      	adds	r3, #20
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3314      	adds	r3, #20
 8002c06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c0a:	633a      	str	r2, [r7, #48]	; 0x30
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c12:	e841 2300 	strex	r3, r2, [r1]
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e3      	bne.n	8002be6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	e853 3f00 	ldrex	r3, [r3]
 8002c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0310 	bic.w	r3, r3, #16
 8002c42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	330c      	adds	r3, #12
 8002c4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c50:	61fa      	str	r2, [r7, #28]
 8002c52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c54:	69b9      	ldr	r1, [r7, #24]
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	e841 2300 	strex	r3, r2, [r1]
 8002c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e3      	bne.n	8002c2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f83b 	bl	8002cec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c76:	e023      	b.n	8002cc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <HAL_UART_IRQHandler+0x4f4>
 8002c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f953 	bl	8002f3c <UART_Transmit_IT>
    return;
 8002c96:	e014      	b.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00e      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
 8002ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f992 	bl	8002fda <UART_EndTransmit_IT>
    return;
 8002cb6:	e004      	b.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002cb8:	bf00      	nop
 8002cba:	e002      	b.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cbc:	bf00      	nop
 8002cbe:	e000      	b.n	8002cc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cc0:	bf00      	nop
  }
}
 8002cc2:	37e8      	adds	r7, #232	; 0xe8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b090      	sub	sp, #64	; 0x40
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d12:	e050      	b.n	8002db6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d04c      	beq.n	8002db6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d22:	f7fd fe8f 	bl	8000a44 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d241      	bcs.n	8002db6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	330c      	adds	r3, #12
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330c      	adds	r3, #12
 8002d50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d52:	637a      	str	r2, [r7, #52]	; 0x34
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1e5      	bne.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3314      	adds	r3, #20
 8002d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	e853 3f00 	ldrex	r3, [r3]
 8002d74:	613b      	str	r3, [r7, #16]
   return(result);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3314      	adds	r3, #20
 8002d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d86:	623a      	str	r2, [r7, #32]
 8002d88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8a:	69f9      	ldr	r1, [r7, #28]
 8002d8c:	6a3a      	ldr	r2, [r7, #32]
 8002d8e:	e841 2300 	strex	r3, r2, [r1]
 8002d92:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e5      	bne.n	8002d66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e00f      	b.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d09f      	beq.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3740      	adds	r7, #64	; 0x40
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	4613      	mov	r3, r2
 8002dea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	88fa      	ldrh	r2, [r7, #6]
 8002df6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	88fa      	ldrh	r2, [r7, #6]
 8002dfc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2222      	movs	r2, #34	; 0x22
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e22:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0220 	orr.w	r2, r2, #32
 8002e42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b095      	sub	sp, #84	; 0x54
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e62:	e853 3f00 	ldrex	r3, [r3]
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e78:	643a      	str	r2, [r7, #64]	; 0x40
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e5      	bne.n	8002e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3314      	adds	r3, #20
 8002e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d119      	bne.n	8002efc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	e853 3f00 	ldrex	r3, [r3]
 8002ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f023 0310 	bic.w	r3, r3, #16
 8002ede:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ee8:	61ba      	str	r2, [r7, #24]
 8002eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eec:	6979      	ldr	r1, [r7, #20]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	e841 2300 	strex	r3, r2, [r1]
 8002ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e5      	bne.n	8002ec8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f0a:	bf00      	nop
 8002f0c:	3754      	adds	r7, #84	; 0x54
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7ff fed3 	bl	8002cda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b21      	cmp	r3, #33	; 0x21
 8002f4e:	d13e      	bne.n	8002fce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f58:	d114      	bne.n	8002f84 <UART_Transmit_IT+0x48>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d110      	bne.n	8002f84 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	1c9a      	adds	r2, r3, #2
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	621a      	str	r2, [r3, #32]
 8002f82:	e008      	b.n	8002f96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	1c59      	adds	r1, r3, #1
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6211      	str	r1, [r2, #32]
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10f      	bne.n	8002fca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff fe64 	bl	8002cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b08c      	sub	sp, #48	; 0x30
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b22      	cmp	r3, #34	; 0x22
 800301c:	f040 80ae 	bne.w	800317c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003028:	d117      	bne.n	800305a <UART_Receive_IT+0x50>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d113      	bne.n	800305a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	b29b      	uxth	r3, r3
 8003044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003048:	b29a      	uxth	r2, r3
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	1c9a      	adds	r2, r3, #2
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
 8003058:	e026      	b.n	80030a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003060:	2300      	movs	r3, #0
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306c:	d007      	beq.n	800307e <UART_Receive_IT+0x74>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10a      	bne.n	800308c <UART_Receive_IT+0x82>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e008      	b.n	800309e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003098:	b2da      	uxtb	r2, r3
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4619      	mov	r1, r3
 80030b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d15d      	bne.n	8003178 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0220 	bic.w	r2, r2, #32
 80030ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d135      	bne.n	800316e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	613b      	str	r3, [r7, #16]
   return(result);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f023 0310 	bic.w	r3, r3, #16
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003128:	623a      	str	r2, [r7, #32]
 800312a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	69f9      	ldr	r1, [r7, #28]
 800312e:	6a3a      	ldr	r2, [r7, #32]
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	61bb      	str	r3, [r7, #24]
   return(result);
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e5      	bne.n	8003108 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b10      	cmp	r3, #16
 8003148:	d10a      	bne.n	8003160 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff fdc0 	bl	8002cec <HAL_UARTEx_RxEventCallback>
 800316c:	e002      	b.n	8003174 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fc fff4 	bl	800015c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	e002      	b.n	800317e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	3730      	adds	r7, #48	; 0x30
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031c2:	f023 030c 	bic.w	r3, r3, #12
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a2c      	ldr	r2, [pc, #176]	; (800329c <UART_SetConfig+0x114>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d103      	bne.n	80031f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031f0:	f7fe fbb8 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	e002      	b.n	80031fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031f8:	f7fe fba0 	bl	800193c <HAL_RCC_GetPCLK1Freq>
 80031fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	009a      	lsls	r2, r3, #2
 8003208:	441a      	add	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <UART_SetConfig+0x118>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	0119      	lsls	r1, r3, #4
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	009a      	lsls	r2, r3, #2
 8003228:	441a      	add	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	fbb2 f2f3 	udiv	r2, r2, r3
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <UART_SetConfig+0x118>)
 8003236:	fba3 0302 	umull	r0, r3, r3, r2
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2064      	movs	r0, #100	; 0x64
 800323e:	fb00 f303 	mul.w	r3, r0, r3
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	3332      	adds	r3, #50	; 0x32
 8003248:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <UART_SetConfig+0x118>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003254:	4419      	add	r1, r3
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009a      	lsls	r2, r3, #2
 8003260:	441a      	add	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fbb2 f2f3 	udiv	r2, r2, r3
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <UART_SetConfig+0x118>)
 800326e:	fba3 0302 	umull	r0, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2064      	movs	r0, #100	; 0x64
 8003276:	fb00 f303 	mul.w	r3, r0, r3
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	3332      	adds	r3, #50	; 0x32
 8003280:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <UART_SetConfig+0x118>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	440a      	add	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40013800 	.word	0x40013800
 80032a0:	51eb851f 	.word	0x51eb851f

080032a4 <siprintf>:
 80032a4:	b40e      	push	{r1, r2, r3}
 80032a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032aa:	b500      	push	{lr}
 80032ac:	b09c      	sub	sp, #112	; 0x70
 80032ae:	ab1d      	add	r3, sp, #116	; 0x74
 80032b0:	9002      	str	r0, [sp, #8]
 80032b2:	9006      	str	r0, [sp, #24]
 80032b4:	9107      	str	r1, [sp, #28]
 80032b6:	9104      	str	r1, [sp, #16]
 80032b8:	4808      	ldr	r0, [pc, #32]	; (80032dc <siprintf+0x38>)
 80032ba:	4909      	ldr	r1, [pc, #36]	; (80032e0 <siprintf+0x3c>)
 80032bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80032c0:	9105      	str	r1, [sp, #20]
 80032c2:	6800      	ldr	r0, [r0, #0]
 80032c4:	a902      	add	r1, sp, #8
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	f000 f98e 	bl	80035e8 <_svfiprintf_r>
 80032cc:	2200      	movs	r2, #0
 80032ce:	9b02      	ldr	r3, [sp, #8]
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	b01c      	add	sp, #112	; 0x70
 80032d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80032d8:	b003      	add	sp, #12
 80032da:	4770      	bx	lr
 80032dc:	2000005c 	.word	0x2000005c
 80032e0:	ffff0208 	.word	0xffff0208

080032e4 <memset>:
 80032e4:	4603      	mov	r3, r0
 80032e6:	4402      	add	r2, r0
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <memset+0xa>
 80032ec:	4770      	bx	lr
 80032ee:	f803 1b01 	strb.w	r1, [r3], #1
 80032f2:	e7f9      	b.n	80032e8 <memset+0x4>

080032f4 <__errno>:
 80032f4:	4b01      	ldr	r3, [pc, #4]	; (80032fc <__errno+0x8>)
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	2000005c 	.word	0x2000005c

08003300 <__libc_init_array>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	2600      	movs	r6, #0
 8003304:	4d0c      	ldr	r5, [pc, #48]	; (8003338 <__libc_init_array+0x38>)
 8003306:	4c0d      	ldr	r4, [pc, #52]	; (800333c <__libc_init_array+0x3c>)
 8003308:	1b64      	subs	r4, r4, r5
 800330a:	10a4      	asrs	r4, r4, #2
 800330c:	42a6      	cmp	r6, r4
 800330e:	d109      	bne.n	8003324 <__libc_init_array+0x24>
 8003310:	f000 fc7a 	bl	8003c08 <_init>
 8003314:	2600      	movs	r6, #0
 8003316:	4d0a      	ldr	r5, [pc, #40]	; (8003340 <__libc_init_array+0x40>)
 8003318:	4c0a      	ldr	r4, [pc, #40]	; (8003344 <__libc_init_array+0x44>)
 800331a:	1b64      	subs	r4, r4, r5
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	42a6      	cmp	r6, r4
 8003320:	d105      	bne.n	800332e <__libc_init_array+0x2e>
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	f855 3b04 	ldr.w	r3, [r5], #4
 8003328:	4798      	blx	r3
 800332a:	3601      	adds	r6, #1
 800332c:	e7ee      	b.n	800330c <__libc_init_array+0xc>
 800332e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003332:	4798      	blx	r3
 8003334:	3601      	adds	r6, #1
 8003336:	e7f2      	b.n	800331e <__libc_init_array+0x1e>
 8003338:	08003c9c 	.word	0x08003c9c
 800333c:	08003c9c 	.word	0x08003c9c
 8003340:	08003c9c 	.word	0x08003c9c
 8003344:	08003ca0 	.word	0x08003ca0

08003348 <__retarget_lock_acquire_recursive>:
 8003348:	4770      	bx	lr

0800334a <__retarget_lock_release_recursive>:
 800334a:	4770      	bx	lr

0800334c <_free_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4605      	mov	r5, r0
 8003350:	2900      	cmp	r1, #0
 8003352:	d040      	beq.n	80033d6 <_free_r+0x8a>
 8003354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003358:	1f0c      	subs	r4, r1, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfb8      	it	lt
 800335e:	18e4      	addlt	r4, r4, r3
 8003360:	f000 f8dc 	bl	800351c <__malloc_lock>
 8003364:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <_free_r+0x8c>)
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	b933      	cbnz	r3, 8003378 <_free_r+0x2c>
 800336a:	6063      	str	r3, [r4, #4]
 800336c:	6014      	str	r4, [r2, #0]
 800336e:	4628      	mov	r0, r5
 8003370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003374:	f000 b8d8 	b.w	8003528 <__malloc_unlock>
 8003378:	42a3      	cmp	r3, r4
 800337a:	d908      	bls.n	800338e <_free_r+0x42>
 800337c:	6820      	ldr	r0, [r4, #0]
 800337e:	1821      	adds	r1, r4, r0
 8003380:	428b      	cmp	r3, r1
 8003382:	bf01      	itttt	eq
 8003384:	6819      	ldreq	r1, [r3, #0]
 8003386:	685b      	ldreq	r3, [r3, #4]
 8003388:	1809      	addeq	r1, r1, r0
 800338a:	6021      	streq	r1, [r4, #0]
 800338c:	e7ed      	b.n	800336a <_free_r+0x1e>
 800338e:	461a      	mov	r2, r3
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	b10b      	cbz	r3, 8003398 <_free_r+0x4c>
 8003394:	42a3      	cmp	r3, r4
 8003396:	d9fa      	bls.n	800338e <_free_r+0x42>
 8003398:	6811      	ldr	r1, [r2, #0]
 800339a:	1850      	adds	r0, r2, r1
 800339c:	42a0      	cmp	r0, r4
 800339e:	d10b      	bne.n	80033b8 <_free_r+0x6c>
 80033a0:	6820      	ldr	r0, [r4, #0]
 80033a2:	4401      	add	r1, r0
 80033a4:	1850      	adds	r0, r2, r1
 80033a6:	4283      	cmp	r3, r0
 80033a8:	6011      	str	r1, [r2, #0]
 80033aa:	d1e0      	bne.n	800336e <_free_r+0x22>
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4408      	add	r0, r1
 80033b2:	6010      	str	r0, [r2, #0]
 80033b4:	6053      	str	r3, [r2, #4]
 80033b6:	e7da      	b.n	800336e <_free_r+0x22>
 80033b8:	d902      	bls.n	80033c0 <_free_r+0x74>
 80033ba:	230c      	movs	r3, #12
 80033bc:	602b      	str	r3, [r5, #0]
 80033be:	e7d6      	b.n	800336e <_free_r+0x22>
 80033c0:	6820      	ldr	r0, [r4, #0]
 80033c2:	1821      	adds	r1, r4, r0
 80033c4:	428b      	cmp	r3, r1
 80033c6:	bf01      	itttt	eq
 80033c8:	6819      	ldreq	r1, [r3, #0]
 80033ca:	685b      	ldreq	r3, [r3, #4]
 80033cc:	1809      	addeq	r1, r1, r0
 80033ce:	6021      	streq	r1, [r4, #0]
 80033d0:	6063      	str	r3, [r4, #4]
 80033d2:	6054      	str	r4, [r2, #4]
 80033d4:	e7cb      	b.n	800336e <_free_r+0x22>
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
 80033d8:	200002a0 	.word	0x200002a0

080033dc <sbrk_aligned>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	4e0e      	ldr	r6, [pc, #56]	; (8003418 <sbrk_aligned+0x3c>)
 80033e0:	460c      	mov	r4, r1
 80033e2:	6831      	ldr	r1, [r6, #0]
 80033e4:	4605      	mov	r5, r0
 80033e6:	b911      	cbnz	r1, 80033ee <sbrk_aligned+0x12>
 80033e8:	f000 fbaa 	bl	8003b40 <_sbrk_r>
 80033ec:	6030      	str	r0, [r6, #0]
 80033ee:	4621      	mov	r1, r4
 80033f0:	4628      	mov	r0, r5
 80033f2:	f000 fba5 	bl	8003b40 <_sbrk_r>
 80033f6:	1c43      	adds	r3, r0, #1
 80033f8:	d00a      	beq.n	8003410 <sbrk_aligned+0x34>
 80033fa:	1cc4      	adds	r4, r0, #3
 80033fc:	f024 0403 	bic.w	r4, r4, #3
 8003400:	42a0      	cmp	r0, r4
 8003402:	d007      	beq.n	8003414 <sbrk_aligned+0x38>
 8003404:	1a21      	subs	r1, r4, r0
 8003406:	4628      	mov	r0, r5
 8003408:	f000 fb9a 	bl	8003b40 <_sbrk_r>
 800340c:	3001      	adds	r0, #1
 800340e:	d101      	bne.n	8003414 <sbrk_aligned+0x38>
 8003410:	f04f 34ff 	mov.w	r4, #4294967295
 8003414:	4620      	mov	r0, r4
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	200002a4 	.word	0x200002a4

0800341c <_malloc_r>:
 800341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003420:	1ccd      	adds	r5, r1, #3
 8003422:	f025 0503 	bic.w	r5, r5, #3
 8003426:	3508      	adds	r5, #8
 8003428:	2d0c      	cmp	r5, #12
 800342a:	bf38      	it	cc
 800342c:	250c      	movcc	r5, #12
 800342e:	2d00      	cmp	r5, #0
 8003430:	4607      	mov	r7, r0
 8003432:	db01      	blt.n	8003438 <_malloc_r+0x1c>
 8003434:	42a9      	cmp	r1, r5
 8003436:	d905      	bls.n	8003444 <_malloc_r+0x28>
 8003438:	230c      	movs	r3, #12
 800343a:	2600      	movs	r6, #0
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	4630      	mov	r0, r6
 8003440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003444:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003518 <_malloc_r+0xfc>
 8003448:	f000 f868 	bl	800351c <__malloc_lock>
 800344c:	f8d8 3000 	ldr.w	r3, [r8]
 8003450:	461c      	mov	r4, r3
 8003452:	bb5c      	cbnz	r4, 80034ac <_malloc_r+0x90>
 8003454:	4629      	mov	r1, r5
 8003456:	4638      	mov	r0, r7
 8003458:	f7ff ffc0 	bl	80033dc <sbrk_aligned>
 800345c:	1c43      	adds	r3, r0, #1
 800345e:	4604      	mov	r4, r0
 8003460:	d155      	bne.n	800350e <_malloc_r+0xf2>
 8003462:	f8d8 4000 	ldr.w	r4, [r8]
 8003466:	4626      	mov	r6, r4
 8003468:	2e00      	cmp	r6, #0
 800346a:	d145      	bne.n	80034f8 <_malloc_r+0xdc>
 800346c:	2c00      	cmp	r4, #0
 800346e:	d048      	beq.n	8003502 <_malloc_r+0xe6>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	4631      	mov	r1, r6
 8003474:	4638      	mov	r0, r7
 8003476:	eb04 0903 	add.w	r9, r4, r3
 800347a:	f000 fb61 	bl	8003b40 <_sbrk_r>
 800347e:	4581      	cmp	r9, r0
 8003480:	d13f      	bne.n	8003502 <_malloc_r+0xe6>
 8003482:	6821      	ldr	r1, [r4, #0]
 8003484:	4638      	mov	r0, r7
 8003486:	1a6d      	subs	r5, r5, r1
 8003488:	4629      	mov	r1, r5
 800348a:	f7ff ffa7 	bl	80033dc <sbrk_aligned>
 800348e:	3001      	adds	r0, #1
 8003490:	d037      	beq.n	8003502 <_malloc_r+0xe6>
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	442b      	add	r3, r5
 8003496:	6023      	str	r3, [r4, #0]
 8003498:	f8d8 3000 	ldr.w	r3, [r8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d038      	beq.n	8003512 <_malloc_r+0xf6>
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	42a2      	cmp	r2, r4
 80034a4:	d12b      	bne.n	80034fe <_malloc_r+0xe2>
 80034a6:	2200      	movs	r2, #0
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	e00f      	b.n	80034cc <_malloc_r+0xb0>
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	1b52      	subs	r2, r2, r5
 80034b0:	d41f      	bmi.n	80034f2 <_malloc_r+0xd6>
 80034b2:	2a0b      	cmp	r2, #11
 80034b4:	d917      	bls.n	80034e6 <_malloc_r+0xca>
 80034b6:	1961      	adds	r1, r4, r5
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	6025      	str	r5, [r4, #0]
 80034bc:	bf18      	it	ne
 80034be:	6059      	strne	r1, [r3, #4]
 80034c0:	6863      	ldr	r3, [r4, #4]
 80034c2:	bf08      	it	eq
 80034c4:	f8c8 1000 	streq.w	r1, [r8]
 80034c8:	5162      	str	r2, [r4, r5]
 80034ca:	604b      	str	r3, [r1, #4]
 80034cc:	4638      	mov	r0, r7
 80034ce:	f104 060b 	add.w	r6, r4, #11
 80034d2:	f000 f829 	bl	8003528 <__malloc_unlock>
 80034d6:	f026 0607 	bic.w	r6, r6, #7
 80034da:	1d23      	adds	r3, r4, #4
 80034dc:	1af2      	subs	r2, r6, r3
 80034de:	d0ae      	beq.n	800343e <_malloc_r+0x22>
 80034e0:	1b9b      	subs	r3, r3, r6
 80034e2:	50a3      	str	r3, [r4, r2]
 80034e4:	e7ab      	b.n	800343e <_malloc_r+0x22>
 80034e6:	42a3      	cmp	r3, r4
 80034e8:	6862      	ldr	r2, [r4, #4]
 80034ea:	d1dd      	bne.n	80034a8 <_malloc_r+0x8c>
 80034ec:	f8c8 2000 	str.w	r2, [r8]
 80034f0:	e7ec      	b.n	80034cc <_malloc_r+0xb0>
 80034f2:	4623      	mov	r3, r4
 80034f4:	6864      	ldr	r4, [r4, #4]
 80034f6:	e7ac      	b.n	8003452 <_malloc_r+0x36>
 80034f8:	4634      	mov	r4, r6
 80034fa:	6876      	ldr	r6, [r6, #4]
 80034fc:	e7b4      	b.n	8003468 <_malloc_r+0x4c>
 80034fe:	4613      	mov	r3, r2
 8003500:	e7cc      	b.n	800349c <_malloc_r+0x80>
 8003502:	230c      	movs	r3, #12
 8003504:	4638      	mov	r0, r7
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	f000 f80e 	bl	8003528 <__malloc_unlock>
 800350c:	e797      	b.n	800343e <_malloc_r+0x22>
 800350e:	6025      	str	r5, [r4, #0]
 8003510:	e7dc      	b.n	80034cc <_malloc_r+0xb0>
 8003512:	605b      	str	r3, [r3, #4]
 8003514:	deff      	udf	#255	; 0xff
 8003516:	bf00      	nop
 8003518:	200002a0 	.word	0x200002a0

0800351c <__malloc_lock>:
 800351c:	4801      	ldr	r0, [pc, #4]	; (8003524 <__malloc_lock+0x8>)
 800351e:	f7ff bf13 	b.w	8003348 <__retarget_lock_acquire_recursive>
 8003522:	bf00      	nop
 8003524:	2000029c 	.word	0x2000029c

08003528 <__malloc_unlock>:
 8003528:	4801      	ldr	r0, [pc, #4]	; (8003530 <__malloc_unlock+0x8>)
 800352a:	f7ff bf0e 	b.w	800334a <__retarget_lock_release_recursive>
 800352e:	bf00      	nop
 8003530:	2000029c 	.word	0x2000029c

08003534 <__ssputs_r>:
 8003534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003538:	461f      	mov	r7, r3
 800353a:	688e      	ldr	r6, [r1, #8]
 800353c:	4682      	mov	sl, r0
 800353e:	42be      	cmp	r6, r7
 8003540:	460c      	mov	r4, r1
 8003542:	4690      	mov	r8, r2
 8003544:	680b      	ldr	r3, [r1, #0]
 8003546:	d82c      	bhi.n	80035a2 <__ssputs_r+0x6e>
 8003548:	898a      	ldrh	r2, [r1, #12]
 800354a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800354e:	d026      	beq.n	800359e <__ssputs_r+0x6a>
 8003550:	6965      	ldr	r5, [r4, #20]
 8003552:	6909      	ldr	r1, [r1, #16]
 8003554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003558:	eba3 0901 	sub.w	r9, r3, r1
 800355c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003560:	1c7b      	adds	r3, r7, #1
 8003562:	444b      	add	r3, r9
 8003564:	106d      	asrs	r5, r5, #1
 8003566:	429d      	cmp	r5, r3
 8003568:	bf38      	it	cc
 800356a:	461d      	movcc	r5, r3
 800356c:	0553      	lsls	r3, r2, #21
 800356e:	d527      	bpl.n	80035c0 <__ssputs_r+0x8c>
 8003570:	4629      	mov	r1, r5
 8003572:	f7ff ff53 	bl	800341c <_malloc_r>
 8003576:	4606      	mov	r6, r0
 8003578:	b360      	cbz	r0, 80035d4 <__ssputs_r+0xa0>
 800357a:	464a      	mov	r2, r9
 800357c:	6921      	ldr	r1, [r4, #16]
 800357e:	f000 fafd 	bl	8003b7c <memcpy>
 8003582:	89a3      	ldrh	r3, [r4, #12]
 8003584:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358c:	81a3      	strh	r3, [r4, #12]
 800358e:	6126      	str	r6, [r4, #16]
 8003590:	444e      	add	r6, r9
 8003592:	6026      	str	r6, [r4, #0]
 8003594:	463e      	mov	r6, r7
 8003596:	6165      	str	r5, [r4, #20]
 8003598:	eba5 0509 	sub.w	r5, r5, r9
 800359c:	60a5      	str	r5, [r4, #8]
 800359e:	42be      	cmp	r6, r7
 80035a0:	d900      	bls.n	80035a4 <__ssputs_r+0x70>
 80035a2:	463e      	mov	r6, r7
 80035a4:	4632      	mov	r2, r6
 80035a6:	4641      	mov	r1, r8
 80035a8:	6820      	ldr	r0, [r4, #0]
 80035aa:	f000 faaf 	bl	8003b0c <memmove>
 80035ae:	2000      	movs	r0, #0
 80035b0:	68a3      	ldr	r3, [r4, #8]
 80035b2:	1b9b      	subs	r3, r3, r6
 80035b4:	60a3      	str	r3, [r4, #8]
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	4433      	add	r3, r6
 80035ba:	6023      	str	r3, [r4, #0]
 80035bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c0:	462a      	mov	r2, r5
 80035c2:	f000 fae9 	bl	8003b98 <_realloc_r>
 80035c6:	4606      	mov	r6, r0
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d1e0      	bne.n	800358e <__ssputs_r+0x5a>
 80035cc:	4650      	mov	r0, sl
 80035ce:	6921      	ldr	r1, [r4, #16]
 80035d0:	f7ff febc 	bl	800334c <_free_r>
 80035d4:	230c      	movs	r3, #12
 80035d6:	f8ca 3000 	str.w	r3, [sl]
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295
 80035e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e4:	81a3      	strh	r3, [r4, #12]
 80035e6:	e7e9      	b.n	80035bc <__ssputs_r+0x88>

080035e8 <_svfiprintf_r>:
 80035e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ec:	4698      	mov	r8, r3
 80035ee:	898b      	ldrh	r3, [r1, #12]
 80035f0:	4607      	mov	r7, r0
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	460d      	mov	r5, r1
 80035f6:	4614      	mov	r4, r2
 80035f8:	b09d      	sub	sp, #116	; 0x74
 80035fa:	d50e      	bpl.n	800361a <_svfiprintf_r+0x32>
 80035fc:	690b      	ldr	r3, [r1, #16]
 80035fe:	b963      	cbnz	r3, 800361a <_svfiprintf_r+0x32>
 8003600:	2140      	movs	r1, #64	; 0x40
 8003602:	f7ff ff0b 	bl	800341c <_malloc_r>
 8003606:	6028      	str	r0, [r5, #0]
 8003608:	6128      	str	r0, [r5, #16]
 800360a:	b920      	cbnz	r0, 8003616 <_svfiprintf_r+0x2e>
 800360c:	230c      	movs	r3, #12
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	f04f 30ff 	mov.w	r0, #4294967295
 8003614:	e0d0      	b.n	80037b8 <_svfiprintf_r+0x1d0>
 8003616:	2340      	movs	r3, #64	; 0x40
 8003618:	616b      	str	r3, [r5, #20]
 800361a:	2300      	movs	r3, #0
 800361c:	9309      	str	r3, [sp, #36]	; 0x24
 800361e:	2320      	movs	r3, #32
 8003620:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003624:	2330      	movs	r3, #48	; 0x30
 8003626:	f04f 0901 	mov.w	r9, #1
 800362a:	f8cd 800c 	str.w	r8, [sp, #12]
 800362e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80037d0 <_svfiprintf_r+0x1e8>
 8003632:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003636:	4623      	mov	r3, r4
 8003638:	469a      	mov	sl, r3
 800363a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800363e:	b10a      	cbz	r2, 8003644 <_svfiprintf_r+0x5c>
 8003640:	2a25      	cmp	r2, #37	; 0x25
 8003642:	d1f9      	bne.n	8003638 <_svfiprintf_r+0x50>
 8003644:	ebba 0b04 	subs.w	fp, sl, r4
 8003648:	d00b      	beq.n	8003662 <_svfiprintf_r+0x7a>
 800364a:	465b      	mov	r3, fp
 800364c:	4622      	mov	r2, r4
 800364e:	4629      	mov	r1, r5
 8003650:	4638      	mov	r0, r7
 8003652:	f7ff ff6f 	bl	8003534 <__ssputs_r>
 8003656:	3001      	adds	r0, #1
 8003658:	f000 80a9 	beq.w	80037ae <_svfiprintf_r+0x1c6>
 800365c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800365e:	445a      	add	r2, fp
 8003660:	9209      	str	r2, [sp, #36]	; 0x24
 8003662:	f89a 3000 	ldrb.w	r3, [sl]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80a1 	beq.w	80037ae <_svfiprintf_r+0x1c6>
 800366c:	2300      	movs	r3, #0
 800366e:	f04f 32ff 	mov.w	r2, #4294967295
 8003672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003676:	f10a 0a01 	add.w	sl, sl, #1
 800367a:	9304      	str	r3, [sp, #16]
 800367c:	9307      	str	r3, [sp, #28]
 800367e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003682:	931a      	str	r3, [sp, #104]	; 0x68
 8003684:	4654      	mov	r4, sl
 8003686:	2205      	movs	r2, #5
 8003688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800368c:	4850      	ldr	r0, [pc, #320]	; (80037d0 <_svfiprintf_r+0x1e8>)
 800368e:	f000 fa67 	bl	8003b60 <memchr>
 8003692:	9a04      	ldr	r2, [sp, #16]
 8003694:	b9d8      	cbnz	r0, 80036ce <_svfiprintf_r+0xe6>
 8003696:	06d0      	lsls	r0, r2, #27
 8003698:	bf44      	itt	mi
 800369a:	2320      	movmi	r3, #32
 800369c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036a0:	0711      	lsls	r1, r2, #28
 80036a2:	bf44      	itt	mi
 80036a4:	232b      	movmi	r3, #43	; 0x2b
 80036a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036aa:	f89a 3000 	ldrb.w	r3, [sl]
 80036ae:	2b2a      	cmp	r3, #42	; 0x2a
 80036b0:	d015      	beq.n	80036de <_svfiprintf_r+0xf6>
 80036b2:	4654      	mov	r4, sl
 80036b4:	2000      	movs	r0, #0
 80036b6:	f04f 0c0a 	mov.w	ip, #10
 80036ba:	9a07      	ldr	r2, [sp, #28]
 80036bc:	4621      	mov	r1, r4
 80036be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036c2:	3b30      	subs	r3, #48	; 0x30
 80036c4:	2b09      	cmp	r3, #9
 80036c6:	d94d      	bls.n	8003764 <_svfiprintf_r+0x17c>
 80036c8:	b1b0      	cbz	r0, 80036f8 <_svfiprintf_r+0x110>
 80036ca:	9207      	str	r2, [sp, #28]
 80036cc:	e014      	b.n	80036f8 <_svfiprintf_r+0x110>
 80036ce:	eba0 0308 	sub.w	r3, r0, r8
 80036d2:	fa09 f303 	lsl.w	r3, r9, r3
 80036d6:	4313      	orrs	r3, r2
 80036d8:	46a2      	mov	sl, r4
 80036da:	9304      	str	r3, [sp, #16]
 80036dc:	e7d2      	b.n	8003684 <_svfiprintf_r+0x9c>
 80036de:	9b03      	ldr	r3, [sp, #12]
 80036e0:	1d19      	adds	r1, r3, #4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	9103      	str	r1, [sp, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bfbb      	ittet	lt
 80036ea:	425b      	neglt	r3, r3
 80036ec:	f042 0202 	orrlt.w	r2, r2, #2
 80036f0:	9307      	strge	r3, [sp, #28]
 80036f2:	9307      	strlt	r3, [sp, #28]
 80036f4:	bfb8      	it	lt
 80036f6:	9204      	strlt	r2, [sp, #16]
 80036f8:	7823      	ldrb	r3, [r4, #0]
 80036fa:	2b2e      	cmp	r3, #46	; 0x2e
 80036fc:	d10c      	bne.n	8003718 <_svfiprintf_r+0x130>
 80036fe:	7863      	ldrb	r3, [r4, #1]
 8003700:	2b2a      	cmp	r3, #42	; 0x2a
 8003702:	d134      	bne.n	800376e <_svfiprintf_r+0x186>
 8003704:	9b03      	ldr	r3, [sp, #12]
 8003706:	3402      	adds	r4, #2
 8003708:	1d1a      	adds	r2, r3, #4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	9203      	str	r2, [sp, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	bfb8      	it	lt
 8003712:	f04f 33ff 	movlt.w	r3, #4294967295
 8003716:	9305      	str	r3, [sp, #20]
 8003718:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80037d4 <_svfiprintf_r+0x1ec>
 800371c:	2203      	movs	r2, #3
 800371e:	4650      	mov	r0, sl
 8003720:	7821      	ldrb	r1, [r4, #0]
 8003722:	f000 fa1d 	bl	8003b60 <memchr>
 8003726:	b138      	cbz	r0, 8003738 <_svfiprintf_r+0x150>
 8003728:	2240      	movs	r2, #64	; 0x40
 800372a:	9b04      	ldr	r3, [sp, #16]
 800372c:	eba0 000a 	sub.w	r0, r0, sl
 8003730:	4082      	lsls	r2, r0
 8003732:	4313      	orrs	r3, r2
 8003734:	3401      	adds	r4, #1
 8003736:	9304      	str	r3, [sp, #16]
 8003738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800373c:	2206      	movs	r2, #6
 800373e:	4826      	ldr	r0, [pc, #152]	; (80037d8 <_svfiprintf_r+0x1f0>)
 8003740:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003744:	f000 fa0c 	bl	8003b60 <memchr>
 8003748:	2800      	cmp	r0, #0
 800374a:	d038      	beq.n	80037be <_svfiprintf_r+0x1d6>
 800374c:	4b23      	ldr	r3, [pc, #140]	; (80037dc <_svfiprintf_r+0x1f4>)
 800374e:	bb1b      	cbnz	r3, 8003798 <_svfiprintf_r+0x1b0>
 8003750:	9b03      	ldr	r3, [sp, #12]
 8003752:	3307      	adds	r3, #7
 8003754:	f023 0307 	bic.w	r3, r3, #7
 8003758:	3308      	adds	r3, #8
 800375a:	9303      	str	r3, [sp, #12]
 800375c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800375e:	4433      	add	r3, r6
 8003760:	9309      	str	r3, [sp, #36]	; 0x24
 8003762:	e768      	b.n	8003636 <_svfiprintf_r+0x4e>
 8003764:	460c      	mov	r4, r1
 8003766:	2001      	movs	r0, #1
 8003768:	fb0c 3202 	mla	r2, ip, r2, r3
 800376c:	e7a6      	b.n	80036bc <_svfiprintf_r+0xd4>
 800376e:	2300      	movs	r3, #0
 8003770:	f04f 0c0a 	mov.w	ip, #10
 8003774:	4619      	mov	r1, r3
 8003776:	3401      	adds	r4, #1
 8003778:	9305      	str	r3, [sp, #20]
 800377a:	4620      	mov	r0, r4
 800377c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003780:	3a30      	subs	r2, #48	; 0x30
 8003782:	2a09      	cmp	r2, #9
 8003784:	d903      	bls.n	800378e <_svfiprintf_r+0x1a6>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0c6      	beq.n	8003718 <_svfiprintf_r+0x130>
 800378a:	9105      	str	r1, [sp, #20]
 800378c:	e7c4      	b.n	8003718 <_svfiprintf_r+0x130>
 800378e:	4604      	mov	r4, r0
 8003790:	2301      	movs	r3, #1
 8003792:	fb0c 2101 	mla	r1, ip, r1, r2
 8003796:	e7f0      	b.n	800377a <_svfiprintf_r+0x192>
 8003798:	ab03      	add	r3, sp, #12
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	462a      	mov	r2, r5
 800379e:	4638      	mov	r0, r7
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <_svfiprintf_r+0x1f8>)
 80037a2:	a904      	add	r1, sp, #16
 80037a4:	f3af 8000 	nop.w
 80037a8:	1c42      	adds	r2, r0, #1
 80037aa:	4606      	mov	r6, r0
 80037ac:	d1d6      	bne.n	800375c <_svfiprintf_r+0x174>
 80037ae:	89ab      	ldrh	r3, [r5, #12]
 80037b0:	065b      	lsls	r3, r3, #25
 80037b2:	f53f af2d 	bmi.w	8003610 <_svfiprintf_r+0x28>
 80037b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037b8:	b01d      	add	sp, #116	; 0x74
 80037ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037be:	ab03      	add	r3, sp, #12
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	462a      	mov	r2, r5
 80037c4:	4638      	mov	r0, r7
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <_svfiprintf_r+0x1f8>)
 80037c8:	a904      	add	r1, sp, #16
 80037ca:	f000 f87d 	bl	80038c8 <_printf_i>
 80037ce:	e7eb      	b.n	80037a8 <_svfiprintf_r+0x1c0>
 80037d0:	08003c66 	.word	0x08003c66
 80037d4:	08003c6c 	.word	0x08003c6c
 80037d8:	08003c70 	.word	0x08003c70
 80037dc:	00000000 	.word	0x00000000
 80037e0:	08003535 	.word	0x08003535

080037e4 <_printf_common>:
 80037e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037e8:	4616      	mov	r6, r2
 80037ea:	4699      	mov	r9, r3
 80037ec:	688a      	ldr	r2, [r1, #8]
 80037ee:	690b      	ldr	r3, [r1, #16]
 80037f0:	4607      	mov	r7, r0
 80037f2:	4293      	cmp	r3, r2
 80037f4:	bfb8      	it	lt
 80037f6:	4613      	movlt	r3, r2
 80037f8:	6033      	str	r3, [r6, #0]
 80037fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037fe:	460c      	mov	r4, r1
 8003800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003804:	b10a      	cbz	r2, 800380a <_printf_common+0x26>
 8003806:	3301      	adds	r3, #1
 8003808:	6033      	str	r3, [r6, #0]
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	0699      	lsls	r1, r3, #26
 800380e:	bf42      	ittt	mi
 8003810:	6833      	ldrmi	r3, [r6, #0]
 8003812:	3302      	addmi	r3, #2
 8003814:	6033      	strmi	r3, [r6, #0]
 8003816:	6825      	ldr	r5, [r4, #0]
 8003818:	f015 0506 	ands.w	r5, r5, #6
 800381c:	d106      	bne.n	800382c <_printf_common+0x48>
 800381e:	f104 0a19 	add.w	sl, r4, #25
 8003822:	68e3      	ldr	r3, [r4, #12]
 8003824:	6832      	ldr	r2, [r6, #0]
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	42ab      	cmp	r3, r5
 800382a:	dc2b      	bgt.n	8003884 <_printf_common+0xa0>
 800382c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003830:	1e13      	subs	r3, r2, #0
 8003832:	6822      	ldr	r2, [r4, #0]
 8003834:	bf18      	it	ne
 8003836:	2301      	movne	r3, #1
 8003838:	0692      	lsls	r2, r2, #26
 800383a:	d430      	bmi.n	800389e <_printf_common+0xba>
 800383c:	4649      	mov	r1, r9
 800383e:	4638      	mov	r0, r7
 8003840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003844:	47c0      	blx	r8
 8003846:	3001      	adds	r0, #1
 8003848:	d023      	beq.n	8003892 <_printf_common+0xae>
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	6922      	ldr	r2, [r4, #16]
 800384e:	f003 0306 	and.w	r3, r3, #6
 8003852:	2b04      	cmp	r3, #4
 8003854:	bf14      	ite	ne
 8003856:	2500      	movne	r5, #0
 8003858:	6833      	ldreq	r3, [r6, #0]
 800385a:	f04f 0600 	mov.w	r6, #0
 800385e:	bf08      	it	eq
 8003860:	68e5      	ldreq	r5, [r4, #12]
 8003862:	f104 041a 	add.w	r4, r4, #26
 8003866:	bf08      	it	eq
 8003868:	1aed      	subeq	r5, r5, r3
 800386a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800386e:	bf08      	it	eq
 8003870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003874:	4293      	cmp	r3, r2
 8003876:	bfc4      	itt	gt
 8003878:	1a9b      	subgt	r3, r3, r2
 800387a:	18ed      	addgt	r5, r5, r3
 800387c:	42b5      	cmp	r5, r6
 800387e:	d11a      	bne.n	80038b6 <_printf_common+0xd2>
 8003880:	2000      	movs	r0, #0
 8003882:	e008      	b.n	8003896 <_printf_common+0xb2>
 8003884:	2301      	movs	r3, #1
 8003886:	4652      	mov	r2, sl
 8003888:	4649      	mov	r1, r9
 800388a:	4638      	mov	r0, r7
 800388c:	47c0      	blx	r8
 800388e:	3001      	adds	r0, #1
 8003890:	d103      	bne.n	800389a <_printf_common+0xb6>
 8003892:	f04f 30ff 	mov.w	r0, #4294967295
 8003896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800389a:	3501      	adds	r5, #1
 800389c:	e7c1      	b.n	8003822 <_printf_common+0x3e>
 800389e:	2030      	movs	r0, #48	; 0x30
 80038a0:	18e1      	adds	r1, r4, r3
 80038a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038ac:	4422      	add	r2, r4
 80038ae:	3302      	adds	r3, #2
 80038b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038b4:	e7c2      	b.n	800383c <_printf_common+0x58>
 80038b6:	2301      	movs	r3, #1
 80038b8:	4622      	mov	r2, r4
 80038ba:	4649      	mov	r1, r9
 80038bc:	4638      	mov	r0, r7
 80038be:	47c0      	blx	r8
 80038c0:	3001      	adds	r0, #1
 80038c2:	d0e6      	beq.n	8003892 <_printf_common+0xae>
 80038c4:	3601      	adds	r6, #1
 80038c6:	e7d9      	b.n	800387c <_printf_common+0x98>

080038c8 <_printf_i>:
 80038c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038cc:	7e0f      	ldrb	r7, [r1, #24]
 80038ce:	4691      	mov	r9, r2
 80038d0:	2f78      	cmp	r7, #120	; 0x78
 80038d2:	4680      	mov	r8, r0
 80038d4:	460c      	mov	r4, r1
 80038d6:	469a      	mov	sl, r3
 80038d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038de:	d807      	bhi.n	80038f0 <_printf_i+0x28>
 80038e0:	2f62      	cmp	r7, #98	; 0x62
 80038e2:	d80a      	bhi.n	80038fa <_printf_i+0x32>
 80038e4:	2f00      	cmp	r7, #0
 80038e6:	f000 80d5 	beq.w	8003a94 <_printf_i+0x1cc>
 80038ea:	2f58      	cmp	r7, #88	; 0x58
 80038ec:	f000 80c1 	beq.w	8003a72 <_printf_i+0x1aa>
 80038f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038f8:	e03a      	b.n	8003970 <_printf_i+0xa8>
 80038fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038fe:	2b15      	cmp	r3, #21
 8003900:	d8f6      	bhi.n	80038f0 <_printf_i+0x28>
 8003902:	a101      	add	r1, pc, #4	; (adr r1, 8003908 <_printf_i+0x40>)
 8003904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003908:	08003961 	.word	0x08003961
 800390c:	08003975 	.word	0x08003975
 8003910:	080038f1 	.word	0x080038f1
 8003914:	080038f1 	.word	0x080038f1
 8003918:	080038f1 	.word	0x080038f1
 800391c:	080038f1 	.word	0x080038f1
 8003920:	08003975 	.word	0x08003975
 8003924:	080038f1 	.word	0x080038f1
 8003928:	080038f1 	.word	0x080038f1
 800392c:	080038f1 	.word	0x080038f1
 8003930:	080038f1 	.word	0x080038f1
 8003934:	08003a7b 	.word	0x08003a7b
 8003938:	080039a1 	.word	0x080039a1
 800393c:	08003a35 	.word	0x08003a35
 8003940:	080038f1 	.word	0x080038f1
 8003944:	080038f1 	.word	0x080038f1
 8003948:	08003a9d 	.word	0x08003a9d
 800394c:	080038f1 	.word	0x080038f1
 8003950:	080039a1 	.word	0x080039a1
 8003954:	080038f1 	.word	0x080038f1
 8003958:	080038f1 	.word	0x080038f1
 800395c:	08003a3d 	.word	0x08003a3d
 8003960:	682b      	ldr	r3, [r5, #0]
 8003962:	1d1a      	adds	r2, r3, #4
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	602a      	str	r2, [r5, #0]
 8003968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800396c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003970:	2301      	movs	r3, #1
 8003972:	e0a0      	b.n	8003ab6 <_printf_i+0x1ee>
 8003974:	6820      	ldr	r0, [r4, #0]
 8003976:	682b      	ldr	r3, [r5, #0]
 8003978:	0607      	lsls	r7, r0, #24
 800397a:	f103 0104 	add.w	r1, r3, #4
 800397e:	6029      	str	r1, [r5, #0]
 8003980:	d501      	bpl.n	8003986 <_printf_i+0xbe>
 8003982:	681e      	ldr	r6, [r3, #0]
 8003984:	e003      	b.n	800398e <_printf_i+0xc6>
 8003986:	0646      	lsls	r6, r0, #25
 8003988:	d5fb      	bpl.n	8003982 <_printf_i+0xba>
 800398a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800398e:	2e00      	cmp	r6, #0
 8003990:	da03      	bge.n	800399a <_printf_i+0xd2>
 8003992:	232d      	movs	r3, #45	; 0x2d
 8003994:	4276      	negs	r6, r6
 8003996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800399a:	230a      	movs	r3, #10
 800399c:	4859      	ldr	r0, [pc, #356]	; (8003b04 <_printf_i+0x23c>)
 800399e:	e012      	b.n	80039c6 <_printf_i+0xfe>
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	1d19      	adds	r1, r3, #4
 80039a6:	6029      	str	r1, [r5, #0]
 80039a8:	0605      	lsls	r5, r0, #24
 80039aa:	d501      	bpl.n	80039b0 <_printf_i+0xe8>
 80039ac:	681e      	ldr	r6, [r3, #0]
 80039ae:	e002      	b.n	80039b6 <_printf_i+0xee>
 80039b0:	0641      	lsls	r1, r0, #25
 80039b2:	d5fb      	bpl.n	80039ac <_printf_i+0xe4>
 80039b4:	881e      	ldrh	r6, [r3, #0]
 80039b6:	2f6f      	cmp	r7, #111	; 0x6f
 80039b8:	bf0c      	ite	eq
 80039ba:	2308      	moveq	r3, #8
 80039bc:	230a      	movne	r3, #10
 80039be:	4851      	ldr	r0, [pc, #324]	; (8003b04 <_printf_i+0x23c>)
 80039c0:	2100      	movs	r1, #0
 80039c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039c6:	6865      	ldr	r5, [r4, #4]
 80039c8:	2d00      	cmp	r5, #0
 80039ca:	bfa8      	it	ge
 80039cc:	6821      	ldrge	r1, [r4, #0]
 80039ce:	60a5      	str	r5, [r4, #8]
 80039d0:	bfa4      	itt	ge
 80039d2:	f021 0104 	bicge.w	r1, r1, #4
 80039d6:	6021      	strge	r1, [r4, #0]
 80039d8:	b90e      	cbnz	r6, 80039de <_printf_i+0x116>
 80039da:	2d00      	cmp	r5, #0
 80039dc:	d04b      	beq.n	8003a76 <_printf_i+0x1ae>
 80039de:	4615      	mov	r5, r2
 80039e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80039e4:	fb03 6711 	mls	r7, r3, r1, r6
 80039e8:	5dc7      	ldrb	r7, [r0, r7]
 80039ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039ee:	4637      	mov	r7, r6
 80039f0:	42bb      	cmp	r3, r7
 80039f2:	460e      	mov	r6, r1
 80039f4:	d9f4      	bls.n	80039e0 <_printf_i+0x118>
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d10b      	bne.n	8003a12 <_printf_i+0x14a>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	07de      	lsls	r6, r3, #31
 80039fe:	d508      	bpl.n	8003a12 <_printf_i+0x14a>
 8003a00:	6923      	ldr	r3, [r4, #16]
 8003a02:	6861      	ldr	r1, [r4, #4]
 8003a04:	4299      	cmp	r1, r3
 8003a06:	bfde      	ittt	le
 8003a08:	2330      	movle	r3, #48	; 0x30
 8003a0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a12:	1b52      	subs	r2, r2, r5
 8003a14:	6122      	str	r2, [r4, #16]
 8003a16:	464b      	mov	r3, r9
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	f8cd a000 	str.w	sl, [sp]
 8003a20:	aa03      	add	r2, sp, #12
 8003a22:	f7ff fedf 	bl	80037e4 <_printf_common>
 8003a26:	3001      	adds	r0, #1
 8003a28:	d14a      	bne.n	8003ac0 <_printf_i+0x1f8>
 8003a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2e:	b004      	add	sp, #16
 8003a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	f043 0320 	orr.w	r3, r3, #32
 8003a3a:	6023      	str	r3, [r4, #0]
 8003a3c:	2778      	movs	r7, #120	; 0x78
 8003a3e:	4832      	ldr	r0, [pc, #200]	; (8003b08 <_printf_i+0x240>)
 8003a40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	6829      	ldr	r1, [r5, #0]
 8003a48:	061f      	lsls	r7, r3, #24
 8003a4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a4e:	d402      	bmi.n	8003a56 <_printf_i+0x18e>
 8003a50:	065f      	lsls	r7, r3, #25
 8003a52:	bf48      	it	mi
 8003a54:	b2b6      	uxthmi	r6, r6
 8003a56:	07df      	lsls	r7, r3, #31
 8003a58:	bf48      	it	mi
 8003a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8003a5e:	6029      	str	r1, [r5, #0]
 8003a60:	bf48      	it	mi
 8003a62:	6023      	strmi	r3, [r4, #0]
 8003a64:	b91e      	cbnz	r6, 8003a6e <_printf_i+0x1a6>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	f023 0320 	bic.w	r3, r3, #32
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	2310      	movs	r3, #16
 8003a70:	e7a6      	b.n	80039c0 <_printf_i+0xf8>
 8003a72:	4824      	ldr	r0, [pc, #144]	; (8003b04 <_printf_i+0x23c>)
 8003a74:	e7e4      	b.n	8003a40 <_printf_i+0x178>
 8003a76:	4615      	mov	r5, r2
 8003a78:	e7bd      	b.n	80039f6 <_printf_i+0x12e>
 8003a7a:	682b      	ldr	r3, [r5, #0]
 8003a7c:	6826      	ldr	r6, [r4, #0]
 8003a7e:	1d18      	adds	r0, r3, #4
 8003a80:	6961      	ldr	r1, [r4, #20]
 8003a82:	6028      	str	r0, [r5, #0]
 8003a84:	0635      	lsls	r5, r6, #24
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	d501      	bpl.n	8003a8e <_printf_i+0x1c6>
 8003a8a:	6019      	str	r1, [r3, #0]
 8003a8c:	e002      	b.n	8003a94 <_printf_i+0x1cc>
 8003a8e:	0670      	lsls	r0, r6, #25
 8003a90:	d5fb      	bpl.n	8003a8a <_printf_i+0x1c2>
 8003a92:	8019      	strh	r1, [r3, #0]
 8003a94:	2300      	movs	r3, #0
 8003a96:	4615      	mov	r5, r2
 8003a98:	6123      	str	r3, [r4, #16]
 8003a9a:	e7bc      	b.n	8003a16 <_printf_i+0x14e>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	1d1a      	adds	r2, r3, #4
 8003aa2:	602a      	str	r2, [r5, #0]
 8003aa4:	681d      	ldr	r5, [r3, #0]
 8003aa6:	6862      	ldr	r2, [r4, #4]
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f000 f859 	bl	8003b60 <memchr>
 8003aae:	b108      	cbz	r0, 8003ab4 <_printf_i+0x1ec>
 8003ab0:	1b40      	subs	r0, r0, r5
 8003ab2:	6060      	str	r0, [r4, #4]
 8003ab4:	6863      	ldr	r3, [r4, #4]
 8003ab6:	6123      	str	r3, [r4, #16]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003abe:	e7aa      	b.n	8003a16 <_printf_i+0x14e>
 8003ac0:	462a      	mov	r2, r5
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	4640      	mov	r0, r8
 8003ac6:	6923      	ldr	r3, [r4, #16]
 8003ac8:	47d0      	blx	sl
 8003aca:	3001      	adds	r0, #1
 8003acc:	d0ad      	beq.n	8003a2a <_printf_i+0x162>
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	079b      	lsls	r3, r3, #30
 8003ad2:	d413      	bmi.n	8003afc <_printf_i+0x234>
 8003ad4:	68e0      	ldr	r0, [r4, #12]
 8003ad6:	9b03      	ldr	r3, [sp, #12]
 8003ad8:	4298      	cmp	r0, r3
 8003ada:	bfb8      	it	lt
 8003adc:	4618      	movlt	r0, r3
 8003ade:	e7a6      	b.n	8003a2e <_printf_i+0x166>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	4632      	mov	r2, r6
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	47d0      	blx	sl
 8003aea:	3001      	adds	r0, #1
 8003aec:	d09d      	beq.n	8003a2a <_printf_i+0x162>
 8003aee:	3501      	adds	r5, #1
 8003af0:	68e3      	ldr	r3, [r4, #12]
 8003af2:	9903      	ldr	r1, [sp, #12]
 8003af4:	1a5b      	subs	r3, r3, r1
 8003af6:	42ab      	cmp	r3, r5
 8003af8:	dcf2      	bgt.n	8003ae0 <_printf_i+0x218>
 8003afa:	e7eb      	b.n	8003ad4 <_printf_i+0x20c>
 8003afc:	2500      	movs	r5, #0
 8003afe:	f104 0619 	add.w	r6, r4, #25
 8003b02:	e7f5      	b.n	8003af0 <_printf_i+0x228>
 8003b04:	08003c77 	.word	0x08003c77
 8003b08:	08003c88 	.word	0x08003c88

08003b0c <memmove>:
 8003b0c:	4288      	cmp	r0, r1
 8003b0e:	b510      	push	{r4, lr}
 8003b10:	eb01 0402 	add.w	r4, r1, r2
 8003b14:	d902      	bls.n	8003b1c <memmove+0x10>
 8003b16:	4284      	cmp	r4, r0
 8003b18:	4623      	mov	r3, r4
 8003b1a:	d807      	bhi.n	8003b2c <memmove+0x20>
 8003b1c:	1e43      	subs	r3, r0, #1
 8003b1e:	42a1      	cmp	r1, r4
 8003b20:	d008      	beq.n	8003b34 <memmove+0x28>
 8003b22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b2a:	e7f8      	b.n	8003b1e <memmove+0x12>
 8003b2c:	4601      	mov	r1, r0
 8003b2e:	4402      	add	r2, r0
 8003b30:	428a      	cmp	r2, r1
 8003b32:	d100      	bne.n	8003b36 <memmove+0x2a>
 8003b34:	bd10      	pop	{r4, pc}
 8003b36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b3e:	e7f7      	b.n	8003b30 <memmove+0x24>

08003b40 <_sbrk_r>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	2300      	movs	r3, #0
 8003b44:	4d05      	ldr	r5, [pc, #20]	; (8003b5c <_sbrk_r+0x1c>)
 8003b46:	4604      	mov	r4, r0
 8003b48:	4608      	mov	r0, r1
 8003b4a:	602b      	str	r3, [r5, #0]
 8003b4c:	f7fc fec0 	bl	80008d0 <_sbrk>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d102      	bne.n	8003b5a <_sbrk_r+0x1a>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	b103      	cbz	r3, 8003b5a <_sbrk_r+0x1a>
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	bd38      	pop	{r3, r4, r5, pc}
 8003b5c:	20000298 	.word	0x20000298

08003b60 <memchr>:
 8003b60:	4603      	mov	r3, r0
 8003b62:	b510      	push	{r4, lr}
 8003b64:	b2c9      	uxtb	r1, r1
 8003b66:	4402      	add	r2, r0
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	d101      	bne.n	8003b72 <memchr+0x12>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e003      	b.n	8003b7a <memchr+0x1a>
 8003b72:	7804      	ldrb	r4, [r0, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	428c      	cmp	r4, r1
 8003b78:	d1f6      	bne.n	8003b68 <memchr+0x8>
 8003b7a:	bd10      	pop	{r4, pc}

08003b7c <memcpy>:
 8003b7c:	440a      	add	r2, r1
 8003b7e:	4291      	cmp	r1, r2
 8003b80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b84:	d100      	bne.n	8003b88 <memcpy+0xc>
 8003b86:	4770      	bx	lr
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b8e:	4291      	cmp	r1, r2
 8003b90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b94:	d1f9      	bne.n	8003b8a <memcpy+0xe>
 8003b96:	bd10      	pop	{r4, pc}

08003b98 <_realloc_r>:
 8003b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9c:	4680      	mov	r8, r0
 8003b9e:	4614      	mov	r4, r2
 8003ba0:	460e      	mov	r6, r1
 8003ba2:	b921      	cbnz	r1, 8003bae <_realloc_r+0x16>
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003baa:	f7ff bc37 	b.w	800341c <_malloc_r>
 8003bae:	b92a      	cbnz	r2, 8003bbc <_realloc_r+0x24>
 8003bb0:	f7ff fbcc 	bl	800334c <_free_r>
 8003bb4:	4625      	mov	r5, r4
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bbc:	f000 f81b 	bl	8003bf6 <_malloc_usable_size_r>
 8003bc0:	4284      	cmp	r4, r0
 8003bc2:	4607      	mov	r7, r0
 8003bc4:	d802      	bhi.n	8003bcc <_realloc_r+0x34>
 8003bc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bca:	d812      	bhi.n	8003bf2 <_realloc_r+0x5a>
 8003bcc:	4621      	mov	r1, r4
 8003bce:	4640      	mov	r0, r8
 8003bd0:	f7ff fc24 	bl	800341c <_malloc_r>
 8003bd4:	4605      	mov	r5, r0
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d0ed      	beq.n	8003bb6 <_realloc_r+0x1e>
 8003bda:	42bc      	cmp	r4, r7
 8003bdc:	4622      	mov	r2, r4
 8003bde:	4631      	mov	r1, r6
 8003be0:	bf28      	it	cs
 8003be2:	463a      	movcs	r2, r7
 8003be4:	f7ff ffca 	bl	8003b7c <memcpy>
 8003be8:	4631      	mov	r1, r6
 8003bea:	4640      	mov	r0, r8
 8003bec:	f7ff fbae 	bl	800334c <_free_r>
 8003bf0:	e7e1      	b.n	8003bb6 <_realloc_r+0x1e>
 8003bf2:	4635      	mov	r5, r6
 8003bf4:	e7df      	b.n	8003bb6 <_realloc_r+0x1e>

08003bf6 <_malloc_usable_size_r>:
 8003bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bfa:	1f18      	subs	r0, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bfbc      	itt	lt
 8003c00:	580b      	ldrlt	r3, [r1, r0]
 8003c02:	18c0      	addlt	r0, r0, r3
 8003c04:	4770      	bx	lr
	...

08003c08 <_init>:
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	bf00      	nop
 8003c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0e:	bc08      	pop	{r3}
 8003c10:	469e      	mov	lr, r3
 8003c12:	4770      	bx	lr

08003c14 <_fini>:
 8003c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c16:	bf00      	nop
 8003c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1a:	bc08      	pop	{r3}
 8003c1c:	469e      	mov	lr, r3
 8003c1e:	4770      	bx	lr
