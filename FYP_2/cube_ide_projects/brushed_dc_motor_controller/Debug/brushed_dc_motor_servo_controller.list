
brushed_dc_motor_servo_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d1c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08006e30  08006e30  00016e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007008  08007008  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007008  08007008  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007008  08007008  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007008  08007008  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800700c  0800700c  0001700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007010  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000078  08007088  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08007088  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c4b6  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001caa  00000000  00000000  0002c59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002e248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ac  00000000  00000000  0002ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017830  00000000  00000000  0002f844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd85  00000000  00000000  00047074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088c57  00000000  00000000  00054df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004218  00000000  00000000  000dda50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e1c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e14 	.word	0x08006e14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006e14 	.word	0x08006e14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpun>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__aeabi_fcmpun+0x14>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d108      	bne.n	80010a6 <__aeabi_fcmpun+0x26>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d102      	bne.n	80010a0 <__aeabi_fcmpun+0x20>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d102      	bne.n	80010a6 <__aeabi_fcmpun+0x26>
 80010a0:	f04f 0000 	mov.w	r0, #0
 80010a4:	4770      	bx	lr
 80010a6:	f04f 0001 	mov.w	r0, #1
 80010aa:	4770      	bx	lr

080010ac <__aeabi_f2iz>:
 80010ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b4:	d30f      	bcc.n	80010d6 <__aeabi_f2iz+0x2a>
 80010b6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010be:	d90d      	bls.n	80010dc <__aeabi_f2iz+0x30>
 80010c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010cc:	fa23 f002 	lsr.w	r0, r3, r2
 80010d0:	bf18      	it	ne
 80010d2:	4240      	negne	r0, r0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	4770      	bx	lr
 80010dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e0:	d101      	bne.n	80010e6 <__aeabi_f2iz+0x3a>
 80010e2:	0242      	lsls	r2, r0, #9
 80010e4:	d105      	bne.n	80010f2 <__aeabi_f2iz+0x46>
 80010e6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ea:	bf08      	it	eq
 80010ec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr

080010f8 <__aeabi_f2uiz>:
 80010f8:	0042      	lsls	r2, r0, #1
 80010fa:	d20e      	bcs.n	800111a <__aeabi_f2uiz+0x22>
 80010fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001100:	d30b      	bcc.n	800111a <__aeabi_f2uiz+0x22>
 8001102:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001106:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110a:	d409      	bmi.n	8001120 <__aeabi_f2uiz+0x28>
 800110c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001114:	fa23 f002 	lsr.w	r0, r3, r2
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr
 8001120:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001124:	d101      	bne.n	800112a <__aeabi_f2uiz+0x32>
 8001126:	0242      	lsls	r2, r0, #9
 8001128:	d102      	bne.n	8001130 <__aeabi_f2uiz+0x38>
 800112a:	f04f 30ff 	mov.w	r0, #4294967295
 800112e:	4770      	bx	lr
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <PulsestoDegrees>:
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
float PulsestoDegrees(float pulses)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	return ((pulses * 360.0f) / (data.gearRatio * data.encoderPulses));
 8001140:	490b      	ldr	r1, [pc, #44]	; (8001170 <PulsestoDegrees+0x38>)
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff fdd6 	bl	8000cf4 <__aeabi_fmul>
 8001148:	4603      	mov	r3, r0
 800114a:	461c      	mov	r4, r3
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <PulsestoDegrees+0x3c>)
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <PulsestoDegrees+0x3c>)
 8001152:	6992      	ldr	r2, [r2, #24]
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fdcc 	bl	8000cf4 <__aeabi_fmul>
 800115c:	4603      	mov	r3, r0
 800115e:	4619      	mov	r1, r3
 8001160:	4620      	mov	r0, r4
 8001162:	f7ff fe7b 	bl	8000e5c <__aeabi_fdiv>
 8001166:	4603      	mov	r3, r0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	43b40000 	.word	0x43b40000
 8001174:	20000280 	.word	0x20000280

08001178 <CalculateMotionProfile>:

void CalculateMotionProfile()
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	af00      	add	r7, sp, #0
	memset(&motionProfile, 0, sizeof(motionProfile));
 800117c:	2230      	movs	r2, #48	; 0x30
 800117e:	2100      	movs	r1, #0
 8001180:	4882      	ldr	r0, [pc, #520]	; (800138c <CalculateMotionProfile+0x214>)
 8001182:	f003 fe27 	bl	8004dd4 <memset>

  if(data.position < 0.0f)
 8001186:	4b82      	ldr	r3, [pc, #520]	; (8001390 <CalculateMotionProfile+0x218>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f04f 0100 	mov.w	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff4e 	bl	8001030 <__aeabi_fcmplt>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <CalculateMotionProfile+0x2c>
    motionProfile.dir = ClockWise;
 800119a:	4b7c      	ldr	r3, [pc, #496]	; (800138c <CalculateMotionProfile+0x214>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80011a2:	e003      	b.n	80011ac <CalculateMotionProfile+0x34>
  else
    motionProfile.dir = CounterClockWise;
 80011a4:	4b79      	ldr	r3, [pc, #484]	; (800138c <CalculateMotionProfile+0x214>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	motionProfile.max_acceleration = data.acceleration;
 80011ac:	4b78      	ldr	r3, [pc, #480]	; (8001390 <CalculateMotionProfile+0x218>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4a76      	ldr	r2, [pc, #472]	; (800138c <CalculateMotionProfile+0x214>)
 80011b2:	6013      	str	r3, [r2, #0]
	motionProfile.max_deceleration = data.deceleration;
 80011b4:	4b76      	ldr	r3, [pc, #472]	; (8001390 <CalculateMotionProfile+0x218>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	4a74      	ldr	r2, [pc, #464]	; (800138c <CalculateMotionProfile+0x214>)
 80011ba:	6053      	str	r3, [r2, #4]
	motionProfile.total_distance = fabs((PulsestoDegrees(motor_current_position) - (data.position)));
 80011bc:	4b75      	ldr	r3, [pc, #468]	; (8001394 <CalculateMotionProfile+0x21c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ffb9 	bl	8001138 <PulsestoDegrees>
 80011c6:	4602      	mov	r2, r0
 80011c8:	4b71      	ldr	r3, [pc, #452]	; (8001390 <CalculateMotionProfile+0x218>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4610      	mov	r0, r2
 80011d0:	f7ff fc86 	bl	8000ae0 <__aeabi_fsub>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011da:	4a6c      	ldr	r2, [pc, #432]	; (800138c <CalculateMotionProfile+0x214>)
 80011dc:	6093      	str	r3, [r2, #8]
	motionProfile.max_velocity = data.speed;
 80011de:	4b6c      	ldr	r3, [pc, #432]	; (8001390 <CalculateMotionProfile+0x218>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a6a      	ldr	r2, [pc, #424]	; (800138c <CalculateMotionProfile+0x214>)
 80011e4:	6293      	str	r3, [r2, #40]	; 0x28
	if(motionProfile.max_acceleration == 0.0f || motionProfile.max_deceleration == 0.0f || motionProfile.max_velocity == 0.0f)
 80011e6:	4b69      	ldr	r3, [pc, #420]	; (800138c <CalculateMotionProfile+0x214>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f04f 0100 	mov.w	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff14 	bl	800101c <__aeabi_fcmpeq>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f040 80c6 	bne.w	8001388 <CalculateMotionProfile+0x210>
 80011fc:	4b63      	ldr	r3, [pc, #396]	; (800138c <CalculateMotionProfile+0x214>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f04f 0100 	mov.w	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff09 	bl	800101c <__aeabi_fcmpeq>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	f040 80bb 	bne.w	8001388 <CalculateMotionProfile+0x210>
 8001212:	4b5e      	ldr	r3, [pc, #376]	; (800138c <CalculateMotionProfile+0x214>)
 8001214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001216:	f04f 0100 	mov.w	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fefe 	bl	800101c <__aeabi_fcmpeq>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 80b0 	bne.w	8001388 <CalculateMotionProfile+0x210>
		return;
	motionProfile.time_to_max_velocity = motionProfile.max_velocity / motionProfile.max_acceleration;
 8001228:	4b58      	ldr	r3, [pc, #352]	; (800138c <CalculateMotionProfile+0x214>)
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	4a57      	ldr	r2, [pc, #348]	; (800138c <CalculateMotionProfile+0x214>)
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fe12 	bl	8000e5c <__aeabi_fdiv>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b53      	ldr	r3, [pc, #332]	; (800138c <CalculateMotionProfile+0x214>)
 800123e:	619a      	str	r2, [r3, #24]
	motionProfile.time_to_stop = motionProfile.max_velocity / motionProfile.max_deceleration;
 8001240:	4b52      	ldr	r3, [pc, #328]	; (800138c <CalculateMotionProfile+0x214>)
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	4a51      	ldr	r2, [pc, #324]	; (800138c <CalculateMotionProfile+0x214>)
 8001246:	6852      	ldr	r2, [r2, #4]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fe06 	bl	8000e5c <__aeabi_fdiv>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b4d      	ldr	r3, [pc, #308]	; (800138c <CalculateMotionProfile+0x214>)
 8001256:	621a      	str	r2, [r3, #32]

	motionProfile.distance_to_max_velocity = 0.5 * motionProfile.max_acceleration * (float)pow(motionProfile.time_to_max_velocity, 2);
 8001258:	4b4c      	ldr	r3, [pc, #304]	; (800138c <CalculateMotionProfile+0x214>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f8e3 	bl	8000428 <__aeabi_f2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <CalculateMotionProfile+0x220>)
 8001268:	f7ff f936 	bl	80004d8 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	461d      	mov	r5, r3
 8001274:	4b45      	ldr	r3, [pc, #276]	; (800138c <CalculateMotionProfile+0x214>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f8d5 	bl	8000428 <__aeabi_f2d>
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001286:	f004 febb 	bl	8006000 <pow>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fbd1 	bl	8000a38 <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f8c5 	bl	8000428 <__aeabi_f2d>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7ff f917 	bl	80004d8 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fbc1 	bl	8000a38 <__aeabi_d2f>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a34      	ldr	r2, [pc, #208]	; (800138c <CalculateMotionProfile+0x214>)
 80012ba:	60d3      	str	r3, [r2, #12]
	motionProfile.distance_to_stop = 0.5 * motionProfile.max_deceleration * (float)pow(motionProfile.time_to_stop, 2);
 80012bc:	4b33      	ldr	r3, [pc, #204]	; (800138c <CalculateMotionProfile+0x214>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f8b1 	bl	8000428 <__aeabi_f2d>
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4b33      	ldr	r3, [pc, #204]	; (8001398 <CalculateMotionProfile+0x220>)
 80012cc:	f7ff f904 	bl	80004d8 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4614      	mov	r4, r2
 80012d6:	461d      	mov	r5, r3
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <CalculateMotionProfile+0x214>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f8a3 	bl	8000428 <__aeabi_f2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ea:	f004 fe89 	bl	8006000 <pow>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fb9f 	bl	8000a38 <__aeabi_d2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f893 	bl	8000428 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7ff f8e5 	bl	80004d8 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fb8f 	bl	8000a38 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <CalculateMotionProfile+0x214>)
 800131e:	6113      	str	r3, [r2, #16]
	motionProfile.distance_at_max_velocity = motionProfile.total_distance - (motionProfile.distance_to_max_velocity + motionProfile.distance_to_stop);
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <CalculateMotionProfile+0x214>)
 8001322:	689c      	ldr	r4, [r3, #8]
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <CalculateMotionProfile+0x214>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	4a18      	ldr	r2, [pc, #96]	; (800138c <CalculateMotionProfile+0x214>)
 800132a:	6912      	ldr	r2, [r2, #16]
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fbd8 	bl	8000ae4 <__addsf3>
 8001334:	4603      	mov	r3, r0
 8001336:	4619      	mov	r1, r3
 8001338:	4620      	mov	r0, r4
 800133a:	f7ff fbd1 	bl	8000ae0 <__aeabi_fsub>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <CalculateMotionProfile+0x214>)
 8001344:	615a      	str	r2, [r3, #20]
  
	motionProfile.time_at_max_velocity = motionProfile.distance_at_max_velocity / motionProfile.max_velocity;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <CalculateMotionProfile+0x214>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <CalculateMotionProfile+0x214>)
 800134c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fd83 	bl	8000e5c <__aeabi_fdiv>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <CalculateMotionProfile+0x214>)
 800135c:	61da      	str	r2, [r3, #28]
  motionProfile.total_time = motionProfile.time_at_max_velocity + motionProfile.time_to_max_velocity + motionProfile.time_to_stop;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <CalculateMotionProfile+0x214>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <CalculateMotionProfile+0x214>)
 8001364:	6992      	ldr	r2, [r2, #24]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fbbb 	bl	8000ae4 <__addsf3>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <CalculateMotionProfile+0x214>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4619      	mov	r1, r3
 8001378:	4610      	mov	r0, r2
 800137a:	f7ff fbb3 	bl	8000ae4 <__addsf3>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b02      	ldr	r3, [pc, #8]	; (800138c <CalculateMotionProfile+0x214>)
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
 8001386:	e000      	b.n	800138a <CalculateMotionProfile+0x212>
		return;
 8001388:	bf00      	nop
}
 800138a:	bdb0      	pop	{r4, r5, r7, pc}
 800138c:	200002e0 	.word	0x200002e0
 8001390:	20000280 	.word	0x20000280
 8001394:	200002b0 	.word	0x200002b0
 8001398:	3fe00000 	.word	0x3fe00000

0800139c <GetVelocityAtTime>:

float GetVelocityAtTime()
{
 800139c:	b5b0      	push	{r4, r5, r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
	float velocity;
	//Acceleration Phase
	if(_time < motionProfile.time_to_max_velocity)
 80013a2:	4b35      	ldr	r3, [pc, #212]	; (8001478 <GetVelocityAtTime+0xdc>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4a35      	ldr	r2, [pc, #212]	; (800147c <GetVelocityAtTime+0xe0>)
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fe5d 	bl	800106c <__aeabi_fcmpgt>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00a      	beq.n	80013ce <GetVelocityAtTime+0x32>
	{
		velocity = motionProfile.max_acceleration * _time;
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <GetVelocityAtTime+0xdc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a2f      	ldr	r2, [pc, #188]	; (800147c <GetVelocityAtTime+0xe0>)
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fc96 	bl	8000cf4 <__aeabi_fmul>
 80013c8:	4603      	mov	r3, r0
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	e045      	b.n	800145a <GetVelocityAtTime+0xbe>
	}
	//Max Velocity Phase
	else if(_time < (motionProfile.time_at_max_velocity + motionProfile.time_to_max_velocity))
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <GetVelocityAtTime+0xdc>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a29      	ldr	r2, [pc, #164]	; (8001478 <GetVelocityAtTime+0xdc>)
 80013d4:	6992      	ldr	r2, [r2, #24]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fb83 	bl	8000ae4 <__addsf3>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <GetVelocityAtTime+0xe0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4610      	mov	r0, r2
 80013ea:	f7ff fe3f 	bl	800106c <__aeabi_fcmpgt>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <GetVelocityAtTime+0x60>
	{
		velocity = motionProfile.max_velocity;
 80013f4:	4b20      	ldr	r3, [pc, #128]	; (8001478 <GetVelocityAtTime+0xdc>)
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	e02e      	b.n	800145a <GetVelocityAtTime+0xbe>
	}
	//Deceleration Phase
	else if (_time < (motionProfile.total_time))
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <GetVelocityAtTime+0xdc>)
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	4a1e      	ldr	r2, [pc, #120]	; (800147c <GetVelocityAtTime+0xe0>)
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe30 	bl	800106c <__aeabi_fcmpgt>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d020      	beq.n	8001454 <GetVelocityAtTime+0xb8>
	{
		velocity = motionProfile.max_velocity - (motionProfile.max_deceleration * (_time - motionProfile.time_at_max_velocity - motionProfile.time_to_max_velocity));
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <GetVelocityAtTime+0xdc>)
 8001414:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <GetVelocityAtTime+0xdc>)
 8001418:	685d      	ldr	r5, [r3, #4]
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <GetVelocityAtTime+0xe0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a16      	ldr	r2, [pc, #88]	; (8001478 <GetVelocityAtTime+0xdc>)
 8001420:	69d2      	ldr	r2, [r2, #28]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fb5b 	bl	8000ae0 <__aeabi_fsub>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <GetVelocityAtTime+0xdc>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	4619      	mov	r1, r3
 8001434:	4610      	mov	r0, r2
 8001436:	f7ff fb53 	bl	8000ae0 <__aeabi_fsub>
 800143a:	4603      	mov	r3, r0
 800143c:	4619      	mov	r1, r3
 800143e:	4628      	mov	r0, r5
 8001440:	f7ff fc58 	bl	8000cf4 <__aeabi_fmul>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff fb49 	bl	8000ae0 <__aeabi_fsub>
 800144e:	4603      	mov	r3, r0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	e002      	b.n	800145a <GetVelocityAtTime+0xbe>
	}
	else
	{
		velocity = 0.0f;
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
	}
	return motionProfile.dir == ClockWise? -velocity : velocity;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <GetVelocityAtTime+0xdc>)
 800145c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001460:	2b00      	cmp	r3, #0
 8001462:	d103      	bne.n	800146c <GetVelocityAtTime+0xd0>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800146a:	e000      	b.n	800146e <GetVelocityAtTime+0xd2>
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bdb0      	pop	{r4, r5, r7, pc}
 8001476:	bf00      	nop
 8001478:	200002e0 	.word	0x200002e0
 800147c:	200002bc 	.word	0x200002bc

08001480 <CalculateSpeed>:



void CalculateSpeed()
{
 8001480:	b598      	push	{r3, r4, r7, lr}
 8001482:	af00      	add	r7, sp, #0
	motor_current_speed = (PulsestoDegrees(motor_current_position) - PulsestoDegrees(motor_prev_position)) / deltaTime;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <CalculateSpeed+0x48>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fe55 	bl	8001138 <PulsestoDegrees>
 800148e:	4604      	mov	r4, r0
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <CalculateSpeed+0x4c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fe4f 	bl	8001138 <PulsestoDegrees>
 800149a:	4603      	mov	r3, r0
 800149c:	4619      	mov	r1, r3
 800149e:	4620      	mov	r0, r4
 80014a0:	f7ff fb1e 	bl	8000ae0 <__aeabi_fsub>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <CalculateSpeed+0x50>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4610      	mov	r0, r2
 80014b0:	f7ff fcd4 	bl	8000e5c <__aeabi_fdiv>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <CalculateSpeed+0x54>)
 80014ba:	601a      	str	r2, [r3, #0]
	motor_prev_position = motor_current_position;
 80014bc:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <CalculateSpeed+0x48>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a02      	ldr	r2, [pc, #8]	; (80014cc <CalculateSpeed+0x4c>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	bd98      	pop	{r3, r4, r7, pc}
 80014c8:	200002b0 	.word	0x200002b0
 80014cc:	200002b4 	.word	0x200002b4
 80014d0:	200002c4 	.word	0x200002c4
 80014d4:	20000004 	.word	0x20000004

080014d8 <CalculatePID>:

void CalculatePID()
{
 80014d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014dc:	b0c4      	sub	sp, #272	; 0x110
 80014de:	af04      	add	r7, sp, #16

	currentTime = HAL_GetTick();
 80014e0:	f000 fea8 	bl	8002234 <HAL_GetTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a86      	ldr	r2, [pc, #536]	; (8001700 <CalculatePID+0x228>)
 80014e8:	6013      	str	r3, [r2, #0]
	deltaTime = (float)((float)(currentTime) - (float)(prevTime)) / 1000.0f;
 80014ea:	4b85      	ldr	r3, [pc, #532]	; (8001700 <CalculatePID+0x228>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fba8 	bl	8000c44 <__aeabi_ui2f>
 80014f4:	4604      	mov	r4, r0
 80014f6:	4b83      	ldr	r3, [pc, #524]	; (8001704 <CalculatePID+0x22c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fba2 	bl	8000c44 <__aeabi_ui2f>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff faeb 	bl	8000ae0 <__aeabi_fsub>
 800150a:	4603      	mov	r3, r0
 800150c:	497e      	ldr	r1, [pc, #504]	; (8001708 <CalculatePID+0x230>)
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fca4 	bl	8000e5c <__aeabi_fdiv>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b7c      	ldr	r3, [pc, #496]	; (800170c <CalculatePID+0x234>)
 800151a:	601a      	str	r2, [r3, #0]

	_time = _time + deltaTime;
 800151c:	4b7c      	ldr	r3, [pc, #496]	; (8001710 <CalculatePID+0x238>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a7a      	ldr	r2, [pc, #488]	; (800170c <CalculatePID+0x234>)
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fadc 	bl	8000ae4 <__addsf3>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b77      	ldr	r3, [pc, #476]	; (8001710 <CalculatePID+0x238>)
 8001532:	601a      	str	r2, [r3, #0]

	//errorValue = motor_current_position - (data.position * ((data.gearRatio * data.encoderPulses) / 360.0f));

  static float fs = 0.0f;
  if (!isnanf(motor_current_speed) && !isinf(motor_current_speed))
 8001534:	4b77      	ldr	r3, [pc, #476]	; (8001714 <CalculatePID+0x23c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fda0 	bl	8001080 <__aeabi_fcmpun>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d137      	bne.n	80015b6 <CalculatePID+0xde>
 8001546:	4b73      	ldr	r3, [pc, #460]	; (8001714 <CalculatePID+0x23c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800154e:	2301      	movs	r3, #1
 8001550:	461d      	mov	r5, r3
 8001552:	4971      	ldr	r1, [pc, #452]	; (8001718 <CalculatePID+0x240>)
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff fd93 	bl	8001080 <__aeabi_fcmpun>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d108      	bne.n	8001572 <CalculatePID+0x9a>
 8001560:	496d      	ldr	r1, [pc, #436]	; (8001718 <CalculatePID+0x240>)
 8001562:	4620      	mov	r0, r4
 8001564:	f7ff fd6e 	bl	8001044 <__aeabi_fcmple>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <CalculatePID+0x9a>
 800156e:	2300      	movs	r3, #0
 8001570:	461d      	mov	r5, r3
 8001572:	b2eb      	uxtb	r3, r5
 8001574:	f083 0301 	eor.w	r3, r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <CalculatePID+0xaa>
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <CalculatePID+0xac>
 8001582:	2301      	movs	r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d016      	beq.n	80015b6 <CalculatePID+0xde>
    // fs =  (0.1116f * motor_current_speed);
    // fs += (0.1116f * motor_speed_1);
    // fs += (0.7767f * filt_speed_1);
    // motor_speed_1 = motor_current_speed;
    // filt_speed_1 = fs;
    fs = 0.1f * motor_current_speed + (1.0f - 0.1f) * fs;
 8001588:	4b62      	ldr	r3, [pc, #392]	; (8001714 <CalculatePID+0x23c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4963      	ldr	r1, [pc, #396]	; (800171c <CalculatePID+0x244>)
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fbb0 	bl	8000cf4 <__aeabi_fmul>
 8001594:	4603      	mov	r3, r0
 8001596:	461c      	mov	r4, r3
 8001598:	4b61      	ldr	r3, [pc, #388]	; (8001720 <CalculatePID+0x248>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4961      	ldr	r1, [pc, #388]	; (8001724 <CalculatePID+0x24c>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fba8 	bl	8000cf4 <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4619      	mov	r1, r3
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7ff fa9b 	bl	8000ae4 <__addsf3>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b5b      	ldr	r3, [pc, #364]	; (8001720 <CalculatePID+0x248>)
 80015b4:	601a      	str	r2, [r3, #0]

  }


	errorValue = GetVelocityAtTime() - fs;
 80015b6:	f7ff fef1 	bl	800139c <GetVelocityAtTime>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4b58      	ldr	r3, [pc, #352]	; (8001720 <CalculatePID+0x248>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4610      	mov	r0, r2
 80015c4:	f7ff fa8c 	bl	8000ae0 <__aeabi_fsub>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b56      	ldr	r3, [pc, #344]	; (8001728 <CalculatePID+0x250>)
 80015ce:	601a      	str	r2, [r3, #0]
	derivative = (errorValue - prevErrorValue) / deltaTime;
 80015d0:	4b55      	ldr	r3, [pc, #340]	; (8001728 <CalculatePID+0x250>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a55      	ldr	r2, [pc, #340]	; (800172c <CalculatePID+0x254>)
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fa80 	bl	8000ae0 <__aeabi_fsub>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b49      	ldr	r3, [pc, #292]	; (800170c <CalculatePID+0x234>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4610      	mov	r0, r2
 80015ec:	f7ff fc36 	bl	8000e5c <__aeabi_fdiv>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b4e      	ldr	r3, [pc, #312]	; (8001730 <CalculatePID+0x258>)
 80015f6:	601a      	str	r2, [r3, #0]
	integral = integral + errorValue * deltaTime;
 80015f8:	4b4b      	ldr	r3, [pc, #300]	; (8001728 <CalculatePID+0x250>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a43      	ldr	r2, [pc, #268]	; (800170c <CalculatePID+0x234>)
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fb76 	bl	8000cf4 <__aeabi_fmul>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	4b49      	ldr	r3, [pc, #292]	; (8001734 <CalculatePID+0x25c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f7ff fa66 	bl	8000ae4 <__addsf3>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	4b45      	ldr	r3, [pc, #276]	; (8001734 <CalculatePID+0x25c>)
 800161e:	601a      	str	r2, [r3, #0]

	controlSignal = data.kp * errorValue + data.ki * integral + data.kd * derivative;
 8001620:	4b45      	ldr	r3, [pc, #276]	; (8001738 <CalculatePID+0x260>)
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	4a40      	ldr	r2, [pc, #256]	; (8001728 <CalculatePID+0x250>)
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fb62 	bl	8000cf4 <__aeabi_fmul>
 8001630:	4603      	mov	r3, r0
 8001632:	461c      	mov	r4, r3
 8001634:	4b40      	ldr	r3, [pc, #256]	; (8001738 <CalculatePID+0x260>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a3e      	ldr	r2, [pc, #248]	; (8001734 <CalculatePID+0x25c>)
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fb58 	bl	8000cf4 <__aeabi_fmul>
 8001644:	4603      	mov	r3, r0
 8001646:	4619      	mov	r1, r3
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff fa4b 	bl	8000ae4 <__addsf3>
 800164e:	4603      	mov	r3, r0
 8001650:	461c      	mov	r4, r3
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <CalculatePID+0x260>)
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	4a36      	ldr	r2, [pc, #216]	; (8001730 <CalculatePID+0x258>)
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fb49 	bl	8000cf4 <__aeabi_fmul>
 8001662:	4603      	mov	r3, r0
 8001664:	4619      	mov	r1, r3
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff fa3c 	bl	8000ae4 <__addsf3>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	4b32      	ldr	r3, [pc, #200]	; (800173c <CalculatePID+0x264>)
 8001672:	601a      	str	r2, [r3, #0]


	char msg[255];
	//sprintf(msg, "pos: %f, ev: %f, dv: %f, intg: %f, controlSignal: %f,  dt: %f\n\r\0", ((motor_current_position * 360.0f) / (data.gearRatio * data.encoderPulses)) ,errorValue, derivative, integral, controlSignal, deltaTime);	//de
	//sprintf(msg, "%d, %d, %d, %d\n\0", (int)((motor_current_position * 360.0f) / (data.gearRatio * data.encoderPulses)) ,(int)_time, (int)add_speed_measurement(motor_current_speed), (int) GetVelocityAtTime());	//de
  sprintf(msg, "%d %d %d %d %d\n\0", (int)GetVelocityAtTime(), (int)motor_current_speed, (int)fs, (int) PulsestoDegrees(motor_current_position), (int) controlSignal);
 8001674:	f7ff fe92 	bl	800139c <GetVelocityAtTime>
 8001678:	4603      	mov	r3, r0
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fd16 	bl	80010ac <__aeabi_f2iz>
 8001680:	4606      	mov	r6, r0
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <CalculatePID+0x23c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fd10 	bl	80010ac <__aeabi_f2iz>
 800168c:	4680      	mov	r8, r0
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <CalculatePID+0x248>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fd0a 	bl	80010ac <__aeabi_f2iz>
 8001698:	4604      	mov	r4, r0
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <CalculatePID+0x268>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fd4a 	bl	8001138 <PulsestoDegrees>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fd00 	bl	80010ac <__aeabi_f2iz>
 80016ac:	4605      	mov	r5, r0
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <CalculatePID+0x264>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fcfa 	bl	80010ac <__aeabi_f2iz>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4638      	mov	r0, r7
 80016bc:	9302      	str	r3, [sp, #8]
 80016be:	9501      	str	r5, [sp, #4]
 80016c0:	9400      	str	r4, [sp, #0]
 80016c2:	4643      	mov	r3, r8
 80016c4:	4632      	mov	r2, r6
 80016c6:	491f      	ldr	r1, [pc, #124]	; (8001744 <CalculatePID+0x26c>)
 80016c8:	f003 fb38 	bl	8004d3c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80016cc:	463b      	mov	r3, r7
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fd3e 	bl	8000150 <strlen>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4639      	mov	r1, r7
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	481a      	ldr	r0, [pc, #104]	; (8001748 <CalculatePID+0x270>)
 80016e0:	f002 fd04 	bl	80040ec <HAL_UART_Transmit>

	prevTime = currentTime;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <CalculatePID+0x228>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <CalculatePID+0x22c>)
 80016ea:	6013      	str	r3, [r2, #0]
	prevErrorValue = errorValue;
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <CalculatePID+0x250>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <CalculatePID+0x254>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80016fa:	46bd      	mov	sp, r7
 80016fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001700:	200002c0 	.word	0x200002c0
 8001704:	200002c8 	.word	0x200002c8
 8001708:	447a0000 	.word	0x447a0000
 800170c:	200002c4 	.word	0x200002c4
 8001710:	200002bc 	.word	0x200002bc
 8001714:	20000004 	.word	0x20000004
 8001718:	7f7fffff 	.word	0x7f7fffff
 800171c:	3dcccccd 	.word	0x3dcccccd
 8001720:	20000310 	.word	0x20000310
 8001724:	3f666666 	.word	0x3f666666
 8001728:	200002cc 	.word	0x200002cc
 800172c:	200002d0 	.word	0x200002d0
 8001730:	200002d4 	.word	0x200002d4
 8001734:	200002d8 	.word	0x200002d8
 8001738:	20000280 	.word	0x20000280
 800173c:	200002dc 	.word	0x200002dc
 8001740:	200002b0 	.word	0x200002b0
 8001744:	08006e30 	.word	0x08006e30
 8001748:	20000124 	.word	0x20000124

0800174c <DriveMotor>:

void DriveMotor()
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0

	if(controlSignal < 0)
 8001750:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <DriveMotor+0x19c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f04f 0100 	mov.w	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fc69 	bl	8001030 <__aeabi_fcmplt>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <DriveMotor+0x20>
	{
		motorDirection = ClockWise;
 8001764:	4b61      	ldr	r3, [pc, #388]	; (80018ec <DriveMotor+0x1a0>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e002      	b.n	8001772 <DriveMotor+0x26>
	}
	else
	{
		motorDirection = CounterClockWise;
 800176c:	4b5f      	ldr	r3, [pc, #380]	; (80018ec <DriveMotor+0x1a0>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
	}

	if(prevMotorDirection != motorDirection)
 8001772:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <DriveMotor+0x1a4>)
 8001774:	781a      	ldrb	r2, [r3, #0]
 8001776:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <DriveMotor+0x1a0>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d07a      	beq.n	8001874 <DriveMotor+0x128>
	{
		switch(motorDirection)
 800177e:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <DriveMotor+0x1a0>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <DriveMotor+0x40>
 8001786:	2b01      	cmp	r3, #1
 8001788:	d03a      	beq.n	8001800 <DriveMotor+0xb4>
 800178a:	e073      	b.n	8001874 <DriveMotor+0x128>
		{
		case ClockWise:
		{
		  PWM_CurrentChannel = PWM_CLOCKWISE_CHANNEL;
 800178c:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <DriveMotor+0x1a8>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 8001792:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <DriveMotor+0x1ac>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2200      	movs	r2, #0
 8001798:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, 0);
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <DriveMotor+0x1ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2200      	movs	r2, #0
 80017a0:	635a      	str	r2, [r3, #52]	; 0x34
		  //delay here
		  HAL_Delay(PWM_DEADTIME_DELAY);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f000 fd50 	bl	8002248 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, 0);
 80017a8:	4b52      	ldr	r3, [pc, #328]	; (80018f4 <DriveMotor+0x1a8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d104      	bne.n	80017ba <DriveMotor+0x6e>
 80017b0:	4b51      	ldr	r3, [pc, #324]	; (80018f8 <DriveMotor+0x1ac>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34
 80017b8:	e015      	b.n	80017e6 <DriveMotor+0x9a>
 80017ba:	4b4e      	ldr	r3, [pc, #312]	; (80018f4 <DriveMotor+0x1a8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d104      	bne.n	80017cc <DriveMotor+0x80>
 80017c2:	4b4d      	ldr	r3, [pc, #308]	; (80018f8 <DriveMotor+0x1ac>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2300      	movs	r3, #0
 80017c8:	6393      	str	r3, [r2, #56]	; 0x38
 80017ca:	e00c      	b.n	80017e6 <DriveMotor+0x9a>
 80017cc:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <DriveMotor+0x1a8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d104      	bne.n	80017de <DriveMotor+0x92>
 80017d4:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <DriveMotor+0x1ac>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	63d3      	str	r3, [r2, #60]	; 0x3c
 80017dc:	e003      	b.n	80017e6 <DriveMotor+0x9a>
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <DriveMotor+0x1ac>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	2300      	movs	r3, #0
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
		  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ec:	4843      	ldr	r0, [pc, #268]	; (80018fc <DriveMotor+0x1b0>)
 80017ee:	f001 f8a2 	bl	8002936 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f8:	4840      	ldr	r0, [pc, #256]	; (80018fc <DriveMotor+0x1b0>)
 80017fa:	f001 f89c 	bl	8002936 <HAL_GPIO_WritePin>

		}break;
 80017fe:	e039      	b.n	8001874 <DriveMotor+0x128>
		case CounterClockWise:
		{
		  PWM_CurrentChannel = PWM_COUNTER_CLOCKWISE_CHANNEL;
 8001800:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <DriveMotor+0x1a8>)
 8001802:	2204      	movs	r2, #4
 8001804:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, 0);
 8001806:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <DriveMotor+0x1ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 800180e:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <DriveMotor+0x1ac>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	639a      	str	r2, [r3, #56]	; 0x38
		  //delay here
		  HAL_Delay(PWM_DEADTIME_DELAY);
 8001816:	2001      	movs	r0, #1
 8001818:	f000 fd16 	bl	8002248 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, 0);
 800181c:	4b35      	ldr	r3, [pc, #212]	; (80018f4 <DriveMotor+0x1a8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d104      	bne.n	800182e <DriveMotor+0xe2>
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <DriveMotor+0x1ac>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2200      	movs	r2, #0
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
 800182c:	e015      	b.n	800185a <DriveMotor+0x10e>
 800182e:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <DriveMotor+0x1a8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d104      	bne.n	8001840 <DriveMotor+0xf4>
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <DriveMotor+0x1ac>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2300      	movs	r3, #0
 800183c:	6393      	str	r3, [r2, #56]	; 0x38
 800183e:	e00c      	b.n	800185a <DriveMotor+0x10e>
 8001840:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <DriveMotor+0x1a8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b08      	cmp	r3, #8
 8001846:	d104      	bne.n	8001852 <DriveMotor+0x106>
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <DriveMotor+0x1ac>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2300      	movs	r3, #0
 800184e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001850:	e003      	b.n	800185a <DriveMotor+0x10e>
 8001852:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <DriveMotor+0x1ac>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2300      	movs	r3, #0
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
		  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_SET);
 800185a:	2201      	movs	r2, #1
 800185c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001860:	4826      	ldr	r0, [pc, #152]	; (80018fc <DriveMotor+0x1b0>)
 8001862:	f001 f868 	bl	8002936 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800186c:	4823      	ldr	r0, [pc, #140]	; (80018fc <DriveMotor+0x1b0>)
 800186e:	f001 f862 	bl	8002936 <HAL_GPIO_WritePin>
		}break;
 8001872:	bf00      	nop
		}
	}

	//setting PWM value
	PWM_countingDutyCycle = (uint32_t)fabs(controlSignal);
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <DriveMotor+0x19c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fc3b 	bl	80010f8 <__aeabi_f2uiz>
 8001882:	4603      	mov	r3, r0
 8001884:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <DriveMotor+0x1b4>)
 8001886:	6013      	str	r3, [r2, #0]
	if(PWM_countingDutyCycle > 180)
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <DriveMotor+0x1b4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2bb4      	cmp	r3, #180	; 0xb4
 800188e:	d902      	bls.n	8001896 <DriveMotor+0x14a>
	{
		PWM_countingDutyCycle = 180;
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <DriveMotor+0x1b4>)
 8001892:	22b4      	movs	r2, #180	; 0xb4
 8001894:	601a      	str	r2, [r3, #0]
	}
    __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, PWM_countingDutyCycle);
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <DriveMotor+0x1a8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <DriveMotor+0x15e>
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <DriveMotor+0x1ac>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a17      	ldr	r2, [pc, #92]	; (8001900 <DriveMotor+0x1b4>)
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
 80018a8:	e018      	b.n	80018dc <DriveMotor+0x190>
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <DriveMotor+0x1a8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d105      	bne.n	80018be <DriveMotor+0x172>
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <DriveMotor+0x1ac>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <DriveMotor+0x1b4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6393      	str	r3, [r2, #56]	; 0x38
 80018bc:	e00e      	b.n	80018dc <DriveMotor+0x190>
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <DriveMotor+0x1a8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d105      	bne.n	80018d2 <DriveMotor+0x186>
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <DriveMotor+0x1ac>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <DriveMotor+0x1b4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	63d3      	str	r3, [r2, #60]	; 0x3c
 80018d0:	e004      	b.n	80018dc <DriveMotor+0x190>
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <DriveMotor+0x1ac>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <DriveMotor+0x1b4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6413      	str	r3, [r2, #64]	; 0x40

	prevMotorDirection = motorDirection;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <DriveMotor+0x1a0>)
 80018de:	781a      	ldrb	r2, [r3, #0]
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <DriveMotor+0x1a4>)
 80018e2:	701a      	strb	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200002dc 	.word	0x200002dc
 80018ec:	2000016c 	.word	0x2000016c
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000170 	.word	0x20000170
 80018f8:	20000094 	.word	0x20000094
 80018fc:	40010c00 	.word	0x40010c00
 8001900:	20000174 	.word	0x20000174

08001904 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af02      	add	r7, sp, #8
 800190a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	492b      	ldr	r1, [pc, #172]	; (80019bc <HAL_UART_RxCpltCallback+0xb8>)
 8001910:	482b      	ldr	r0, [pc, #172]	; (80019c0 <HAL_UART_RxCpltCallback+0xbc>)
 8001912:	f002 fc6e 	bl	80041f2 <HAL_UART_Receive_IT>
	if(rx_buffer[0] == '\n')
 8001916:	4b29      	ldr	r3, [pc, #164]	; (80019bc <HAL_UART_RxCpltCallback+0xb8>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b0a      	cmp	r3, #10
 800191c:	d13e      	bne.n	800199c <HAL_UART_RxCpltCallback+0x98>
	{
    int p, s, a, d;
    sscanf(buffer, "%d %d %d %d", &p, &s, &a, &d);
 800191e:	f107 0110 	add.w	r1, r7, #16
 8001922:	f107 0214 	add.w	r2, r7, #20
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	460b      	mov	r3, r1
 8001934:	4923      	ldr	r1, [pc, #140]	; (80019c4 <HAL_UART_RxCpltCallback+0xc0>)
 8001936:	4824      	ldr	r0, [pc, #144]	; (80019c8 <HAL_UART_RxCpltCallback+0xc4>)
 8001938:	f003 fa20 	bl	8004d7c <siscanf>
    memset(buffer, 0, 256);
 800193c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001940:	2100      	movs	r1, #0
 8001942:	4821      	ldr	r0, [pc, #132]	; (80019c8 <HAL_UART_RxCpltCallback+0xc4>)
 8001944:	f003 fa46 	bl	8004dd4 <memset>
    data.position = p;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f97e 	bl	8000c4c <__aeabi_i2f>
 8001950:	4603      	mov	r3, r0
 8001952:	4a1e      	ldr	r2, [pc, #120]	; (80019cc <HAL_UART_RxCpltCallback+0xc8>)
 8001954:	6053      	str	r3, [r2, #4]
    data.speed = s;
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff f977 	bl	8000c4c <__aeabi_i2f>
 800195e:	4603      	mov	r3, r0
 8001960:	4a1a      	ldr	r2, [pc, #104]	; (80019cc <HAL_UART_RxCpltCallback+0xc8>)
 8001962:	6013      	str	r3, [r2, #0]
    data.acceleration = a;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f970 	bl	8000c4c <__aeabi_i2f>
 800196c:	4603      	mov	r3, r0
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <HAL_UART_RxCpltCallback+0xc8>)
 8001970:	6093      	str	r3, [r2, #8]
    data.deceleration = d;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f969 	bl	8000c4c <__aeabi_i2f>
 800197a:	4603      	mov	r3, r0
 800197c:	4a13      	ldr	r2, [pc, #76]	; (80019cc <HAL_UART_RxCpltCallback+0xc8>)
 800197e:	60d3      	str	r3, [r2, #12]
		bufferIndex = 0;
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_UART_RxCpltCallback+0xcc>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
		_time = 0.0f;
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_UART_RxCpltCallback+0xd0>)
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
		integral = 0.0f;
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_UART_RxCpltCallback+0xd4>)
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
		CalculateMotionProfile();
 8001996:	f7ff fbef 	bl	8001178 <CalculateMotionProfile>
 800199a:	e00c      	b.n	80019b6 <HAL_UART_RxCpltCallback+0xb2>
    return;
	}
	buffer[bufferIndex] = rx_buffer[0];
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_UART_RxCpltCallback+0xcc>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_UART_RxCpltCallback+0xb8>)
 80019a4:	7819      	ldrb	r1, [r3, #0]
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_UART_RxCpltCallback+0xc4>)
 80019a8:	5499      	strb	r1, [r3, r2]
	bufferIndex++;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_UART_RxCpltCallback+0xcc>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_UART_RxCpltCallback+0xcc>)
 80019b4:	701a      	strb	r2, [r3, #0]
}
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000178 	.word	0x20000178
 80019c0:	20000124 	.word	0x20000124
 80019c4:	08006e44 	.word	0x08006e44
 80019c8:	2000017c 	.word	0x2000017c
 80019cc:	20000280 	.word	0x20000280
 80019d0:	2000027c 	.word	0x2000027c
 80019d4:	200002bc 	.word	0x200002bc
 80019d8:	200002d8 	.word	0x200002d8

080019dc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_6)
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	2b40      	cmp	r3, #64	; 0x40
 80019ea:	d11c      	bne.n	8001a26 <HAL_GPIO_EXTI_Callback+0x4a>
  {
	  int32_t inc = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	480f      	ldr	r0, [pc, #60]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x54>)
 80019f4:	f000 ff88 	bl	8002908 <HAL_GPIO_ReadPin>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_GPIO_EXTI_Callback+0x28>
	  {
		   inc = 1;
 80019fe:	2301      	movs	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	e002      	b.n	8001a0a <HAL_GPIO_EXTI_Callback+0x2e>
	  }
	  else
	  {
		  inc = -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
 8001a08:	60fb      	str	r3, [r7, #12]
	  }
	  motor_current_position += (float)inc;
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f7ff f91e 	bl	8000c4c <__aeabi_i2f>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	4610      	mov	r0, r2
 8001a1a:	f7ff f863 	bl	8000ae4 <__addsf3>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a24:	601a      	str	r2, [r3, #0]
  }
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40010c00 	.word	0x40010c00
 8001a34:	200002b0 	.word	0x200002b0

08001a38 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d111      	bne.n	8001a6c <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		StatusData send_data = {0};
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
		send_data.motor_current_position = motor_current_position;
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]
		send_data.motor_current_speed = motor_current_speed;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60bb      	str	r3, [r7, #8]
		send_data.motor_current_acceleration= motor_current_acceleration;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	613b      	str	r3, [r7, #16]
		send_data.dummy = 1212.22f;
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001a6a:	617b      	str	r3, [r7, #20]
		//if(data.send)
			//HAL_UART_Transmit_IT(&huart1, (uint8_t*)&send_data, sizeof(StatusData));
	}
}
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200000dc 	.word	0x200000dc
 8001a7c:	200002b0 	.word	0x200002b0
 8001a80:	20000004 	.word	0x20000004
 8001a84:	200002b8 	.word	0x200002b8
 8001a88:	4497870a 	.word	0x4497870a

08001a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a90:	f000 fb78 	bl	8002184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a94:	f000 f840 	bl	8001b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a98:	f000 f97a 	bl	8001d90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001a9c:	f000 f94e 	bl	8001d3c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001aa0:	f000 f87c 	bl	8001b9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001aa4:	f000 f8fc 	bl	8001ca0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4914      	ldr	r1, [pc, #80]	; (8001afc <main+0x70>)
 8001aac:	4814      	ldr	r0, [pc, #80]	; (8001b00 <main+0x74>)
 8001aae:	f002 fba0 	bl	80041f2 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4813      	ldr	r0, [pc, #76]	; (8001b04 <main+0x78>)
 8001ab6:	f001 fc73 	bl	80033a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001aba:	2104      	movs	r1, #4
 8001abc:	4811      	ldr	r0, [pc, #68]	; (8001b04 <main+0x78>)
 8001abe:	f001 fc6f 	bl	80033a0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001ac2:	4811      	ldr	r0, [pc, #68]	; (8001b08 <main+0x7c>)
 8001ac4:	f001 fbc8 	bl	8003258 <HAL_TIM_Base_Start_IT>
  data.gearRatio = 3249.0f / 121.0f;
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <main+0x80>)
 8001aca:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <main+0x84>)
 8001acc:	61da      	str	r2, [r3, #28]
  data.encoderPulses = 500.0f;
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <main+0x80>)
 8001ad0:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <main+0x88>)
 8001ad2:	619a      	str	r2, [r3, #24]

  data.kp = 1.0f;
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <main+0x80>)
 8001ad6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
  data.ki = 4.0f;
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <main+0x80>)
 8001ade:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001ae2:	621a      	str	r2, [r3, #32]
  data.kd = 0.0f;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <main+0x80>)
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CalculateSpeed();
 8001aec:	f7ff fcc8 	bl	8001480 <CalculateSpeed>
	  CalculatePID();
 8001af0:	f7ff fcf2 	bl	80014d8 <CalculatePID>
	  DriveMotor();
 8001af4:	f7ff fe2a 	bl	800174c <DriveMotor>
	  CalculateSpeed();
 8001af8:	e7f8      	b.n	8001aec <main+0x60>
 8001afa:	bf00      	nop
 8001afc:	20000178 	.word	0x20000178
 8001b00:	20000124 	.word	0x20000124
 8001b04:	20000094 	.word	0x20000094
 8001b08:	200000dc 	.word	0x200000dc
 8001b0c:	20000280 	.word	0x20000280
 8001b10:	41d6cf57 	.word	0x41d6cf57
 8001b14:	43fa0000 	.word	0x43fa0000

08001b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b090      	sub	sp, #64	; 0x40
 8001b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1e:	f107 0318 	add.w	r3, r7, #24
 8001b22:	2228      	movs	r2, #40	; 0x28
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 f954 	bl	8004dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b42:	2310      	movs	r3, #16
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b46:	2302      	movs	r3, #2
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001b4e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b54:	f107 0318 	add.w	r3, r7, #24
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 ff1d 	bl	8002998 <HAL_RCC_OscConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001b64:	f000 f976 	bl	8001e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b68:	230f      	movs	r3, #15
 8001b6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2102      	movs	r1, #2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 f98a 	bl	8002e9c <HAL_RCC_ClockConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001b8e:	f000 f961 	bl	8001e54 <Error_Handler>
  }
}
 8001b92:	bf00      	nop
 8001b94:	3740      	adds	r7, #64	; 0x40
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08e      	sub	sp, #56	; 0x38
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb0:	f107 0320 	add.w	r3, r7, #32
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bcc:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bd4:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bda:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001be0:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001be2:	22ff      	movs	r2, #255	; 0xff
 8001be4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be6:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bf2:	482a      	ldr	r0, [pc, #168]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001bf4:	f001 fae0 	bl	80031b8 <HAL_TIM_Base_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001bfe:	f000 f929 	bl	8001e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4823      	ldr	r0, [pc, #140]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001c10:	f001 fe2c 	bl	800386c <HAL_TIM_ConfigClockSource>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001c1a:	f000 f91b 	bl	8001e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c1e:	481f      	ldr	r0, [pc, #124]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001c20:	f001 fb66 	bl	80032f0 <HAL_TIM_PWM_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001c2a:	f000 f913 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c36:	f107 0320 	add.w	r3, r7, #32
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4817      	ldr	r0, [pc, #92]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001c3e:	f002 f99b 	bl	8003f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001c48:	f000 f904 	bl	8001e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c4c:	2360      	movs	r3, #96	; 0x60
 8001c4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 8001c50:	237d      	movs	r3, #125	; 0x7d
 8001c52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4619      	mov	r1, r3
 8001c62:	480e      	ldr	r0, [pc, #56]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001c64:	f001 fd40 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001c6e:	f000 f8f1 	bl	8001e54 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2204      	movs	r2, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4807      	ldr	r0, [pc, #28]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001c7e:	f001 fd33 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001c88:	f000 f8e4 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <MX_TIM2_Init+0x100>)
 8001c8e:	f000 f951 	bl	8001f34 <HAL_TIM_MspPostInit>

}
 8001c92:	bf00      	nop
 8001c94:	3738      	adds	r7, #56	; 0x38
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000094 	.word	0x20000094

08001ca0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <MX_TIM3_Init+0x94>)
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <MX_TIM3_Init+0x98>)
 8001cc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 128 - 1;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <MX_TIM3_Init+0x94>)
 8001cc4:	227f      	movs	r2, #127	; 0x7f
 8001cc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <MX_TIM3_Init+0x94>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535 - 1;
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <MX_TIM3_Init+0x94>)
 8001cd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001cd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <MX_TIM3_Init+0x94>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <MX_TIM3_Init+0x94>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ce2:	4814      	ldr	r0, [pc, #80]	; (8001d34 <MX_TIM3_Init+0x94>)
 8001ce4:	f001 fa68 	bl	80031b8 <HAL_TIM_Base_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001cee:	f000 f8b1 	bl	8001e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480d      	ldr	r0, [pc, #52]	; (8001d34 <MX_TIM3_Init+0x94>)
 8001d00:	f001 fdb4 	bl	800386c <HAL_TIM_ConfigClockSource>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d0a:	f000 f8a3 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d16:	463b      	mov	r3, r7
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4806      	ldr	r0, [pc, #24]	; (8001d34 <MX_TIM3_Init+0x94>)
 8001d1c:	f002 f92c 	bl	8003f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d26:	f000 f895 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200000dc 	.word	0x200000dc
 8001d38:	40000400 	.word	0x40000400

08001d3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <MX_USART1_UART_Init+0x50>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d74:	f002 f96a 	bl	800404c <HAL_UART_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d7e:	f000 f869 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000124 	.word	0x20000124
 8001d8c:	40013800 	.word	0x40013800

08001d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <MX_GPIO_Init+0xb8>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <MX_GPIO_Init+0xb8>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6193      	str	r3, [r2, #24]
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <MX_GPIO_Init+0xb8>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <MX_GPIO_Init+0xb8>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <MX_GPIO_Init+0xb8>)
 8001dc2:	f043 0308 	orr.w	r3, r3, #8
 8001dc6:	6193      	str	r3, [r2, #24]
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <MX_GPIO_Init+0xb8>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001dda:	481c      	ldr	r0, [pc, #112]	; (8001e4c <MX_GPIO_Init+0xbc>)
 8001ddc:	f000 fdab 	bl	8002936 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001de0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001de4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2302      	movs	r3, #2
 8001df0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	4619      	mov	r1, r3
 8001df8:	4814      	ldr	r0, [pc, #80]	; (8001e4c <MX_GPIO_Init+0xbc>)
 8001dfa:	f000 fc09 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dfe:	2340      	movs	r3, #64	; 0x40
 8001e00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <MX_GPIO_Init+0xc0>)
 8001e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 0308 	add.w	r3, r7, #8
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480e      	ldr	r0, [pc, #56]	; (8001e4c <MX_GPIO_Init+0xbc>)
 8001e12:	f000 fbfd 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e22:	f107 0308 	add.w	r3, r7, #8
 8001e26:	4619      	mov	r1, r3
 8001e28:	4808      	ldr	r0, [pc, #32]	; (8001e4c <MX_GPIO_Init+0xbc>)
 8001e2a:	f000 fbf1 	bl	8002610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	2017      	movs	r0, #23
 8001e34:	f000 fb03 	bl	800243e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e38:	2017      	movs	r0, #23
 8001e3a:	f000 fb1c 	bl	8002476 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40010c00 	.word	0x40010c00
 8001e50:	10110000 	.word	0x10110000

08001e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e58:	b672      	cpsid	i
}
 8001e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <Error_Handler+0x8>
	...

08001e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <HAL_MspInit+0x5c>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <HAL_MspInit+0x5c>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6193      	str	r3, [r2, #24]
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_MspInit+0x5c>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_MspInit+0x5c>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <HAL_MspInit+0x5c>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_MspInit+0x5c>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_MspInit+0x60>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_MspInit+0x60>)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010000 	.word	0x40010000

08001ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	61d3      	str	r3, [r2, #28]
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eee:	e018      	b.n	8001f22 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_TIM_Base_MspInit+0x6c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d113      	bne.n	8001f22 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	201d      	movs	r0, #29
 8001f18:	f000 fa91 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f1c:	201d      	movs	r0, #29
 8001f1e:	f000 faaa 	bl	8002476 <HAL_NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40000400 	.word	0x40000400

08001f34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f52:	d117      	bne.n	8001f84 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_TIM_MspPostInit+0x58>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <HAL_TIM_MspPostInit+0x58>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_TIM_MspPostInit+0x58>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4804      	ldr	r0, [pc, #16]	; (8001f90 <HAL_TIM_MspPostInit+0x5c>)
 8001f80:	f000 fb46 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40010800 	.word	0x40010800

08001f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a20      	ldr	r2, [pc, #128]	; (8002030 <HAL_UART_MspInit+0x9c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d139      	bne.n	8002028 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <HAL_UART_MspInit+0xa0>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a1e      	ldr	r2, [pc, #120]	; (8002034 <HAL_UART_MspInit+0xa0>)
 8001fba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_UART_MspInit+0xa0>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_UART_MspInit+0xa0>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a18      	ldr	r2, [pc, #96]	; (8002034 <HAL_UART_MspInit+0xa0>)
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_UART_MspInit+0xa0>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480f      	ldr	r0, [pc, #60]	; (8002038 <HAL_UART_MspInit+0xa4>)
 8001ffa:	f000 fb09 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	4619      	mov	r1, r3
 8002012:	4809      	ldr	r0, [pc, #36]	; (8002038 <HAL_UART_MspInit+0xa4>)
 8002014:	f000 fafc 	bl	8002610 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	2025      	movs	r0, #37	; 0x25
 800201e:	f000 fa0e 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002022:	2025      	movs	r0, #37	; 0x25
 8002024:	f000 fa27 	bl	8002476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002028:	bf00      	nop
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40013800 	.word	0x40013800
 8002034:	40021000 	.word	0x40021000
 8002038:	40010800 	.word	0x40010800

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002082:	f000 f8c5 	bl	8002210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}

0800208a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800208e:	2040      	movs	r0, #64	; 0x40
 8002090:	f000 fc6a 	bl	8002968 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <TIM3_IRQHandler+0x10>)
 800209e:	f001 fa1b 	bl	80034d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200000dc 	.word	0x200000dc

080020ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <USART1_IRQHandler+0x10>)
 80020b2:	f002 f8c3 	bl	800423c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000124 	.word	0x20000124

080020c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <_sbrk+0x5c>)
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <_sbrk+0x60>)
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <_sbrk+0x64>)
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <_sbrk+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d207      	bcs.n	8002100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f0:	f002 fe78 	bl	8004de4 <__errno>
 80020f4:	4603      	mov	r3, r0
 80020f6:	220c      	movs	r2, #12
 80020f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	e009      	b.n	8002114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	4a05      	ldr	r2, [pc, #20]	; (8002124 <_sbrk+0x64>)
 8002110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20002800 	.word	0x20002800
 8002120:	00000400 	.word	0x00000400
 8002124:	20000314 	.word	0x20000314
 8002128:	20000468 	.word	0x20000468

0800212c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002138:	f7ff fff8 	bl	800212c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800213c:	480b      	ldr	r0, [pc, #44]	; (800216c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800213e:	490c      	ldr	r1, [pc, #48]	; (8002170 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002140:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002144:	e002      	b.n	800214c <LoopCopyDataInit>

08002146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214a:	3304      	adds	r3, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800214c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002150:	d3f9      	bcc.n	8002146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002154:	4c09      	ldr	r4, [pc, #36]	; (800217c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002158:	e001      	b.n	800215e <LoopFillZerobss>

0800215a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800215c:	3204      	adds	r2, #4

0800215e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002160:	d3fb      	bcc.n	800215a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002162:	f002 fe45 	bl	8004df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002166:	f7ff fc91 	bl	8001a8c <main>
  bx lr
 800216a:	4770      	bx	lr
  ldr r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002170:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002174:	08007010 	.word	0x08007010
  ldr r2, =_sbss
 8002178:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800217c:	20000464 	.word	0x20000464

08002180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002180:	e7fe      	b.n	8002180 <ADC1_2_IRQHandler>
	...

08002184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_Init+0x28>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_Init+0x28>)
 800218e:	f043 0310 	orr.w	r3, r3, #16
 8002192:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002194:	2003      	movs	r0, #3
 8002196:	f000 f947 	bl	8002428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219a:	200f      	movs	r0, #15
 800219c:	f000 f808 	bl	80021b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a0:	f7ff fe5e 	bl	8001e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40022000 	.word	0x40022000

080021b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_InitTick+0x54>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_InitTick+0x58>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f95f 	bl	8002492 <HAL_SYSTICK_Config>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e00e      	b.n	80021fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b0f      	cmp	r3, #15
 80021e2:	d80a      	bhi.n	80021fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e4:	2200      	movs	r2, #0
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f000 f927 	bl	800243e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <HAL_InitTick+0x5c>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000008 	.word	0x20000008
 8002208:	20000010 	.word	0x20000010
 800220c:	2000000c 	.word	0x2000000c

08002210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_IncTick+0x1c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_IncTick+0x20>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4413      	add	r3, r2
 8002220:	4a03      	ldr	r2, [pc, #12]	; (8002230 <HAL_IncTick+0x20>)
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	20000010 	.word	0x20000010
 8002230:	20000318 	.word	0x20000318

08002234 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return uwTick;
 8002238:	4b02      	ldr	r3, [pc, #8]	; (8002244 <HAL_GetTick+0x10>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	20000318 	.word	0x20000318

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff fff0 	bl	8002234 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d005      	beq.n	800226e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_Delay+0x44>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800226e:	bf00      	nop
 8002270:	f7ff ffe0 	bl	8002234 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	429a      	cmp	r2, r3
 800227e:	d8f7      	bhi.n	8002270 <HAL_Delay+0x28>
  {
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000010 	.word	0x20000010

08002290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c2:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	60d3      	str	r3, [r2, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <__NVIC_GetPriorityGrouping+0x18>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0307 	and.w	r3, r3, #7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db0b      	blt.n	800231e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4906      	ldr	r1, [pc, #24]	; (8002328 <__NVIC_EnableIRQ+0x34>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	; (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	; (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	; 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
         );
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	; 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f4:	d301      	bcc.n	80023fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00f      	b.n	800241a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <SysTick_Config+0x40>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002402:	210f      	movs	r1, #15
 8002404:	f04f 30ff 	mov.w	r0, #4294967295
 8002408:	f7ff ff90 	bl	800232c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <SysTick_Config+0x40>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <SysTick_Config+0x40>)
 8002414:	2207      	movs	r2, #7
 8002416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	e000e010 	.word	0xe000e010

08002428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff2d 	bl	8002290 <__NVIC_SetPriorityGrouping>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002450:	f7ff ff42 	bl	80022d8 <__NVIC_GetPriorityGrouping>
 8002454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f7ff ff90 	bl	8002380 <NVIC_EncodePriority>
 8002460:	4602      	mov	r2, r0
 8002462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff5f 	bl	800232c <__NVIC_SetPriority>
}
 800246e:	bf00      	nop
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff35 	bl	80022f4 <__NVIC_EnableIRQ>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ffa2 	bl	80023e4 <SysTick_Config>
 80024a0:	4603      	mov	r3, r0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d008      	beq.n	80024d4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2204      	movs	r2, #4
 80024c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e020      	b.n	8002516 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 020e 	bic.w	r2, r2, #14
 80024e2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	2101      	movs	r1, #1
 80024fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002502:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d005      	beq.n	8002544 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2204      	movs	r2, #4
 800253c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e051      	b.n	80025e8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 020e 	bic.w	r2, r2, #14
 8002552:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <HAL_DMA_Abort_IT+0xd4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d029      	beq.n	80025c2 <HAL_DMA_Abort_IT+0xa2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <HAL_DMA_Abort_IT+0xd8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d022      	beq.n	80025be <HAL_DMA_Abort_IT+0x9e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1f      	ldr	r2, [pc, #124]	; (80025fc <HAL_DMA_Abort_IT+0xdc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01a      	beq.n	80025b8 <HAL_DMA_Abort_IT+0x98>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <HAL_DMA_Abort_IT+0xe0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d012      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x92>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <HAL_DMA_Abort_IT+0xe4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00a      	beq.n	80025ac <HAL_DMA_Abort_IT+0x8c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <HAL_DMA_Abort_IT+0xe8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d102      	bne.n	80025a6 <HAL_DMA_Abort_IT+0x86>
 80025a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025a4:	e00e      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025aa:	e00b      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b0:	e008      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b6:	e005      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025bc:	e002      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025be:	2310      	movs	r3, #16
 80025c0:	e000      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025c2:	2301      	movs	r3, #1
 80025c4:	4a11      	ldr	r2, [pc, #68]	; (800260c <HAL_DMA_Abort_IT+0xec>)
 80025c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
    } 
  }
  return status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40020008 	.word	0x40020008
 80025f8:	4002001c 	.word	0x4002001c
 80025fc:	40020030 	.word	0x40020030
 8002600:	40020044 	.word	0x40020044
 8002604:	40020058 	.word	0x40020058
 8002608:	4002006c 	.word	0x4002006c
 800260c:	40020000 	.word	0x40020000

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b08b      	sub	sp, #44	; 0x2c
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261a:	2300      	movs	r3, #0
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002622:	e161      	b.n	80028e8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002624:	2201      	movs	r2, #1
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	429a      	cmp	r2, r3
 800263e:	f040 8150 	bne.w	80028e2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a97      	ldr	r2, [pc, #604]	; (80028a4 <HAL_GPIO_Init+0x294>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d05e      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 800264c:	4a95      	ldr	r2, [pc, #596]	; (80028a4 <HAL_GPIO_Init+0x294>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d875      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002652:	4a95      	ldr	r2, [pc, #596]	; (80028a8 <HAL_GPIO_Init+0x298>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d058      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002658:	4a93      	ldr	r2, [pc, #588]	; (80028a8 <HAL_GPIO_Init+0x298>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d86f      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800265e:	4a93      	ldr	r2, [pc, #588]	; (80028ac <HAL_GPIO_Init+0x29c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d052      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002664:	4a91      	ldr	r2, [pc, #580]	; (80028ac <HAL_GPIO_Init+0x29c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d869      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800266a:	4a91      	ldr	r2, [pc, #580]	; (80028b0 <HAL_GPIO_Init+0x2a0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d04c      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002670:	4a8f      	ldr	r2, [pc, #572]	; (80028b0 <HAL_GPIO_Init+0x2a0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d863      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002676:	4a8f      	ldr	r2, [pc, #572]	; (80028b4 <HAL_GPIO_Init+0x2a4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d046      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 800267c:	4a8d      	ldr	r2, [pc, #564]	; (80028b4 <HAL_GPIO_Init+0x2a4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d85d      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002682:	2b12      	cmp	r3, #18
 8002684:	d82a      	bhi.n	80026dc <HAL_GPIO_Init+0xcc>
 8002686:	2b12      	cmp	r3, #18
 8002688:	d859      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800268a:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <HAL_GPIO_Init+0x80>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	0800270b 	.word	0x0800270b
 8002694:	080026e5 	.word	0x080026e5
 8002698:	080026f7 	.word	0x080026f7
 800269c:	08002739 	.word	0x08002739
 80026a0:	0800273f 	.word	0x0800273f
 80026a4:	0800273f 	.word	0x0800273f
 80026a8:	0800273f 	.word	0x0800273f
 80026ac:	0800273f 	.word	0x0800273f
 80026b0:	0800273f 	.word	0x0800273f
 80026b4:	0800273f 	.word	0x0800273f
 80026b8:	0800273f 	.word	0x0800273f
 80026bc:	0800273f 	.word	0x0800273f
 80026c0:	0800273f 	.word	0x0800273f
 80026c4:	0800273f 	.word	0x0800273f
 80026c8:	0800273f 	.word	0x0800273f
 80026cc:	0800273f 	.word	0x0800273f
 80026d0:	0800273f 	.word	0x0800273f
 80026d4:	080026ed 	.word	0x080026ed
 80026d8:	08002701 	.word	0x08002701
 80026dc:	4a76      	ldr	r2, [pc, #472]	; (80028b8 <HAL_GPIO_Init+0x2a8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026e2:	e02c      	b.n	800273e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	623b      	str	r3, [r7, #32]
          break;
 80026ea:	e029      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	3304      	adds	r3, #4
 80026f2:	623b      	str	r3, [r7, #32]
          break;
 80026f4:	e024      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	3308      	adds	r3, #8
 80026fc:	623b      	str	r3, [r7, #32]
          break;
 80026fe:	e01f      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	330c      	adds	r3, #12
 8002706:	623b      	str	r3, [r7, #32]
          break;
 8002708:	e01a      	b.n	8002740 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d102      	bne.n	8002718 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002712:	2304      	movs	r3, #4
 8002714:	623b      	str	r3, [r7, #32]
          break;
 8002716:	e013      	b.n	8002740 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002720:	2308      	movs	r3, #8
 8002722:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	611a      	str	r2, [r3, #16]
          break;
 800272a:	e009      	b.n	8002740 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800272c:	2308      	movs	r3, #8
 800272e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	615a      	str	r2, [r3, #20]
          break;
 8002736:	e003      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
          break;
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x130>
          break;
 800273e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	d801      	bhi.n	800274a <HAL_GPIO_Init+0x13a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	e001      	b.n	800274e <HAL_GPIO_Init+0x13e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2bff      	cmp	r3, #255	; 0xff
 8002754:	d802      	bhi.n	800275c <HAL_GPIO_Init+0x14c>
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	e002      	b.n	8002762 <HAL_GPIO_Init+0x152>
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	3b08      	subs	r3, #8
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	210f      	movs	r1, #15
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	401a      	ands	r2, r3
 8002774:	6a39      	ldr	r1, [r7, #32]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	431a      	orrs	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80a9 	beq.w	80028e2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002790:	4b4a      	ldr	r3, [pc, #296]	; (80028bc <HAL_GPIO_Init+0x2ac>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a49      	ldr	r2, [pc, #292]	; (80028bc <HAL_GPIO_Init+0x2ac>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_GPIO_Init+0x2ac>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027a8:	4a45      	ldr	r2, [pc, #276]	; (80028c0 <HAL_GPIO_Init+0x2b0>)
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3d      	ldr	r2, [pc, #244]	; (80028c4 <HAL_GPIO_Init+0x2b4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00d      	beq.n	80027f0 <HAL_GPIO_Init+0x1e0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3c      	ldr	r2, [pc, #240]	; (80028c8 <HAL_GPIO_Init+0x2b8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d007      	beq.n	80027ec <HAL_GPIO_Init+0x1dc>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3b      	ldr	r2, [pc, #236]	; (80028cc <HAL_GPIO_Init+0x2bc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d101      	bne.n	80027e8 <HAL_GPIO_Init+0x1d8>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e004      	b.n	80027f2 <HAL_GPIO_Init+0x1e2>
 80027e8:	2303      	movs	r3, #3
 80027ea:	e002      	b.n	80027f2 <HAL_GPIO_Init+0x1e2>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_GPIO_Init+0x1e2>
 80027f0:	2300      	movs	r3, #0
 80027f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f4:	f002 0203 	and.w	r2, r2, #3
 80027f8:	0092      	lsls	r2, r2, #2
 80027fa:	4093      	lsls	r3, r2
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002802:	492f      	ldr	r1, [pc, #188]	; (80028c0 <HAL_GPIO_Init+0x2b0>)
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	3302      	adds	r3, #2
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d006      	beq.n	800282a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800281c:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	492b      	ldr	r1, [pc, #172]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	608b      	str	r3, [r1, #8]
 8002828:	e006      	b.n	8002838 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	43db      	mvns	r3, r3
 8002832:	4927      	ldr	r1, [pc, #156]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 8002834:	4013      	ands	r3, r2
 8002836:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d006      	beq.n	8002852 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	4921      	ldr	r1, [pc, #132]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	60cb      	str	r3, [r1, #12]
 8002850:	e006      	b.n	8002860 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002852:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	43db      	mvns	r3, r3
 800285a:	491d      	ldr	r1, [pc, #116]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 800285c:	4013      	ands	r3, r2
 800285e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4917      	ldr	r1, [pc, #92]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	43db      	mvns	r3, r3
 8002882:	4913      	ldr	r1, [pc, #76]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 8002884:	4013      	ands	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d01f      	beq.n	80028d4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	490d      	ldr	r1, [pc, #52]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
 80028a0:	e01f      	b.n	80028e2 <HAL_GPIO_Init+0x2d2>
 80028a2:	bf00      	nop
 80028a4:	10320000 	.word	0x10320000
 80028a8:	10310000 	.word	0x10310000
 80028ac:	10220000 	.word	0x10220000
 80028b0:	10210000 	.word	0x10210000
 80028b4:	10120000 	.word	0x10120000
 80028b8:	10110000 	.word	0x10110000
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40010800 	.word	0x40010800
 80028c8:	40010c00 	.word	0x40010c00
 80028cc:	40011000 	.word	0x40011000
 80028d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_GPIO_Init+0x2f4>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	43db      	mvns	r3, r3
 80028dc:	4909      	ldr	r1, [pc, #36]	; (8002904 <HAL_GPIO_Init+0x2f4>)
 80028de:	4013      	ands	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	3301      	adds	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f47f ae96 	bne.w	8002624 <HAL_GPIO_Init+0x14>
  }
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	372c      	adds	r7, #44	; 0x2c
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e001      	b.n	800292a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	807b      	strh	r3, [r7, #2]
 8002942:	4613      	mov	r3, r2
 8002944:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002946:	787b      	ldrb	r3, [r7, #1]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800294c:	887a      	ldrh	r2, [r7, #2]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002952:	e003      	b.n	800295c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	041a      	lsls	r2, r3, #16
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	611a      	str	r2, [r3, #16]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
	...

08002968 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d006      	beq.n	800298c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800297e:	4a05      	ldr	r2, [pc, #20]	; (8002994 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff f828 	bl	80019dc <HAL_GPIO_EXTI_Callback>
  }
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40010400 	.word	0x40010400

08002998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e272      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8087 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b8:	4b92      	ldr	r3, [pc, #584]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d00c      	beq.n	80029de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c4:	4b8f      	ldr	r3, [pc, #572]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d112      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5e>
 80029d0:	4b8c      	ldr	r3, [pc, #560]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029dc:	d10b      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029de:	4b89      	ldr	r3, [pc, #548]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d06c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x12c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d168      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e24c      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x76>
 8002a00:	4b80      	ldr	r3, [pc, #512]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a7f      	ldr	r2, [pc, #508]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	e02e      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x98>
 8002a16:	4b7b      	ldr	r3, [pc, #492]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a7a      	ldr	r2, [pc, #488]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b78      	ldr	r3, [pc, #480]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a77      	ldr	r2, [pc, #476]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e01d      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0xbc>
 8002a3a:	4b72      	ldr	r3, [pc, #456]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a71      	ldr	r2, [pc, #452]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b6f      	ldr	r3, [pc, #444]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6e      	ldr	r2, [pc, #440]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a54:	4b6b      	ldr	r3, [pc, #428]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6a      	ldr	r2, [pc, #424]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b68      	ldr	r3, [pc, #416]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a67      	ldr	r2, [pc, #412]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7ff fbde 	bl	8002234 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7ff fbda 	bl	8002234 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e200      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b5d      	ldr	r3, [pc, #372]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0xe4>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fbca 	bl	8002234 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7ff fbc6 	bl	8002234 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1ec      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x10c>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d063      	beq.n	8002b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ad2:	4b4c      	ldr	r3, [pc, #304]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ade:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d11c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x18c>
 8002aea:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	4b43      	ldr	r3, [pc, #268]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x176>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e1c0      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4939      	ldr	r1, [pc, #228]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	e03a      	b.n	8002b9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2c:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b32:	f7ff fb7f 	bl	8002234 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7ff fb7b 	bl	8002234 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e1a1      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4927      	ldr	r1, [pc, #156]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
 8002b6c:	e015      	b.n	8002b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7ff fb5e 	bl	8002234 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7c:	f7ff fb5a 	bl	8002234 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e180      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d03a      	beq.n	8002c1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d019      	beq.n	8002be2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb4:	f7ff fb3e 	bl	8002234 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7ff fb3a 	bl	8002234 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e160      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f000 face 	bl	800317c <RCC_Delay>
 8002be0:	e01c      	b.n	8002c1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be8:	f7ff fb24 	bl	8002234 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bee:	e00f      	b.n	8002c10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7ff fb20 	bl	8002234 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d908      	bls.n	8002c10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e146      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	42420000 	.word	0x42420000
 8002c0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	4b92      	ldr	r3, [pc, #584]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e9      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80a6 	beq.w	8002d76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2e:	4b8b      	ldr	r3, [pc, #556]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10d      	bne.n	8002c56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	4b88      	ldr	r3, [pc, #544]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	4a87      	ldr	r2, [pc, #540]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	61d3      	str	r3, [r2, #28]
 8002c46:	4b85      	ldr	r3, [pc, #532]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c62:	4b7f      	ldr	r3, [pc, #508]	; (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7e      	ldr	r2, [pc, #504]	; (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7ff fae1 	bl	8002234 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7ff fadd 	bl	8002234 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	; 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e103      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	4b75      	ldr	r3, [pc, #468]	; (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x312>
 8002c9c:	4b6f      	ldr	r3, [pc, #444]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4a6e      	ldr	r2, [pc, #440]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6213      	str	r3, [r2, #32]
 8002ca8:	e02d      	b.n	8002d06 <HAL_RCC_OscConfig+0x36e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x334>
 8002cb2:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a69      	ldr	r2, [pc, #420]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	6213      	str	r3, [r2, #32]
 8002cbe:	4b67      	ldr	r3, [pc, #412]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a66      	ldr	r2, [pc, #408]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	6213      	str	r3, [r2, #32]
 8002cca:	e01c      	b.n	8002d06 <HAL_RCC_OscConfig+0x36e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCC_OscConfig+0x356>
 8002cd4:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a60      	ldr	r2, [pc, #384]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6213      	str	r3, [r2, #32]
 8002ce0:	4b5e      	ldr	r3, [pc, #376]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a5d      	ldr	r2, [pc, #372]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	e00b      	b.n	8002d06 <HAL_RCC_OscConfig+0x36e>
 8002cee:	4b5b      	ldr	r3, [pc, #364]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a5a      	ldr	r2, [pc, #360]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	4b58      	ldr	r3, [pc, #352]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a57      	ldr	r2, [pc, #348]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d015      	beq.n	8002d3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7ff fa91 	bl	8002234 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7ff fa8d 	bl	8002234 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e0b1      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	4b4b      	ldr	r3, [pc, #300]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ee      	beq.n	8002d16 <HAL_RCC_OscConfig+0x37e>
 8002d38:	e014      	b.n	8002d64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3a:	f7ff fa7b 	bl	8002234 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7ff fa77 	bl	8002234 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e09b      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d58:	4b40      	ldr	r3, [pc, #256]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1ee      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4b3c      	ldr	r3, [pc, #240]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a3b      	ldr	r2, [pc, #236]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8087 	beq.w	8002e8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d80:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d061      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d146      	bne.n	8002e22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d94:	4b33      	ldr	r3, [pc, #204]	; (8002e64 <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7ff fa4b 	bl	8002234 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da2:	f7ff fa47 	bl	8002234 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e06d      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db4:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc8:	d108      	bne.n	8002ddc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	4921      	ldr	r1, [pc, #132]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a19      	ldr	r1, [r3, #32]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	430b      	orrs	r3, r1
 8002dee:	491b      	ldr	r1, [pc, #108]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7ff fa1b 	bl	8002234 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e02:	f7ff fa17 	bl	8002234 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e03d      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x46a>
 8002e20:	e035      	b.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <HAL_RCC_OscConfig+0x4cc>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff fa04 	bl	8002234 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7ff fa00 	bl	8002234 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e026      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x498>
 8002e4e:	e01e      	b.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e019      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40007000 	.word	0x40007000
 8002e64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_OscConfig+0x500>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0d0      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d910      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b67      	ldr	r3, [pc, #412]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 0207 	bic.w	r2, r3, #7
 8002ec6:	4965      	ldr	r1, [pc, #404]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b63      	ldr	r3, [pc, #396]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0b8      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d020      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef8:	4b59      	ldr	r3, [pc, #356]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a58      	ldr	r2, [pc, #352]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f10:	4b53      	ldr	r3, [pc, #332]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4a52      	ldr	r2, [pc, #328]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f1c:	4b50      	ldr	r3, [pc, #320]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	494d      	ldr	r1, [pc, #308]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d040      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b47      	ldr	r3, [pc, #284]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d115      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e07f      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5a:	4b41      	ldr	r3, [pc, #260]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e073      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e06b      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f7a:	4b39      	ldr	r3, [pc, #228]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f023 0203 	bic.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4936      	ldr	r1, [pc, #216]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f8c:	f7ff f952 	bl	8002234 <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f94:	f7ff f94e 	bl	8002234 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e053      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 020c 	and.w	r2, r3, #12
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d1eb      	bne.n	8002f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b27      	ldr	r3, [pc, #156]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d210      	bcs.n	8002fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 0207 	bic.w	r2, r3, #7
 8002fd2:	4922      	ldr	r1, [pc, #136]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e032      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4916      	ldr	r1, [pc, #88]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	490e      	ldr	r1, [pc, #56]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800302a:	f000 f821 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 800302e:	4602      	mov	r2, r0
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	490a      	ldr	r1, [pc, #40]	; (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	5ccb      	ldrb	r3, [r1, r3]
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	4a09      	ldr	r2, [pc, #36]	; (8003068 <HAL_RCC_ClockConfig+0x1cc>)
 8003044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_ClockConfig+0x1d0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff f8b0 	bl	80021b0 <HAL_InitTick>

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40022000 	.word	0x40022000
 8003060:	40021000 	.word	0x40021000
 8003064:	08006e5c 	.word	0x08006e5c
 8003068:	20000008 	.word	0x20000008
 800306c:	2000000c 	.word	0x2000000c

08003070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_RCC_GetSysClockFreq+0x94>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b04      	cmp	r3, #4
 8003098:	d002      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x30>
 800309a:	2b08      	cmp	r3, #8
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_GetSysClockFreq+0x36>
 800309e:	e027      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_RCC_GetSysClockFreq+0x98>)
 80030a2:	613b      	str	r3, [r7, #16]
      break;
 80030a4:	e027      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	0c9b      	lsrs	r3, r3, #18
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_RCC_GetSysClockFreq+0x9c>)
 80030b0:	5cd3      	ldrb	r3, [r2, r3]
 80030b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d010      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_RCC_GetSysClockFreq+0x94>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	0c5b      	lsrs	r3, r3, #17
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	4a11      	ldr	r2, [pc, #68]	; (8003110 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <HAL_RCC_GetSysClockFreq+0x98>)
 80030d2:	fb03 f202 	mul.w	r2, r3, r2
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e004      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	613b      	str	r3, [r7, #16]
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetSysClockFreq+0x98>)
 80030f2:	613b      	str	r3, [r7, #16]
      break;
 80030f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f6:	693b      	ldr	r3, [r7, #16]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	007a1200 	.word	0x007a1200
 800310c:	08006e74 	.word	0x08006e74
 8003110:	08006e84 	.word	0x08006e84
 8003114:	003d0900 	.word	0x003d0900

08003118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800311c:	4b02      	ldr	r3, [pc, #8]	; (8003128 <HAL_RCC_GetHCLKFreq+0x10>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	20000008 	.word	0x20000008

0800312c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003130:	f7ff fff2 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4903      	ldr	r1, [pc, #12]	; (8003150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	08006e6c 	.word	0x08006e6c

08003154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003158:	f7ff ffde 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0adb      	lsrs	r3, r3, #11
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	08006e6c 	.word	0x08006e6c

0800317c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <RCC_Delay+0x34>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <RCC_Delay+0x38>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0a5b      	lsrs	r3, r3, #9
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003198:	bf00      	nop
  }
  while (Delay --);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f9      	bne.n	8003198 <RCC_Delay+0x1c>
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	20000008 	.word	0x20000008
 80031b4:	10624dd3 	.word	0x10624dd3

080031b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e041      	b.n	800324e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe fe70 	bl	8001ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3304      	adds	r3, #4
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f000 fc24 	bl	8003a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d001      	beq.n	8003270 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e035      	b.n	80032dc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <HAL_TIM_Base_Start_IT+0x90>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d009      	beq.n	80032a6 <HAL_TIM_Base_Start_IT+0x4e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329a:	d004      	beq.n	80032a6 <HAL_TIM_Base_Start_IT+0x4e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a12      	ldr	r2, [pc, #72]	; (80032ec <HAL_TIM_Base_Start_IT+0x94>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d111      	bne.n	80032ca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b06      	cmp	r3, #6
 80032b6:	d010      	beq.n	80032da <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c8:	e007      	b.n	80032da <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40000400 	.word	0x40000400

080032f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e041      	b.n	8003386 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f839 	bl	800338e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	4619      	mov	r1, r3
 800332e:	4610      	mov	r0, r2
 8003330:	f000 fb88 	bl	8003a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_TIM_PWM_Start+0x24>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e022      	b.n	800340a <HAL_TIM_PWM_Start+0x6a>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d109      	bne.n	80033de <HAL_TIM_PWM_Start+0x3e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	bf14      	ite	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	2300      	moveq	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	e015      	b.n	800340a <HAL_TIM_PWM_Start+0x6a>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d109      	bne.n	80033f8 <HAL_TIM_PWM_Start+0x58>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e008      	b.n	800340a <HAL_TIM_PWM_Start+0x6a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e059      	b.n	80034c6 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <HAL_TIM_PWM_Start+0x82>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003420:	e013      	b.n	800344a <HAL_TIM_PWM_Start+0xaa>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b04      	cmp	r3, #4
 8003426:	d104      	bne.n	8003432 <HAL_TIM_PWM_Start+0x92>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003430:	e00b      	b.n	800344a <HAL_TIM_PWM_Start+0xaa>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d104      	bne.n	8003442 <HAL_TIM_PWM_Start+0xa2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003440:	e003      	b.n	800344a <HAL_TIM_PWM_Start+0xaa>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2201      	movs	r2, #1
 8003450:	6839      	ldr	r1, [r7, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fd6c 	bl	8003f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <HAL_TIM_PWM_Start+0x130>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d107      	bne.n	8003472 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <HAL_TIM_PWM_Start+0x130>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d009      	beq.n	8003490 <HAL_TIM_PWM_Start+0xf0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d004      	beq.n	8003490 <HAL_TIM_PWM_Start+0xf0>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <HAL_TIM_PWM_Start+0x134>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d111      	bne.n	80034b4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d010      	beq.n	80034c4 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b2:	e007      	b.n	80034c4 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40000400 	.word	0x40000400

080034d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0202 	mvn.w	r2, #2
 8003504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa76 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fa69 	bl	80039fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fa78 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0204 	mvn.w	r2, #4
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fa4c 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa3f 	bl	80039fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fa4e 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b08      	cmp	r3, #8
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0208 	mvn.w	r2, #8
 80035ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2204      	movs	r2, #4
 80035b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fa22 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fa15 	bl	80039fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fa24 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2208      	movs	r2, #8
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f9f8 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f9eb 	bl	80039fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f9fa 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0201 	mvn.w	r2, #1
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fe f9ee 	bl	8001a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fcd9 	bl	800403a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f9be 	bl	8003a30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d107      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0220 	mvn.w	r2, #32
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fca4 	bl	8004028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003702:	2302      	movs	r3, #2
 8003704:	e0ae      	b.n	8003864 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b0c      	cmp	r3, #12
 8003712:	f200 809f 	bhi.w	8003854 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003716:	a201      	add	r2, pc, #4	; (adr r2, 800371c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	08003751 	.word	0x08003751
 8003720:	08003855 	.word	0x08003855
 8003724:	08003855 	.word	0x08003855
 8003728:	08003855 	.word	0x08003855
 800372c:	08003791 	.word	0x08003791
 8003730:	08003855 	.word	0x08003855
 8003734:	08003855 	.word	0x08003855
 8003738:	08003855 	.word	0x08003855
 800373c:	080037d3 	.word	0x080037d3
 8003740:	08003855 	.word	0x08003855
 8003744:	08003855 	.word	0x08003855
 8003748:	08003855 	.word	0x08003855
 800374c:	08003813 	.word	0x08003813
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f9cc 	bl	8003af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0208 	orr.w	r2, r2, #8
 800376a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0204 	bic.w	r2, r2, #4
 800377a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6999      	ldr	r1, [r3, #24]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	619a      	str	r2, [r3, #24]
      break;
 800378e:	e064      	b.n	800385a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fa12 	bl	8003bc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6999      	ldr	r1, [r3, #24]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	021a      	lsls	r2, r3, #8
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	619a      	str	r2, [r3, #24]
      break;
 80037d0:	e043      	b.n	800385a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fa5b 	bl	8003c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0208 	orr.w	r2, r2, #8
 80037ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0204 	bic.w	r2, r2, #4
 80037fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69d9      	ldr	r1, [r3, #28]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	61da      	str	r2, [r3, #28]
      break;
 8003810:	e023      	b.n	800385a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	4618      	mov	r0, r3
 800381a:	f000 faa5 	bl	8003d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800382c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69d9      	ldr	r1, [r3, #28]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	021a      	lsls	r2, r3, #8
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	61da      	str	r2, [r3, #28]
      break;
 8003852:	e002      	b.n	800385a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
      break;
 8003858:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003862:	7dfb      	ldrb	r3, [r7, #23]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_TIM_ConfigClockSource+0x1c>
 8003884:	2302      	movs	r3, #2
 8003886:	e0b4      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x186>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c0:	d03e      	beq.n	8003940 <HAL_TIM_ConfigClockSource+0xd4>
 80038c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c6:	f200 8087 	bhi.w	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ce:	f000 8086 	beq.w	80039de <HAL_TIM_ConfigClockSource+0x172>
 80038d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d6:	d87f      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b70      	cmp	r3, #112	; 0x70
 80038da:	d01a      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0xa6>
 80038dc:	2b70      	cmp	r3, #112	; 0x70
 80038de:	d87b      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b60      	cmp	r3, #96	; 0x60
 80038e2:	d050      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x11a>
 80038e4:	2b60      	cmp	r3, #96	; 0x60
 80038e6:	d877      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b50      	cmp	r3, #80	; 0x50
 80038ea:	d03c      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0xfa>
 80038ec:	2b50      	cmp	r3, #80	; 0x50
 80038ee:	d873      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d058      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x13a>
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d86f      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 80038f8:	2b30      	cmp	r3, #48	; 0x30
 80038fa:	d064      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x15a>
 80038fc:	2b30      	cmp	r3, #48	; 0x30
 80038fe:	d86b      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b20      	cmp	r3, #32
 8003902:	d060      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003904:	2b20      	cmp	r3, #32
 8003906:	d867      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d05c      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x15a>
 800390c:	2b10      	cmp	r3, #16
 800390e:	d05a      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003910:	e062      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003922:	f000 fae6 	bl	8003ef2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	609a      	str	r2, [r3, #8]
      break;
 800393e:	e04f      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003950:	f000 facf 	bl	8003ef2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003962:	609a      	str	r2, [r3, #8]
      break;
 8003964:	e03c      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003972:	461a      	mov	r2, r3
 8003974:	f000 fa46 	bl	8003e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2150      	movs	r1, #80	; 0x50
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fa9d 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 8003984:	e02c      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003992:	461a      	mov	r2, r3
 8003994:	f000 fa64 	bl	8003e60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2160      	movs	r1, #96	; 0x60
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fa8d 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 80039a4:	e01c      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b2:	461a      	mov	r2, r3
 80039b4:	f000 fa26 	bl	8003e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2140      	movs	r1, #64	; 0x40
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fa7d 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 80039c4:	e00c      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f000 fa74 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 80039d6:	e003      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      break;
 80039dc:	e000      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
	...

08003a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a25      	ldr	r2, [pc, #148]	; (8003aec <TIM_Base_SetConfig+0xa8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0x28>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0x28>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a22      	ldr	r2, [pc, #136]	; (8003af0 <TIM_Base_SetConfig+0xac>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a1a      	ldr	r2, [pc, #104]	; (8003aec <TIM_Base_SetConfig+0xa8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_Base_SetConfig+0x52>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8c:	d003      	beq.n	8003a96 <TIM_Base_SetConfig+0x52>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <TIM_Base_SetConfig+0xac>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d108      	bne.n	8003aa8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a07      	ldr	r2, [pc, #28]	; (8003aec <TIM_Base_SetConfig+0xa8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d103      	bne.n	8003adc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	615a      	str	r2, [r3, #20]
}
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40000400 	.word	0x40000400

08003af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f023 0201 	bic.w	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 0302 	bic.w	r3, r3, #2
 8003b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <TIM_OC1_SetConfig+0xc8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10c      	bne.n	8003b6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0308 	bic.w	r3, r3, #8
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <TIM_OC1_SetConfig+0xc8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d111      	bne.n	8003b96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40012c00 	.word	0x40012c00

08003bc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f023 0210 	bic.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0320 	bic.w	r3, r3, #32
 8003c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <TIM_OC2_SetConfig+0xd0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d10d      	bne.n	8003c3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <TIM_OC2_SetConfig+0xd0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d113      	bne.n	8003c6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr
 8003c90:	40012c00 	.word	0x40012c00

08003c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0303 	bic.w	r3, r3, #3
 8003cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <TIM_OC3_SetConfig+0xd0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10d      	bne.n	8003d0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <TIM_OC3_SetConfig+0xd0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d113      	bne.n	8003d3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40012c00 	.word	0x40012c00

08003d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	031b      	lsls	r3, r3, #12
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a0f      	ldr	r2, [pc, #60]	; (8003e00 <TIM_OC4_SetConfig+0x98>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d109      	bne.n	8003ddc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00

08003e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	f023 0201 	bic.w	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f023 030a 	bic.w	r3, r3, #10
 8003e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	621a      	str	r2, [r3, #32]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f023 0210 	bic.w	r2, r3, #16
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	031b      	lsls	r3, r3, #12
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	621a      	str	r2, [r3, #32]
}
 8003eb4:	bf00      	nop
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f043 0307 	orr.w	r3, r3, #7
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	609a      	str	r2, [r3, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b087      	sub	sp, #28
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	021a      	lsls	r2, r3, #8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	609a      	str	r2, [r3, #8]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	2201      	movs	r2, #1
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a1a      	ldr	r2, [r3, #32]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	43db      	mvns	r3, r3
 8003f52:	401a      	ands	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a1a      	ldr	r2, [r3, #32]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e041      	b.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a14      	ldr	r2, [pc, #80]	; (8004020 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d009      	beq.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	d004      	beq.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a10      	ldr	r2, [pc, #64]	; (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d10c      	bne.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40000400 	.word	0x40000400

08004028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e042      	b.n	80040e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fd ff8e 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2224      	movs	r2, #36	; 0x24
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800408e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fdc5 	bl	8004c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b20      	cmp	r3, #32
 800410a:	d16d      	bne.n	80041e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_UART_Transmit+0x2c>
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e066      	b.n	80041ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2221      	movs	r2, #33	; 0x21
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800412a:	f7fe f883 	bl	8002234 <HAL_GetTick>
 800412e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	88fa      	ldrh	r2, [r7, #6]
 800413a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004144:	d108      	bne.n	8004158 <HAL_UART_Transmit+0x6c>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d104      	bne.n	8004158 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	e003      	b.n	8004160 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800415c:	2300      	movs	r3, #0
 800415e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004160:	e02a      	b.n	80041b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2200      	movs	r2, #0
 800416a:	2180      	movs	r1, #128	; 0x80
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fb14 	bl	800479a <UART_WaitOnFlagUntilTimeout>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e036      	b.n	80041ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004190:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	3302      	adds	r3, #2
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	e007      	b.n	80041aa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	781a      	ldrb	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	3301      	adds	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1cf      	bne.n	8004162 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2200      	movs	r2, #0
 80041ca:	2140      	movs	r1, #64	; 0x40
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fae4 	bl	800479a <UART_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e006      	b.n	80041ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e000      	b.n	80041ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80041e8:	2302      	movs	r3, #2
  }
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	4613      	mov	r3, r2
 80041fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b20      	cmp	r3, #32
 800420a:	d112      	bne.n	8004232 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_UART_Receive_IT+0x26>
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e00b      	b.n	8004234 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	461a      	mov	r2, r3
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fb24 	bl	8004876 <UART_Start_Receive_IT>
 800422e:	4603      	mov	r3, r0
 8004230:	e000      	b.n	8004234 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
  }
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b0ba      	sub	sp, #232	; 0xe8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800427a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10f      	bne.n	80042a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_UART_IRQHandler+0x66>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fc01 	bl	8004aa2 <UART_Receive_IT>
      return;
 80042a0:	e25b      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80de 	beq.w	8004468 <HAL_UART_IRQHandler+0x22c>
 80042ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d106      	bne.n	80042c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80d1 	beq.w	8004468 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_UART_IRQHandler+0xae>
 80042d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	f043 0201 	orr.w	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <HAL_UART_IRQHandler+0xd2>
 80042f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	f043 0202 	orr.w	r2, r3, #2
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00b      	beq.n	8004332 <HAL_UART_IRQHandler+0xf6>
 800431a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	f043 0204 	orr.w	r2, r3, #4
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d011      	beq.n	8004362 <HAL_UART_IRQHandler+0x126>
 800433e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d105      	bne.n	8004356 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800434a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f043 0208 	orr.w	r2, r3, #8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 81f2 	beq.w	8004750 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_UART_IRQHandler+0x14e>
 8004378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fb8c 	bl	8004aa2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <HAL_UART_IRQHandler+0x17a>
 80043ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d04f      	beq.n	8004456 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fa96 	bl	80048e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d041      	beq.n	800444e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3314      	adds	r3, #20
 80043d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3314      	adds	r3, #20
 80043f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800440e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1d9      	bne.n	80043ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d013      	beq.n	8004446 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	4a7e      	ldr	r2, [pc, #504]	; (800461c <HAL_UART_IRQHandler+0x3e0>)
 8004424:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe f878 	bl	8002520 <HAL_DMA_Abort_IT>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d016      	beq.n	8004464 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004440:	4610      	mov	r0, r2
 8004442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004444:	e00e      	b.n	8004464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f993 	bl	8004772 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	e00a      	b.n	8004464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f98f 	bl	8004772 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	e006      	b.n	8004464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f98b 	bl	8004772 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004462:	e175      	b.n	8004750 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004464:	bf00      	nop
    return;
 8004466:	e173      	b.n	8004750 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	2b01      	cmp	r3, #1
 800446e:	f040 814f 	bne.w	8004710 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8148 	beq.w	8004710 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8141 	beq.w	8004710 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80b6 	beq.w	8004620 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8145 	beq.w	8004754 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044d2:	429a      	cmp	r2, r3
 80044d4:	f080 813e 	bcs.w	8004754 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	f000 8088 	beq.w	80045fc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004502:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004506:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800450a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004518:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800451c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004524:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1d9      	bne.n	80044ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3314      	adds	r3, #20
 8004558:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800455c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004560:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004564:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800456e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e1      	bne.n	8004538 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3314      	adds	r3, #20
 800457a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3314      	adds	r3, #20
 8004594:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004598:	66fa      	str	r2, [r7, #108]	; 0x6c
 800459a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800459e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e3      	bne.n	8004574 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	330c      	adds	r3, #12
 80045c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045cc:	f023 0310 	bic.w	r3, r3, #16
 80045d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045de:	65ba      	str	r2, [r7, #88]	; 0x58
 80045e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e3      	bne.n	80045ba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fd ff57 	bl	80024aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800460a:	b29b      	uxth	r3, r3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	b29b      	uxth	r3, r3
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f8b6 	bl	8004784 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004618:	e09c      	b.n	8004754 <HAL_UART_IRQHandler+0x518>
 800461a:	bf00      	nop
 800461c:	080049ad 	.word	0x080049ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004628:	b29b      	uxth	r3, r3
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 808e 	beq.w	8004758 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800463c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8089 	beq.w	8004758 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800465c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800466a:	647a      	str	r2, [r7, #68]	; 0x44
 800466c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004670:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e3      	bne.n	8004646 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3314      	adds	r3, #20
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	623b      	str	r3, [r7, #32]
   return(result);
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3314      	adds	r3, #20
 800469e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046a2:	633a      	str	r2, [r7, #48]	; 0x30
 80046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e3      	bne.n	800467e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0310 	bic.w	r3, r3, #16
 80046da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046e8:	61fa      	str	r2, [r7, #28]
 80046ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	69b9      	ldr	r1, [r7, #24]
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	617b      	str	r3, [r7, #20]
   return(result);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e3      	bne.n	80046c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004702:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f83b 	bl	8004784 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800470e:	e023      	b.n	8004758 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <HAL_UART_IRQHandler+0x4f4>
 800471c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f953 	bl	80049d4 <UART_Transmit_IT>
    return;
 800472e:	e014      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <HAL_UART_IRQHandler+0x51e>
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f992 	bl	8004a72 <UART_EndTransmit_IT>
    return;
 800474e:	e004      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
    return;
 8004750:	bf00      	nop
 8004752:	e002      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
      return;
 8004754:	bf00      	nop
 8004756:	e000      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
      return;
 8004758:	bf00      	nop
  }
}
 800475a:	37e8      	adds	r7, #232	; 0xe8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr

0800479a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b090      	sub	sp, #64	; 0x40
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	4613      	mov	r3, r2
 80047a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047aa:	e050      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b2:	d04c      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <UART_WaitOnFlagUntilTimeout+0x30>
 80047ba:	f7fd fd3b 	bl	8002234 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d241      	bcs.n	800484e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ea:	637a      	str	r2, [r7, #52]	; 0x34
 80047ec:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e5      	bne.n	80047ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	613b      	str	r3, [r7, #16]
   return(result);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	63bb      	str	r3, [r7, #56]	; 0x38
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3314      	adds	r3, #20
 800481c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800481e:	623a      	str	r2, [r7, #32]
 8004820:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	69f9      	ldr	r1, [r7, #28]
 8004824:	6a3a      	ldr	r2, [r7, #32]
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	61bb      	str	r3, [r7, #24]
   return(result);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e5      	bne.n	80047fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e00f      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d09f      	beq.n	80047ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3740      	adds	r7, #64	; 0x40
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	4613      	mov	r3, r2
 8004882:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	88fa      	ldrh	r2, [r7, #6]
 800488e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	88fa      	ldrh	r2, [r7, #6]
 8004894:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2222      	movs	r2, #34	; 0x22
 80048a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0220 	orr.w	r2, r2, #32
 80048da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr

080048e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b095      	sub	sp, #84	; 0x54
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004910:	643a      	str	r2, [r7, #64]	; 0x40
 8004912:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e5      	bne.n	80048f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3314      	adds	r3, #20
 800492a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	61fb      	str	r3, [r7, #28]
   return(result);
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	64bb      	str	r3, [r7, #72]	; 0x48
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3314      	adds	r3, #20
 8004942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004944:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800494a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e5      	bne.n	8004924 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	2b01      	cmp	r3, #1
 800495e:	d119      	bne.n	8004994 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f023 0310 	bic.w	r3, r3, #16
 8004976:	647b      	str	r3, [r7, #68]	; 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004980:	61ba      	str	r2, [r7, #24]
 8004982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6979      	ldr	r1, [r7, #20]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	613b      	str	r3, [r7, #16]
   return(result);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e5      	bne.n	8004960 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049a2:	bf00      	nop
 80049a4:	3754      	adds	r7, #84	; 0x54
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7ff fed3 	bl	8004772 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b21      	cmp	r3, #33	; 0x21
 80049e6:	d13e      	bne.n	8004a66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f0:	d114      	bne.n	8004a1c <UART_Transmit_IT+0x48>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d110      	bne.n	8004a1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	1c9a      	adds	r2, r3, #2
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	621a      	str	r2, [r3, #32]
 8004a1a:	e008      	b.n	8004a2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	1c59      	adds	r1, r3, #1
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6211      	str	r1, [r2, #32]
 8004a26:	781a      	ldrb	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10f      	bne.n	8004a62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e000      	b.n	8004a68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
  }
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr

08004a72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fe64 	bl	8004760 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b08c      	sub	sp, #48	; 0x30
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b22      	cmp	r3, #34	; 0x22
 8004ab4:	f040 80ae 	bne.w	8004c14 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac0:	d117      	bne.n	8004af2 <UART_Receive_IT+0x50>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d113      	bne.n	8004af2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	1c9a      	adds	r2, r3, #2
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	629a      	str	r2, [r3, #40]	; 0x28
 8004af0:	e026      	b.n	8004b40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b04:	d007      	beq.n	8004b16 <UART_Receive_IT+0x74>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <UART_Receive_IT+0x82>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	e008      	b.n	8004b36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d15d      	bne.n	8004c10 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0220 	bic.w	r2, r2, #32
 8004b62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d135      	bne.n	8004c06 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	330c      	adds	r3, #12
 8004ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	613b      	str	r3, [r7, #16]
   return(result);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f023 0310 	bic.w	r3, r3, #16
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc0:	623a      	str	r2, [r7, #32]
 8004bc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	69f9      	ldr	r1, [r7, #28]
 8004bc6:	6a3a      	ldr	r2, [r7, #32]
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e5      	bne.n	8004ba0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	2b10      	cmp	r3, #16
 8004be0:	d10a      	bne.n	8004bf8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff fdc0 	bl	8004784 <HAL_UARTEx_RxEventCallback>
 8004c04:	e002      	b.n	8004c0c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fc fe7c 	bl	8001904 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e002      	b.n	8004c16 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	e000      	b.n	8004c16 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c14:	2302      	movs	r3, #2
  }
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3730      	adds	r7, #48	; 0x30
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c5a:	f023 030c 	bic.w	r3, r3, #12
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	430b      	orrs	r3, r1
 8004c66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a2c      	ldr	r2, [pc, #176]	; (8004d34 <UART_SetConfig+0x114>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d103      	bne.n	8004c90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c88:	f7fe fa64 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	e002      	b.n	8004c96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c90:	f7fe fa4c 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 8004c94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009a      	lsls	r2, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cac:	4a22      	ldr	r2, [pc, #136]	; (8004d38 <UART_SetConfig+0x118>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	0119      	lsls	r1, r3, #4
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009a      	lsls	r2, r3, #2
 8004cc0:	441a      	add	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <UART_SetConfig+0x118>)
 8004cce:	fba3 0302 	umull	r0, r3, r3, r2
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2064      	movs	r0, #100	; 0x64
 8004cd6:	fb00 f303 	mul.w	r3, r0, r3
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	3332      	adds	r3, #50	; 0x32
 8004ce0:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <UART_SetConfig+0x118>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cec:	4419      	add	r1, r3
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009a      	lsls	r2, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <UART_SetConfig+0x118>)
 8004d06:	fba3 0302 	umull	r0, r3, r3, r2
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	2064      	movs	r0, #100	; 0x64
 8004d0e:	fb00 f303 	mul.w	r3, r0, r3
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	3332      	adds	r3, #50	; 0x32
 8004d18:	4a07      	ldr	r2, [pc, #28]	; (8004d38 <UART_SetConfig+0x118>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	f003 020f 	and.w	r2, r3, #15
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	440a      	add	r2, r1
 8004d2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40013800 	.word	0x40013800
 8004d38:	51eb851f 	.word	0x51eb851f

08004d3c <siprintf>:
 8004d3c:	b40e      	push	{r1, r2, r3}
 8004d3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d42:	b500      	push	{lr}
 8004d44:	b09c      	sub	sp, #112	; 0x70
 8004d46:	ab1d      	add	r3, sp, #116	; 0x74
 8004d48:	9002      	str	r0, [sp, #8]
 8004d4a:	9006      	str	r0, [sp, #24]
 8004d4c:	9107      	str	r1, [sp, #28]
 8004d4e:	9104      	str	r1, [sp, #16]
 8004d50:	4808      	ldr	r0, [pc, #32]	; (8004d74 <siprintf+0x38>)
 8004d52:	4909      	ldr	r1, [pc, #36]	; (8004d78 <siprintf+0x3c>)
 8004d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d58:	9105      	str	r1, [sp, #20]
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	a902      	add	r1, sp, #8
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	f000 f9ba 	bl	80050d8 <_svfiprintf_r>
 8004d64:	2200      	movs	r2, #0
 8004d66:	9b02      	ldr	r3, [sp, #8]
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	b01c      	add	sp, #112	; 0x70
 8004d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d70:	b003      	add	sp, #12
 8004d72:	4770      	bx	lr
 8004d74:	20000060 	.word	0x20000060
 8004d78:	ffff0208 	.word	0xffff0208

08004d7c <siscanf>:
 8004d7c:	b40e      	push	{r1, r2, r3}
 8004d7e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004d82:	b530      	push	{r4, r5, lr}
 8004d84:	b09c      	sub	sp, #112	; 0x70
 8004d86:	ac1f      	add	r4, sp, #124	; 0x7c
 8004d88:	f854 5b04 	ldr.w	r5, [r4], #4
 8004d8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004d90:	9002      	str	r0, [sp, #8]
 8004d92:	9006      	str	r0, [sp, #24]
 8004d94:	f7fb f9dc 	bl	8000150 <strlen>
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <siscanf+0x4c>)
 8004d9a:	9003      	str	r0, [sp, #12]
 8004d9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d9e:	2300      	movs	r3, #0
 8004da0:	930f      	str	r3, [sp, #60]	; 0x3c
 8004da2:	9314      	str	r3, [sp, #80]	; 0x50
 8004da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004da8:	9007      	str	r0, [sp, #28]
 8004daa:	4808      	ldr	r0, [pc, #32]	; (8004dcc <siscanf+0x50>)
 8004dac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004db0:	462a      	mov	r2, r5
 8004db2:	4623      	mov	r3, r4
 8004db4:	a902      	add	r1, sp, #8
 8004db6:	6800      	ldr	r0, [r0, #0]
 8004db8:	9401      	str	r4, [sp, #4]
 8004dba:	f000 fae5 	bl	8005388 <__ssvfiscanf_r>
 8004dbe:	b01c      	add	sp, #112	; 0x70
 8004dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dc4:	b003      	add	sp, #12
 8004dc6:	4770      	bx	lr
 8004dc8:	08004dd1 	.word	0x08004dd1
 8004dcc:	20000060 	.word	0x20000060

08004dd0 <__seofread>:
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	4770      	bx	lr

08004dd4 <memset>:
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	4402      	add	r2, r0
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d100      	bne.n	8004dde <memset+0xa>
 8004ddc:	4770      	bx	lr
 8004dde:	f803 1b01 	strb.w	r1, [r3], #1
 8004de2:	e7f9      	b.n	8004dd8 <memset+0x4>

08004de4 <__errno>:
 8004de4:	4b01      	ldr	r3, [pc, #4]	; (8004dec <__errno+0x8>)
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000060 	.word	0x20000060

08004df0 <__libc_init_array>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	2600      	movs	r6, #0
 8004df4:	4d0c      	ldr	r5, [pc, #48]	; (8004e28 <__libc_init_array+0x38>)
 8004df6:	4c0d      	ldr	r4, [pc, #52]	; (8004e2c <__libc_init_array+0x3c>)
 8004df8:	1b64      	subs	r4, r4, r5
 8004dfa:	10a4      	asrs	r4, r4, #2
 8004dfc:	42a6      	cmp	r6, r4
 8004dfe:	d109      	bne.n	8004e14 <__libc_init_array+0x24>
 8004e00:	f002 f808 	bl	8006e14 <_init>
 8004e04:	2600      	movs	r6, #0
 8004e06:	4d0a      	ldr	r5, [pc, #40]	; (8004e30 <__libc_init_array+0x40>)
 8004e08:	4c0a      	ldr	r4, [pc, #40]	; (8004e34 <__libc_init_array+0x44>)
 8004e0a:	1b64      	subs	r4, r4, r5
 8004e0c:	10a4      	asrs	r4, r4, #2
 8004e0e:	42a6      	cmp	r6, r4
 8004e10:	d105      	bne.n	8004e1e <__libc_init_array+0x2e>
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e18:	4798      	blx	r3
 8004e1a:	3601      	adds	r6, #1
 8004e1c:	e7ee      	b.n	8004dfc <__libc_init_array+0xc>
 8004e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e22:	4798      	blx	r3
 8004e24:	3601      	adds	r6, #1
 8004e26:	e7f2      	b.n	8004e0e <__libc_init_array+0x1e>
 8004e28:	08007008 	.word	0x08007008
 8004e2c:	08007008 	.word	0x08007008
 8004e30:	08007008 	.word	0x08007008
 8004e34:	0800700c 	.word	0x0800700c

08004e38 <__retarget_lock_acquire_recursive>:
 8004e38:	4770      	bx	lr

08004e3a <__retarget_lock_release_recursive>:
 8004e3a:	4770      	bx	lr

08004e3c <_free_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4605      	mov	r5, r0
 8004e40:	2900      	cmp	r1, #0
 8004e42:	d040      	beq.n	8004ec6 <_free_r+0x8a>
 8004e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e48:	1f0c      	subs	r4, r1, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bfb8      	it	lt
 8004e4e:	18e4      	addlt	r4, r4, r3
 8004e50:	f000 f8dc 	bl	800500c <__malloc_lock>
 8004e54:	4a1c      	ldr	r2, [pc, #112]	; (8004ec8 <_free_r+0x8c>)
 8004e56:	6813      	ldr	r3, [r2, #0]
 8004e58:	b933      	cbnz	r3, 8004e68 <_free_r+0x2c>
 8004e5a:	6063      	str	r3, [r4, #4]
 8004e5c:	6014      	str	r4, [r2, #0]
 8004e5e:	4628      	mov	r0, r5
 8004e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e64:	f000 b8d8 	b.w	8005018 <__malloc_unlock>
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	d908      	bls.n	8004e7e <_free_r+0x42>
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	1821      	adds	r1, r4, r0
 8004e70:	428b      	cmp	r3, r1
 8004e72:	bf01      	itttt	eq
 8004e74:	6819      	ldreq	r1, [r3, #0]
 8004e76:	685b      	ldreq	r3, [r3, #4]
 8004e78:	1809      	addeq	r1, r1, r0
 8004e7a:	6021      	streq	r1, [r4, #0]
 8004e7c:	e7ed      	b.n	8004e5a <_free_r+0x1e>
 8004e7e:	461a      	mov	r2, r3
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	b10b      	cbz	r3, 8004e88 <_free_r+0x4c>
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d9fa      	bls.n	8004e7e <_free_r+0x42>
 8004e88:	6811      	ldr	r1, [r2, #0]
 8004e8a:	1850      	adds	r0, r2, r1
 8004e8c:	42a0      	cmp	r0, r4
 8004e8e:	d10b      	bne.n	8004ea8 <_free_r+0x6c>
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	4401      	add	r1, r0
 8004e94:	1850      	adds	r0, r2, r1
 8004e96:	4283      	cmp	r3, r0
 8004e98:	6011      	str	r1, [r2, #0]
 8004e9a:	d1e0      	bne.n	8004e5e <_free_r+0x22>
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4408      	add	r0, r1
 8004ea2:	6010      	str	r0, [r2, #0]
 8004ea4:	6053      	str	r3, [r2, #4]
 8004ea6:	e7da      	b.n	8004e5e <_free_r+0x22>
 8004ea8:	d902      	bls.n	8004eb0 <_free_r+0x74>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	602b      	str	r3, [r5, #0]
 8004eae:	e7d6      	b.n	8004e5e <_free_r+0x22>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	1821      	adds	r1, r4, r0
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	bf01      	itttt	eq
 8004eb8:	6819      	ldreq	r1, [r3, #0]
 8004eba:	685b      	ldreq	r3, [r3, #4]
 8004ebc:	1809      	addeq	r1, r1, r0
 8004ebe:	6021      	streq	r1, [r4, #0]
 8004ec0:	6063      	str	r3, [r4, #4]
 8004ec2:	6054      	str	r4, [r2, #4]
 8004ec4:	e7cb      	b.n	8004e5e <_free_r+0x22>
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	2000045c 	.word	0x2000045c

08004ecc <sbrk_aligned>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	4e0e      	ldr	r6, [pc, #56]	; (8004f08 <sbrk_aligned+0x3c>)
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	6831      	ldr	r1, [r6, #0]
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	b911      	cbnz	r1, 8004ede <sbrk_aligned+0x12>
 8004ed8:	f000 ff3a 	bl	8005d50 <_sbrk_r>
 8004edc:	6030      	str	r0, [r6, #0]
 8004ede:	4621      	mov	r1, r4
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f000 ff35 	bl	8005d50 <_sbrk_r>
 8004ee6:	1c43      	adds	r3, r0, #1
 8004ee8:	d00a      	beq.n	8004f00 <sbrk_aligned+0x34>
 8004eea:	1cc4      	adds	r4, r0, #3
 8004eec:	f024 0403 	bic.w	r4, r4, #3
 8004ef0:	42a0      	cmp	r0, r4
 8004ef2:	d007      	beq.n	8004f04 <sbrk_aligned+0x38>
 8004ef4:	1a21      	subs	r1, r4, r0
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 ff2a 	bl	8005d50 <_sbrk_r>
 8004efc:	3001      	adds	r0, #1
 8004efe:	d101      	bne.n	8004f04 <sbrk_aligned+0x38>
 8004f00:	f04f 34ff 	mov.w	r4, #4294967295
 8004f04:	4620      	mov	r0, r4
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
 8004f08:	20000460 	.word	0x20000460

08004f0c <_malloc_r>:
 8004f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f10:	1ccd      	adds	r5, r1, #3
 8004f12:	f025 0503 	bic.w	r5, r5, #3
 8004f16:	3508      	adds	r5, #8
 8004f18:	2d0c      	cmp	r5, #12
 8004f1a:	bf38      	it	cc
 8004f1c:	250c      	movcc	r5, #12
 8004f1e:	2d00      	cmp	r5, #0
 8004f20:	4607      	mov	r7, r0
 8004f22:	db01      	blt.n	8004f28 <_malloc_r+0x1c>
 8004f24:	42a9      	cmp	r1, r5
 8004f26:	d905      	bls.n	8004f34 <_malloc_r+0x28>
 8004f28:	230c      	movs	r3, #12
 8004f2a:	2600      	movs	r6, #0
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	4630      	mov	r0, r6
 8004f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005008 <_malloc_r+0xfc>
 8004f38:	f000 f868 	bl	800500c <__malloc_lock>
 8004f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f40:	461c      	mov	r4, r3
 8004f42:	bb5c      	cbnz	r4, 8004f9c <_malloc_r+0x90>
 8004f44:	4629      	mov	r1, r5
 8004f46:	4638      	mov	r0, r7
 8004f48:	f7ff ffc0 	bl	8004ecc <sbrk_aligned>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	4604      	mov	r4, r0
 8004f50:	d155      	bne.n	8004ffe <_malloc_r+0xf2>
 8004f52:	f8d8 4000 	ldr.w	r4, [r8]
 8004f56:	4626      	mov	r6, r4
 8004f58:	2e00      	cmp	r6, #0
 8004f5a:	d145      	bne.n	8004fe8 <_malloc_r+0xdc>
 8004f5c:	2c00      	cmp	r4, #0
 8004f5e:	d048      	beq.n	8004ff2 <_malloc_r+0xe6>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	4631      	mov	r1, r6
 8004f64:	4638      	mov	r0, r7
 8004f66:	eb04 0903 	add.w	r9, r4, r3
 8004f6a:	f000 fef1 	bl	8005d50 <_sbrk_r>
 8004f6e:	4581      	cmp	r9, r0
 8004f70:	d13f      	bne.n	8004ff2 <_malloc_r+0xe6>
 8004f72:	6821      	ldr	r1, [r4, #0]
 8004f74:	4638      	mov	r0, r7
 8004f76:	1a6d      	subs	r5, r5, r1
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7ff ffa7 	bl	8004ecc <sbrk_aligned>
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d037      	beq.n	8004ff2 <_malloc_r+0xe6>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	442b      	add	r3, r5
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	f8d8 3000 	ldr.w	r3, [r8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d038      	beq.n	8005002 <_malloc_r+0xf6>
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	42a2      	cmp	r2, r4
 8004f94:	d12b      	bne.n	8004fee <_malloc_r+0xe2>
 8004f96:	2200      	movs	r2, #0
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	e00f      	b.n	8004fbc <_malloc_r+0xb0>
 8004f9c:	6822      	ldr	r2, [r4, #0]
 8004f9e:	1b52      	subs	r2, r2, r5
 8004fa0:	d41f      	bmi.n	8004fe2 <_malloc_r+0xd6>
 8004fa2:	2a0b      	cmp	r2, #11
 8004fa4:	d917      	bls.n	8004fd6 <_malloc_r+0xca>
 8004fa6:	1961      	adds	r1, r4, r5
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	6025      	str	r5, [r4, #0]
 8004fac:	bf18      	it	ne
 8004fae:	6059      	strne	r1, [r3, #4]
 8004fb0:	6863      	ldr	r3, [r4, #4]
 8004fb2:	bf08      	it	eq
 8004fb4:	f8c8 1000 	streq.w	r1, [r8]
 8004fb8:	5162      	str	r2, [r4, r5]
 8004fba:	604b      	str	r3, [r1, #4]
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	f104 060b 	add.w	r6, r4, #11
 8004fc2:	f000 f829 	bl	8005018 <__malloc_unlock>
 8004fc6:	f026 0607 	bic.w	r6, r6, #7
 8004fca:	1d23      	adds	r3, r4, #4
 8004fcc:	1af2      	subs	r2, r6, r3
 8004fce:	d0ae      	beq.n	8004f2e <_malloc_r+0x22>
 8004fd0:	1b9b      	subs	r3, r3, r6
 8004fd2:	50a3      	str	r3, [r4, r2]
 8004fd4:	e7ab      	b.n	8004f2e <_malloc_r+0x22>
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	6862      	ldr	r2, [r4, #4]
 8004fda:	d1dd      	bne.n	8004f98 <_malloc_r+0x8c>
 8004fdc:	f8c8 2000 	str.w	r2, [r8]
 8004fe0:	e7ec      	b.n	8004fbc <_malloc_r+0xb0>
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	6864      	ldr	r4, [r4, #4]
 8004fe6:	e7ac      	b.n	8004f42 <_malloc_r+0x36>
 8004fe8:	4634      	mov	r4, r6
 8004fea:	6876      	ldr	r6, [r6, #4]
 8004fec:	e7b4      	b.n	8004f58 <_malloc_r+0x4c>
 8004fee:	4613      	mov	r3, r2
 8004ff0:	e7cc      	b.n	8004f8c <_malloc_r+0x80>
 8004ff2:	230c      	movs	r3, #12
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	f000 f80e 	bl	8005018 <__malloc_unlock>
 8004ffc:	e797      	b.n	8004f2e <_malloc_r+0x22>
 8004ffe:	6025      	str	r5, [r4, #0]
 8005000:	e7dc      	b.n	8004fbc <_malloc_r+0xb0>
 8005002:	605b      	str	r3, [r3, #4]
 8005004:	deff      	udf	#255	; 0xff
 8005006:	bf00      	nop
 8005008:	2000045c 	.word	0x2000045c

0800500c <__malloc_lock>:
 800500c:	4801      	ldr	r0, [pc, #4]	; (8005014 <__malloc_lock+0x8>)
 800500e:	f7ff bf13 	b.w	8004e38 <__retarget_lock_acquire_recursive>
 8005012:	bf00      	nop
 8005014:	20000458 	.word	0x20000458

08005018 <__malloc_unlock>:
 8005018:	4801      	ldr	r0, [pc, #4]	; (8005020 <__malloc_unlock+0x8>)
 800501a:	f7ff bf0e 	b.w	8004e3a <__retarget_lock_release_recursive>
 800501e:	bf00      	nop
 8005020:	20000458 	.word	0x20000458

08005024 <__ssputs_r>:
 8005024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005028:	461f      	mov	r7, r3
 800502a:	688e      	ldr	r6, [r1, #8]
 800502c:	4682      	mov	sl, r0
 800502e:	42be      	cmp	r6, r7
 8005030:	460c      	mov	r4, r1
 8005032:	4690      	mov	r8, r2
 8005034:	680b      	ldr	r3, [r1, #0]
 8005036:	d82c      	bhi.n	8005092 <__ssputs_r+0x6e>
 8005038:	898a      	ldrh	r2, [r1, #12]
 800503a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800503e:	d026      	beq.n	800508e <__ssputs_r+0x6a>
 8005040:	6965      	ldr	r5, [r4, #20]
 8005042:	6909      	ldr	r1, [r1, #16]
 8005044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005048:	eba3 0901 	sub.w	r9, r3, r1
 800504c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005050:	1c7b      	adds	r3, r7, #1
 8005052:	444b      	add	r3, r9
 8005054:	106d      	asrs	r5, r5, #1
 8005056:	429d      	cmp	r5, r3
 8005058:	bf38      	it	cc
 800505a:	461d      	movcc	r5, r3
 800505c:	0553      	lsls	r3, r2, #21
 800505e:	d527      	bpl.n	80050b0 <__ssputs_r+0x8c>
 8005060:	4629      	mov	r1, r5
 8005062:	f7ff ff53 	bl	8004f0c <_malloc_r>
 8005066:	4606      	mov	r6, r0
 8005068:	b360      	cbz	r0, 80050c4 <__ssputs_r+0xa0>
 800506a:	464a      	mov	r2, r9
 800506c:	6921      	ldr	r1, [r4, #16]
 800506e:	f000 fe8d 	bl	8005d8c <memcpy>
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	6126      	str	r6, [r4, #16]
 8005080:	444e      	add	r6, r9
 8005082:	6026      	str	r6, [r4, #0]
 8005084:	463e      	mov	r6, r7
 8005086:	6165      	str	r5, [r4, #20]
 8005088:	eba5 0509 	sub.w	r5, r5, r9
 800508c:	60a5      	str	r5, [r4, #8]
 800508e:	42be      	cmp	r6, r7
 8005090:	d900      	bls.n	8005094 <__ssputs_r+0x70>
 8005092:	463e      	mov	r6, r7
 8005094:	4632      	mov	r2, r6
 8005096:	4641      	mov	r1, r8
 8005098:	6820      	ldr	r0, [r4, #0]
 800509a:	f000 fe3e 	bl	8005d1a <memmove>
 800509e:	2000      	movs	r0, #0
 80050a0:	68a3      	ldr	r3, [r4, #8]
 80050a2:	1b9b      	subs	r3, r3, r6
 80050a4:	60a3      	str	r3, [r4, #8]
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	4433      	add	r3, r6
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b0:	462a      	mov	r2, r5
 80050b2:	f000 fe79 	bl	8005da8 <_realloc_r>
 80050b6:	4606      	mov	r6, r0
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d1e0      	bne.n	800507e <__ssputs_r+0x5a>
 80050bc:	4650      	mov	r0, sl
 80050be:	6921      	ldr	r1, [r4, #16]
 80050c0:	f7ff febc 	bl	8004e3c <_free_r>
 80050c4:	230c      	movs	r3, #12
 80050c6:	f8ca 3000 	str.w	r3, [sl]
 80050ca:	89a3      	ldrh	r3, [r4, #12]
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050d4:	81a3      	strh	r3, [r4, #12]
 80050d6:	e7e9      	b.n	80050ac <__ssputs_r+0x88>

080050d8 <_svfiprintf_r>:
 80050d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	4698      	mov	r8, r3
 80050de:	898b      	ldrh	r3, [r1, #12]
 80050e0:	4607      	mov	r7, r0
 80050e2:	061b      	lsls	r3, r3, #24
 80050e4:	460d      	mov	r5, r1
 80050e6:	4614      	mov	r4, r2
 80050e8:	b09d      	sub	sp, #116	; 0x74
 80050ea:	d50e      	bpl.n	800510a <_svfiprintf_r+0x32>
 80050ec:	690b      	ldr	r3, [r1, #16]
 80050ee:	b963      	cbnz	r3, 800510a <_svfiprintf_r+0x32>
 80050f0:	2140      	movs	r1, #64	; 0x40
 80050f2:	f7ff ff0b 	bl	8004f0c <_malloc_r>
 80050f6:	6028      	str	r0, [r5, #0]
 80050f8:	6128      	str	r0, [r5, #16]
 80050fa:	b920      	cbnz	r0, 8005106 <_svfiprintf_r+0x2e>
 80050fc:	230c      	movs	r3, #12
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	f04f 30ff 	mov.w	r0, #4294967295
 8005104:	e0d0      	b.n	80052a8 <_svfiprintf_r+0x1d0>
 8005106:	2340      	movs	r3, #64	; 0x40
 8005108:	616b      	str	r3, [r5, #20]
 800510a:	2300      	movs	r3, #0
 800510c:	9309      	str	r3, [sp, #36]	; 0x24
 800510e:	2320      	movs	r3, #32
 8005110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005114:	2330      	movs	r3, #48	; 0x30
 8005116:	f04f 0901 	mov.w	r9, #1
 800511a:	f8cd 800c 	str.w	r8, [sp, #12]
 800511e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80052c0 <_svfiprintf_r+0x1e8>
 8005122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005126:	4623      	mov	r3, r4
 8005128:	469a      	mov	sl, r3
 800512a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800512e:	b10a      	cbz	r2, 8005134 <_svfiprintf_r+0x5c>
 8005130:	2a25      	cmp	r2, #37	; 0x25
 8005132:	d1f9      	bne.n	8005128 <_svfiprintf_r+0x50>
 8005134:	ebba 0b04 	subs.w	fp, sl, r4
 8005138:	d00b      	beq.n	8005152 <_svfiprintf_r+0x7a>
 800513a:	465b      	mov	r3, fp
 800513c:	4622      	mov	r2, r4
 800513e:	4629      	mov	r1, r5
 8005140:	4638      	mov	r0, r7
 8005142:	f7ff ff6f 	bl	8005024 <__ssputs_r>
 8005146:	3001      	adds	r0, #1
 8005148:	f000 80a9 	beq.w	800529e <_svfiprintf_r+0x1c6>
 800514c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800514e:	445a      	add	r2, fp
 8005150:	9209      	str	r2, [sp, #36]	; 0x24
 8005152:	f89a 3000 	ldrb.w	r3, [sl]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80a1 	beq.w	800529e <_svfiprintf_r+0x1c6>
 800515c:	2300      	movs	r3, #0
 800515e:	f04f 32ff 	mov.w	r2, #4294967295
 8005162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005166:	f10a 0a01 	add.w	sl, sl, #1
 800516a:	9304      	str	r3, [sp, #16]
 800516c:	9307      	str	r3, [sp, #28]
 800516e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005172:	931a      	str	r3, [sp, #104]	; 0x68
 8005174:	4654      	mov	r4, sl
 8005176:	2205      	movs	r2, #5
 8005178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800517c:	4850      	ldr	r0, [pc, #320]	; (80052c0 <_svfiprintf_r+0x1e8>)
 800517e:	f000 fdf7 	bl	8005d70 <memchr>
 8005182:	9a04      	ldr	r2, [sp, #16]
 8005184:	b9d8      	cbnz	r0, 80051be <_svfiprintf_r+0xe6>
 8005186:	06d0      	lsls	r0, r2, #27
 8005188:	bf44      	itt	mi
 800518a:	2320      	movmi	r3, #32
 800518c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005190:	0711      	lsls	r1, r2, #28
 8005192:	bf44      	itt	mi
 8005194:	232b      	movmi	r3, #43	; 0x2b
 8005196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800519a:	f89a 3000 	ldrb.w	r3, [sl]
 800519e:	2b2a      	cmp	r3, #42	; 0x2a
 80051a0:	d015      	beq.n	80051ce <_svfiprintf_r+0xf6>
 80051a2:	4654      	mov	r4, sl
 80051a4:	2000      	movs	r0, #0
 80051a6:	f04f 0c0a 	mov.w	ip, #10
 80051aa:	9a07      	ldr	r2, [sp, #28]
 80051ac:	4621      	mov	r1, r4
 80051ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051b2:	3b30      	subs	r3, #48	; 0x30
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	d94d      	bls.n	8005254 <_svfiprintf_r+0x17c>
 80051b8:	b1b0      	cbz	r0, 80051e8 <_svfiprintf_r+0x110>
 80051ba:	9207      	str	r2, [sp, #28]
 80051bc:	e014      	b.n	80051e8 <_svfiprintf_r+0x110>
 80051be:	eba0 0308 	sub.w	r3, r0, r8
 80051c2:	fa09 f303 	lsl.w	r3, r9, r3
 80051c6:	4313      	orrs	r3, r2
 80051c8:	46a2      	mov	sl, r4
 80051ca:	9304      	str	r3, [sp, #16]
 80051cc:	e7d2      	b.n	8005174 <_svfiprintf_r+0x9c>
 80051ce:	9b03      	ldr	r3, [sp, #12]
 80051d0:	1d19      	adds	r1, r3, #4
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	9103      	str	r1, [sp, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bfbb      	ittet	lt
 80051da:	425b      	neglt	r3, r3
 80051dc:	f042 0202 	orrlt.w	r2, r2, #2
 80051e0:	9307      	strge	r3, [sp, #28]
 80051e2:	9307      	strlt	r3, [sp, #28]
 80051e4:	bfb8      	it	lt
 80051e6:	9204      	strlt	r2, [sp, #16]
 80051e8:	7823      	ldrb	r3, [r4, #0]
 80051ea:	2b2e      	cmp	r3, #46	; 0x2e
 80051ec:	d10c      	bne.n	8005208 <_svfiprintf_r+0x130>
 80051ee:	7863      	ldrb	r3, [r4, #1]
 80051f0:	2b2a      	cmp	r3, #42	; 0x2a
 80051f2:	d134      	bne.n	800525e <_svfiprintf_r+0x186>
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	3402      	adds	r4, #2
 80051f8:	1d1a      	adds	r2, r3, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	9203      	str	r2, [sp, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bfb8      	it	lt
 8005202:	f04f 33ff 	movlt.w	r3, #4294967295
 8005206:	9305      	str	r3, [sp, #20]
 8005208:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80052c4 <_svfiprintf_r+0x1ec>
 800520c:	2203      	movs	r2, #3
 800520e:	4650      	mov	r0, sl
 8005210:	7821      	ldrb	r1, [r4, #0]
 8005212:	f000 fdad 	bl	8005d70 <memchr>
 8005216:	b138      	cbz	r0, 8005228 <_svfiprintf_r+0x150>
 8005218:	2240      	movs	r2, #64	; 0x40
 800521a:	9b04      	ldr	r3, [sp, #16]
 800521c:	eba0 000a 	sub.w	r0, r0, sl
 8005220:	4082      	lsls	r2, r0
 8005222:	4313      	orrs	r3, r2
 8005224:	3401      	adds	r4, #1
 8005226:	9304      	str	r3, [sp, #16]
 8005228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800522c:	2206      	movs	r2, #6
 800522e:	4826      	ldr	r0, [pc, #152]	; (80052c8 <_svfiprintf_r+0x1f0>)
 8005230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005234:	f000 fd9c 	bl	8005d70 <memchr>
 8005238:	2800      	cmp	r0, #0
 800523a:	d038      	beq.n	80052ae <_svfiprintf_r+0x1d6>
 800523c:	4b23      	ldr	r3, [pc, #140]	; (80052cc <_svfiprintf_r+0x1f4>)
 800523e:	bb1b      	cbnz	r3, 8005288 <_svfiprintf_r+0x1b0>
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	3307      	adds	r3, #7
 8005244:	f023 0307 	bic.w	r3, r3, #7
 8005248:	3308      	adds	r3, #8
 800524a:	9303      	str	r3, [sp, #12]
 800524c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524e:	4433      	add	r3, r6
 8005250:	9309      	str	r3, [sp, #36]	; 0x24
 8005252:	e768      	b.n	8005126 <_svfiprintf_r+0x4e>
 8005254:	460c      	mov	r4, r1
 8005256:	2001      	movs	r0, #1
 8005258:	fb0c 3202 	mla	r2, ip, r2, r3
 800525c:	e7a6      	b.n	80051ac <_svfiprintf_r+0xd4>
 800525e:	2300      	movs	r3, #0
 8005260:	f04f 0c0a 	mov.w	ip, #10
 8005264:	4619      	mov	r1, r3
 8005266:	3401      	adds	r4, #1
 8005268:	9305      	str	r3, [sp, #20]
 800526a:	4620      	mov	r0, r4
 800526c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005270:	3a30      	subs	r2, #48	; 0x30
 8005272:	2a09      	cmp	r2, #9
 8005274:	d903      	bls.n	800527e <_svfiprintf_r+0x1a6>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0c6      	beq.n	8005208 <_svfiprintf_r+0x130>
 800527a:	9105      	str	r1, [sp, #20]
 800527c:	e7c4      	b.n	8005208 <_svfiprintf_r+0x130>
 800527e:	4604      	mov	r4, r0
 8005280:	2301      	movs	r3, #1
 8005282:	fb0c 2101 	mla	r1, ip, r1, r2
 8005286:	e7f0      	b.n	800526a <_svfiprintf_r+0x192>
 8005288:	ab03      	add	r3, sp, #12
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	462a      	mov	r2, r5
 800528e:	4638      	mov	r0, r7
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <_svfiprintf_r+0x1f8>)
 8005292:	a904      	add	r1, sp, #16
 8005294:	f3af 8000 	nop.w
 8005298:	1c42      	adds	r2, r0, #1
 800529a:	4606      	mov	r6, r0
 800529c:	d1d6      	bne.n	800524c <_svfiprintf_r+0x174>
 800529e:	89ab      	ldrh	r3, [r5, #12]
 80052a0:	065b      	lsls	r3, r3, #25
 80052a2:	f53f af2d 	bmi.w	8005100 <_svfiprintf_r+0x28>
 80052a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052a8:	b01d      	add	sp, #116	; 0x74
 80052aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ae:	ab03      	add	r3, sp, #12
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	462a      	mov	r2, r5
 80052b4:	4638      	mov	r0, r7
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <_svfiprintf_r+0x1f8>)
 80052b8:	a904      	add	r1, sp, #16
 80052ba:	f000 fa4f 	bl	800575c <_printf_i>
 80052be:	e7eb      	b.n	8005298 <_svfiprintf_r+0x1c0>
 80052c0:	08006e86 	.word	0x08006e86
 80052c4:	08006e8c 	.word	0x08006e8c
 80052c8:	08006e90 	.word	0x08006e90
 80052cc:	00000000 	.word	0x00000000
 80052d0:	08005025 	.word	0x08005025

080052d4 <_sungetc_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	1c4b      	adds	r3, r1, #1
 80052d8:	4614      	mov	r4, r2
 80052da:	d103      	bne.n	80052e4 <_sungetc_r+0x10>
 80052dc:	f04f 35ff 	mov.w	r5, #4294967295
 80052e0:	4628      	mov	r0, r5
 80052e2:	bd38      	pop	{r3, r4, r5, pc}
 80052e4:	8993      	ldrh	r3, [r2, #12]
 80052e6:	b2cd      	uxtb	r5, r1
 80052e8:	f023 0320 	bic.w	r3, r3, #32
 80052ec:	8193      	strh	r3, [r2, #12]
 80052ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052f0:	6852      	ldr	r2, [r2, #4]
 80052f2:	b18b      	cbz	r3, 8005318 <_sungetc_r+0x44>
 80052f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052f6:	4293      	cmp	r3, r2
 80052f8:	dd08      	ble.n	800530c <_sungetc_r+0x38>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	1e5a      	subs	r2, r3, #1
 80052fe:	6022      	str	r2, [r4, #0]
 8005300:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005304:	6863      	ldr	r3, [r4, #4]
 8005306:	3301      	adds	r3, #1
 8005308:	6063      	str	r3, [r4, #4]
 800530a:	e7e9      	b.n	80052e0 <_sungetc_r+0xc>
 800530c:	4621      	mov	r1, r4
 800530e:	f000 fccc 	bl	8005caa <__submore>
 8005312:	2800      	cmp	r0, #0
 8005314:	d0f1      	beq.n	80052fa <_sungetc_r+0x26>
 8005316:	e7e1      	b.n	80052dc <_sungetc_r+0x8>
 8005318:	6921      	ldr	r1, [r4, #16]
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	b151      	cbz	r1, 8005334 <_sungetc_r+0x60>
 800531e:	4299      	cmp	r1, r3
 8005320:	d208      	bcs.n	8005334 <_sungetc_r+0x60>
 8005322:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005326:	42a9      	cmp	r1, r5
 8005328:	d104      	bne.n	8005334 <_sungetc_r+0x60>
 800532a:	3b01      	subs	r3, #1
 800532c:	3201      	adds	r2, #1
 800532e:	6023      	str	r3, [r4, #0]
 8005330:	6062      	str	r2, [r4, #4]
 8005332:	e7d5      	b.n	80052e0 <_sungetc_r+0xc>
 8005334:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800533c:	6363      	str	r3, [r4, #52]	; 0x34
 800533e:	2303      	movs	r3, #3
 8005340:	63a3      	str	r3, [r4, #56]	; 0x38
 8005342:	4623      	mov	r3, r4
 8005344:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	2301      	movs	r3, #1
 800534c:	e7dc      	b.n	8005308 <_sungetc_r+0x34>

0800534e <__ssrefill_r>:
 800534e:	b510      	push	{r4, lr}
 8005350:	460c      	mov	r4, r1
 8005352:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005354:	b169      	cbz	r1, 8005372 <__ssrefill_r+0x24>
 8005356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800535a:	4299      	cmp	r1, r3
 800535c:	d001      	beq.n	8005362 <__ssrefill_r+0x14>
 800535e:	f7ff fd6d 	bl	8004e3c <_free_r>
 8005362:	2000      	movs	r0, #0
 8005364:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005366:	6360      	str	r0, [r4, #52]	; 0x34
 8005368:	6063      	str	r3, [r4, #4]
 800536a:	b113      	cbz	r3, 8005372 <__ssrefill_r+0x24>
 800536c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	bd10      	pop	{r4, pc}
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	2300      	movs	r3, #0
 800537c:	6063      	str	r3, [r4, #4]
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	f043 0320 	orr.w	r3, r3, #32
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	e7f3      	b.n	8005370 <__ssrefill_r+0x22>

08005388 <__ssvfiscanf_r>:
 8005388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800538c:	460c      	mov	r4, r1
 800538e:	2100      	movs	r1, #0
 8005390:	4606      	mov	r6, r0
 8005392:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005396:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800539a:	49a6      	ldr	r1, [pc, #664]	; (8005634 <__ssvfiscanf_r+0x2ac>)
 800539c:	f10d 0804 	add.w	r8, sp, #4
 80053a0:	91a0      	str	r1, [sp, #640]	; 0x280
 80053a2:	49a5      	ldr	r1, [pc, #660]	; (8005638 <__ssvfiscanf_r+0x2b0>)
 80053a4:	4fa5      	ldr	r7, [pc, #660]	; (800563c <__ssvfiscanf_r+0x2b4>)
 80053a6:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005640 <__ssvfiscanf_r+0x2b8>
 80053aa:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80053ae:	91a1      	str	r1, [sp, #644]	; 0x284
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	7813      	ldrb	r3, [r2, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 815a 	beq.w	800566e <__ssvfiscanf_r+0x2e6>
 80053ba:	5cf9      	ldrb	r1, [r7, r3]
 80053bc:	1c55      	adds	r5, r2, #1
 80053be:	f011 0108 	ands.w	r1, r1, #8
 80053c2:	d019      	beq.n	80053f8 <__ssvfiscanf_r+0x70>
 80053c4:	6863      	ldr	r3, [r4, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	dd0f      	ble.n	80053ea <__ssvfiscanf_r+0x62>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	5cba      	ldrb	r2, [r7, r2]
 80053d0:	0712      	lsls	r2, r2, #28
 80053d2:	d401      	bmi.n	80053d8 <__ssvfiscanf_r+0x50>
 80053d4:	462a      	mov	r2, r5
 80053d6:	e7ec      	b.n	80053b2 <__ssvfiscanf_r+0x2a>
 80053d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80053da:	3301      	adds	r3, #1
 80053dc:	3201      	adds	r2, #1
 80053de:	9245      	str	r2, [sp, #276]	; 0x114
 80053e0:	6862      	ldr	r2, [r4, #4]
 80053e2:	6023      	str	r3, [r4, #0]
 80053e4:	3a01      	subs	r2, #1
 80053e6:	6062      	str	r2, [r4, #4]
 80053e8:	e7ec      	b.n	80053c4 <__ssvfiscanf_r+0x3c>
 80053ea:	4621      	mov	r1, r4
 80053ec:	4630      	mov	r0, r6
 80053ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80053f0:	4798      	blx	r3
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d0e9      	beq.n	80053ca <__ssvfiscanf_r+0x42>
 80053f6:	e7ed      	b.n	80053d4 <__ssvfiscanf_r+0x4c>
 80053f8:	2b25      	cmp	r3, #37	; 0x25
 80053fa:	d012      	beq.n	8005422 <__ssvfiscanf_r+0x9a>
 80053fc:	469a      	mov	sl, r3
 80053fe:	6863      	ldr	r3, [r4, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f340 8092 	ble.w	800552a <__ssvfiscanf_r+0x1a2>
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	7813      	ldrb	r3, [r2, #0]
 800540a:	4553      	cmp	r3, sl
 800540c:	f040 812f 	bne.w	800566e <__ssvfiscanf_r+0x2e6>
 8005410:	6863      	ldr	r3, [r4, #4]
 8005412:	3201      	adds	r2, #1
 8005414:	3b01      	subs	r3, #1
 8005416:	6063      	str	r3, [r4, #4]
 8005418:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800541a:	6022      	str	r2, [r4, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	9345      	str	r3, [sp, #276]	; 0x114
 8005420:	e7d8      	b.n	80053d4 <__ssvfiscanf_r+0x4c>
 8005422:	9141      	str	r1, [sp, #260]	; 0x104
 8005424:	9143      	str	r1, [sp, #268]	; 0x10c
 8005426:	7853      	ldrb	r3, [r2, #1]
 8005428:	2b2a      	cmp	r3, #42	; 0x2a
 800542a:	bf04      	itt	eq
 800542c:	2310      	moveq	r3, #16
 800542e:	1c95      	addeq	r5, r2, #2
 8005430:	f04f 020a 	mov.w	r2, #10
 8005434:	bf08      	it	eq
 8005436:	9341      	streq	r3, [sp, #260]	; 0x104
 8005438:	46aa      	mov	sl, r5
 800543a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800543e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005442:	2b09      	cmp	r3, #9
 8005444:	d91c      	bls.n	8005480 <__ssvfiscanf_r+0xf8>
 8005446:	2203      	movs	r2, #3
 8005448:	487d      	ldr	r0, [pc, #500]	; (8005640 <__ssvfiscanf_r+0x2b8>)
 800544a:	f000 fc91 	bl	8005d70 <memchr>
 800544e:	b138      	cbz	r0, 8005460 <__ssvfiscanf_r+0xd8>
 8005450:	2301      	movs	r3, #1
 8005452:	4655      	mov	r5, sl
 8005454:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005456:	eba0 0009 	sub.w	r0, r0, r9
 800545a:	4083      	lsls	r3, r0
 800545c:	4313      	orrs	r3, r2
 800545e:	9341      	str	r3, [sp, #260]	; 0x104
 8005460:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005464:	2b78      	cmp	r3, #120	; 0x78
 8005466:	d806      	bhi.n	8005476 <__ssvfiscanf_r+0xee>
 8005468:	2b57      	cmp	r3, #87	; 0x57
 800546a:	d810      	bhi.n	800548e <__ssvfiscanf_r+0x106>
 800546c:	2b25      	cmp	r3, #37	; 0x25
 800546e:	d0c5      	beq.n	80053fc <__ssvfiscanf_r+0x74>
 8005470:	d856      	bhi.n	8005520 <__ssvfiscanf_r+0x198>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d064      	beq.n	8005540 <__ssvfiscanf_r+0x1b8>
 8005476:	2303      	movs	r3, #3
 8005478:	9347      	str	r3, [sp, #284]	; 0x11c
 800547a:	230a      	movs	r3, #10
 800547c:	9342      	str	r3, [sp, #264]	; 0x108
 800547e:	e075      	b.n	800556c <__ssvfiscanf_r+0x1e4>
 8005480:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005482:	4655      	mov	r5, sl
 8005484:	fb02 1103 	mla	r1, r2, r3, r1
 8005488:	3930      	subs	r1, #48	; 0x30
 800548a:	9143      	str	r1, [sp, #268]	; 0x10c
 800548c:	e7d4      	b.n	8005438 <__ssvfiscanf_r+0xb0>
 800548e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005492:	2a20      	cmp	r2, #32
 8005494:	d8ef      	bhi.n	8005476 <__ssvfiscanf_r+0xee>
 8005496:	a101      	add	r1, pc, #4	; (adr r1, 800549c <__ssvfiscanf_r+0x114>)
 8005498:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800549c:	0800554f 	.word	0x0800554f
 80054a0:	08005477 	.word	0x08005477
 80054a4:	08005477 	.word	0x08005477
 80054a8:	080055ad 	.word	0x080055ad
 80054ac:	08005477 	.word	0x08005477
 80054b0:	08005477 	.word	0x08005477
 80054b4:	08005477 	.word	0x08005477
 80054b8:	08005477 	.word	0x08005477
 80054bc:	08005477 	.word	0x08005477
 80054c0:	08005477 	.word	0x08005477
 80054c4:	08005477 	.word	0x08005477
 80054c8:	080055c3 	.word	0x080055c3
 80054cc:	080055a9 	.word	0x080055a9
 80054d0:	08005527 	.word	0x08005527
 80054d4:	08005527 	.word	0x08005527
 80054d8:	08005527 	.word	0x08005527
 80054dc:	08005477 	.word	0x08005477
 80054e0:	08005565 	.word	0x08005565
 80054e4:	08005477 	.word	0x08005477
 80054e8:	08005477 	.word	0x08005477
 80054ec:	08005477 	.word	0x08005477
 80054f0:	08005477 	.word	0x08005477
 80054f4:	080055d3 	.word	0x080055d3
 80054f8:	080055a1 	.word	0x080055a1
 80054fc:	08005547 	.word	0x08005547
 8005500:	08005477 	.word	0x08005477
 8005504:	08005477 	.word	0x08005477
 8005508:	080055cf 	.word	0x080055cf
 800550c:	08005477 	.word	0x08005477
 8005510:	080055a9 	.word	0x080055a9
 8005514:	08005477 	.word	0x08005477
 8005518:	08005477 	.word	0x08005477
 800551c:	0800554f 	.word	0x0800554f
 8005520:	3b45      	subs	r3, #69	; 0x45
 8005522:	2b02      	cmp	r3, #2
 8005524:	d8a7      	bhi.n	8005476 <__ssvfiscanf_r+0xee>
 8005526:	2305      	movs	r3, #5
 8005528:	e01f      	b.n	800556a <__ssvfiscanf_r+0x1e2>
 800552a:	4621      	mov	r1, r4
 800552c:	4630      	mov	r0, r6
 800552e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005530:	4798      	blx	r3
 8005532:	2800      	cmp	r0, #0
 8005534:	f43f af67 	beq.w	8005406 <__ssvfiscanf_r+0x7e>
 8005538:	9844      	ldr	r0, [sp, #272]	; 0x110
 800553a:	2800      	cmp	r0, #0
 800553c:	f040 808d 	bne.w	800565a <__ssvfiscanf_r+0x2d2>
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	e08f      	b.n	8005666 <__ssvfiscanf_r+0x2de>
 8005546:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005548:	f042 0220 	orr.w	r2, r2, #32
 800554c:	9241      	str	r2, [sp, #260]	; 0x104
 800554e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005554:	9241      	str	r2, [sp, #260]	; 0x104
 8005556:	2210      	movs	r2, #16
 8005558:	2b6f      	cmp	r3, #111	; 0x6f
 800555a:	bf34      	ite	cc
 800555c:	2303      	movcc	r3, #3
 800555e:	2304      	movcs	r3, #4
 8005560:	9242      	str	r2, [sp, #264]	; 0x108
 8005562:	e002      	b.n	800556a <__ssvfiscanf_r+0x1e2>
 8005564:	2300      	movs	r3, #0
 8005566:	9342      	str	r3, [sp, #264]	; 0x108
 8005568:	2303      	movs	r3, #3
 800556a:	9347      	str	r3, [sp, #284]	; 0x11c
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	dd3d      	ble.n	80055ee <__ssvfiscanf_r+0x266>
 8005572:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005574:	0659      	lsls	r1, r3, #25
 8005576:	d404      	bmi.n	8005582 <__ssvfiscanf_r+0x1fa>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	781a      	ldrb	r2, [r3, #0]
 800557c:	5cba      	ldrb	r2, [r7, r2]
 800557e:	0712      	lsls	r2, r2, #28
 8005580:	d43c      	bmi.n	80055fc <__ssvfiscanf_r+0x274>
 8005582:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005584:	2b02      	cmp	r3, #2
 8005586:	dc4b      	bgt.n	8005620 <__ssvfiscanf_r+0x298>
 8005588:	466b      	mov	r3, sp
 800558a:	4622      	mov	r2, r4
 800558c:	4630      	mov	r0, r6
 800558e:	a941      	add	r1, sp, #260	; 0x104
 8005590:	f000 fa06 	bl	80059a0 <_scanf_chars>
 8005594:	2801      	cmp	r0, #1
 8005596:	d06a      	beq.n	800566e <__ssvfiscanf_r+0x2e6>
 8005598:	2802      	cmp	r0, #2
 800559a:	f47f af1b 	bne.w	80053d4 <__ssvfiscanf_r+0x4c>
 800559e:	e7cb      	b.n	8005538 <__ssvfiscanf_r+0x1b0>
 80055a0:	2308      	movs	r3, #8
 80055a2:	9342      	str	r3, [sp, #264]	; 0x108
 80055a4:	2304      	movs	r3, #4
 80055a6:	e7e0      	b.n	800556a <__ssvfiscanf_r+0x1e2>
 80055a8:	220a      	movs	r2, #10
 80055aa:	e7d5      	b.n	8005558 <__ssvfiscanf_r+0x1d0>
 80055ac:	4629      	mov	r1, r5
 80055ae:	4640      	mov	r0, r8
 80055b0:	f000 fb42 	bl	8005c38 <__sccl>
 80055b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80055b6:	4605      	mov	r5, r0
 80055b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055bc:	9341      	str	r3, [sp, #260]	; 0x104
 80055be:	2301      	movs	r3, #1
 80055c0:	e7d3      	b.n	800556a <__ssvfiscanf_r+0x1e2>
 80055c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80055c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c8:	9341      	str	r3, [sp, #260]	; 0x104
 80055ca:	2300      	movs	r3, #0
 80055cc:	e7cd      	b.n	800556a <__ssvfiscanf_r+0x1e2>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e7cb      	b.n	800556a <__ssvfiscanf_r+0x1e2>
 80055d2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80055d4:	06c3      	lsls	r3, r0, #27
 80055d6:	f53f aefd 	bmi.w	80053d4 <__ssvfiscanf_r+0x4c>
 80055da:	9b00      	ldr	r3, [sp, #0]
 80055dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80055de:	1d19      	adds	r1, r3, #4
 80055e0:	9100      	str	r1, [sp, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	07c0      	lsls	r0, r0, #31
 80055e6:	bf4c      	ite	mi
 80055e8:	801a      	strhmi	r2, [r3, #0]
 80055ea:	601a      	strpl	r2, [r3, #0]
 80055ec:	e6f2      	b.n	80053d4 <__ssvfiscanf_r+0x4c>
 80055ee:	4621      	mov	r1, r4
 80055f0:	4630      	mov	r0, r6
 80055f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80055f4:	4798      	blx	r3
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d0bb      	beq.n	8005572 <__ssvfiscanf_r+0x1ea>
 80055fa:	e79d      	b.n	8005538 <__ssvfiscanf_r+0x1b0>
 80055fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80055fe:	3201      	adds	r2, #1
 8005600:	9245      	str	r2, [sp, #276]	; 0x114
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	3a01      	subs	r2, #1
 8005606:	2a00      	cmp	r2, #0
 8005608:	6062      	str	r2, [r4, #4]
 800560a:	dd02      	ble.n	8005612 <__ssvfiscanf_r+0x28a>
 800560c:	3301      	adds	r3, #1
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	e7b2      	b.n	8005578 <__ssvfiscanf_r+0x1f0>
 8005612:	4621      	mov	r1, r4
 8005614:	4630      	mov	r0, r6
 8005616:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005618:	4798      	blx	r3
 800561a:	2800      	cmp	r0, #0
 800561c:	d0ac      	beq.n	8005578 <__ssvfiscanf_r+0x1f0>
 800561e:	e78b      	b.n	8005538 <__ssvfiscanf_r+0x1b0>
 8005620:	2b04      	cmp	r3, #4
 8005622:	dc0f      	bgt.n	8005644 <__ssvfiscanf_r+0x2bc>
 8005624:	466b      	mov	r3, sp
 8005626:	4622      	mov	r2, r4
 8005628:	4630      	mov	r0, r6
 800562a:	a941      	add	r1, sp, #260	; 0x104
 800562c:	f000 fa12 	bl	8005a54 <_scanf_i>
 8005630:	e7b0      	b.n	8005594 <__ssvfiscanf_r+0x20c>
 8005632:	bf00      	nop
 8005634:	080052d5 	.word	0x080052d5
 8005638:	0800534f 	.word	0x0800534f
 800563c:	08006ed5 	.word	0x08006ed5
 8005640:	08006e8c 	.word	0x08006e8c
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <__ssvfiscanf_r+0x2ec>)
 8005646:	2b00      	cmp	r3, #0
 8005648:	f43f aec4 	beq.w	80053d4 <__ssvfiscanf_r+0x4c>
 800564c:	466b      	mov	r3, sp
 800564e:	4622      	mov	r2, r4
 8005650:	4630      	mov	r0, r6
 8005652:	a941      	add	r1, sp, #260	; 0x104
 8005654:	f3af 8000 	nop.w
 8005658:	e79c      	b.n	8005594 <__ssvfiscanf_r+0x20c>
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005660:	bf18      	it	ne
 8005662:	f04f 30ff 	movne.w	r0, #4294967295
 8005666:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800566a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005670:	e7f9      	b.n	8005666 <__ssvfiscanf_r+0x2de>
 8005672:	bf00      	nop
 8005674:	00000000 	.word	0x00000000

08005678 <_printf_common>:
 8005678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	4616      	mov	r6, r2
 800567e:	4699      	mov	r9, r3
 8005680:	688a      	ldr	r2, [r1, #8]
 8005682:	690b      	ldr	r3, [r1, #16]
 8005684:	4607      	mov	r7, r0
 8005686:	4293      	cmp	r3, r2
 8005688:	bfb8      	it	lt
 800568a:	4613      	movlt	r3, r2
 800568c:	6033      	str	r3, [r6, #0]
 800568e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005692:	460c      	mov	r4, r1
 8005694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005698:	b10a      	cbz	r2, 800569e <_printf_common+0x26>
 800569a:	3301      	adds	r3, #1
 800569c:	6033      	str	r3, [r6, #0]
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	0699      	lsls	r1, r3, #26
 80056a2:	bf42      	ittt	mi
 80056a4:	6833      	ldrmi	r3, [r6, #0]
 80056a6:	3302      	addmi	r3, #2
 80056a8:	6033      	strmi	r3, [r6, #0]
 80056aa:	6825      	ldr	r5, [r4, #0]
 80056ac:	f015 0506 	ands.w	r5, r5, #6
 80056b0:	d106      	bne.n	80056c0 <_printf_common+0x48>
 80056b2:	f104 0a19 	add.w	sl, r4, #25
 80056b6:	68e3      	ldr	r3, [r4, #12]
 80056b8:	6832      	ldr	r2, [r6, #0]
 80056ba:	1a9b      	subs	r3, r3, r2
 80056bc:	42ab      	cmp	r3, r5
 80056be:	dc2b      	bgt.n	8005718 <_printf_common+0xa0>
 80056c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056c4:	1e13      	subs	r3, r2, #0
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	bf18      	it	ne
 80056ca:	2301      	movne	r3, #1
 80056cc:	0692      	lsls	r2, r2, #26
 80056ce:	d430      	bmi.n	8005732 <_printf_common+0xba>
 80056d0:	4649      	mov	r1, r9
 80056d2:	4638      	mov	r0, r7
 80056d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056d8:	47c0      	blx	r8
 80056da:	3001      	adds	r0, #1
 80056dc:	d023      	beq.n	8005726 <_printf_common+0xae>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	6922      	ldr	r2, [r4, #16]
 80056e2:	f003 0306 	and.w	r3, r3, #6
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	bf14      	ite	ne
 80056ea:	2500      	movne	r5, #0
 80056ec:	6833      	ldreq	r3, [r6, #0]
 80056ee:	f04f 0600 	mov.w	r6, #0
 80056f2:	bf08      	it	eq
 80056f4:	68e5      	ldreq	r5, [r4, #12]
 80056f6:	f104 041a 	add.w	r4, r4, #26
 80056fa:	bf08      	it	eq
 80056fc:	1aed      	subeq	r5, r5, r3
 80056fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005702:	bf08      	it	eq
 8005704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005708:	4293      	cmp	r3, r2
 800570a:	bfc4      	itt	gt
 800570c:	1a9b      	subgt	r3, r3, r2
 800570e:	18ed      	addgt	r5, r5, r3
 8005710:	42b5      	cmp	r5, r6
 8005712:	d11a      	bne.n	800574a <_printf_common+0xd2>
 8005714:	2000      	movs	r0, #0
 8005716:	e008      	b.n	800572a <_printf_common+0xb2>
 8005718:	2301      	movs	r3, #1
 800571a:	4652      	mov	r2, sl
 800571c:	4649      	mov	r1, r9
 800571e:	4638      	mov	r0, r7
 8005720:	47c0      	blx	r8
 8005722:	3001      	adds	r0, #1
 8005724:	d103      	bne.n	800572e <_printf_common+0xb6>
 8005726:	f04f 30ff 	mov.w	r0, #4294967295
 800572a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800572e:	3501      	adds	r5, #1
 8005730:	e7c1      	b.n	80056b6 <_printf_common+0x3e>
 8005732:	2030      	movs	r0, #48	; 0x30
 8005734:	18e1      	adds	r1, r4, r3
 8005736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005740:	4422      	add	r2, r4
 8005742:	3302      	adds	r3, #2
 8005744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005748:	e7c2      	b.n	80056d0 <_printf_common+0x58>
 800574a:	2301      	movs	r3, #1
 800574c:	4622      	mov	r2, r4
 800574e:	4649      	mov	r1, r9
 8005750:	4638      	mov	r0, r7
 8005752:	47c0      	blx	r8
 8005754:	3001      	adds	r0, #1
 8005756:	d0e6      	beq.n	8005726 <_printf_common+0xae>
 8005758:	3601      	adds	r6, #1
 800575a:	e7d9      	b.n	8005710 <_printf_common+0x98>

0800575c <_printf_i>:
 800575c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	7e0f      	ldrb	r7, [r1, #24]
 8005762:	4691      	mov	r9, r2
 8005764:	2f78      	cmp	r7, #120	; 0x78
 8005766:	4680      	mov	r8, r0
 8005768:	460c      	mov	r4, r1
 800576a:	469a      	mov	sl, r3
 800576c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800576e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005772:	d807      	bhi.n	8005784 <_printf_i+0x28>
 8005774:	2f62      	cmp	r7, #98	; 0x62
 8005776:	d80a      	bhi.n	800578e <_printf_i+0x32>
 8005778:	2f00      	cmp	r7, #0
 800577a:	f000 80d5 	beq.w	8005928 <_printf_i+0x1cc>
 800577e:	2f58      	cmp	r7, #88	; 0x58
 8005780:	f000 80c1 	beq.w	8005906 <_printf_i+0x1aa>
 8005784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800578c:	e03a      	b.n	8005804 <_printf_i+0xa8>
 800578e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005792:	2b15      	cmp	r3, #21
 8005794:	d8f6      	bhi.n	8005784 <_printf_i+0x28>
 8005796:	a101      	add	r1, pc, #4	; (adr r1, 800579c <_printf_i+0x40>)
 8005798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800579c:	080057f5 	.word	0x080057f5
 80057a0:	08005809 	.word	0x08005809
 80057a4:	08005785 	.word	0x08005785
 80057a8:	08005785 	.word	0x08005785
 80057ac:	08005785 	.word	0x08005785
 80057b0:	08005785 	.word	0x08005785
 80057b4:	08005809 	.word	0x08005809
 80057b8:	08005785 	.word	0x08005785
 80057bc:	08005785 	.word	0x08005785
 80057c0:	08005785 	.word	0x08005785
 80057c4:	08005785 	.word	0x08005785
 80057c8:	0800590f 	.word	0x0800590f
 80057cc:	08005835 	.word	0x08005835
 80057d0:	080058c9 	.word	0x080058c9
 80057d4:	08005785 	.word	0x08005785
 80057d8:	08005785 	.word	0x08005785
 80057dc:	08005931 	.word	0x08005931
 80057e0:	08005785 	.word	0x08005785
 80057e4:	08005835 	.word	0x08005835
 80057e8:	08005785 	.word	0x08005785
 80057ec:	08005785 	.word	0x08005785
 80057f0:	080058d1 	.word	0x080058d1
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	1d1a      	adds	r2, r3, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	602a      	str	r2, [r5, #0]
 80057fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005804:	2301      	movs	r3, #1
 8005806:	e0a0      	b.n	800594a <_printf_i+0x1ee>
 8005808:	6820      	ldr	r0, [r4, #0]
 800580a:	682b      	ldr	r3, [r5, #0]
 800580c:	0607      	lsls	r7, r0, #24
 800580e:	f103 0104 	add.w	r1, r3, #4
 8005812:	6029      	str	r1, [r5, #0]
 8005814:	d501      	bpl.n	800581a <_printf_i+0xbe>
 8005816:	681e      	ldr	r6, [r3, #0]
 8005818:	e003      	b.n	8005822 <_printf_i+0xc6>
 800581a:	0646      	lsls	r6, r0, #25
 800581c:	d5fb      	bpl.n	8005816 <_printf_i+0xba>
 800581e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005822:	2e00      	cmp	r6, #0
 8005824:	da03      	bge.n	800582e <_printf_i+0xd2>
 8005826:	232d      	movs	r3, #45	; 0x2d
 8005828:	4276      	negs	r6, r6
 800582a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800582e:	230a      	movs	r3, #10
 8005830:	4859      	ldr	r0, [pc, #356]	; (8005998 <_printf_i+0x23c>)
 8005832:	e012      	b.n	800585a <_printf_i+0xfe>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	6820      	ldr	r0, [r4, #0]
 8005838:	1d19      	adds	r1, r3, #4
 800583a:	6029      	str	r1, [r5, #0]
 800583c:	0605      	lsls	r5, r0, #24
 800583e:	d501      	bpl.n	8005844 <_printf_i+0xe8>
 8005840:	681e      	ldr	r6, [r3, #0]
 8005842:	e002      	b.n	800584a <_printf_i+0xee>
 8005844:	0641      	lsls	r1, r0, #25
 8005846:	d5fb      	bpl.n	8005840 <_printf_i+0xe4>
 8005848:	881e      	ldrh	r6, [r3, #0]
 800584a:	2f6f      	cmp	r7, #111	; 0x6f
 800584c:	bf0c      	ite	eq
 800584e:	2308      	moveq	r3, #8
 8005850:	230a      	movne	r3, #10
 8005852:	4851      	ldr	r0, [pc, #324]	; (8005998 <_printf_i+0x23c>)
 8005854:	2100      	movs	r1, #0
 8005856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800585a:	6865      	ldr	r5, [r4, #4]
 800585c:	2d00      	cmp	r5, #0
 800585e:	bfa8      	it	ge
 8005860:	6821      	ldrge	r1, [r4, #0]
 8005862:	60a5      	str	r5, [r4, #8]
 8005864:	bfa4      	itt	ge
 8005866:	f021 0104 	bicge.w	r1, r1, #4
 800586a:	6021      	strge	r1, [r4, #0]
 800586c:	b90e      	cbnz	r6, 8005872 <_printf_i+0x116>
 800586e:	2d00      	cmp	r5, #0
 8005870:	d04b      	beq.n	800590a <_printf_i+0x1ae>
 8005872:	4615      	mov	r5, r2
 8005874:	fbb6 f1f3 	udiv	r1, r6, r3
 8005878:	fb03 6711 	mls	r7, r3, r1, r6
 800587c:	5dc7      	ldrb	r7, [r0, r7]
 800587e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005882:	4637      	mov	r7, r6
 8005884:	42bb      	cmp	r3, r7
 8005886:	460e      	mov	r6, r1
 8005888:	d9f4      	bls.n	8005874 <_printf_i+0x118>
 800588a:	2b08      	cmp	r3, #8
 800588c:	d10b      	bne.n	80058a6 <_printf_i+0x14a>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	07de      	lsls	r6, r3, #31
 8005892:	d508      	bpl.n	80058a6 <_printf_i+0x14a>
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	6861      	ldr	r1, [r4, #4]
 8005898:	4299      	cmp	r1, r3
 800589a:	bfde      	ittt	le
 800589c:	2330      	movle	r3, #48	; 0x30
 800589e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058a6:	1b52      	subs	r2, r2, r5
 80058a8:	6122      	str	r2, [r4, #16]
 80058aa:	464b      	mov	r3, r9
 80058ac:	4621      	mov	r1, r4
 80058ae:	4640      	mov	r0, r8
 80058b0:	f8cd a000 	str.w	sl, [sp]
 80058b4:	aa03      	add	r2, sp, #12
 80058b6:	f7ff fedf 	bl	8005678 <_printf_common>
 80058ba:	3001      	adds	r0, #1
 80058bc:	d14a      	bne.n	8005954 <_printf_i+0x1f8>
 80058be:	f04f 30ff 	mov.w	r0, #4294967295
 80058c2:	b004      	add	sp, #16
 80058c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	f043 0320 	orr.w	r3, r3, #32
 80058ce:	6023      	str	r3, [r4, #0]
 80058d0:	2778      	movs	r7, #120	; 0x78
 80058d2:	4832      	ldr	r0, [pc, #200]	; (800599c <_printf_i+0x240>)
 80058d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	6829      	ldr	r1, [r5, #0]
 80058dc:	061f      	lsls	r7, r3, #24
 80058de:	f851 6b04 	ldr.w	r6, [r1], #4
 80058e2:	d402      	bmi.n	80058ea <_printf_i+0x18e>
 80058e4:	065f      	lsls	r7, r3, #25
 80058e6:	bf48      	it	mi
 80058e8:	b2b6      	uxthmi	r6, r6
 80058ea:	07df      	lsls	r7, r3, #31
 80058ec:	bf48      	it	mi
 80058ee:	f043 0320 	orrmi.w	r3, r3, #32
 80058f2:	6029      	str	r1, [r5, #0]
 80058f4:	bf48      	it	mi
 80058f6:	6023      	strmi	r3, [r4, #0]
 80058f8:	b91e      	cbnz	r6, 8005902 <_printf_i+0x1a6>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	f023 0320 	bic.w	r3, r3, #32
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	2310      	movs	r3, #16
 8005904:	e7a6      	b.n	8005854 <_printf_i+0xf8>
 8005906:	4824      	ldr	r0, [pc, #144]	; (8005998 <_printf_i+0x23c>)
 8005908:	e7e4      	b.n	80058d4 <_printf_i+0x178>
 800590a:	4615      	mov	r5, r2
 800590c:	e7bd      	b.n	800588a <_printf_i+0x12e>
 800590e:	682b      	ldr	r3, [r5, #0]
 8005910:	6826      	ldr	r6, [r4, #0]
 8005912:	1d18      	adds	r0, r3, #4
 8005914:	6961      	ldr	r1, [r4, #20]
 8005916:	6028      	str	r0, [r5, #0]
 8005918:	0635      	lsls	r5, r6, #24
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	d501      	bpl.n	8005922 <_printf_i+0x1c6>
 800591e:	6019      	str	r1, [r3, #0]
 8005920:	e002      	b.n	8005928 <_printf_i+0x1cc>
 8005922:	0670      	lsls	r0, r6, #25
 8005924:	d5fb      	bpl.n	800591e <_printf_i+0x1c2>
 8005926:	8019      	strh	r1, [r3, #0]
 8005928:	2300      	movs	r3, #0
 800592a:	4615      	mov	r5, r2
 800592c:	6123      	str	r3, [r4, #16]
 800592e:	e7bc      	b.n	80058aa <_printf_i+0x14e>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	2100      	movs	r1, #0
 8005934:	1d1a      	adds	r2, r3, #4
 8005936:	602a      	str	r2, [r5, #0]
 8005938:	681d      	ldr	r5, [r3, #0]
 800593a:	6862      	ldr	r2, [r4, #4]
 800593c:	4628      	mov	r0, r5
 800593e:	f000 fa17 	bl	8005d70 <memchr>
 8005942:	b108      	cbz	r0, 8005948 <_printf_i+0x1ec>
 8005944:	1b40      	subs	r0, r0, r5
 8005946:	6060      	str	r0, [r4, #4]
 8005948:	6863      	ldr	r3, [r4, #4]
 800594a:	6123      	str	r3, [r4, #16]
 800594c:	2300      	movs	r3, #0
 800594e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005952:	e7aa      	b.n	80058aa <_printf_i+0x14e>
 8005954:	462a      	mov	r2, r5
 8005956:	4649      	mov	r1, r9
 8005958:	4640      	mov	r0, r8
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	47d0      	blx	sl
 800595e:	3001      	adds	r0, #1
 8005960:	d0ad      	beq.n	80058be <_printf_i+0x162>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	079b      	lsls	r3, r3, #30
 8005966:	d413      	bmi.n	8005990 <_printf_i+0x234>
 8005968:	68e0      	ldr	r0, [r4, #12]
 800596a:	9b03      	ldr	r3, [sp, #12]
 800596c:	4298      	cmp	r0, r3
 800596e:	bfb8      	it	lt
 8005970:	4618      	movlt	r0, r3
 8005972:	e7a6      	b.n	80058c2 <_printf_i+0x166>
 8005974:	2301      	movs	r3, #1
 8005976:	4632      	mov	r2, r6
 8005978:	4649      	mov	r1, r9
 800597a:	4640      	mov	r0, r8
 800597c:	47d0      	blx	sl
 800597e:	3001      	adds	r0, #1
 8005980:	d09d      	beq.n	80058be <_printf_i+0x162>
 8005982:	3501      	adds	r5, #1
 8005984:	68e3      	ldr	r3, [r4, #12]
 8005986:	9903      	ldr	r1, [sp, #12]
 8005988:	1a5b      	subs	r3, r3, r1
 800598a:	42ab      	cmp	r3, r5
 800598c:	dcf2      	bgt.n	8005974 <_printf_i+0x218>
 800598e:	e7eb      	b.n	8005968 <_printf_i+0x20c>
 8005990:	2500      	movs	r5, #0
 8005992:	f104 0619 	add.w	r6, r4, #25
 8005996:	e7f5      	b.n	8005984 <_printf_i+0x228>
 8005998:	08006e97 	.word	0x08006e97
 800599c:	08006ea8 	.word	0x08006ea8

080059a0 <_scanf_chars>:
 80059a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059a4:	4615      	mov	r5, r2
 80059a6:	688a      	ldr	r2, [r1, #8]
 80059a8:	4680      	mov	r8, r0
 80059aa:	460c      	mov	r4, r1
 80059ac:	b932      	cbnz	r2, 80059bc <_scanf_chars+0x1c>
 80059ae:	698a      	ldr	r2, [r1, #24]
 80059b0:	2a00      	cmp	r2, #0
 80059b2:	bf0c      	ite	eq
 80059b4:	2201      	moveq	r2, #1
 80059b6:	f04f 32ff 	movne.w	r2, #4294967295
 80059ba:	608a      	str	r2, [r1, #8]
 80059bc:	2700      	movs	r7, #0
 80059be:	6822      	ldr	r2, [r4, #0]
 80059c0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005a50 <_scanf_chars+0xb0>
 80059c4:	06d1      	lsls	r1, r2, #27
 80059c6:	bf5f      	itttt	pl
 80059c8:	681a      	ldrpl	r2, [r3, #0]
 80059ca:	1d11      	addpl	r1, r2, #4
 80059cc:	6019      	strpl	r1, [r3, #0]
 80059ce:	6816      	ldrpl	r6, [r2, #0]
 80059d0:	69a0      	ldr	r0, [r4, #24]
 80059d2:	b188      	cbz	r0, 80059f8 <_scanf_chars+0x58>
 80059d4:	2801      	cmp	r0, #1
 80059d6:	d107      	bne.n	80059e8 <_scanf_chars+0x48>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	781a      	ldrb	r2, [r3, #0]
 80059dc:	6963      	ldr	r3, [r4, #20]
 80059de:	5c9b      	ldrb	r3, [r3, r2]
 80059e0:	b953      	cbnz	r3, 80059f8 <_scanf_chars+0x58>
 80059e2:	2f00      	cmp	r7, #0
 80059e4:	d031      	beq.n	8005a4a <_scanf_chars+0xaa>
 80059e6:	e022      	b.n	8005a2e <_scanf_chars+0x8e>
 80059e8:	2802      	cmp	r0, #2
 80059ea:	d120      	bne.n	8005a2e <_scanf_chars+0x8e>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80059f4:	071b      	lsls	r3, r3, #28
 80059f6:	d41a      	bmi.n	8005a2e <_scanf_chars+0x8e>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	3701      	adds	r7, #1
 80059fc:	06da      	lsls	r2, r3, #27
 80059fe:	bf5e      	ittt	pl
 8005a00:	682b      	ldrpl	r3, [r5, #0]
 8005a02:	781b      	ldrbpl	r3, [r3, #0]
 8005a04:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005a08:	682a      	ldr	r2, [r5, #0]
 8005a0a:	686b      	ldr	r3, [r5, #4]
 8005a0c:	3201      	adds	r2, #1
 8005a0e:	602a      	str	r2, [r5, #0]
 8005a10:	68a2      	ldr	r2, [r4, #8]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	3a01      	subs	r2, #1
 8005a16:	606b      	str	r3, [r5, #4]
 8005a18:	60a2      	str	r2, [r4, #8]
 8005a1a:	b142      	cbz	r2, 8005a2e <_scanf_chars+0x8e>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	dcd7      	bgt.n	80059d0 <_scanf_chars+0x30>
 8005a20:	4629      	mov	r1, r5
 8005a22:	4640      	mov	r0, r8
 8005a24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a28:	4798      	blx	r3
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d0d0      	beq.n	80059d0 <_scanf_chars+0x30>
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	f013 0310 	ands.w	r3, r3, #16
 8005a34:	d105      	bne.n	8005a42 <_scanf_chars+0xa2>
 8005a36:	68e2      	ldr	r2, [r4, #12]
 8005a38:	3201      	adds	r2, #1
 8005a3a:	60e2      	str	r2, [r4, #12]
 8005a3c:	69a2      	ldr	r2, [r4, #24]
 8005a3e:	b102      	cbz	r2, 8005a42 <_scanf_chars+0xa2>
 8005a40:	7033      	strb	r3, [r6, #0]
 8005a42:	2000      	movs	r0, #0
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	443b      	add	r3, r7
 8005a48:	6123      	str	r3, [r4, #16]
 8005a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a4e:	bf00      	nop
 8005a50:	08006ed5 	.word	0x08006ed5

08005a54 <_scanf_i>:
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	460c      	mov	r4, r1
 8005a5a:	4698      	mov	r8, r3
 8005a5c:	4b72      	ldr	r3, [pc, #456]	; (8005c28 <_scanf_i+0x1d4>)
 8005a5e:	b087      	sub	sp, #28
 8005a60:	4682      	mov	sl, r0
 8005a62:	4616      	mov	r6, r2
 8005a64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a68:	ab03      	add	r3, sp, #12
 8005a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a6e:	4b6f      	ldr	r3, [pc, #444]	; (8005c2c <_scanf_i+0x1d8>)
 8005a70:	69a1      	ldr	r1, [r4, #24]
 8005a72:	4a6f      	ldr	r2, [pc, #444]	; (8005c30 <_scanf_i+0x1dc>)
 8005a74:	4627      	mov	r7, r4
 8005a76:	2903      	cmp	r1, #3
 8005a78:	bf18      	it	ne
 8005a7a:	461a      	movne	r2, r3
 8005a7c:	68a3      	ldr	r3, [r4, #8]
 8005a7e:	9201      	str	r2, [sp, #4]
 8005a80:	1e5a      	subs	r2, r3, #1
 8005a82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005a86:	bf81      	itttt	hi
 8005a88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a8c:	eb03 0905 	addhi.w	r9, r3, r5
 8005a90:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a94:	60a3      	strhi	r3, [r4, #8]
 8005a96:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005a9a:	bf98      	it	ls
 8005a9c:	f04f 0900 	movls.w	r9, #0
 8005aa0:	463d      	mov	r5, r7
 8005aa2:	f04f 0b00 	mov.w	fp, #0
 8005aa6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005aaa:	6023      	str	r3, [r4, #0]
 8005aac:	6831      	ldr	r1, [r6, #0]
 8005aae:	ab03      	add	r3, sp, #12
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	7809      	ldrb	r1, [r1, #0]
 8005ab4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005ab8:	f000 f95a 	bl	8005d70 <memchr>
 8005abc:	b328      	cbz	r0, 8005b0a <_scanf_i+0xb6>
 8005abe:	f1bb 0f01 	cmp.w	fp, #1
 8005ac2:	d159      	bne.n	8005b78 <_scanf_i+0x124>
 8005ac4:	6862      	ldr	r2, [r4, #4]
 8005ac6:	b92a      	cbnz	r2, 8005ad4 <_scanf_i+0x80>
 8005ac8:	2308      	movs	r3, #8
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	6063      	str	r3, [r4, #4]
 8005ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad2:	6022      	str	r2, [r4, #0]
 8005ad4:	6822      	ldr	r2, [r4, #0]
 8005ad6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005ada:	6022      	str	r2, [r4, #0]
 8005adc:	68a2      	ldr	r2, [r4, #8]
 8005ade:	1e51      	subs	r1, r2, #1
 8005ae0:	60a1      	str	r1, [r4, #8]
 8005ae2:	b192      	cbz	r2, 8005b0a <_scanf_i+0xb6>
 8005ae4:	6832      	ldr	r2, [r6, #0]
 8005ae6:	1c51      	adds	r1, r2, #1
 8005ae8:	6031      	str	r1, [r6, #0]
 8005aea:	7812      	ldrb	r2, [r2, #0]
 8005aec:	f805 2b01 	strb.w	r2, [r5], #1
 8005af0:	6872      	ldr	r2, [r6, #4]
 8005af2:	3a01      	subs	r2, #1
 8005af4:	2a00      	cmp	r2, #0
 8005af6:	6072      	str	r2, [r6, #4]
 8005af8:	dc07      	bgt.n	8005b0a <_scanf_i+0xb6>
 8005afa:	4631      	mov	r1, r6
 8005afc:	4650      	mov	r0, sl
 8005afe:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005b02:	4790      	blx	r2
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f040 8085 	bne.w	8005c14 <_scanf_i+0x1c0>
 8005b0a:	f10b 0b01 	add.w	fp, fp, #1
 8005b0e:	f1bb 0f03 	cmp.w	fp, #3
 8005b12:	d1cb      	bne.n	8005aac <_scanf_i+0x58>
 8005b14:	6863      	ldr	r3, [r4, #4]
 8005b16:	b90b      	cbnz	r3, 8005b1c <_scanf_i+0xc8>
 8005b18:	230a      	movs	r3, #10
 8005b1a:	6063      	str	r3, [r4, #4]
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	4945      	ldr	r1, [pc, #276]	; (8005c34 <_scanf_i+0x1e0>)
 8005b20:	6960      	ldr	r0, [r4, #20]
 8005b22:	1ac9      	subs	r1, r1, r3
 8005b24:	f000 f888 	bl	8005c38 <__sccl>
 8005b28:	f04f 0b00 	mov.w	fp, #0
 8005b2c:	68a3      	ldr	r3, [r4, #8]
 8005b2e:	6822      	ldr	r2, [r4, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d03d      	beq.n	8005bb0 <_scanf_i+0x15c>
 8005b34:	6831      	ldr	r1, [r6, #0]
 8005b36:	6960      	ldr	r0, [r4, #20]
 8005b38:	f891 c000 	ldrb.w	ip, [r1]
 8005b3c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d035      	beq.n	8005bb0 <_scanf_i+0x15c>
 8005b44:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005b48:	d124      	bne.n	8005b94 <_scanf_i+0x140>
 8005b4a:	0510      	lsls	r0, r2, #20
 8005b4c:	d522      	bpl.n	8005b94 <_scanf_i+0x140>
 8005b4e:	f10b 0b01 	add.w	fp, fp, #1
 8005b52:	f1b9 0f00 	cmp.w	r9, #0
 8005b56:	d003      	beq.n	8005b60 <_scanf_i+0x10c>
 8005b58:	3301      	adds	r3, #1
 8005b5a:	f109 39ff 	add.w	r9, r9, #4294967295
 8005b5e:	60a3      	str	r3, [r4, #8]
 8005b60:	6873      	ldr	r3, [r6, #4]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	6073      	str	r3, [r6, #4]
 8005b68:	dd1b      	ble.n	8005ba2 <_scanf_i+0x14e>
 8005b6a:	6833      	ldr	r3, [r6, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	6033      	str	r3, [r6, #0]
 8005b70:	68a3      	ldr	r3, [r4, #8]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	60a3      	str	r3, [r4, #8]
 8005b76:	e7d9      	b.n	8005b2c <_scanf_i+0xd8>
 8005b78:	f1bb 0f02 	cmp.w	fp, #2
 8005b7c:	d1ae      	bne.n	8005adc <_scanf_i+0x88>
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005b84:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005b88:	d1bf      	bne.n	8005b0a <_scanf_i+0xb6>
 8005b8a:	2310      	movs	r3, #16
 8005b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b90:	6063      	str	r3, [r4, #4]
 8005b92:	e7a2      	b.n	8005ada <_scanf_i+0x86>
 8005b94:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005b98:	6022      	str	r2, [r4, #0]
 8005b9a:	780b      	ldrb	r3, [r1, #0]
 8005b9c:	f805 3b01 	strb.w	r3, [r5], #1
 8005ba0:	e7de      	b.n	8005b60 <_scanf_i+0x10c>
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4650      	mov	r0, sl
 8005ba6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005baa:	4798      	blx	r3
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d0df      	beq.n	8005b70 <_scanf_i+0x11c>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	05d9      	lsls	r1, r3, #23
 8005bb4:	d50d      	bpl.n	8005bd2 <_scanf_i+0x17e>
 8005bb6:	42bd      	cmp	r5, r7
 8005bb8:	d909      	bls.n	8005bce <_scanf_i+0x17a>
 8005bba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005bbe:	4632      	mov	r2, r6
 8005bc0:	4650      	mov	r0, sl
 8005bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bc6:	f105 39ff 	add.w	r9, r5, #4294967295
 8005bca:	4798      	blx	r3
 8005bcc:	464d      	mov	r5, r9
 8005bce:	42bd      	cmp	r5, r7
 8005bd0:	d028      	beq.n	8005c24 <_scanf_i+0x1d0>
 8005bd2:	6822      	ldr	r2, [r4, #0]
 8005bd4:	f012 0210 	ands.w	r2, r2, #16
 8005bd8:	d113      	bne.n	8005c02 <_scanf_i+0x1ae>
 8005bda:	702a      	strb	r2, [r5, #0]
 8005bdc:	4639      	mov	r1, r7
 8005bde:	6863      	ldr	r3, [r4, #4]
 8005be0:	4650      	mov	r0, sl
 8005be2:	9e01      	ldr	r6, [sp, #4]
 8005be4:	47b0      	blx	r6
 8005be6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bea:	6821      	ldr	r1, [r4, #0]
 8005bec:	1d1a      	adds	r2, r3, #4
 8005bee:	f8c8 2000 	str.w	r2, [r8]
 8005bf2:	f011 0f20 	tst.w	r1, #32
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	d00f      	beq.n	8005c1a <_scanf_i+0x1c6>
 8005bfa:	6018      	str	r0, [r3, #0]
 8005bfc:	68e3      	ldr	r3, [r4, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60e3      	str	r3, [r4, #12]
 8005c02:	2000      	movs	r0, #0
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	1bed      	subs	r5, r5, r7
 8005c08:	445d      	add	r5, fp
 8005c0a:	442b      	add	r3, r5
 8005c0c:	6123      	str	r3, [r4, #16]
 8005c0e:	b007      	add	sp, #28
 8005c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c14:	f04f 0b00 	mov.w	fp, #0
 8005c18:	e7ca      	b.n	8005bb0 <_scanf_i+0x15c>
 8005c1a:	07ca      	lsls	r2, r1, #31
 8005c1c:	bf4c      	ite	mi
 8005c1e:	8018      	strhmi	r0, [r3, #0]
 8005c20:	6018      	strpl	r0, [r3, #0]
 8005c22:	e7eb      	b.n	8005bfc <_scanf_i+0x1a8>
 8005c24:	2001      	movs	r0, #1
 8005c26:	e7f2      	b.n	8005c0e <_scanf_i+0x1ba>
 8005c28:	08006e50 	.word	0x08006e50
 8005c2c:	08005fed 	.word	0x08005fed
 8005c30:	08005f05 	.word	0x08005f05
 8005c34:	08006ec9 	.word	0x08006ec9

08005c38 <__sccl>:
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	780b      	ldrb	r3, [r1, #0]
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	2b5e      	cmp	r3, #94	; 0x5e
 8005c40:	bf0b      	itete	eq
 8005c42:	784b      	ldrbeq	r3, [r1, #1]
 8005c44:	1c4a      	addne	r2, r1, #1
 8005c46:	1c8a      	addeq	r2, r1, #2
 8005c48:	2100      	movne	r1, #0
 8005c4a:	bf08      	it	eq
 8005c4c:	2101      	moveq	r1, #1
 8005c4e:	3801      	subs	r0, #1
 8005c50:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005c54:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005c58:	42a8      	cmp	r0, r5
 8005c5a:	d1fb      	bne.n	8005c54 <__sccl+0x1c>
 8005c5c:	b90b      	cbnz	r3, 8005c62 <__sccl+0x2a>
 8005c5e:	1e50      	subs	r0, r2, #1
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
 8005c62:	f081 0101 	eor.w	r1, r1, #1
 8005c66:	4610      	mov	r0, r2
 8005c68:	54e1      	strb	r1, [r4, r3]
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005c70:	2d2d      	cmp	r5, #45	; 0x2d
 8005c72:	d005      	beq.n	8005c80 <__sccl+0x48>
 8005c74:	2d5d      	cmp	r5, #93	; 0x5d
 8005c76:	d016      	beq.n	8005ca6 <__sccl+0x6e>
 8005c78:	2d00      	cmp	r5, #0
 8005c7a:	d0f1      	beq.n	8005c60 <__sccl+0x28>
 8005c7c:	462b      	mov	r3, r5
 8005c7e:	e7f2      	b.n	8005c66 <__sccl+0x2e>
 8005c80:	7846      	ldrb	r6, [r0, #1]
 8005c82:	2e5d      	cmp	r6, #93	; 0x5d
 8005c84:	d0fa      	beq.n	8005c7c <__sccl+0x44>
 8005c86:	42b3      	cmp	r3, r6
 8005c88:	dcf8      	bgt.n	8005c7c <__sccl+0x44>
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	3002      	adds	r0, #2
 8005c8e:	3201      	adds	r2, #1
 8005c90:	4296      	cmp	r6, r2
 8005c92:	54a1      	strb	r1, [r4, r2]
 8005c94:	dcfb      	bgt.n	8005c8e <__sccl+0x56>
 8005c96:	1af2      	subs	r2, r6, r3
 8005c98:	3a01      	subs	r2, #1
 8005c9a:	42b3      	cmp	r3, r6
 8005c9c:	bfa8      	it	ge
 8005c9e:	2200      	movge	r2, #0
 8005ca0:	1c5d      	adds	r5, r3, #1
 8005ca2:	18ab      	adds	r3, r5, r2
 8005ca4:	e7e1      	b.n	8005c6a <__sccl+0x32>
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	e7da      	b.n	8005c60 <__sccl+0x28>

08005caa <__submore>:
 8005caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cae:	460c      	mov	r4, r1
 8005cb0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005cb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cb6:	4299      	cmp	r1, r3
 8005cb8:	d11b      	bne.n	8005cf2 <__submore+0x48>
 8005cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005cbe:	f7ff f925 	bl	8004f0c <_malloc_r>
 8005cc2:	b918      	cbnz	r0, 8005ccc <__submore+0x22>
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cd0:	63a3      	str	r3, [r4, #56]	; 0x38
 8005cd2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005cd6:	6360      	str	r0, [r4, #52]	; 0x34
 8005cd8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005cdc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005ce0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005ce4:	7043      	strb	r3, [r0, #1]
 8005ce6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005cea:	7003      	strb	r3, [r0, #0]
 8005cec:	6020      	str	r0, [r4, #0]
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e7ea      	b.n	8005cc8 <__submore+0x1e>
 8005cf2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005cf4:	0077      	lsls	r7, r6, #1
 8005cf6:	463a      	mov	r2, r7
 8005cf8:	f000 f856 	bl	8005da8 <_realloc_r>
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d0e0      	beq.n	8005cc4 <__submore+0x1a>
 8005d02:	eb00 0806 	add.w	r8, r0, r6
 8005d06:	4601      	mov	r1, r0
 8005d08:	4632      	mov	r2, r6
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	f000 f83e 	bl	8005d8c <memcpy>
 8005d10:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005d14:	f8c4 8000 	str.w	r8, [r4]
 8005d18:	e7e9      	b.n	8005cee <__submore+0x44>

08005d1a <memmove>:
 8005d1a:	4288      	cmp	r0, r1
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	eb01 0402 	add.w	r4, r1, r2
 8005d22:	d902      	bls.n	8005d2a <memmove+0x10>
 8005d24:	4284      	cmp	r4, r0
 8005d26:	4623      	mov	r3, r4
 8005d28:	d807      	bhi.n	8005d3a <memmove+0x20>
 8005d2a:	1e43      	subs	r3, r0, #1
 8005d2c:	42a1      	cmp	r1, r4
 8005d2e:	d008      	beq.n	8005d42 <memmove+0x28>
 8005d30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d34:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d38:	e7f8      	b.n	8005d2c <memmove+0x12>
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	4402      	add	r2, r0
 8005d3e:	428a      	cmp	r2, r1
 8005d40:	d100      	bne.n	8005d44 <memmove+0x2a>
 8005d42:	bd10      	pop	{r4, pc}
 8005d44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d48:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d4c:	e7f7      	b.n	8005d3e <memmove+0x24>
	...

08005d50 <_sbrk_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	2300      	movs	r3, #0
 8005d54:	4d05      	ldr	r5, [pc, #20]	; (8005d6c <_sbrk_r+0x1c>)
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	602b      	str	r3, [r5, #0]
 8005d5c:	f7fc f9b0 	bl	80020c0 <_sbrk>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_sbrk_r+0x1a>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_sbrk_r+0x1a>
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	20000454 	.word	0x20000454

08005d70 <memchr>:
 8005d70:	4603      	mov	r3, r0
 8005d72:	b510      	push	{r4, lr}
 8005d74:	b2c9      	uxtb	r1, r1
 8005d76:	4402      	add	r2, r0
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	d101      	bne.n	8005d82 <memchr+0x12>
 8005d7e:	2000      	movs	r0, #0
 8005d80:	e003      	b.n	8005d8a <memchr+0x1a>
 8005d82:	7804      	ldrb	r4, [r0, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	428c      	cmp	r4, r1
 8005d88:	d1f6      	bne.n	8005d78 <memchr+0x8>
 8005d8a:	bd10      	pop	{r4, pc}

08005d8c <memcpy>:
 8005d8c:	440a      	add	r2, r1
 8005d8e:	4291      	cmp	r1, r2
 8005d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d94:	d100      	bne.n	8005d98 <memcpy+0xc>
 8005d96:	4770      	bx	lr
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d9e:	4291      	cmp	r1, r2
 8005da0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005da4:	d1f9      	bne.n	8005d9a <memcpy+0xe>
 8005da6:	bd10      	pop	{r4, pc}

08005da8 <_realloc_r>:
 8005da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dac:	4680      	mov	r8, r0
 8005dae:	4614      	mov	r4, r2
 8005db0:	460e      	mov	r6, r1
 8005db2:	b921      	cbnz	r1, 8005dbe <_realloc_r+0x16>
 8005db4:	4611      	mov	r1, r2
 8005db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dba:	f7ff b8a7 	b.w	8004f0c <_malloc_r>
 8005dbe:	b92a      	cbnz	r2, 8005dcc <_realloc_r+0x24>
 8005dc0:	f7ff f83c 	bl	8004e3c <_free_r>
 8005dc4:	4625      	mov	r5, r4
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dcc:	f000 f910 	bl	8005ff0 <_malloc_usable_size_r>
 8005dd0:	4284      	cmp	r4, r0
 8005dd2:	4607      	mov	r7, r0
 8005dd4:	d802      	bhi.n	8005ddc <_realloc_r+0x34>
 8005dd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dda:	d812      	bhi.n	8005e02 <_realloc_r+0x5a>
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4640      	mov	r0, r8
 8005de0:	f7ff f894 	bl	8004f0c <_malloc_r>
 8005de4:	4605      	mov	r5, r0
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0ed      	beq.n	8005dc6 <_realloc_r+0x1e>
 8005dea:	42bc      	cmp	r4, r7
 8005dec:	4622      	mov	r2, r4
 8005dee:	4631      	mov	r1, r6
 8005df0:	bf28      	it	cs
 8005df2:	463a      	movcs	r2, r7
 8005df4:	f7ff ffca 	bl	8005d8c <memcpy>
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	f7ff f81e 	bl	8004e3c <_free_r>
 8005e00:	e7e1      	b.n	8005dc6 <_realloc_r+0x1e>
 8005e02:	4635      	mov	r5, r6
 8005e04:	e7df      	b.n	8005dc6 <_realloc_r+0x1e>
	...

08005e08 <_strtol_l.constprop.0>:
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0e:	4686      	mov	lr, r0
 8005e10:	4690      	mov	r8, r2
 8005e12:	d001      	beq.n	8005e18 <_strtol_l.constprop.0+0x10>
 8005e14:	2b24      	cmp	r3, #36	; 0x24
 8005e16:	d906      	bls.n	8005e26 <_strtol_l.constprop.0+0x1e>
 8005e18:	f7fe ffe4 	bl	8004de4 <__errno>
 8005e1c:	2316      	movs	r3, #22
 8005e1e:	6003      	str	r3, [r0, #0]
 8005e20:	2000      	movs	r0, #0
 8005e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e26:	460d      	mov	r5, r1
 8005e28:	4835      	ldr	r0, [pc, #212]	; (8005f00 <_strtol_l.constprop.0+0xf8>)
 8005e2a:	462a      	mov	r2, r5
 8005e2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e30:	5d06      	ldrb	r6, [r0, r4]
 8005e32:	f016 0608 	ands.w	r6, r6, #8
 8005e36:	d1f8      	bne.n	8005e2a <_strtol_l.constprop.0+0x22>
 8005e38:	2c2d      	cmp	r4, #45	; 0x2d
 8005e3a:	d12e      	bne.n	8005e9a <_strtol_l.constprop.0+0x92>
 8005e3c:	2601      	movs	r6, #1
 8005e3e:	782c      	ldrb	r4, [r5, #0]
 8005e40:	1c95      	adds	r5, r2, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d057      	beq.n	8005ef6 <_strtol_l.constprop.0+0xee>
 8005e46:	2b10      	cmp	r3, #16
 8005e48:	d109      	bne.n	8005e5e <_strtol_l.constprop.0+0x56>
 8005e4a:	2c30      	cmp	r4, #48	; 0x30
 8005e4c:	d107      	bne.n	8005e5e <_strtol_l.constprop.0+0x56>
 8005e4e:	782a      	ldrb	r2, [r5, #0]
 8005e50:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005e54:	2a58      	cmp	r2, #88	; 0x58
 8005e56:	d149      	bne.n	8005eec <_strtol_l.constprop.0+0xe4>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	786c      	ldrb	r4, [r5, #1]
 8005e5c:	3502      	adds	r5, #2
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005e64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005e68:	fbbc f9f3 	udiv	r9, ip, r3
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005e72:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005e76:	2f09      	cmp	r7, #9
 8005e78:	d814      	bhi.n	8005ea4 <_strtol_l.constprop.0+0x9c>
 8005e7a:	463c      	mov	r4, r7
 8005e7c:	42a3      	cmp	r3, r4
 8005e7e:	dd20      	ble.n	8005ec2 <_strtol_l.constprop.0+0xba>
 8005e80:	1c57      	adds	r7, r2, #1
 8005e82:	d007      	beq.n	8005e94 <_strtol_l.constprop.0+0x8c>
 8005e84:	4581      	cmp	r9, r0
 8005e86:	d319      	bcc.n	8005ebc <_strtol_l.constprop.0+0xb4>
 8005e88:	d101      	bne.n	8005e8e <_strtol_l.constprop.0+0x86>
 8005e8a:	45a2      	cmp	sl, r4
 8005e8c:	db16      	blt.n	8005ebc <_strtol_l.constprop.0+0xb4>
 8005e8e:	2201      	movs	r2, #1
 8005e90:	fb00 4003 	mla	r0, r0, r3, r4
 8005e94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e98:	e7eb      	b.n	8005e72 <_strtol_l.constprop.0+0x6a>
 8005e9a:	2c2b      	cmp	r4, #43	; 0x2b
 8005e9c:	bf04      	itt	eq
 8005e9e:	782c      	ldrbeq	r4, [r5, #0]
 8005ea0:	1c95      	addeq	r5, r2, #2
 8005ea2:	e7ce      	b.n	8005e42 <_strtol_l.constprop.0+0x3a>
 8005ea4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005ea8:	2f19      	cmp	r7, #25
 8005eaa:	d801      	bhi.n	8005eb0 <_strtol_l.constprop.0+0xa8>
 8005eac:	3c37      	subs	r4, #55	; 0x37
 8005eae:	e7e5      	b.n	8005e7c <_strtol_l.constprop.0+0x74>
 8005eb0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005eb4:	2f19      	cmp	r7, #25
 8005eb6:	d804      	bhi.n	8005ec2 <_strtol_l.constprop.0+0xba>
 8005eb8:	3c57      	subs	r4, #87	; 0x57
 8005eba:	e7df      	b.n	8005e7c <_strtol_l.constprop.0+0x74>
 8005ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec0:	e7e8      	b.n	8005e94 <_strtol_l.constprop.0+0x8c>
 8005ec2:	1c53      	adds	r3, r2, #1
 8005ec4:	d108      	bne.n	8005ed8 <_strtol_l.constprop.0+0xd0>
 8005ec6:	2322      	movs	r3, #34	; 0x22
 8005ec8:	4660      	mov	r0, ip
 8005eca:	f8ce 3000 	str.w	r3, [lr]
 8005ece:	f1b8 0f00 	cmp.w	r8, #0
 8005ed2:	d0a6      	beq.n	8005e22 <_strtol_l.constprop.0+0x1a>
 8005ed4:	1e69      	subs	r1, r5, #1
 8005ed6:	e006      	b.n	8005ee6 <_strtol_l.constprop.0+0xde>
 8005ed8:	b106      	cbz	r6, 8005edc <_strtol_l.constprop.0+0xd4>
 8005eda:	4240      	negs	r0, r0
 8005edc:	f1b8 0f00 	cmp.w	r8, #0
 8005ee0:	d09f      	beq.n	8005e22 <_strtol_l.constprop.0+0x1a>
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	d1f6      	bne.n	8005ed4 <_strtol_l.constprop.0+0xcc>
 8005ee6:	f8c8 1000 	str.w	r1, [r8]
 8005eea:	e79a      	b.n	8005e22 <_strtol_l.constprop.0+0x1a>
 8005eec:	2430      	movs	r4, #48	; 0x30
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1b5      	bne.n	8005e5e <_strtol_l.constprop.0+0x56>
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	e7b3      	b.n	8005e5e <_strtol_l.constprop.0+0x56>
 8005ef6:	2c30      	cmp	r4, #48	; 0x30
 8005ef8:	d0a9      	beq.n	8005e4e <_strtol_l.constprop.0+0x46>
 8005efa:	230a      	movs	r3, #10
 8005efc:	e7af      	b.n	8005e5e <_strtol_l.constprop.0+0x56>
 8005efe:	bf00      	nop
 8005f00:	08006ed5 	.word	0x08006ed5

08005f04 <_strtol_r>:
 8005f04:	f7ff bf80 	b.w	8005e08 <_strtol_l.constprop.0>

08005f08 <_strtoul_l.constprop.0>:
 8005f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f0c:	4686      	mov	lr, r0
 8005f0e:	460d      	mov	r5, r1
 8005f10:	4f35      	ldr	r7, [pc, #212]	; (8005fe8 <_strtoul_l.constprop.0+0xe0>)
 8005f12:	4628      	mov	r0, r5
 8005f14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f18:	5d3e      	ldrb	r6, [r7, r4]
 8005f1a:	f016 0608 	ands.w	r6, r6, #8
 8005f1e:	d1f8      	bne.n	8005f12 <_strtoul_l.constprop.0+0xa>
 8005f20:	2c2d      	cmp	r4, #45	; 0x2d
 8005f22:	d130      	bne.n	8005f86 <_strtoul_l.constprop.0+0x7e>
 8005f24:	2601      	movs	r6, #1
 8005f26:	782c      	ldrb	r4, [r5, #0]
 8005f28:	1c85      	adds	r5, r0, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d057      	beq.n	8005fde <_strtoul_l.constprop.0+0xd6>
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d109      	bne.n	8005f46 <_strtoul_l.constprop.0+0x3e>
 8005f32:	2c30      	cmp	r4, #48	; 0x30
 8005f34:	d107      	bne.n	8005f46 <_strtoul_l.constprop.0+0x3e>
 8005f36:	7828      	ldrb	r0, [r5, #0]
 8005f38:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005f3c:	2858      	cmp	r0, #88	; 0x58
 8005f3e:	d149      	bne.n	8005fd4 <_strtoul_l.constprop.0+0xcc>
 8005f40:	2310      	movs	r3, #16
 8005f42:	786c      	ldrb	r4, [r5, #1]
 8005f44:	3502      	adds	r5, #2
 8005f46:	f04f 38ff 	mov.w	r8, #4294967295
 8005f4a:	fbb8 f8f3 	udiv	r8, r8, r3
 8005f4e:	2700      	movs	r7, #0
 8005f50:	fb03 f908 	mul.w	r9, r3, r8
 8005f54:	4638      	mov	r0, r7
 8005f56:	ea6f 0909 	mvn.w	r9, r9
 8005f5a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005f5e:	f1bc 0f09 	cmp.w	ip, #9
 8005f62:	d815      	bhi.n	8005f90 <_strtoul_l.constprop.0+0x88>
 8005f64:	4664      	mov	r4, ip
 8005f66:	42a3      	cmp	r3, r4
 8005f68:	dd23      	ble.n	8005fb2 <_strtoul_l.constprop.0+0xaa>
 8005f6a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005f6e:	d007      	beq.n	8005f80 <_strtoul_l.constprop.0+0x78>
 8005f70:	4580      	cmp	r8, r0
 8005f72:	d31b      	bcc.n	8005fac <_strtoul_l.constprop.0+0xa4>
 8005f74:	d101      	bne.n	8005f7a <_strtoul_l.constprop.0+0x72>
 8005f76:	45a1      	cmp	r9, r4
 8005f78:	db18      	blt.n	8005fac <_strtoul_l.constprop.0+0xa4>
 8005f7a:	2701      	movs	r7, #1
 8005f7c:	fb00 4003 	mla	r0, r0, r3, r4
 8005f80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f84:	e7e9      	b.n	8005f5a <_strtoul_l.constprop.0+0x52>
 8005f86:	2c2b      	cmp	r4, #43	; 0x2b
 8005f88:	bf04      	itt	eq
 8005f8a:	782c      	ldrbeq	r4, [r5, #0]
 8005f8c:	1c85      	addeq	r5, r0, #2
 8005f8e:	e7cc      	b.n	8005f2a <_strtoul_l.constprop.0+0x22>
 8005f90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005f94:	f1bc 0f19 	cmp.w	ip, #25
 8005f98:	d801      	bhi.n	8005f9e <_strtoul_l.constprop.0+0x96>
 8005f9a:	3c37      	subs	r4, #55	; 0x37
 8005f9c:	e7e3      	b.n	8005f66 <_strtoul_l.constprop.0+0x5e>
 8005f9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005fa2:	f1bc 0f19 	cmp.w	ip, #25
 8005fa6:	d804      	bhi.n	8005fb2 <_strtoul_l.constprop.0+0xaa>
 8005fa8:	3c57      	subs	r4, #87	; 0x57
 8005faa:	e7dc      	b.n	8005f66 <_strtoul_l.constprop.0+0x5e>
 8005fac:	f04f 37ff 	mov.w	r7, #4294967295
 8005fb0:	e7e6      	b.n	8005f80 <_strtoul_l.constprop.0+0x78>
 8005fb2:	1c7b      	adds	r3, r7, #1
 8005fb4:	d106      	bne.n	8005fc4 <_strtoul_l.constprop.0+0xbc>
 8005fb6:	2322      	movs	r3, #34	; 0x22
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f8ce 3000 	str.w	r3, [lr]
 8005fbe:	b932      	cbnz	r2, 8005fce <_strtoul_l.constprop.0+0xc6>
 8005fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fc4:	b106      	cbz	r6, 8005fc8 <_strtoul_l.constprop.0+0xc0>
 8005fc6:	4240      	negs	r0, r0
 8005fc8:	2a00      	cmp	r2, #0
 8005fca:	d0f9      	beq.n	8005fc0 <_strtoul_l.constprop.0+0xb8>
 8005fcc:	b107      	cbz	r7, 8005fd0 <_strtoul_l.constprop.0+0xc8>
 8005fce:	1e69      	subs	r1, r5, #1
 8005fd0:	6011      	str	r1, [r2, #0]
 8005fd2:	e7f5      	b.n	8005fc0 <_strtoul_l.constprop.0+0xb8>
 8005fd4:	2430      	movs	r4, #48	; 0x30
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1b5      	bne.n	8005f46 <_strtoul_l.constprop.0+0x3e>
 8005fda:	2308      	movs	r3, #8
 8005fdc:	e7b3      	b.n	8005f46 <_strtoul_l.constprop.0+0x3e>
 8005fde:	2c30      	cmp	r4, #48	; 0x30
 8005fe0:	d0a9      	beq.n	8005f36 <_strtoul_l.constprop.0+0x2e>
 8005fe2:	230a      	movs	r3, #10
 8005fe4:	e7af      	b.n	8005f46 <_strtoul_l.constprop.0+0x3e>
 8005fe6:	bf00      	nop
 8005fe8:	08006ed5 	.word	0x08006ed5

08005fec <_strtoul_r>:
 8005fec:	f7ff bf8c 	b.w	8005f08 <_strtoul_l.constprop.0>

08005ff0 <_malloc_usable_size_r>:
 8005ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ff4:	1f18      	subs	r0, r3, #4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bfbc      	itt	lt
 8005ffa:	580b      	ldrlt	r3, [r1, r0]
 8005ffc:	18c0      	addlt	r0, r0, r3
 8005ffe:	4770      	bx	lr

08006000 <pow>:
 8006000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006004:	4614      	mov	r4, r2
 8006006:	461d      	mov	r5, r3
 8006008:	4680      	mov	r8, r0
 800600a:	4689      	mov	r9, r1
 800600c:	f000 f868 	bl	80060e0 <__ieee754_pow>
 8006010:	4622      	mov	r2, r4
 8006012:	4606      	mov	r6, r0
 8006014:	460f      	mov	r7, r1
 8006016:	462b      	mov	r3, r5
 8006018:	4620      	mov	r0, r4
 800601a:	4629      	mov	r1, r5
 800601c:	f7fa fcf6 	bl	8000a0c <__aeabi_dcmpun>
 8006020:	bbc8      	cbnz	r0, 8006096 <pow+0x96>
 8006022:	2200      	movs	r2, #0
 8006024:	2300      	movs	r3, #0
 8006026:	4640      	mov	r0, r8
 8006028:	4649      	mov	r1, r9
 800602a:	f7fa fcbd 	bl	80009a8 <__aeabi_dcmpeq>
 800602e:	b1b8      	cbz	r0, 8006060 <pow+0x60>
 8006030:	2200      	movs	r2, #0
 8006032:	2300      	movs	r3, #0
 8006034:	4620      	mov	r0, r4
 8006036:	4629      	mov	r1, r5
 8006038:	f7fa fcb6 	bl	80009a8 <__aeabi_dcmpeq>
 800603c:	2800      	cmp	r0, #0
 800603e:	d141      	bne.n	80060c4 <pow+0xc4>
 8006040:	4620      	mov	r0, r4
 8006042:	4629      	mov	r1, r5
 8006044:	f000 f844 	bl	80060d0 <finite>
 8006048:	b328      	cbz	r0, 8006096 <pow+0x96>
 800604a:	2200      	movs	r2, #0
 800604c:	2300      	movs	r3, #0
 800604e:	4620      	mov	r0, r4
 8006050:	4629      	mov	r1, r5
 8006052:	f7fa fcb3 	bl	80009bc <__aeabi_dcmplt>
 8006056:	b1f0      	cbz	r0, 8006096 <pow+0x96>
 8006058:	f7fe fec4 	bl	8004de4 <__errno>
 800605c:	2322      	movs	r3, #34	; 0x22
 800605e:	e019      	b.n	8006094 <pow+0x94>
 8006060:	4630      	mov	r0, r6
 8006062:	4639      	mov	r1, r7
 8006064:	f000 f834 	bl	80060d0 <finite>
 8006068:	b9c8      	cbnz	r0, 800609e <pow+0x9e>
 800606a:	4640      	mov	r0, r8
 800606c:	4649      	mov	r1, r9
 800606e:	f000 f82f 	bl	80060d0 <finite>
 8006072:	b1a0      	cbz	r0, 800609e <pow+0x9e>
 8006074:	4620      	mov	r0, r4
 8006076:	4629      	mov	r1, r5
 8006078:	f000 f82a 	bl	80060d0 <finite>
 800607c:	b178      	cbz	r0, 800609e <pow+0x9e>
 800607e:	4632      	mov	r2, r6
 8006080:	463b      	mov	r3, r7
 8006082:	4630      	mov	r0, r6
 8006084:	4639      	mov	r1, r7
 8006086:	f7fa fcc1 	bl	8000a0c <__aeabi_dcmpun>
 800608a:	2800      	cmp	r0, #0
 800608c:	d0e4      	beq.n	8006058 <pow+0x58>
 800608e:	f7fe fea9 	bl	8004de4 <__errno>
 8006092:	2321      	movs	r3, #33	; 0x21
 8006094:	6003      	str	r3, [r0, #0]
 8006096:	4630      	mov	r0, r6
 8006098:	4639      	mov	r1, r7
 800609a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800609e:	2200      	movs	r2, #0
 80060a0:	2300      	movs	r3, #0
 80060a2:	4630      	mov	r0, r6
 80060a4:	4639      	mov	r1, r7
 80060a6:	f7fa fc7f 	bl	80009a8 <__aeabi_dcmpeq>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d0f3      	beq.n	8006096 <pow+0x96>
 80060ae:	4640      	mov	r0, r8
 80060b0:	4649      	mov	r1, r9
 80060b2:	f000 f80d 	bl	80060d0 <finite>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d0ed      	beq.n	8006096 <pow+0x96>
 80060ba:	4620      	mov	r0, r4
 80060bc:	4629      	mov	r1, r5
 80060be:	f000 f807 	bl	80060d0 <finite>
 80060c2:	e7c8      	b.n	8006056 <pow+0x56>
 80060c4:	2600      	movs	r6, #0
 80060c6:	4f01      	ldr	r7, [pc, #4]	; (80060cc <pow+0xcc>)
 80060c8:	e7e5      	b.n	8006096 <pow+0x96>
 80060ca:	bf00      	nop
 80060cc:	3ff00000 	.word	0x3ff00000

080060d0 <finite>:
 80060d0:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80060d4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80060d8:	0fc0      	lsrs	r0, r0, #31
 80060da:	4770      	bx	lr
 80060dc:	0000      	movs	r0, r0
	...

080060e0 <__ieee754_pow>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	b093      	sub	sp, #76	; 0x4c
 80060e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060ea:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80060ee:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80060f2:	4689      	mov	r9, r1
 80060f4:	ea56 0102 	orrs.w	r1, r6, r2
 80060f8:	4680      	mov	r8, r0
 80060fa:	d111      	bne.n	8006120 <__ieee754_pow+0x40>
 80060fc:	1803      	adds	r3, r0, r0
 80060fe:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8006102:	4152      	adcs	r2, r2
 8006104:	4299      	cmp	r1, r3
 8006106:	4b82      	ldr	r3, [pc, #520]	; (8006310 <__ieee754_pow+0x230>)
 8006108:	4193      	sbcs	r3, r2
 800610a:	f080 84ba 	bcs.w	8006a82 <__ieee754_pow+0x9a2>
 800610e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006112:	4640      	mov	r0, r8
 8006114:	4649      	mov	r1, r9
 8006116:	f7fa f829 	bl	800016c <__adddf3>
 800611a:	4683      	mov	fp, r0
 800611c:	468c      	mov	ip, r1
 800611e:	e06f      	b.n	8006200 <__ieee754_pow+0x120>
 8006120:	4b7c      	ldr	r3, [pc, #496]	; (8006314 <__ieee754_pow+0x234>)
 8006122:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006126:	429c      	cmp	r4, r3
 8006128:	464d      	mov	r5, r9
 800612a:	4682      	mov	sl, r0
 800612c:	dc06      	bgt.n	800613c <__ieee754_pow+0x5c>
 800612e:	d101      	bne.n	8006134 <__ieee754_pow+0x54>
 8006130:	2800      	cmp	r0, #0
 8006132:	d1ec      	bne.n	800610e <__ieee754_pow+0x2e>
 8006134:	429e      	cmp	r6, r3
 8006136:	dc01      	bgt.n	800613c <__ieee754_pow+0x5c>
 8006138:	d10f      	bne.n	800615a <__ieee754_pow+0x7a>
 800613a:	b172      	cbz	r2, 800615a <__ieee754_pow+0x7a>
 800613c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006140:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006144:	ea55 050a 	orrs.w	r5, r5, sl
 8006148:	d1e1      	bne.n	800610e <__ieee754_pow+0x2e>
 800614a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800614e:	18db      	adds	r3, r3, r3
 8006150:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006154:	4152      	adcs	r2, r2
 8006156:	429d      	cmp	r5, r3
 8006158:	e7d5      	b.n	8006106 <__ieee754_pow+0x26>
 800615a:	2d00      	cmp	r5, #0
 800615c:	da39      	bge.n	80061d2 <__ieee754_pow+0xf2>
 800615e:	4b6e      	ldr	r3, [pc, #440]	; (8006318 <__ieee754_pow+0x238>)
 8006160:	429e      	cmp	r6, r3
 8006162:	dc52      	bgt.n	800620a <__ieee754_pow+0x12a>
 8006164:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006168:	429e      	cmp	r6, r3
 800616a:	f340 849d 	ble.w	8006aa8 <__ieee754_pow+0x9c8>
 800616e:	1533      	asrs	r3, r6, #20
 8006170:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006174:	2b14      	cmp	r3, #20
 8006176:	dd0f      	ble.n	8006198 <__ieee754_pow+0xb8>
 8006178:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800617c:	fa22 f103 	lsr.w	r1, r2, r3
 8006180:	fa01 f303 	lsl.w	r3, r1, r3
 8006184:	4293      	cmp	r3, r2
 8006186:	f040 848f 	bne.w	8006aa8 <__ieee754_pow+0x9c8>
 800618a:	f001 0101 	and.w	r1, r1, #1
 800618e:	f1c1 0302 	rsb	r3, r1, #2
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	b182      	cbz	r2, 80061b8 <__ieee754_pow+0xd8>
 8006196:	e05d      	b.n	8006254 <__ieee754_pow+0x174>
 8006198:	2a00      	cmp	r2, #0
 800619a:	d159      	bne.n	8006250 <__ieee754_pow+0x170>
 800619c:	f1c3 0314 	rsb	r3, r3, #20
 80061a0:	fa46 f103 	asr.w	r1, r6, r3
 80061a4:	fa01 f303 	lsl.w	r3, r1, r3
 80061a8:	42b3      	cmp	r3, r6
 80061aa:	f040 847a 	bne.w	8006aa2 <__ieee754_pow+0x9c2>
 80061ae:	f001 0101 	and.w	r1, r1, #1
 80061b2:	f1c1 0302 	rsb	r3, r1, #2
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	4b58      	ldr	r3, [pc, #352]	; (800631c <__ieee754_pow+0x23c>)
 80061ba:	429e      	cmp	r6, r3
 80061bc:	d132      	bne.n	8006224 <__ieee754_pow+0x144>
 80061be:	2f00      	cmp	r7, #0
 80061c0:	f280 846b 	bge.w	8006a9a <__ieee754_pow+0x9ba>
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	2000      	movs	r0, #0
 80061ca:	4954      	ldr	r1, [pc, #336]	; (800631c <__ieee754_pow+0x23c>)
 80061cc:	f7fa faae 	bl	800072c <__aeabi_ddiv>
 80061d0:	e7a3      	b.n	800611a <__ieee754_pow+0x3a>
 80061d2:	2300      	movs	r3, #0
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	2a00      	cmp	r2, #0
 80061d8:	d13c      	bne.n	8006254 <__ieee754_pow+0x174>
 80061da:	4b4e      	ldr	r3, [pc, #312]	; (8006314 <__ieee754_pow+0x234>)
 80061dc:	429e      	cmp	r6, r3
 80061de:	d1eb      	bne.n	80061b8 <__ieee754_pow+0xd8>
 80061e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80061e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80061e8:	ea53 030a 	orrs.w	r3, r3, sl
 80061ec:	f000 8449 	beq.w	8006a82 <__ieee754_pow+0x9a2>
 80061f0:	4b4b      	ldr	r3, [pc, #300]	; (8006320 <__ieee754_pow+0x240>)
 80061f2:	429c      	cmp	r4, r3
 80061f4:	dd0b      	ble.n	800620e <__ieee754_pow+0x12e>
 80061f6:	2f00      	cmp	r7, #0
 80061f8:	f2c0 8449 	blt.w	8006a8e <__ieee754_pow+0x9ae>
 80061fc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006200:	4658      	mov	r0, fp
 8006202:	4661      	mov	r1, ip
 8006204:	b013      	add	sp, #76	; 0x4c
 8006206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620a:	2302      	movs	r3, #2
 800620c:	e7e2      	b.n	80061d4 <__ieee754_pow+0xf4>
 800620e:	2f00      	cmp	r7, #0
 8006210:	f04f 0b00 	mov.w	fp, #0
 8006214:	f04f 0c00 	mov.w	ip, #0
 8006218:	daf2      	bge.n	8006200 <__ieee754_pow+0x120>
 800621a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800621e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006222:	e7ed      	b.n	8006200 <__ieee754_pow+0x120>
 8006224:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006228:	d106      	bne.n	8006238 <__ieee754_pow+0x158>
 800622a:	4642      	mov	r2, r8
 800622c:	464b      	mov	r3, r9
 800622e:	4640      	mov	r0, r8
 8006230:	4649      	mov	r1, r9
 8006232:	f7fa f951 	bl	80004d8 <__aeabi_dmul>
 8006236:	e770      	b.n	800611a <__ieee754_pow+0x3a>
 8006238:	4b3a      	ldr	r3, [pc, #232]	; (8006324 <__ieee754_pow+0x244>)
 800623a:	429f      	cmp	r7, r3
 800623c:	d10a      	bne.n	8006254 <__ieee754_pow+0x174>
 800623e:	2d00      	cmp	r5, #0
 8006240:	db08      	blt.n	8006254 <__ieee754_pow+0x174>
 8006242:	4640      	mov	r0, r8
 8006244:	4649      	mov	r1, r9
 8006246:	b013      	add	sp, #76	; 0x4c
 8006248:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	f000 bd0a 	b.w	8006c64 <__ieee754_sqrt>
 8006250:	2300      	movs	r3, #0
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	4640      	mov	r0, r8
 8006256:	4649      	mov	r1, r9
 8006258:	f000 fc58 	bl	8006b0c <fabs>
 800625c:	4683      	mov	fp, r0
 800625e:	468c      	mov	ip, r1
 8006260:	f1ba 0f00 	cmp.w	sl, #0
 8006264:	d128      	bne.n	80062b8 <__ieee754_pow+0x1d8>
 8006266:	b124      	cbz	r4, 8006272 <__ieee754_pow+0x192>
 8006268:	4b2c      	ldr	r3, [pc, #176]	; (800631c <__ieee754_pow+0x23c>)
 800626a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800626e:	429a      	cmp	r2, r3
 8006270:	d122      	bne.n	80062b8 <__ieee754_pow+0x1d8>
 8006272:	2f00      	cmp	r7, #0
 8006274:	da07      	bge.n	8006286 <__ieee754_pow+0x1a6>
 8006276:	465a      	mov	r2, fp
 8006278:	4663      	mov	r3, ip
 800627a:	2000      	movs	r0, #0
 800627c:	4927      	ldr	r1, [pc, #156]	; (800631c <__ieee754_pow+0x23c>)
 800627e:	f7fa fa55 	bl	800072c <__aeabi_ddiv>
 8006282:	4683      	mov	fp, r0
 8006284:	468c      	mov	ip, r1
 8006286:	2d00      	cmp	r5, #0
 8006288:	daba      	bge.n	8006200 <__ieee754_pow+0x120>
 800628a:	9b00      	ldr	r3, [sp, #0]
 800628c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006290:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006294:	431c      	orrs	r4, r3
 8006296:	d108      	bne.n	80062aa <__ieee754_pow+0x1ca>
 8006298:	465a      	mov	r2, fp
 800629a:	4663      	mov	r3, ip
 800629c:	4658      	mov	r0, fp
 800629e:	4661      	mov	r1, ip
 80062a0:	f7f9 ff62 	bl	8000168 <__aeabi_dsub>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	e790      	b.n	80061cc <__ieee754_pow+0xec>
 80062aa:	9b00      	ldr	r3, [sp, #0]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d1a7      	bne.n	8006200 <__ieee754_pow+0x120>
 80062b0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80062b4:	469c      	mov	ip, r3
 80062b6:	e7a3      	b.n	8006200 <__ieee754_pow+0x120>
 80062b8:	0feb      	lsrs	r3, r5, #31
 80062ba:	3b01      	subs	r3, #1
 80062bc:	930c      	str	r3, [sp, #48]	; 0x30
 80062be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062c0:	9b00      	ldr	r3, [sp, #0]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	d104      	bne.n	80062d0 <__ieee754_pow+0x1f0>
 80062c6:	4642      	mov	r2, r8
 80062c8:	464b      	mov	r3, r9
 80062ca:	4640      	mov	r0, r8
 80062cc:	4649      	mov	r1, r9
 80062ce:	e7e7      	b.n	80062a0 <__ieee754_pow+0x1c0>
 80062d0:	4b15      	ldr	r3, [pc, #84]	; (8006328 <__ieee754_pow+0x248>)
 80062d2:	429e      	cmp	r6, r3
 80062d4:	f340 80f6 	ble.w	80064c4 <__ieee754_pow+0x3e4>
 80062d8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80062dc:	429e      	cmp	r6, r3
 80062de:	4b10      	ldr	r3, [pc, #64]	; (8006320 <__ieee754_pow+0x240>)
 80062e0:	dd09      	ble.n	80062f6 <__ieee754_pow+0x216>
 80062e2:	429c      	cmp	r4, r3
 80062e4:	dc0c      	bgt.n	8006300 <__ieee754_pow+0x220>
 80062e6:	2f00      	cmp	r7, #0
 80062e8:	da0c      	bge.n	8006304 <__ieee754_pow+0x224>
 80062ea:	2000      	movs	r0, #0
 80062ec:	b013      	add	sp, #76	; 0x4c
 80062ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f2:	f000 bcb2 	b.w	8006c5a <__math_oflow>
 80062f6:	429c      	cmp	r4, r3
 80062f8:	dbf5      	blt.n	80062e6 <__ieee754_pow+0x206>
 80062fa:	4b08      	ldr	r3, [pc, #32]	; (800631c <__ieee754_pow+0x23c>)
 80062fc:	429c      	cmp	r4, r3
 80062fe:	dd15      	ble.n	800632c <__ieee754_pow+0x24c>
 8006300:	2f00      	cmp	r7, #0
 8006302:	dcf2      	bgt.n	80062ea <__ieee754_pow+0x20a>
 8006304:	2000      	movs	r0, #0
 8006306:	b013      	add	sp, #76	; 0x4c
 8006308:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	f000 bca0 	b.w	8006c50 <__math_uflow>
 8006310:	fff00000 	.word	0xfff00000
 8006314:	7ff00000 	.word	0x7ff00000
 8006318:	433fffff 	.word	0x433fffff
 800631c:	3ff00000 	.word	0x3ff00000
 8006320:	3fefffff 	.word	0x3fefffff
 8006324:	3fe00000 	.word	0x3fe00000
 8006328:	41e00000 	.word	0x41e00000
 800632c:	4661      	mov	r1, ip
 800632e:	2200      	movs	r2, #0
 8006330:	4658      	mov	r0, fp
 8006332:	4b5f      	ldr	r3, [pc, #380]	; (80064b0 <__ieee754_pow+0x3d0>)
 8006334:	f7f9 ff18 	bl	8000168 <__aeabi_dsub>
 8006338:	a355      	add	r3, pc, #340	; (adr r3, 8006490 <__ieee754_pow+0x3b0>)
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	4604      	mov	r4, r0
 8006340:	460d      	mov	r5, r1
 8006342:	f7fa f8c9 	bl	80004d8 <__aeabi_dmul>
 8006346:	a354      	add	r3, pc, #336	; (adr r3, 8006498 <__ieee754_pow+0x3b8>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	4606      	mov	r6, r0
 800634e:	460f      	mov	r7, r1
 8006350:	4620      	mov	r0, r4
 8006352:	4629      	mov	r1, r5
 8006354:	f7fa f8c0 	bl	80004d8 <__aeabi_dmul>
 8006358:	2200      	movs	r2, #0
 800635a:	4682      	mov	sl, r0
 800635c:	468b      	mov	fp, r1
 800635e:	4620      	mov	r0, r4
 8006360:	4629      	mov	r1, r5
 8006362:	4b54      	ldr	r3, [pc, #336]	; (80064b4 <__ieee754_pow+0x3d4>)
 8006364:	f7fa f8b8 	bl	80004d8 <__aeabi_dmul>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	a14c      	add	r1, pc, #304	; (adr r1, 80064a0 <__ieee754_pow+0x3c0>)
 800636e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006372:	f7f9 fef9 	bl	8000168 <__aeabi_dsub>
 8006376:	4622      	mov	r2, r4
 8006378:	462b      	mov	r3, r5
 800637a:	f7fa f8ad 	bl	80004d8 <__aeabi_dmul>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	2000      	movs	r0, #0
 8006384:	494c      	ldr	r1, [pc, #304]	; (80064b8 <__ieee754_pow+0x3d8>)
 8006386:	f7f9 feef 	bl	8000168 <__aeabi_dsub>
 800638a:	4622      	mov	r2, r4
 800638c:	462b      	mov	r3, r5
 800638e:	4680      	mov	r8, r0
 8006390:	4689      	mov	r9, r1
 8006392:	4620      	mov	r0, r4
 8006394:	4629      	mov	r1, r5
 8006396:	f7fa f89f 	bl	80004d8 <__aeabi_dmul>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4640      	mov	r0, r8
 80063a0:	4649      	mov	r1, r9
 80063a2:	f7fa f899 	bl	80004d8 <__aeabi_dmul>
 80063a6:	a340      	add	r3, pc, #256	; (adr r3, 80064a8 <__ieee754_pow+0x3c8>)
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f7fa f894 	bl	80004d8 <__aeabi_dmul>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4650      	mov	r0, sl
 80063b6:	4659      	mov	r1, fp
 80063b8:	f7f9 fed6 	bl	8000168 <__aeabi_dsub>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4604      	mov	r4, r0
 80063c2:	460d      	mov	r5, r1
 80063c4:	4630      	mov	r0, r6
 80063c6:	4639      	mov	r1, r7
 80063c8:	f7f9 fed0 	bl	800016c <__adddf3>
 80063cc:	2000      	movs	r0, #0
 80063ce:	4632      	mov	r2, r6
 80063d0:	463b      	mov	r3, r7
 80063d2:	4682      	mov	sl, r0
 80063d4:	468b      	mov	fp, r1
 80063d6:	f7f9 fec7 	bl	8000168 <__aeabi_dsub>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7f9 fec1 	bl	8000168 <__aeabi_dsub>
 80063e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063ea:	9b00      	ldr	r3, [sp, #0]
 80063ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063ee:	3b01      	subs	r3, #1
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f04f 0600 	mov.w	r6, #0
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	bf0c      	ite	eq
 80063fc:	4b2f      	ldreq	r3, [pc, #188]	; (80064bc <__ieee754_pow+0x3dc>)
 80063fe:	4b2c      	ldrne	r3, [pc, #176]	; (80064b0 <__ieee754_pow+0x3d0>)
 8006400:	4604      	mov	r4, r0
 8006402:	460d      	mov	r5, r1
 8006404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006408:	e9cd 2300 	strd	r2, r3, [sp]
 800640c:	4632      	mov	r2, r6
 800640e:	463b      	mov	r3, r7
 8006410:	f7f9 feaa 	bl	8000168 <__aeabi_dsub>
 8006414:	4652      	mov	r2, sl
 8006416:	465b      	mov	r3, fp
 8006418:	f7fa f85e 	bl	80004d8 <__aeabi_dmul>
 800641c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006420:	4680      	mov	r8, r0
 8006422:	4689      	mov	r9, r1
 8006424:	4620      	mov	r0, r4
 8006426:	4629      	mov	r1, r5
 8006428:	f7fa f856 	bl	80004d8 <__aeabi_dmul>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4640      	mov	r0, r8
 8006432:	4649      	mov	r1, r9
 8006434:	f7f9 fe9a 	bl	800016c <__adddf3>
 8006438:	4632      	mov	r2, r6
 800643a:	463b      	mov	r3, r7
 800643c:	4680      	mov	r8, r0
 800643e:	4689      	mov	r9, r1
 8006440:	4650      	mov	r0, sl
 8006442:	4659      	mov	r1, fp
 8006444:	f7fa f848 	bl	80004d8 <__aeabi_dmul>
 8006448:	4604      	mov	r4, r0
 800644a:	460d      	mov	r5, r1
 800644c:	460b      	mov	r3, r1
 800644e:	4602      	mov	r2, r0
 8006450:	4649      	mov	r1, r9
 8006452:	4640      	mov	r0, r8
 8006454:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006458:	f7f9 fe88 	bl	800016c <__adddf3>
 800645c:	4b18      	ldr	r3, [pc, #96]	; (80064c0 <__ieee754_pow+0x3e0>)
 800645e:	4682      	mov	sl, r0
 8006460:	4299      	cmp	r1, r3
 8006462:	460f      	mov	r7, r1
 8006464:	460e      	mov	r6, r1
 8006466:	f340 82e7 	ble.w	8006a38 <__ieee754_pow+0x958>
 800646a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800646e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006472:	4303      	orrs	r3, r0
 8006474:	f000 81e2 	beq.w	800683c <__ieee754_pow+0x75c>
 8006478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800647c:	2200      	movs	r2, #0
 800647e:	2300      	movs	r3, #0
 8006480:	f7fa fa9c 	bl	80009bc <__aeabi_dcmplt>
 8006484:	3800      	subs	r0, #0
 8006486:	bf18      	it	ne
 8006488:	2001      	movne	r0, #1
 800648a:	e72f      	b.n	80062ec <__ieee754_pow+0x20c>
 800648c:	f3af 8000 	nop.w
 8006490:	60000000 	.word	0x60000000
 8006494:	3ff71547 	.word	0x3ff71547
 8006498:	f85ddf44 	.word	0xf85ddf44
 800649c:	3e54ae0b 	.word	0x3e54ae0b
 80064a0:	55555555 	.word	0x55555555
 80064a4:	3fd55555 	.word	0x3fd55555
 80064a8:	652b82fe 	.word	0x652b82fe
 80064ac:	3ff71547 	.word	0x3ff71547
 80064b0:	3ff00000 	.word	0x3ff00000
 80064b4:	3fd00000 	.word	0x3fd00000
 80064b8:	3fe00000 	.word	0x3fe00000
 80064bc:	bff00000 	.word	0xbff00000
 80064c0:	408fffff 	.word	0x408fffff
 80064c4:	4bd4      	ldr	r3, [pc, #848]	; (8006818 <__ieee754_pow+0x738>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	402b      	ands	r3, r5
 80064ca:	b943      	cbnz	r3, 80064de <__ieee754_pow+0x3fe>
 80064cc:	4658      	mov	r0, fp
 80064ce:	4661      	mov	r1, ip
 80064d0:	4bd2      	ldr	r3, [pc, #840]	; (800681c <__ieee754_pow+0x73c>)
 80064d2:	f7fa f801 	bl	80004d8 <__aeabi_dmul>
 80064d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80064da:	4683      	mov	fp, r0
 80064dc:	460c      	mov	r4, r1
 80064de:	1523      	asrs	r3, r4, #20
 80064e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80064e4:	4413      	add	r3, r2
 80064e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80064e8:	4bcd      	ldr	r3, [pc, #820]	; (8006820 <__ieee754_pow+0x740>)
 80064ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80064ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80064f2:	429c      	cmp	r4, r3
 80064f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80064f8:	dd08      	ble.n	800650c <__ieee754_pow+0x42c>
 80064fa:	4bca      	ldr	r3, [pc, #808]	; (8006824 <__ieee754_pow+0x744>)
 80064fc:	429c      	cmp	r4, r3
 80064fe:	f340 8164 	ble.w	80067ca <__ieee754_pow+0x6ea>
 8006502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006504:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006508:	3301      	adds	r3, #1
 800650a:	930b      	str	r3, [sp, #44]	; 0x2c
 800650c:	2600      	movs	r6, #0
 800650e:	00f3      	lsls	r3, r6, #3
 8006510:	930d      	str	r3, [sp, #52]	; 0x34
 8006512:	4bc5      	ldr	r3, [pc, #788]	; (8006828 <__ieee754_pow+0x748>)
 8006514:	4658      	mov	r0, fp
 8006516:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800651a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800651e:	4629      	mov	r1, r5
 8006520:	461a      	mov	r2, r3
 8006522:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006526:	4623      	mov	r3, r4
 8006528:	f7f9 fe1e 	bl	8000168 <__aeabi_dsub>
 800652c:	46da      	mov	sl, fp
 800652e:	462b      	mov	r3, r5
 8006530:	4652      	mov	r2, sl
 8006532:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006536:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800653a:	f7f9 fe17 	bl	800016c <__adddf3>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	2000      	movs	r0, #0
 8006544:	49b9      	ldr	r1, [pc, #740]	; (800682c <__ieee754_pow+0x74c>)
 8006546:	f7fa f8f1 	bl	800072c <__aeabi_ddiv>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006552:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006556:	f7f9 ffbf 	bl	80004d8 <__aeabi_dmul>
 800655a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800655e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006562:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006566:	2300      	movs	r3, #0
 8006568:	2200      	movs	r2, #0
 800656a:	46ab      	mov	fp, r5
 800656c:	106d      	asrs	r5, r5, #1
 800656e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006578:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800657c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006580:	4640      	mov	r0, r8
 8006582:	4649      	mov	r1, r9
 8006584:	4614      	mov	r4, r2
 8006586:	461d      	mov	r5, r3
 8006588:	f7f9 ffa6 	bl	80004d8 <__aeabi_dmul>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006594:	f7f9 fde8 	bl	8000168 <__aeabi_dsub>
 8006598:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800659c:	4606      	mov	r6, r0
 800659e:	460f      	mov	r7, r1
 80065a0:	4620      	mov	r0, r4
 80065a2:	4629      	mov	r1, r5
 80065a4:	f7f9 fde0 	bl	8000168 <__aeabi_dsub>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4650      	mov	r0, sl
 80065ae:	4659      	mov	r1, fp
 80065b0:	f7f9 fdda 	bl	8000168 <__aeabi_dsub>
 80065b4:	4642      	mov	r2, r8
 80065b6:	464b      	mov	r3, r9
 80065b8:	f7f9 ff8e 	bl	80004d8 <__aeabi_dmul>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4630      	mov	r0, r6
 80065c2:	4639      	mov	r1, r7
 80065c4:	f7f9 fdd0 	bl	8000168 <__aeabi_dsub>
 80065c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065cc:	f7f9 ff84 	bl	80004d8 <__aeabi_dmul>
 80065d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065d4:	4682      	mov	sl, r0
 80065d6:	468b      	mov	fp, r1
 80065d8:	4610      	mov	r0, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	f7f9 ff7c 	bl	80004d8 <__aeabi_dmul>
 80065e0:	a37b      	add	r3, pc, #492	; (adr r3, 80067d0 <__ieee754_pow+0x6f0>)
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	4604      	mov	r4, r0
 80065e8:	460d      	mov	r5, r1
 80065ea:	f7f9 ff75 	bl	80004d8 <__aeabi_dmul>
 80065ee:	a37a      	add	r3, pc, #488	; (adr r3, 80067d8 <__ieee754_pow+0x6f8>)
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	f7f9 fdba 	bl	800016c <__adddf3>
 80065f8:	4622      	mov	r2, r4
 80065fa:	462b      	mov	r3, r5
 80065fc:	f7f9 ff6c 	bl	80004d8 <__aeabi_dmul>
 8006600:	a377      	add	r3, pc, #476	; (adr r3, 80067e0 <__ieee754_pow+0x700>)
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	f7f9 fdb1 	bl	800016c <__adddf3>
 800660a:	4622      	mov	r2, r4
 800660c:	462b      	mov	r3, r5
 800660e:	f7f9 ff63 	bl	80004d8 <__aeabi_dmul>
 8006612:	a375      	add	r3, pc, #468	; (adr r3, 80067e8 <__ieee754_pow+0x708>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f7f9 fda8 	bl	800016c <__adddf3>
 800661c:	4622      	mov	r2, r4
 800661e:	462b      	mov	r3, r5
 8006620:	f7f9 ff5a 	bl	80004d8 <__aeabi_dmul>
 8006624:	a372      	add	r3, pc, #456	; (adr r3, 80067f0 <__ieee754_pow+0x710>)
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f7f9 fd9f 	bl	800016c <__adddf3>
 800662e:	4622      	mov	r2, r4
 8006630:	462b      	mov	r3, r5
 8006632:	f7f9 ff51 	bl	80004d8 <__aeabi_dmul>
 8006636:	a370      	add	r3, pc, #448	; (adr r3, 80067f8 <__ieee754_pow+0x718>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	f7f9 fd96 	bl	800016c <__adddf3>
 8006640:	4622      	mov	r2, r4
 8006642:	4606      	mov	r6, r0
 8006644:	460f      	mov	r7, r1
 8006646:	462b      	mov	r3, r5
 8006648:	4620      	mov	r0, r4
 800664a:	4629      	mov	r1, r5
 800664c:	f7f9 ff44 	bl	80004d8 <__aeabi_dmul>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4630      	mov	r0, r6
 8006656:	4639      	mov	r1, r7
 8006658:	f7f9 ff3e 	bl	80004d8 <__aeabi_dmul>
 800665c:	4604      	mov	r4, r0
 800665e:	460d      	mov	r5, r1
 8006660:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006664:	4642      	mov	r2, r8
 8006666:	464b      	mov	r3, r9
 8006668:	f7f9 fd80 	bl	800016c <__adddf3>
 800666c:	4652      	mov	r2, sl
 800666e:	465b      	mov	r3, fp
 8006670:	f7f9 ff32 	bl	80004d8 <__aeabi_dmul>
 8006674:	4622      	mov	r2, r4
 8006676:	462b      	mov	r3, r5
 8006678:	f7f9 fd78 	bl	800016c <__adddf3>
 800667c:	4642      	mov	r2, r8
 800667e:	4606      	mov	r6, r0
 8006680:	460f      	mov	r7, r1
 8006682:	464b      	mov	r3, r9
 8006684:	4640      	mov	r0, r8
 8006686:	4649      	mov	r1, r9
 8006688:	f7f9 ff26 	bl	80004d8 <__aeabi_dmul>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006694:	2200      	movs	r2, #0
 8006696:	4b66      	ldr	r3, [pc, #408]	; (8006830 <__ieee754_pow+0x750>)
 8006698:	f7f9 fd68 	bl	800016c <__adddf3>
 800669c:	4632      	mov	r2, r6
 800669e:	463b      	mov	r3, r7
 80066a0:	f7f9 fd64 	bl	800016c <__adddf3>
 80066a4:	2400      	movs	r4, #0
 80066a6:	460d      	mov	r5, r1
 80066a8:	4622      	mov	r2, r4
 80066aa:	460b      	mov	r3, r1
 80066ac:	4640      	mov	r0, r8
 80066ae:	4649      	mov	r1, r9
 80066b0:	f7f9 ff12 	bl	80004d8 <__aeabi_dmul>
 80066b4:	2200      	movs	r2, #0
 80066b6:	4680      	mov	r8, r0
 80066b8:	4689      	mov	r9, r1
 80066ba:	4620      	mov	r0, r4
 80066bc:	4629      	mov	r1, r5
 80066be:	4b5c      	ldr	r3, [pc, #368]	; (8006830 <__ieee754_pow+0x750>)
 80066c0:	f7f9 fd52 	bl	8000168 <__aeabi_dsub>
 80066c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066c8:	f7f9 fd4e 	bl	8000168 <__aeabi_dsub>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4630      	mov	r0, r6
 80066d2:	4639      	mov	r1, r7
 80066d4:	f7f9 fd48 	bl	8000168 <__aeabi_dsub>
 80066d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066dc:	f7f9 fefc 	bl	80004d8 <__aeabi_dmul>
 80066e0:	4622      	mov	r2, r4
 80066e2:	4606      	mov	r6, r0
 80066e4:	460f      	mov	r7, r1
 80066e6:	462b      	mov	r3, r5
 80066e8:	4650      	mov	r0, sl
 80066ea:	4659      	mov	r1, fp
 80066ec:	f7f9 fef4 	bl	80004d8 <__aeabi_dmul>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4630      	mov	r0, r6
 80066f6:	4639      	mov	r1, r7
 80066f8:	f7f9 fd38 	bl	800016c <__adddf3>
 80066fc:	2400      	movs	r4, #0
 80066fe:	4606      	mov	r6, r0
 8006700:	460f      	mov	r7, r1
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	4640      	mov	r0, r8
 8006708:	4649      	mov	r1, r9
 800670a:	f7f9 fd2f 	bl	800016c <__adddf3>
 800670e:	a33c      	add	r3, pc, #240	; (adr r3, 8006800 <__ieee754_pow+0x720>)
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	4620      	mov	r0, r4
 8006716:	460d      	mov	r5, r1
 8006718:	f7f9 fede 	bl	80004d8 <__aeabi_dmul>
 800671c:	4642      	mov	r2, r8
 800671e:	464b      	mov	r3, r9
 8006720:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006724:	4620      	mov	r0, r4
 8006726:	4629      	mov	r1, r5
 8006728:	f7f9 fd1e 	bl	8000168 <__aeabi_dsub>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4630      	mov	r0, r6
 8006732:	4639      	mov	r1, r7
 8006734:	f7f9 fd18 	bl	8000168 <__aeabi_dsub>
 8006738:	a333      	add	r3, pc, #204	; (adr r3, 8006808 <__ieee754_pow+0x728>)
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f7f9 fecb 	bl	80004d8 <__aeabi_dmul>
 8006742:	a333      	add	r3, pc, #204	; (adr r3, 8006810 <__ieee754_pow+0x730>)
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	4606      	mov	r6, r0
 800674a:	460f      	mov	r7, r1
 800674c:	4620      	mov	r0, r4
 800674e:	4629      	mov	r1, r5
 8006750:	f7f9 fec2 	bl	80004d8 <__aeabi_dmul>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7f9 fd06 	bl	800016c <__adddf3>
 8006760:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006762:	4b34      	ldr	r3, [pc, #208]	; (8006834 <__ieee754_pow+0x754>)
 8006764:	4413      	add	r3, r2
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	f7f9 fcff 	bl	800016c <__adddf3>
 800676e:	4680      	mov	r8, r0
 8006770:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006772:	4689      	mov	r9, r1
 8006774:	f7f9 fe46 	bl	8000404 <__aeabi_i2d>
 8006778:	4604      	mov	r4, r0
 800677a:	460d      	mov	r5, r1
 800677c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006782:	4b2d      	ldr	r3, [pc, #180]	; (8006838 <__ieee754_pow+0x758>)
 8006784:	4413      	add	r3, r2
 8006786:	e9d3 6700 	ldrd	r6, r7, [r3]
 800678a:	4642      	mov	r2, r8
 800678c:	464b      	mov	r3, r9
 800678e:	f7f9 fced 	bl	800016c <__adddf3>
 8006792:	4632      	mov	r2, r6
 8006794:	463b      	mov	r3, r7
 8006796:	f7f9 fce9 	bl	800016c <__adddf3>
 800679a:	4622      	mov	r2, r4
 800679c:	462b      	mov	r3, r5
 800679e:	f7f9 fce5 	bl	800016c <__adddf3>
 80067a2:	2000      	movs	r0, #0
 80067a4:	4622      	mov	r2, r4
 80067a6:	462b      	mov	r3, r5
 80067a8:	4682      	mov	sl, r0
 80067aa:	468b      	mov	fp, r1
 80067ac:	f7f9 fcdc 	bl	8000168 <__aeabi_dsub>
 80067b0:	4632      	mov	r2, r6
 80067b2:	463b      	mov	r3, r7
 80067b4:	f7f9 fcd8 	bl	8000168 <__aeabi_dsub>
 80067b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067bc:	f7f9 fcd4 	bl	8000168 <__aeabi_dsub>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4640      	mov	r0, r8
 80067c6:	4649      	mov	r1, r9
 80067c8:	e60b      	b.n	80063e2 <__ieee754_pow+0x302>
 80067ca:	2601      	movs	r6, #1
 80067cc:	e69f      	b.n	800650e <__ieee754_pow+0x42e>
 80067ce:	bf00      	nop
 80067d0:	4a454eef 	.word	0x4a454eef
 80067d4:	3fca7e28 	.word	0x3fca7e28
 80067d8:	93c9db65 	.word	0x93c9db65
 80067dc:	3fcd864a 	.word	0x3fcd864a
 80067e0:	a91d4101 	.word	0xa91d4101
 80067e4:	3fd17460 	.word	0x3fd17460
 80067e8:	518f264d 	.word	0x518f264d
 80067ec:	3fd55555 	.word	0x3fd55555
 80067f0:	db6fabff 	.word	0xdb6fabff
 80067f4:	3fdb6db6 	.word	0x3fdb6db6
 80067f8:	33333303 	.word	0x33333303
 80067fc:	3fe33333 	.word	0x3fe33333
 8006800:	e0000000 	.word	0xe0000000
 8006804:	3feec709 	.word	0x3feec709
 8006808:	dc3a03fd 	.word	0xdc3a03fd
 800680c:	3feec709 	.word	0x3feec709
 8006810:	145b01f5 	.word	0x145b01f5
 8006814:	be3e2fe0 	.word	0xbe3e2fe0
 8006818:	7ff00000 	.word	0x7ff00000
 800681c:	43400000 	.word	0x43400000
 8006820:	0003988e 	.word	0x0003988e
 8006824:	000bb679 	.word	0x000bb679
 8006828:	08006fd8 	.word	0x08006fd8
 800682c:	3ff00000 	.word	0x3ff00000
 8006830:	40080000 	.word	0x40080000
 8006834:	08006ff8 	.word	0x08006ff8
 8006838:	08006fe8 	.word	0x08006fe8
 800683c:	a39c      	add	r3, pc, #624	; (adr r3, 8006ab0 <__ieee754_pow+0x9d0>)
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	4640      	mov	r0, r8
 8006844:	4649      	mov	r1, r9
 8006846:	f7f9 fc91 	bl	800016c <__adddf3>
 800684a:	4622      	mov	r2, r4
 800684c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006850:	462b      	mov	r3, r5
 8006852:	4650      	mov	r0, sl
 8006854:	4639      	mov	r1, r7
 8006856:	f7f9 fc87 	bl	8000168 <__aeabi_dsub>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006862:	f7fa f8c9 	bl	80009f8 <__aeabi_dcmpgt>
 8006866:	2800      	cmp	r0, #0
 8006868:	f47f ae06 	bne.w	8006478 <__ieee754_pow+0x398>
 800686c:	4aa2      	ldr	r2, [pc, #648]	; (8006af8 <__ieee754_pow+0xa18>)
 800686e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006872:	4293      	cmp	r3, r2
 8006874:	f340 8100 	ble.w	8006a78 <__ieee754_pow+0x998>
 8006878:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800687c:	151b      	asrs	r3, r3, #20
 800687e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006882:	fa4a fa03 	asr.w	sl, sl, r3
 8006886:	44b2      	add	sl, r6
 8006888:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800688c:	489b      	ldr	r0, [pc, #620]	; (8006afc <__ieee754_pow+0xa1c>)
 800688e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006892:	4108      	asrs	r0, r1
 8006894:	ea00 030a 	and.w	r3, r0, sl
 8006898:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800689c:	f1c1 0114 	rsb	r1, r1, #20
 80068a0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80068a4:	fa4a fa01 	asr.w	sl, sl, r1
 80068a8:	2e00      	cmp	r6, #0
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	4620      	mov	r0, r4
 80068b0:	4629      	mov	r1, r5
 80068b2:	bfb8      	it	lt
 80068b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80068b8:	f7f9 fc56 	bl	8000168 <__aeabi_dsub>
 80068bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068c4:	2400      	movs	r4, #0
 80068c6:	4642      	mov	r2, r8
 80068c8:	464b      	mov	r3, r9
 80068ca:	f7f9 fc4f 	bl	800016c <__adddf3>
 80068ce:	a37a      	add	r3, pc, #488	; (adr r3, 8006ab8 <__ieee754_pow+0x9d8>)
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	4620      	mov	r0, r4
 80068d6:	460d      	mov	r5, r1
 80068d8:	f7f9 fdfe 	bl	80004d8 <__aeabi_dmul>
 80068dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068e0:	4606      	mov	r6, r0
 80068e2:	460f      	mov	r7, r1
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	f7f9 fc3e 	bl	8000168 <__aeabi_dsub>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4640      	mov	r0, r8
 80068f2:	4649      	mov	r1, r9
 80068f4:	f7f9 fc38 	bl	8000168 <__aeabi_dsub>
 80068f8:	a371      	add	r3, pc, #452	; (adr r3, 8006ac0 <__ieee754_pow+0x9e0>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	f7f9 fdeb 	bl	80004d8 <__aeabi_dmul>
 8006902:	a371      	add	r3, pc, #452	; (adr r3, 8006ac8 <__ieee754_pow+0x9e8>)
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	4680      	mov	r8, r0
 800690a:	4689      	mov	r9, r1
 800690c:	4620      	mov	r0, r4
 800690e:	4629      	mov	r1, r5
 8006910:	f7f9 fde2 	bl	80004d8 <__aeabi_dmul>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4640      	mov	r0, r8
 800691a:	4649      	mov	r1, r9
 800691c:	f7f9 fc26 	bl	800016c <__adddf3>
 8006920:	4604      	mov	r4, r0
 8006922:	460d      	mov	r5, r1
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4630      	mov	r0, r6
 800692a:	4639      	mov	r1, r7
 800692c:	f7f9 fc1e 	bl	800016c <__adddf3>
 8006930:	4632      	mov	r2, r6
 8006932:	463b      	mov	r3, r7
 8006934:	4680      	mov	r8, r0
 8006936:	4689      	mov	r9, r1
 8006938:	f7f9 fc16 	bl	8000168 <__aeabi_dsub>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4620      	mov	r0, r4
 8006942:	4629      	mov	r1, r5
 8006944:	f7f9 fc10 	bl	8000168 <__aeabi_dsub>
 8006948:	4642      	mov	r2, r8
 800694a:	4606      	mov	r6, r0
 800694c:	460f      	mov	r7, r1
 800694e:	464b      	mov	r3, r9
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	f7f9 fdc0 	bl	80004d8 <__aeabi_dmul>
 8006958:	a35d      	add	r3, pc, #372	; (adr r3, 8006ad0 <__ieee754_pow+0x9f0>)
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	4604      	mov	r4, r0
 8006960:	460d      	mov	r5, r1
 8006962:	f7f9 fdb9 	bl	80004d8 <__aeabi_dmul>
 8006966:	a35c      	add	r3, pc, #368	; (adr r3, 8006ad8 <__ieee754_pow+0x9f8>)
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	f7f9 fbfc 	bl	8000168 <__aeabi_dsub>
 8006970:	4622      	mov	r2, r4
 8006972:	462b      	mov	r3, r5
 8006974:	f7f9 fdb0 	bl	80004d8 <__aeabi_dmul>
 8006978:	a359      	add	r3, pc, #356	; (adr r3, 8006ae0 <__ieee754_pow+0xa00>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f7f9 fbf5 	bl	800016c <__adddf3>
 8006982:	4622      	mov	r2, r4
 8006984:	462b      	mov	r3, r5
 8006986:	f7f9 fda7 	bl	80004d8 <__aeabi_dmul>
 800698a:	a357      	add	r3, pc, #348	; (adr r3, 8006ae8 <__ieee754_pow+0xa08>)
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f7f9 fbea 	bl	8000168 <__aeabi_dsub>
 8006994:	4622      	mov	r2, r4
 8006996:	462b      	mov	r3, r5
 8006998:	f7f9 fd9e 	bl	80004d8 <__aeabi_dmul>
 800699c:	a354      	add	r3, pc, #336	; (adr r3, 8006af0 <__ieee754_pow+0xa10>)
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f7f9 fbe3 	bl	800016c <__adddf3>
 80069a6:	4622      	mov	r2, r4
 80069a8:	462b      	mov	r3, r5
 80069aa:	f7f9 fd95 	bl	80004d8 <__aeabi_dmul>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4640      	mov	r0, r8
 80069b4:	4649      	mov	r1, r9
 80069b6:	f7f9 fbd7 	bl	8000168 <__aeabi_dsub>
 80069ba:	4604      	mov	r4, r0
 80069bc:	460d      	mov	r5, r1
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4640      	mov	r0, r8
 80069c4:	4649      	mov	r1, r9
 80069c6:	f7f9 fd87 	bl	80004d8 <__aeabi_dmul>
 80069ca:	2200      	movs	r2, #0
 80069cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069d4:	4620      	mov	r0, r4
 80069d6:	4629      	mov	r1, r5
 80069d8:	f7f9 fbc6 	bl	8000168 <__aeabi_dsub>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069e4:	f7f9 fea2 	bl	800072c <__aeabi_ddiv>
 80069e8:	4632      	mov	r2, r6
 80069ea:	4604      	mov	r4, r0
 80069ec:	460d      	mov	r5, r1
 80069ee:	463b      	mov	r3, r7
 80069f0:	4640      	mov	r0, r8
 80069f2:	4649      	mov	r1, r9
 80069f4:	f7f9 fd70 	bl	80004d8 <__aeabi_dmul>
 80069f8:	4632      	mov	r2, r6
 80069fa:	463b      	mov	r3, r7
 80069fc:	f7f9 fbb6 	bl	800016c <__adddf3>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4620      	mov	r0, r4
 8006a06:	4629      	mov	r1, r5
 8006a08:	f7f9 fbae 	bl	8000168 <__aeabi_dsub>
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	464b      	mov	r3, r9
 8006a10:	f7f9 fbaa 	bl	8000168 <__aeabi_dsub>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	2000      	movs	r0, #0
 8006a1a:	4939      	ldr	r1, [pc, #228]	; (8006b00 <__ieee754_pow+0xa20>)
 8006a1c:	f7f9 fba4 	bl	8000168 <__aeabi_dsub>
 8006a20:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006a24:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006a28:	da29      	bge.n	8006a7e <__ieee754_pow+0x99e>
 8006a2a:	4652      	mov	r2, sl
 8006a2c:	f000 f874 	bl	8006b18 <scalbn>
 8006a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a34:	f7ff bbfd 	b.w	8006232 <__ieee754_pow+0x152>
 8006a38:	4b32      	ldr	r3, [pc, #200]	; (8006b04 <__ieee754_pow+0xa24>)
 8006a3a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006a3e:	429f      	cmp	r7, r3
 8006a40:	f77f af14 	ble.w	800686c <__ieee754_pow+0x78c>
 8006a44:	4b30      	ldr	r3, [pc, #192]	; (8006b08 <__ieee754_pow+0xa28>)
 8006a46:	440b      	add	r3, r1
 8006a48:	4303      	orrs	r3, r0
 8006a4a:	d009      	beq.n	8006a60 <__ieee754_pow+0x980>
 8006a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a50:	2200      	movs	r2, #0
 8006a52:	2300      	movs	r3, #0
 8006a54:	f7f9 ffb2 	bl	80009bc <__aeabi_dcmplt>
 8006a58:	3800      	subs	r0, #0
 8006a5a:	bf18      	it	ne
 8006a5c:	2001      	movne	r0, #1
 8006a5e:	e452      	b.n	8006306 <__ieee754_pow+0x226>
 8006a60:	4622      	mov	r2, r4
 8006a62:	462b      	mov	r3, r5
 8006a64:	f7f9 fb80 	bl	8000168 <__aeabi_dsub>
 8006a68:	4642      	mov	r2, r8
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	f7f9 ffba 	bl	80009e4 <__aeabi_dcmpge>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	f43f aefb 	beq.w	800686c <__ieee754_pow+0x78c>
 8006a76:	e7e9      	b.n	8006a4c <__ieee754_pow+0x96c>
 8006a78:	f04f 0a00 	mov.w	sl, #0
 8006a7c:	e720      	b.n	80068c0 <__ieee754_pow+0x7e0>
 8006a7e:	4621      	mov	r1, r4
 8006a80:	e7d6      	b.n	8006a30 <__ieee754_pow+0x950>
 8006a82:	f04f 0b00 	mov.w	fp, #0
 8006a86:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006b00 <__ieee754_pow+0xa20>
 8006a8a:	f7ff bbb9 	b.w	8006200 <__ieee754_pow+0x120>
 8006a8e:	f04f 0b00 	mov.w	fp, #0
 8006a92:	f04f 0c00 	mov.w	ip, #0
 8006a96:	f7ff bbb3 	b.w	8006200 <__ieee754_pow+0x120>
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	f7ff bb3c 	b.w	800611a <__ieee754_pow+0x3a>
 8006aa2:	9200      	str	r2, [sp, #0]
 8006aa4:	f7ff bb88 	b.w	80061b8 <__ieee754_pow+0xd8>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f7ff bb72 	b.w	8006192 <__ieee754_pow+0xb2>
 8006aae:	bf00      	nop
 8006ab0:	652b82fe 	.word	0x652b82fe
 8006ab4:	3c971547 	.word	0x3c971547
 8006ab8:	00000000 	.word	0x00000000
 8006abc:	3fe62e43 	.word	0x3fe62e43
 8006ac0:	fefa39ef 	.word	0xfefa39ef
 8006ac4:	3fe62e42 	.word	0x3fe62e42
 8006ac8:	0ca86c39 	.word	0x0ca86c39
 8006acc:	be205c61 	.word	0xbe205c61
 8006ad0:	72bea4d0 	.word	0x72bea4d0
 8006ad4:	3e663769 	.word	0x3e663769
 8006ad8:	c5d26bf1 	.word	0xc5d26bf1
 8006adc:	3ebbbd41 	.word	0x3ebbbd41
 8006ae0:	af25de2c 	.word	0xaf25de2c
 8006ae4:	3f11566a 	.word	0x3f11566a
 8006ae8:	16bebd93 	.word	0x16bebd93
 8006aec:	3f66c16c 	.word	0x3f66c16c
 8006af0:	5555553e 	.word	0x5555553e
 8006af4:	3fc55555 	.word	0x3fc55555
 8006af8:	3fe00000 	.word	0x3fe00000
 8006afc:	fff00000 	.word	0xfff00000
 8006b00:	3ff00000 	.word	0x3ff00000
 8006b04:	4090cbff 	.word	0x4090cbff
 8006b08:	3f6f3400 	.word	0x3f6f3400

08006b0c <fabs>:
 8006b0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b10:	4619      	mov	r1, r3
 8006b12:	4770      	bx	lr
 8006b14:	0000      	movs	r0, r0
	...

08006b18 <scalbn>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	4616      	mov	r6, r2
 8006b1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006b20:	4604      	mov	r4, r0
 8006b22:	460d      	mov	r5, r1
 8006b24:	460b      	mov	r3, r1
 8006b26:	b992      	cbnz	r2, 8006b4e <scalbn+0x36>
 8006b28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b2c:	4303      	orrs	r3, r0
 8006b2e:	d03c      	beq.n	8006baa <scalbn+0x92>
 8006b30:	4b31      	ldr	r3, [pc, #196]	; (8006bf8 <scalbn+0xe0>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	f7f9 fcd0 	bl	80004d8 <__aeabi_dmul>
 8006b38:	4b30      	ldr	r3, [pc, #192]	; (8006bfc <scalbn+0xe4>)
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	429e      	cmp	r6, r3
 8006b3e:	460d      	mov	r5, r1
 8006b40:	da0f      	bge.n	8006b62 <scalbn+0x4a>
 8006b42:	a329      	add	r3, pc, #164	; (adr r3, 8006be8 <scalbn+0xd0>)
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	f7f9 fcc6 	bl	80004d8 <__aeabi_dmul>
 8006b4c:	e006      	b.n	8006b5c <scalbn+0x44>
 8006b4e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006b52:	42ba      	cmp	r2, r7
 8006b54:	d109      	bne.n	8006b6a <scalbn+0x52>
 8006b56:	4602      	mov	r2, r0
 8006b58:	f7f9 fb08 	bl	800016c <__adddf3>
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	460d      	mov	r5, r1
 8006b60:	e023      	b.n	8006baa <scalbn+0x92>
 8006b62:	460b      	mov	r3, r1
 8006b64:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006b68:	3a36      	subs	r2, #54	; 0x36
 8006b6a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006b6e:	428e      	cmp	r6, r1
 8006b70:	dd0e      	ble.n	8006b90 <scalbn+0x78>
 8006b72:	a31f      	add	r3, pc, #124	; (adr r3, 8006bf0 <scalbn+0xd8>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006b7c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006b80:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006b84:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006b88:	481d      	ldr	r0, [pc, #116]	; (8006c00 <scalbn+0xe8>)
 8006b8a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006b8e:	e7db      	b.n	8006b48 <scalbn+0x30>
 8006b90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006b94:	4432      	add	r2, r6
 8006b96:	428a      	cmp	r2, r1
 8006b98:	dceb      	bgt.n	8006b72 <scalbn+0x5a>
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	dd08      	ble.n	8006bb0 <scalbn+0x98>
 8006b9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ba2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ba6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006baa:	4620      	mov	r0, r4
 8006bac:	4629      	mov	r1, r5
 8006bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bb0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006bb4:	da0c      	bge.n	8006bd0 <scalbn+0xb8>
 8006bb6:	a30c      	add	r3, pc, #48	; (adr r3, 8006be8 <scalbn+0xd0>)
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006bc0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006bc4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006bc8:	480e      	ldr	r0, [pc, #56]	; (8006c04 <scalbn+0xec>)
 8006bca:	f041 011f 	orr.w	r1, r1, #31
 8006bce:	e7bb      	b.n	8006b48 <scalbn+0x30>
 8006bd0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006bd4:	3236      	adds	r2, #54	; 0x36
 8006bd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006bde:	4620      	mov	r0, r4
 8006be0:	4629      	mov	r1, r5
 8006be2:	2200      	movs	r2, #0
 8006be4:	4b08      	ldr	r3, [pc, #32]	; (8006c08 <scalbn+0xf0>)
 8006be6:	e7af      	b.n	8006b48 <scalbn+0x30>
 8006be8:	c2f8f359 	.word	0xc2f8f359
 8006bec:	01a56e1f 	.word	0x01a56e1f
 8006bf0:	8800759c 	.word	0x8800759c
 8006bf4:	7e37e43c 	.word	0x7e37e43c
 8006bf8:	43500000 	.word	0x43500000
 8006bfc:	ffff3cb0 	.word	0xffff3cb0
 8006c00:	8800759c 	.word	0x8800759c
 8006c04:	c2f8f359 	.word	0xc2f8f359
 8006c08:	3c900000 	.word	0x3c900000

08006c0c <with_errno>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4604      	mov	r4, r0
 8006c10:	460d      	mov	r5, r1
 8006c12:	4616      	mov	r6, r2
 8006c14:	f7fe f8e6 	bl	8004de4 <__errno>
 8006c18:	4629      	mov	r1, r5
 8006c1a:	6006      	str	r6, [r0, #0]
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}

08006c20 <xflow>:
 8006c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c22:	4615      	mov	r5, r2
 8006c24:	461c      	mov	r4, r3
 8006c26:	b180      	cbz	r0, 8006c4a <xflow+0x2a>
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006c2e:	e9cd 0100 	strd	r0, r1, [sp]
 8006c32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c36:	4628      	mov	r0, r5
 8006c38:	4621      	mov	r1, r4
 8006c3a:	f7f9 fc4d 	bl	80004d8 <__aeabi_dmul>
 8006c3e:	2222      	movs	r2, #34	; 0x22
 8006c40:	b003      	add	sp, #12
 8006c42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c46:	f7ff bfe1 	b.w	8006c0c <with_errno>
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	e7ee      	b.n	8006c2e <xflow+0xe>

08006c50 <__math_uflow>:
 8006c50:	2200      	movs	r2, #0
 8006c52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c56:	f7ff bfe3 	b.w	8006c20 <xflow>

08006c5a <__math_oflow>:
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006c60:	f7ff bfde 	b.w	8006c20 <xflow>

08006c64 <__ieee754_sqrt>:
 8006c64:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8006e08 <__ieee754_sqrt+0x1a4>
 8006c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	ea3c 0c01 	bics.w	ip, ip, r1
 8006c70:	460b      	mov	r3, r1
 8006c72:	4606      	mov	r6, r0
 8006c74:	460d      	mov	r5, r1
 8006c76:	460a      	mov	r2, r1
 8006c78:	4604      	mov	r4, r0
 8006c7a:	d10e      	bne.n	8006c9a <__ieee754_sqrt+0x36>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	f7f9 fc2b 	bl	80004d8 <__aeabi_dmul>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4630      	mov	r0, r6
 8006c88:	4629      	mov	r1, r5
 8006c8a:	f7f9 fa6f 	bl	800016c <__adddf3>
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460d      	mov	r5, r1
 8006c92:	4630      	mov	r0, r6
 8006c94:	4629      	mov	r1, r5
 8006c96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9a:	2900      	cmp	r1, #0
 8006c9c:	dc0d      	bgt.n	8006cba <__ieee754_sqrt+0x56>
 8006c9e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006ca2:	ea5c 0c00 	orrs.w	ip, ip, r0
 8006ca6:	d0f4      	beq.n	8006c92 <__ieee754_sqrt+0x2e>
 8006ca8:	b139      	cbz	r1, 8006cba <__ieee754_sqrt+0x56>
 8006caa:	4602      	mov	r2, r0
 8006cac:	f7f9 fa5c 	bl	8000168 <__aeabi_dsub>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	f7f9 fd3a 	bl	800072c <__aeabi_ddiv>
 8006cb8:	e7e9      	b.n	8006c8e <__ieee754_sqrt+0x2a>
 8006cba:	1512      	asrs	r2, r2, #20
 8006cbc:	f000 8089 	beq.w	8006dd2 <__ieee754_sqrt+0x16e>
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cc6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cce:	07d2      	lsls	r2, r2, #31
 8006cd0:	bf5c      	itt	pl
 8006cd2:	005b      	lslpl	r3, r3, #1
 8006cd4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006cd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006cdc:	bf58      	it	pl
 8006cde:	0064      	lslpl	r4, r4, #1
 8006ce0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006ce4:	0062      	lsls	r2, r4, #1
 8006ce6:	2016      	movs	r0, #22
 8006ce8:	4629      	mov	r1, r5
 8006cea:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8006cee:	1076      	asrs	r6, r6, #1
 8006cf0:	190f      	adds	r7, r1, r4
 8006cf2:	429f      	cmp	r7, r3
 8006cf4:	bfde      	ittt	le
 8006cf6:	1bdb      	suble	r3, r3, r7
 8006cf8:	1939      	addle	r1, r7, r4
 8006cfa:	192d      	addle	r5, r5, r4
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	3801      	subs	r0, #1
 8006d00:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006d04:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006d08:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006d0c:	d1f0      	bne.n	8006cf0 <__ieee754_sqrt+0x8c>
 8006d0e:	4604      	mov	r4, r0
 8006d10:	2720      	movs	r7, #32
 8006d12:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006d16:	428b      	cmp	r3, r1
 8006d18:	eb0c 0e00 	add.w	lr, ip, r0
 8006d1c:	dc02      	bgt.n	8006d24 <__ieee754_sqrt+0xc0>
 8006d1e:	d113      	bne.n	8006d48 <__ieee754_sqrt+0xe4>
 8006d20:	4596      	cmp	lr, r2
 8006d22:	d811      	bhi.n	8006d48 <__ieee754_sqrt+0xe4>
 8006d24:	f1be 0f00 	cmp.w	lr, #0
 8006d28:	eb0e 000c 	add.w	r0, lr, ip
 8006d2c:	da56      	bge.n	8006ddc <__ieee754_sqrt+0x178>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	db54      	blt.n	8006ddc <__ieee754_sqrt+0x178>
 8006d32:	f101 0801 	add.w	r8, r1, #1
 8006d36:	1a5b      	subs	r3, r3, r1
 8006d38:	4641      	mov	r1, r8
 8006d3a:	4596      	cmp	lr, r2
 8006d3c:	bf88      	it	hi
 8006d3e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006d42:	eba2 020e 	sub.w	r2, r2, lr
 8006d46:	4464      	add	r4, ip
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	3f01      	subs	r7, #1
 8006d4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006d50:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006d54:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006d58:	d1dd      	bne.n	8006d16 <__ieee754_sqrt+0xb2>
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	d01b      	beq.n	8006d96 <__ieee754_sqrt+0x132>
 8006d5e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006e0c <__ieee754_sqrt+0x1a8>
 8006d62:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006e10 <__ieee754_sqrt+0x1ac>
 8006d66:	e9da 0100 	ldrd	r0, r1, [sl]
 8006d6a:	e9db 2300 	ldrd	r2, r3, [fp]
 8006d6e:	f7f9 f9fb 	bl	8000168 <__aeabi_dsub>
 8006d72:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4640      	mov	r0, r8
 8006d7c:	4649      	mov	r1, r9
 8006d7e:	f7f9 fe27 	bl	80009d0 <__aeabi_dcmple>
 8006d82:	b140      	cbz	r0, 8006d96 <__ieee754_sqrt+0x132>
 8006d84:	e9da 0100 	ldrd	r0, r1, [sl]
 8006d88:	e9db 2300 	ldrd	r2, r3, [fp]
 8006d8c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006d90:	d126      	bne.n	8006de0 <__ieee754_sqrt+0x17c>
 8006d92:	463c      	mov	r4, r7
 8006d94:	3501      	adds	r5, #1
 8006d96:	106b      	asrs	r3, r5, #1
 8006d98:	0864      	lsrs	r4, r4, #1
 8006d9a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006d9e:	07ea      	lsls	r2, r5, #31
 8006da0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006da4:	bf48      	it	mi
 8006da6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8006daa:	4620      	mov	r0, r4
 8006dac:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8006db0:	e76d      	b.n	8006c8e <__ieee754_sqrt+0x2a>
 8006db2:	0ae3      	lsrs	r3, r4, #11
 8006db4:	3915      	subs	r1, #21
 8006db6:	0564      	lsls	r4, r4, #21
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0fa      	beq.n	8006db2 <__ieee754_sqrt+0x14e>
 8006dbc:	02d8      	lsls	r0, r3, #11
 8006dbe:	d50a      	bpl.n	8006dd6 <__ieee754_sqrt+0x172>
 8006dc0:	f1c2 0020 	rsb	r0, r2, #32
 8006dc4:	fa24 f000 	lsr.w	r0, r4, r0
 8006dc8:	1e55      	subs	r5, r2, #1
 8006dca:	4094      	lsls	r4, r2
 8006dcc:	4303      	orrs	r3, r0
 8006dce:	1b4a      	subs	r2, r1, r5
 8006dd0:	e776      	b.n	8006cc0 <__ieee754_sqrt+0x5c>
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	e7f0      	b.n	8006db8 <__ieee754_sqrt+0x154>
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	3201      	adds	r2, #1
 8006dda:	e7ef      	b.n	8006dbc <__ieee754_sqrt+0x158>
 8006ddc:	4688      	mov	r8, r1
 8006dde:	e7aa      	b.n	8006d36 <__ieee754_sqrt+0xd2>
 8006de0:	f7f9 f9c4 	bl	800016c <__adddf3>
 8006de4:	e9da 8900 	ldrd	r8, r9, [sl]
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4640      	mov	r0, r8
 8006dee:	4649      	mov	r1, r9
 8006df0:	f7f9 fde4 	bl	80009bc <__aeabi_dcmplt>
 8006df4:	b120      	cbz	r0, 8006e00 <__ieee754_sqrt+0x19c>
 8006df6:	1ca1      	adds	r1, r4, #2
 8006df8:	bf08      	it	eq
 8006dfa:	3501      	addeq	r5, #1
 8006dfc:	3402      	adds	r4, #2
 8006dfe:	e7ca      	b.n	8006d96 <__ieee754_sqrt+0x132>
 8006e00:	3401      	adds	r4, #1
 8006e02:	f024 0401 	bic.w	r4, r4, #1
 8006e06:	e7c6      	b.n	8006d96 <__ieee754_sqrt+0x132>
 8006e08:	7ff00000 	.word	0x7ff00000
 8006e0c:	20000068 	.word	0x20000068
 8006e10:	20000070 	.word	0x20000070

08006e14 <_init>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr

08006e20 <_fini>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr
