
brushed_dc_motor_servo_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc0  08003bc0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003bc0  08003bc0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bc0  08003bc0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000010  08003bd8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003bd8  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c14b  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b7b  00000000  00000000  0002c1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  0002dd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000983  00000000  00000000  0002e960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001750d  00000000  00000000  0002f2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d57e  00000000  00000000  000467f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000886dd  00000000  00000000  00053d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003400  00000000  00000000  000dc44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000df84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b7c 	.word	0x08003b7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003b7c 	.word	0x08003b7c

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2uiz>:
 80005bc:	0042      	lsls	r2, r0, #1
 80005be:	d20e      	bcs.n	80005de <__aeabi_f2uiz+0x22>
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005c4:	d30b      	bcc.n	80005de <__aeabi_f2uiz+0x22>
 80005c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d409      	bmi.n	80005e4 <__aeabi_f2uiz+0x28>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005d8:	fa23 f002 	lsr.w	r0, r3, r2
 80005dc:	4770      	bx	lr
 80005de:	f04f 0000 	mov.w	r0, #0
 80005e2:	4770      	bx	lr
 80005e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005e8:	d101      	bne.n	80005ee <__aeabi_f2uiz+0x32>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	d102      	bne.n	80005f4 <__aeabi_f2uiz+0x38>
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	4770      	bx	lr
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <CalculateDeltaTime>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

float CalculateDeltaTime(uint32_t start_time, uint32_t end_time)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
	float result = 0.0f;
 8000606:	f04f 0300 	mov.w	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
    if (end_time >= start_time)
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	d308      	bcc.n	8000626 <CalculateDeltaTime+0x2a>
    {
    	result = (float)(end_time - start_time);
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff00 	bl	8000420 <__aeabi_ui2f>
 8000620:	4603      	mov	r3, r0
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e007      	b.n	8000636 <CalculateDeltaTime+0x3a>
    }
    else
    {
        // Handle timer overflow
    	result = (float)(0xFFFFFFFF - start_time + end_time + 1);
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fef7 	bl	8000420 <__aeabi_ui2f>
 8000632:	4603      	mov	r3, r0
 8000634:	60fb      	str	r3, [r7, #12]
    }

    result = result * (1.0f / (64000000.0f / 128.0f));
 8000636:	4905      	ldr	r1, [pc, #20]	; (800064c <CalculateDeltaTime+0x50>)
 8000638:	68f8      	ldr	r0, [r7, #12]
 800063a:	f7ff fd87 	bl	800014c <__aeabi_fmul>
 800063e:	4603      	mov	r3, r0
 8000640:	60fb      	str	r3, [r7, #12]

    return result;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	360637bd 	.word	0x360637bd

08000650 <CalculatePID>:

void CalculatePID()
{
 8000650:	b598      	push	{r3, r4, r7, lr}
 8000652:	af00      	add	r7, sp, #0
	currentTime = __HAL_TIM_GET_COUNTER(&htim3);
 8000654:	4b37      	ldr	r3, [pc, #220]	; (8000734 <CalculatePID+0xe4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065a:	4a37      	ldr	r2, [pc, #220]	; (8000738 <CalculatePID+0xe8>)
 800065c:	6013      	str	r3, [r2, #0]
	deltaTime = CalculateDeltaTime(currentTime, prevTime);//dt
 800065e:	4b36      	ldr	r3, [pc, #216]	; (8000738 <CalculatePID+0xe8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a36      	ldr	r2, [pc, #216]	; (800073c <CalculatePID+0xec>)
 8000664:	6812      	ldr	r2, [r2, #0]
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffc7 	bl	80005fc <CalculateDeltaTime>
 800066e:	4603      	mov	r3, r0
 8000670:	4a33      	ldr	r2, [pc, #204]	; (8000740 <CalculatePID+0xf0>)
 8000672:	6013      	str	r3, [r2, #0]
	prevTime = currentTime;
 8000674:	4b30      	ldr	r3, [pc, #192]	; (8000738 <CalculatePID+0xe8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a30      	ldr	r2, [pc, #192]	; (800073c <CalculatePID+0xec>)
 800067a:	6013      	str	r3, [r2, #0]

	//de
	errorValue = motor_current_position - data.position;
 800067c:	4b31      	ldr	r3, [pc, #196]	; (8000744 <CalculatePID+0xf4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a31      	ldr	r2, [pc, #196]	; (8000748 <CalculatePID+0xf8>)
 8000682:	6852      	ldr	r2, [r2, #4]
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fe18 	bl	80002bc <__aeabi_fsub>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b2e      	ldr	r3, [pc, #184]	; (800074c <CalculatePID+0xfc>)
 8000692:	601a      	str	r2, [r3, #0]
	derivative = errorValue - prevErrorValue;
 8000694:	4b2d      	ldr	r3, [pc, #180]	; (800074c <CalculatePID+0xfc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a2d      	ldr	r2, [pc, #180]	; (8000750 <CalculatePID+0x100>)
 800069a:	6812      	ldr	r2, [r2, #0]
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fe0c 	bl	80002bc <__aeabi_fsub>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <CalculatePID+0x104>)
 80006aa:	601a      	str	r2, [r3, #0]
	prevErrorValue = errorValue;
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <CalculatePID+0xfc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a27      	ldr	r2, [pc, #156]	; (8000750 <CalculatePID+0x100>)
 80006b2:	6013      	str	r3, [r2, #0]

	integral = integral + errorValue * deltaTime;
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <CalculatePID+0xfc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <CalculatePID+0xf0>)
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	4611      	mov	r1, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd44 	bl	800014c <__aeabi_fmul>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <CalculatePID+0x108>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4610      	mov	r0, r2
 80006d0:	f7ff fdf6 	bl	80002c0 <__addsf3>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <CalculatePID+0x108>)
 80006da:	601a      	str	r2, [r3, #0]

	controlSignal = data.kp * errorValue + data.ki * integral + data.kd * derivative;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <CalculatePID+0xf8>)
 80006de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e0:	4a1a      	ldr	r2, [pc, #104]	; (800074c <CalculatePID+0xfc>)
 80006e2:	6812      	ldr	r2, [r2, #0]
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fd30 	bl	800014c <__aeabi_fmul>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461c      	mov	r4, r3
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <CalculatePID+0xf8>)
 80006f2:	6a1b      	ldr	r3, [r3, #32]
 80006f4:	4a18      	ldr	r2, [pc, #96]	; (8000758 <CalculatePID+0x108>)
 80006f6:	6812      	ldr	r2, [r2, #0]
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd26 	bl	800014c <__aeabi_fmul>
 8000700:	4603      	mov	r3, r0
 8000702:	4619      	mov	r1, r3
 8000704:	4620      	mov	r0, r4
 8000706:	f7ff fddb 	bl	80002c0 <__addsf3>
 800070a:	4603      	mov	r3, r0
 800070c:	461c      	mov	r4, r3
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <CalculatePID+0xf8>)
 8000710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000712:	4a10      	ldr	r2, [pc, #64]	; (8000754 <CalculatePID+0x104>)
 8000714:	6812      	ldr	r2, [r2, #0]
 8000716:	4611      	mov	r1, r2
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fd17 	bl	800014c <__aeabi_fmul>
 800071e:	4603      	mov	r3, r0
 8000720:	4619      	mov	r1, r3
 8000722:	4620      	mov	r0, r4
 8000724:	f7ff fdcc 	bl	80002c0 <__addsf3>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <CalculatePID+0x10c>)
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	bd98      	pop	{r3, r4, r7, pc}
 8000734:	20000074 	.word	0x20000074
 8000738:	20000178 	.word	0x20000178
 800073c:	20000180 	.word	0x20000180
 8000740:	2000017c 	.word	0x2000017c
 8000744:	20000108 	.word	0x20000108
 8000748:	2000014c 	.word	0x2000014c
 800074c:	20000184 	.word	0x20000184
 8000750:	20000188 	.word	0x20000188
 8000754:	2000018c 	.word	0x2000018c
 8000758:	20000190 	.word	0x20000190
 800075c:	20000194 	.word	0x20000194

08000760 <DriveMotor>:

void DriveMotor()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

	if(controlSignal < 0)
 8000764:	4b6b      	ldr	r3, [pc, #428]	; (8000914 <DriveMotor+0x1b4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f04f 0100 	mov.w	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fefd 	bl	800056c <__aeabi_fcmplt>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d003      	beq.n	8000780 <DriveMotor+0x20>
	{
		motorDirection = CounterClockWise;
 8000778:	4b67      	ldr	r3, [pc, #412]	; (8000918 <DriveMotor+0x1b8>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
 800077e:	e002      	b.n	8000786 <DriveMotor+0x26>
	}
	else
	{
		motorDirection = ClockWise;
 8000780:	4b65      	ldr	r3, [pc, #404]	; (8000918 <DriveMotor+0x1b8>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
	}

	if(prevMotorDirection != motorDirection)
 8000786:	4b65      	ldr	r3, [pc, #404]	; (800091c <DriveMotor+0x1bc>)
 8000788:	781a      	ldrb	r2, [r3, #0]
 800078a:	4b63      	ldr	r3, [pc, #396]	; (8000918 <DriveMotor+0x1b8>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	429a      	cmp	r2, r3
 8000790:	f000 8085 	beq.w	800089e <DriveMotor+0x13e>
	{
		switch(motorDirection)
 8000794:	4b60      	ldr	r3, [pc, #384]	; (8000918 <DriveMotor+0x1b8>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <DriveMotor+0x42>
 800079c:	2b01      	cmp	r3, #1
 800079e:	d03f      	beq.n	8000820 <DriveMotor+0xc0>
 80007a0:	e07d      	b.n	800089e <DriveMotor+0x13e>
		{
		case ClockWise:
		{
		  PWM_CurrentChannel = PWM_CLOCKWISE_CHANNEL;
 80007a2:	4b5f      	ldr	r3, [pc, #380]	; (8000920 <DriveMotor+0x1c0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 80007a8:	4b5e      	ldr	r3, [pc, #376]	; (8000924 <DriveMotor+0x1c4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, 0);
 80007b0:	4b5c      	ldr	r3, [pc, #368]	; (8000924 <DriveMotor+0x1c4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34
		  //delay here
		  HAL_Delay(PWM_DEADTIME_DELAY);
 80007b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007bc:	f000 fcf4 	bl	80011a8 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, PWM_countingDutyCycle);
 80007c0:	4b57      	ldr	r3, [pc, #348]	; (8000920 <DriveMotor+0x1c0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d105      	bne.n	80007d4 <DriveMotor+0x74>
 80007c8:	4b56      	ldr	r3, [pc, #344]	; (8000924 <DriveMotor+0x1c4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a56      	ldr	r2, [pc, #344]	; (8000928 <DriveMotor+0x1c8>)
 80007ce:	6812      	ldr	r2, [r2, #0]
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
 80007d2:	e018      	b.n	8000806 <DriveMotor+0xa6>
 80007d4:	4b52      	ldr	r3, [pc, #328]	; (8000920 <DriveMotor+0x1c0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d105      	bne.n	80007e8 <DriveMotor+0x88>
 80007dc:	4b51      	ldr	r3, [pc, #324]	; (8000924 <DriveMotor+0x1c4>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b51      	ldr	r3, [pc, #324]	; (8000928 <DriveMotor+0x1c8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6393      	str	r3, [r2, #56]	; 0x38
 80007e6:	e00e      	b.n	8000806 <DriveMotor+0xa6>
 80007e8:	4b4d      	ldr	r3, [pc, #308]	; (8000920 <DriveMotor+0x1c0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b08      	cmp	r3, #8
 80007ee:	d105      	bne.n	80007fc <DriveMotor+0x9c>
 80007f0:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <DriveMotor+0x1c4>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b4c      	ldr	r3, [pc, #304]	; (8000928 <DriveMotor+0x1c8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007fa:	e004      	b.n	8000806 <DriveMotor+0xa6>
 80007fc:	4b49      	ldr	r3, [pc, #292]	; (8000924 <DriveMotor+0x1c4>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b49      	ldr	r3, [pc, #292]	; (8000928 <DriveMotor+0x1c8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
		  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080c:	4847      	ldr	r0, [pc, #284]	; (800092c <DriveMotor+0x1cc>)
 800080e:	f001 f842 	bl	8001896 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000818:	4844      	ldr	r0, [pc, #272]	; (800092c <DriveMotor+0x1cc>)
 800081a:	f001 f83c 	bl	8001896 <HAL_GPIO_WritePin>

		}break;
 800081e:	e03e      	b.n	800089e <DriveMotor+0x13e>
		case CounterClockWise:
		{
		  PWM_CurrentChannel = PWM_COUNTER_CLOCKWISE_CHANNEL;
 8000820:	4b3f      	ldr	r3, [pc, #252]	; (8000920 <DriveMotor+0x1c0>)
 8000822:	2204      	movs	r2, #4
 8000824:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, 0);
 8000826:	4b3f      	ldr	r3, [pc, #252]	; (8000924 <DriveMotor+0x1c4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2200      	movs	r2, #0
 800082c:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 800082e:	4b3d      	ldr	r3, [pc, #244]	; (8000924 <DriveMotor+0x1c4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2200      	movs	r2, #0
 8000834:	639a      	str	r2, [r3, #56]	; 0x38
		  //delay here
		  HAL_Delay(PWM_DEADTIME_DELAY);
 8000836:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800083a:	f000 fcb5 	bl	80011a8 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, PWM_countingDutyCycle);
 800083e:	4b38      	ldr	r3, [pc, #224]	; (8000920 <DriveMotor+0x1c0>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d105      	bne.n	8000852 <DriveMotor+0xf2>
 8000846:	4b37      	ldr	r3, [pc, #220]	; (8000924 <DriveMotor+0x1c4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a37      	ldr	r2, [pc, #220]	; (8000928 <DriveMotor+0x1c8>)
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	635a      	str	r2, [r3, #52]	; 0x34
 8000850:	e018      	b.n	8000884 <DriveMotor+0x124>
 8000852:	4b33      	ldr	r3, [pc, #204]	; (8000920 <DriveMotor+0x1c0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b04      	cmp	r3, #4
 8000858:	d105      	bne.n	8000866 <DriveMotor+0x106>
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <DriveMotor+0x1c4>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	4b32      	ldr	r3, [pc, #200]	; (8000928 <DriveMotor+0x1c8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6393      	str	r3, [r2, #56]	; 0x38
 8000864:	e00e      	b.n	8000884 <DriveMotor+0x124>
 8000866:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <DriveMotor+0x1c0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b08      	cmp	r3, #8
 800086c:	d105      	bne.n	800087a <DriveMotor+0x11a>
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <DriveMotor+0x1c4>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <DriveMotor+0x1c8>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000878:	e004      	b.n	8000884 <DriveMotor+0x124>
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <DriveMotor+0x1c4>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <DriveMotor+0x1c8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
		  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	4828      	ldr	r0, [pc, #160]	; (800092c <DriveMotor+0x1cc>)
 800088c:	f001 f803 	bl	8001896 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000896:	4825      	ldr	r0, [pc, #148]	; (800092c <DriveMotor+0x1cc>)
 8000898:	f000 fffd 	bl	8001896 <HAL_GPIO_WritePin>
		}break;
 800089c:	bf00      	nop
		}
	}

	//setting PWM value
	PWM_countingDutyCycle = (uint32_t)fabs(controlSignal);
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <DriveMotor+0x1b4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fe88 	bl	80005bc <__aeabi_f2uiz>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <DriveMotor+0x1c8>)
 80008b0:	6013      	str	r3, [r2, #0]
	if(PWM_countingDutyCycle > 125)
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <DriveMotor+0x1c8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b7d      	cmp	r3, #125	; 0x7d
 80008b8:	d902      	bls.n	80008c0 <DriveMotor+0x160>
	{
		PWM_countingDutyCycle = 125;
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <DriveMotor+0x1c8>)
 80008bc:	227d      	movs	r2, #125	; 0x7d
 80008be:	601a      	str	r2, [r3, #0]
	}

    __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, PWM_countingDutyCycle);
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <DriveMotor+0x1c0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d105      	bne.n	80008d4 <DriveMotor+0x174>
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <DriveMotor+0x1c4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a16      	ldr	r2, [pc, #88]	; (8000928 <DriveMotor+0x1c8>)
 80008ce:	6812      	ldr	r2, [r2, #0]
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
 80008d2:	e018      	b.n	8000906 <DriveMotor+0x1a6>
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <DriveMotor+0x1c0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d105      	bne.n	80008e8 <DriveMotor+0x188>
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <DriveMotor+0x1c4>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <DriveMotor+0x1c8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6393      	str	r3, [r2, #56]	; 0x38
 80008e6:	e00e      	b.n	8000906 <DriveMotor+0x1a6>
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <DriveMotor+0x1c0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b08      	cmp	r3, #8
 80008ee:	d105      	bne.n	80008fc <DriveMotor+0x19c>
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <DriveMotor+0x1c4>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <DriveMotor+0x1c8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008fa:	e004      	b.n	8000906 <DriveMotor+0x1a6>
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <DriveMotor+0x1c4>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <DriveMotor+0x1c8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6413      	str	r3, [r2, #64]	; 0x40

	prevMotorDirection = motorDirection;
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <DriveMotor+0x1b8>)
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <DriveMotor+0x1bc>)
 800090c:	701a      	strb	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000194 	.word	0x20000194
 8000918:	20000105 	.word	0x20000105
 800091c:	20000000 	.word	0x20000000
 8000920:	20000114 	.word	0x20000114
 8000924:	2000002c 	.word	0x2000002c
 8000928:	20000118 	.word	0x20000118
 800092c:	40010c00 	.word	0x40010c00

08000930 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000930:	b5b0      	push	{r4, r5, r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000938:	2201      	movs	r2, #1
 800093a:	4916      	ldr	r1, [pc, #88]	; (8000994 <HAL_UART_RxCpltCallback+0x64>)
 800093c:	4816      	ldr	r0, [pc, #88]	; (8000998 <HAL_UART_RxCpltCallback+0x68>)
 800093e:	f002 fbba 	bl	80030b6 <HAL_UART_Receive_IT>
	buffer[bufferIndex] = rx_buffer[0];
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_UART_RxCpltCallback+0x6c>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_UART_RxCpltCallback+0x64>)
 800094a:	7819      	ldrb	r1, [r3, #0]
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_UART_RxCpltCallback+0x70>)
 800094e:	5499      	strb	r1, [r3, r2]
	bufferIndex++;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_UART_RxCpltCallback+0x6c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_UART_RxCpltCallback+0x6c>)
 800095a:	701a      	strb	r2, [r3, #0]
	if(bufferIndex == sizeof(ConfigData))
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_UART_RxCpltCallback+0x6c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b2c      	cmp	r3, #44	; 0x2c
 8000962:	d113      	bne.n	800098c <HAL_UART_RxCpltCallback+0x5c>
	{
		bufferIndex = 0;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_UART_RxCpltCallback+0x6c>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
		memset(&data,0 , sizeof(data));
 800096a:	222c      	movs	r2, #44	; 0x2c
 800096c:	2100      	movs	r1, #0
 800096e:	480d      	ldr	r0, [pc, #52]	; (80009a4 <HAL_UART_RxCpltCallback+0x74>)
 8000970:	f003 f8d8 	bl	8003b24 <memset>
		memcpy(&data, buffer, sizeof(buffer));
 8000974:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <HAL_UART_RxCpltCallback+0x74>)
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_UART_RxCpltCallback+0x70>)
 8000978:	4614      	mov	r4, r2
 800097a:	461d      	mov	r5, r3
 800097c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000984:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000988:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bdb0      	pop	{r4, r5, r7, pc}
 8000994:	20000104 	.word	0x20000104
 8000998:	200000bc 	.word	0x200000bc
 800099c:	20000148 	.word	0x20000148
 80009a0:	2000011c 	.word	0x2000011c
 80009a4:	2000014c 	.word	0x2000014c

080009a8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_6)
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	2b40      	cmp	r3, #64	; 0x40
 80009b6:	d11c      	bne.n	80009f2 <HAL_GPIO_EXTI_Callback+0x4a>
  {
	  int32_t inc = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	480f      	ldr	r0, [pc, #60]	; (80009fc <HAL_GPIO_EXTI_Callback+0x54>)
 80009c0:	f000 ff52 	bl	8001868 <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <HAL_GPIO_EXTI_Callback+0x28>
	  {
		   inc = 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e002      	b.n	80009d6 <HAL_GPIO_EXTI_Callback+0x2e>
	  }
	  else
	  {
		  inc = -1;
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295
 80009d4:	60fb      	str	r3, [r7, #12]
	  }
	  motor_current_position += inc;
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f7ff fd26 	bl	8000428 <__aeabi_i2f>
 80009dc:	4602      	mov	r2, r0
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x58>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4619      	mov	r1, r3
 80009e4:	4610      	mov	r0, r2
 80009e6:	f7ff fc6b 	bl	80002c0 <__addsf3>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x58>)
 80009f0:	601a      	str	r2, [r3, #0]
  }
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40010c00 	.word	0x40010c00
 8000a00:	20000108 	.word	0x20000108

08000a04 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d118      	bne.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		StatusData send_data = {0};
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
		send_data.motor_current_position = motor_current_position;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	60fb      	str	r3, [r7, #12]
		send_data.motor_current_speed = motor_current_speed;
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60bb      	str	r3, [r7, #8]
		send_data.motor_current_acceleration= motor_current_acceleration;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	613b      	str	r3, [r7, #16]
		send_data.dummy = 1212.22f;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a36:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&send_data, sizeof(StatusData));
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2210      	movs	r2, #16
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000a42:	f002 fb03 	bl	800304c <HAL_UART_Transmit_IT>
	}
}
 8000a46:	bf00      	nop
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000074 	.word	0x20000074
 8000a54:	20000108 	.word	0x20000108
 8000a58:	2000010c 	.word	0x2000010c
 8000a5c:	20000110 	.word	0x20000110
 8000a60:	4497870a 	.word	0x4497870a
 8000a64:	200000bc 	.word	0x200000bc

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f000 fb3a 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f838 	bl	8000ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f000 f972 	bl	8000d5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a78:	f000 f946 	bl	8000d08 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000a7c:	f000 f874 	bl	8000b68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a80:	f000 f8f4 	bl	8000c6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000a84:	2201      	movs	r2, #1
 8000a86:	4912      	ldr	r1, [pc, #72]	; (8000ad0 <main+0x68>)
 8000a88:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <main+0x6c>)
 8000a8a:	f002 fb14 	bl	80030b6 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4811      	ldr	r0, [pc, #68]	; (8000ad8 <main+0x70>)
 8000a92:	f001 fc35 	bl	8002300 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a96:	2104      	movs	r1, #4
 8000a98:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <main+0x70>)
 8000a9a:	f001 fc31 	bl	8002300 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <main+0x70>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <main+0x74>)
 8000aae:	f000 fef2 	bl	8001896 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <main+0x74>)
 8000aba:	f000 feec 	bl	8001896 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 8000abe:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <main+0x78>)
 8000ac0:	f001 fb7a 	bl	80021b8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CalculatePID();
 8000ac4:	f7ff fdc4 	bl	8000650 <CalculatePID>
	  DriveMotor();
 8000ac8:	f7ff fe4a 	bl	8000760 <DriveMotor>
	  CalculatePID();
 8000acc:	e7fa      	b.n	8000ac4 <main+0x5c>
 8000ace:	bf00      	nop
 8000ad0:	20000104 	.word	0x20000104
 8000ad4:	200000bc 	.word	0x200000bc
 8000ad8:	2000002c 	.word	0x2000002c
 8000adc:	40010c00 	.word	0x40010c00
 8000ae0:	20000074 	.word	0x20000074

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b090      	sub	sp, #64	; 0x40
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0318 	add.w	r3, r7, #24
 8000aee:	2228      	movs	r2, #40	; 0x28
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 f816 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0e:	2310      	movs	r3, #16
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b16:	2300      	movs	r3, #0
 8000b18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b1a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0318 	add.w	r3, r7, #24
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fee7 	bl	80018f8 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b30:	f000 f976 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 f954 	bl	8001dfc <HAL_RCC_ClockConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b5a:	f000 f961 	bl	8000e20 <Error_Handler>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3740      	adds	r7, #64	; 0x40
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	615a      	str	r2, [r3, #20]
 8000b96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b98:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ba0:	4b31      	ldr	r3, [pc, #196]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000bae:	22ff      	movs	r2, #255	; 0xff
 8000bb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bbe:	482a      	ldr	r0, [pc, #168]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000bc0:	f001 faaa 	bl	8002118 <HAL_TIM_Base_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000bca:	f000 f929 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4823      	ldr	r0, [pc, #140]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000bdc:	f001 fdf6 	bl	80027cc <HAL_TIM_ConfigClockSource>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000be6:	f000 f91b 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bea:	481f      	ldr	r0, [pc, #124]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000bec:	f001 fb30 	bl	8002250 <HAL_TIM_PWM_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000bf6:	f000 f913 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	4619      	mov	r1, r3
 8000c08:	4817      	ldr	r0, [pc, #92]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000c0a:	f002 f965 	bl	8002ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000c14:	f000 f904 	bl	8000e20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c18:	2360      	movs	r3, #96	; 0x60
 8000c1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 8000c1c:	237d      	movs	r3, #125	; 0x7d
 8000c1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000c30:	f001 fd0a 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000c3a:	f000 f8f1 	bl	8000e20 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2204      	movs	r2, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4807      	ldr	r0, [pc, #28]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000c4a:	f001 fcfd 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000c54:	f000 f8e4 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <MX_TIM2_Init+0x100>)
 8000c5a:	f000 f951 	bl	8000f00 <HAL_TIM_MspPostInit>

}
 8000c5e:	bf00      	nop
 8000c60:	3738      	adds	r7, #56	; 0x38
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000002c 	.word	0x2000002c

08000c6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c80:	463b      	mov	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_TIM3_Init+0x94>)
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <MX_TIM3_Init+0x98>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 128 - 1;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_TIM3_Init+0x94>)
 8000c90:	227f      	movs	r2, #127	; 0x7f
 8000c92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_TIM3_Init+0x94>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535 - 1;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_TIM3_Init+0x94>)
 8000c9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ca0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_TIM3_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_TIM3_Init+0x94>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cae:	4814      	ldr	r0, [pc, #80]	; (8000d00 <MX_TIM3_Init+0x94>)
 8000cb0:	f001 fa32 	bl	8002118 <HAL_TIM_Base_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000cba:	f000 f8b1 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <MX_TIM3_Init+0x94>)
 8000ccc:	f001 fd7e 	bl	80027cc <HAL_TIM_ConfigClockSource>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000cd6:	f000 f8a3 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <MX_TIM3_Init+0x94>)
 8000ce8:	f002 f8f6 	bl	8002ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000cf2:	f000 f895 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000074 	.word	0x20000074
 8000d04:	40000400 	.word	0x40000400

08000d08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <MX_USART1_UART_Init+0x50>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USART1_UART_Init+0x4c>)
 8000d40:	f002 f934 	bl	8002fac <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d4a:	f000 f869 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200000bc 	.word	0x200000bc
 8000d58:	40013800 	.word	0x40013800

08000d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <MX_GPIO_Init+0xb8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a27      	ldr	r2, [pc, #156]	; (8000e14 <MX_GPIO_Init+0xb8>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <MX_GPIO_Init+0xb8>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <MX_GPIO_Init+0xb8>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a21      	ldr	r2, [pc, #132]	; (8000e14 <MX_GPIO_Init+0xb8>)
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <MX_GPIO_Init+0xb8>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000da6:	481c      	ldr	r0, [pc, #112]	; (8000e18 <MX_GPIO_Init+0xbc>)
 8000da8:	f000 fd75 	bl	8001896 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000dac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000db0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4814      	ldr	r0, [pc, #80]	; (8000e18 <MX_GPIO_Init+0xbc>)
 8000dc6:	f000 fbd3 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_GPIO_Init+0xc0>)
 8000dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480e      	ldr	r0, [pc, #56]	; (8000e18 <MX_GPIO_Init+0xbc>)
 8000dde:	f000 fbc7 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4619      	mov	r1, r3
 8000df4:	4808      	ldr	r0, [pc, #32]	; (8000e18 <MX_GPIO_Init+0xbc>)
 8000df6:	f000 fbbb 	bl	8001570 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2017      	movs	r0, #23
 8000e00:	f000 facd 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e04:	2017      	movs	r0, #23
 8000e06:	f000 fae6 	bl	80013d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	10110000 	.word	0x10110000

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_MspInit+0x60>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_MspInit+0x60>)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea0:	d10c      	bne.n	8000ebc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_TIM_Base_MspInit+0x68>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <HAL_TIM_Base_MspInit+0x68>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_TIM_Base_MspInit+0x68>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eba:	e018      	b.n	8000eee <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_TIM_Base_MspInit+0x6c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d113      	bne.n	8000eee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_TIM_Base_MspInit+0x68>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_TIM_Base_MspInit+0x68>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_TIM_Base_MspInit+0x68>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	201d      	movs	r0, #29
 8000ee4:	f000 fa5b 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ee8:	201d      	movs	r0, #29
 8000eea:	f000 fa74 	bl	80013d6 <HAL_NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40000400 	.word	0x40000400

08000f00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f1e:	d117      	bne.n	8000f50 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_TIM_MspPostInit+0x58>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <HAL_TIM_MspPostInit+0x58>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_TIM_MspPostInit+0x58>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4804      	ldr	r0, [pc, #16]	; (8000f5c <HAL_TIM_MspPostInit+0x5c>)
 8000f4c:	f000 fb10 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010800 	.word	0x40010800

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a20      	ldr	r2, [pc, #128]	; (8000ffc <HAL_UART_MspInit+0x9c>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d139      	bne.n	8000ff4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <HAL_UART_MspInit+0xa0>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <HAL_UART_MspInit+0xa0>)
 8000f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_UART_MspInit+0xa0>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_UART_MspInit+0xa0>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <HAL_UART_MspInit+0xa0>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_UART_MspInit+0xa0>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480f      	ldr	r0, [pc, #60]	; (8001004 <HAL_UART_MspInit+0xa4>)
 8000fc6:	f000 fad3 	bl	8001570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <HAL_UART_MspInit+0xa4>)
 8000fe0:	f000 fac6 	bl	8001570 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2025      	movs	r0, #37	; 0x25
 8000fea:	f000 f9d8 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fee:	2025      	movs	r0, #37	; 0x25
 8000ff0:	f000 f9f1 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40021000 	.word	0x40021000
 8001004:	40010800 	.word	0x40010800

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104e:	f000 f88f 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}

08001056 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800105a:	2040      	movs	r0, #64	; 0x40
 800105c:	f000 fc34 	bl	80018c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM3_IRQHandler+0x10>)
 800106a:	f001 f9e5 	bl	8002438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000074 	.word	0x20000074

08001078 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <USART1_IRQHandler+0x10>)
 800107e:	f002 f83f 	bl	8003100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000bc 	.word	0x200000bc

0800108c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001098:	f7ff fff8 	bl	800108c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800109e:	490c      	ldr	r1, [pc, #48]	; (80010d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010a0:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010b4:	4c09      	ldr	r4, [pc, #36]	; (80010dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c2:	f002 fd37 	bl	8003b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c6:	f7ff fccf 	bl	8000a68 <main>
  bx lr
 80010ca:	4770      	bx	lr
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010d4:	08003bc8 	.word	0x08003bc8
  ldr r2, =_sbss
 80010d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010dc:	2000019c 	.word	0x2000019c

080010e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC1_2_IRQHandler>
	...

080010e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_Init+0x28>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_Init+0x28>)
 80010ee:	f043 0310 	orr.w	r3, r3, #16
 80010f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f947 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	200f      	movs	r0, #15
 80010fc:	f000 f808 	bl	8001110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fe94 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40022000 	.word	0x40022000

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x54>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f95f 	bl	80013f2 <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f927 	bl	800139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x5c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000004 	.word	0x20000004
 8001168:	2000000c 	.word	0x2000000c
 800116c:	20000008 	.word	0x20000008

08001170 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <HAL_IncTick+0x1c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_IncTick+0x20>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a03      	ldr	r2, [pc, #12]	; (8001190 <HAL_IncTick+0x20>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	2000000c 	.word	0x2000000c
 8001190:	20000198 	.word	0x20000198

08001194 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <HAL_GetTick+0x10>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	20000198 	.word	0x20000198

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff fff0 	bl	8001194 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffe0 	bl	8001194 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000000c 	.word	0x2000000c

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4906      	ldr	r1, [pc, #24]	; (8001288 <__NVIC_EnableIRQ+0x34>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f7ff ff90 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff2d 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff42 	bl	8001238 <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff90 	bl	80012e0 <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5f 	bl	800128c <__NVIC_SetPriority>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff35 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffa2 	bl	8001344 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d008      	beq.n	8001434 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2204      	movs	r2, #4
 8001426:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e020      	b.n	8001476 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 020e 	bic.w	r2, r2, #14
 8001442:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145c:	2101      	movs	r1, #1
 800145e:	fa01 f202 	lsl.w	r2, r1, r2
 8001462:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001474:	7bfb      	ldrb	r3, [r7, #15]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d005      	beq.n	80014a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2204      	movs	r2, #4
 800149c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e051      	b.n	8001548 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 020e 	bic.w	r2, r2, #14
 80014b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a22      	ldr	r2, [pc, #136]	; (8001554 <HAL_DMA_Abort_IT+0xd4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d029      	beq.n	8001522 <HAL_DMA_Abort_IT+0xa2>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a21      	ldr	r2, [pc, #132]	; (8001558 <HAL_DMA_Abort_IT+0xd8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d022      	beq.n	800151e <HAL_DMA_Abort_IT+0x9e>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1f      	ldr	r2, [pc, #124]	; (800155c <HAL_DMA_Abort_IT+0xdc>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d01a      	beq.n	8001518 <HAL_DMA_Abort_IT+0x98>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <HAL_DMA_Abort_IT+0xe0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d012      	beq.n	8001512 <HAL_DMA_Abort_IT+0x92>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_DMA_Abort_IT+0xe4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00a      	beq.n	800150c <HAL_DMA_Abort_IT+0x8c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <HAL_DMA_Abort_IT+0xe8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d102      	bne.n	8001506 <HAL_DMA_Abort_IT+0x86>
 8001500:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001504:	e00e      	b.n	8001524 <HAL_DMA_Abort_IT+0xa4>
 8001506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800150a:	e00b      	b.n	8001524 <HAL_DMA_Abort_IT+0xa4>
 800150c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001510:	e008      	b.n	8001524 <HAL_DMA_Abort_IT+0xa4>
 8001512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001516:	e005      	b.n	8001524 <HAL_DMA_Abort_IT+0xa4>
 8001518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151c:	e002      	b.n	8001524 <HAL_DMA_Abort_IT+0xa4>
 800151e:	2310      	movs	r3, #16
 8001520:	e000      	b.n	8001524 <HAL_DMA_Abort_IT+0xa4>
 8001522:	2301      	movs	r3, #1
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_DMA_Abort_IT+0xec>)
 8001526:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	4798      	blx	r3
    } 
  }
  return status;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020008 	.word	0x40020008
 8001558:	4002001c 	.word	0x4002001c
 800155c:	40020030 	.word	0x40020030
 8001560:	40020044 	.word	0x40020044
 8001564:	40020058 	.word	0x40020058
 8001568:	4002006c 	.word	0x4002006c
 800156c:	40020000 	.word	0x40020000

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b08b      	sub	sp, #44	; 0x2c
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001582:	e161      	b.n	8001848 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001584:	2201      	movs	r2, #1
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	429a      	cmp	r2, r3
 800159e:	f040 8150 	bne.w	8001842 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4a97      	ldr	r2, [pc, #604]	; (8001804 <HAL_GPIO_Init+0x294>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d05e      	beq.n	800166a <HAL_GPIO_Init+0xfa>
 80015ac:	4a95      	ldr	r2, [pc, #596]	; (8001804 <HAL_GPIO_Init+0x294>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d875      	bhi.n	800169e <HAL_GPIO_Init+0x12e>
 80015b2:	4a95      	ldr	r2, [pc, #596]	; (8001808 <HAL_GPIO_Init+0x298>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d058      	beq.n	800166a <HAL_GPIO_Init+0xfa>
 80015b8:	4a93      	ldr	r2, [pc, #588]	; (8001808 <HAL_GPIO_Init+0x298>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d86f      	bhi.n	800169e <HAL_GPIO_Init+0x12e>
 80015be:	4a93      	ldr	r2, [pc, #588]	; (800180c <HAL_GPIO_Init+0x29c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d052      	beq.n	800166a <HAL_GPIO_Init+0xfa>
 80015c4:	4a91      	ldr	r2, [pc, #580]	; (800180c <HAL_GPIO_Init+0x29c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d869      	bhi.n	800169e <HAL_GPIO_Init+0x12e>
 80015ca:	4a91      	ldr	r2, [pc, #580]	; (8001810 <HAL_GPIO_Init+0x2a0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d04c      	beq.n	800166a <HAL_GPIO_Init+0xfa>
 80015d0:	4a8f      	ldr	r2, [pc, #572]	; (8001810 <HAL_GPIO_Init+0x2a0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d863      	bhi.n	800169e <HAL_GPIO_Init+0x12e>
 80015d6:	4a8f      	ldr	r2, [pc, #572]	; (8001814 <HAL_GPIO_Init+0x2a4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d046      	beq.n	800166a <HAL_GPIO_Init+0xfa>
 80015dc:	4a8d      	ldr	r2, [pc, #564]	; (8001814 <HAL_GPIO_Init+0x2a4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d85d      	bhi.n	800169e <HAL_GPIO_Init+0x12e>
 80015e2:	2b12      	cmp	r3, #18
 80015e4:	d82a      	bhi.n	800163c <HAL_GPIO_Init+0xcc>
 80015e6:	2b12      	cmp	r3, #18
 80015e8:	d859      	bhi.n	800169e <HAL_GPIO_Init+0x12e>
 80015ea:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <HAL_GPIO_Init+0x80>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	0800166b 	.word	0x0800166b
 80015f4:	08001645 	.word	0x08001645
 80015f8:	08001657 	.word	0x08001657
 80015fc:	08001699 	.word	0x08001699
 8001600:	0800169f 	.word	0x0800169f
 8001604:	0800169f 	.word	0x0800169f
 8001608:	0800169f 	.word	0x0800169f
 800160c:	0800169f 	.word	0x0800169f
 8001610:	0800169f 	.word	0x0800169f
 8001614:	0800169f 	.word	0x0800169f
 8001618:	0800169f 	.word	0x0800169f
 800161c:	0800169f 	.word	0x0800169f
 8001620:	0800169f 	.word	0x0800169f
 8001624:	0800169f 	.word	0x0800169f
 8001628:	0800169f 	.word	0x0800169f
 800162c:	0800169f 	.word	0x0800169f
 8001630:	0800169f 	.word	0x0800169f
 8001634:	0800164d 	.word	0x0800164d
 8001638:	08001661 	.word	0x08001661
 800163c:	4a76      	ldr	r2, [pc, #472]	; (8001818 <HAL_GPIO_Init+0x2a8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001642:	e02c      	b.n	800169e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	623b      	str	r3, [r7, #32]
          break;
 800164a:	e029      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	3304      	adds	r3, #4
 8001652:	623b      	str	r3, [r7, #32]
          break;
 8001654:	e024      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	3308      	adds	r3, #8
 800165c:	623b      	str	r3, [r7, #32]
          break;
 800165e:	e01f      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	330c      	adds	r3, #12
 8001666:	623b      	str	r3, [r7, #32]
          break;
 8001668:	e01a      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001672:	2304      	movs	r3, #4
 8001674:	623b      	str	r3, [r7, #32]
          break;
 8001676:	e013      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001680:	2308      	movs	r3, #8
 8001682:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	611a      	str	r2, [r3, #16]
          break;
 800168a:	e009      	b.n	80016a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800168c:	2308      	movs	r3, #8
 800168e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	615a      	str	r2, [r3, #20]
          break;
 8001696:	e003      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
          break;
 800169c:	e000      	b.n	80016a0 <HAL_GPIO_Init+0x130>
          break;
 800169e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2bff      	cmp	r3, #255	; 0xff
 80016a4:	d801      	bhi.n	80016aa <HAL_GPIO_Init+0x13a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	e001      	b.n	80016ae <HAL_GPIO_Init+0x13e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3304      	adds	r3, #4
 80016ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2bff      	cmp	r3, #255	; 0xff
 80016b4:	d802      	bhi.n	80016bc <HAL_GPIO_Init+0x14c>
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	e002      	b.n	80016c2 <HAL_GPIO_Init+0x152>
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	3b08      	subs	r3, #8
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	210f      	movs	r1, #15
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	401a      	ands	r2, r3
 80016d4:	6a39      	ldr	r1, [r7, #32]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	431a      	orrs	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80a9 	beq.w	8001842 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016f0:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_GPIO_Init+0x2ac>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a49      	ldr	r2, [pc, #292]	; (800181c <HAL_GPIO_Init+0x2ac>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_GPIO_Init+0x2ac>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001708:	4a45      	ldr	r2, [pc, #276]	; (8001820 <HAL_GPIO_Init+0x2b0>)
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3302      	adds	r3, #2
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	220f      	movs	r2, #15
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4013      	ands	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a3d      	ldr	r2, [pc, #244]	; (8001824 <HAL_GPIO_Init+0x2b4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d00d      	beq.n	8001750 <HAL_GPIO_Init+0x1e0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a3c      	ldr	r2, [pc, #240]	; (8001828 <HAL_GPIO_Init+0x2b8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d007      	beq.n	800174c <HAL_GPIO_Init+0x1dc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a3b      	ldr	r2, [pc, #236]	; (800182c <HAL_GPIO_Init+0x2bc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d101      	bne.n	8001748 <HAL_GPIO_Init+0x1d8>
 8001744:	2302      	movs	r3, #2
 8001746:	e004      	b.n	8001752 <HAL_GPIO_Init+0x1e2>
 8001748:	2303      	movs	r3, #3
 800174a:	e002      	b.n	8001752 <HAL_GPIO_Init+0x1e2>
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <HAL_GPIO_Init+0x1e2>
 8001750:	2300      	movs	r3, #0
 8001752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001754:	f002 0203 	and.w	r2, r2, #3
 8001758:	0092      	lsls	r2, r2, #2
 800175a:	4093      	lsls	r3, r2
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001762:	492f      	ldr	r1, [pc, #188]	; (8001820 <HAL_GPIO_Init+0x2b0>)
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800177c:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	492b      	ldr	r1, [pc, #172]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	608b      	str	r3, [r1, #8]
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800178a:	4b29      	ldr	r3, [pc, #164]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	43db      	mvns	r3, r3
 8001792:	4927      	ldr	r1, [pc, #156]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 8001794:	4013      	ands	r3, r2
 8001796:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a4:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	4921      	ldr	r1, [pc, #132]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60cb      	str	r3, [r1, #12]
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	491d      	ldr	r1, [pc, #116]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 80017bc:	4013      	ands	r3, r2
 80017be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4917      	ldr	r1, [pc, #92]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4913      	ldr	r1, [pc, #76]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01f      	beq.n	8001834 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	490d      	ldr	r1, [pc, #52]	; (8001830 <HAL_GPIO_Init+0x2c0>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]
 8001800:	e01f      	b.n	8001842 <HAL_GPIO_Init+0x2d2>
 8001802:	bf00      	nop
 8001804:	10320000 	.word	0x10320000
 8001808:	10310000 	.word	0x10310000
 800180c:	10220000 	.word	0x10220000
 8001810:	10210000 	.word	0x10210000
 8001814:	10120000 	.word	0x10120000
 8001818:	10110000 	.word	0x10110000
 800181c:	40021000 	.word	0x40021000
 8001820:	40010000 	.word	0x40010000
 8001824:	40010800 	.word	0x40010800
 8001828:	40010c00 	.word	0x40010c00
 800182c:	40011000 	.word	0x40011000
 8001830:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_GPIO_Init+0x2f4>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	43db      	mvns	r3, r3
 800183c:	4909      	ldr	r1, [pc, #36]	; (8001864 <HAL_GPIO_Init+0x2f4>)
 800183e:	4013      	ands	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	3301      	adds	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	f47f ae96 	bne.w	8001584 <HAL_GPIO_Init+0x14>
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	372c      	adds	r7, #44	; 0x2c
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40010400 	.word	0x40010400

08001868 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e001      	b.n	800188a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	807b      	strh	r3, [r7, #2]
 80018a2:	4613      	mov	r3, r2
 80018a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a6:	787b      	ldrb	r3, [r7, #1]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ac:	887a      	ldrh	r2, [r7, #2]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018b2:	e003      	b.n	80018bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	041a      	lsls	r2, r3, #16
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	611a      	str	r2, [r3, #16]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f85e 	bl	80009a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40010400 	.word	0x40010400

080018f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e272      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8087 	beq.w	8001a26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001918:	4b92      	ldr	r3, [pc, #584]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b04      	cmp	r3, #4
 8001922:	d00c      	beq.n	800193e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001924:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d112      	bne.n	8001956 <HAL_RCC_OscConfig+0x5e>
 8001930:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d10b      	bne.n	8001956 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193e:	4b89      	ldr	r3, [pc, #548]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d06c      	beq.n	8001a24 <HAL_RCC_OscConfig+0x12c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d168      	bne.n	8001a24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e24c      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x76>
 8001960:	4b80      	ldr	r3, [pc, #512]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a7f      	ldr	r2, [pc, #508]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	e02e      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x98>
 8001976:	4b7b      	ldr	r3, [pc, #492]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7a      	ldr	r2, [pc, #488]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 800197c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b78      	ldr	r3, [pc, #480]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a77      	ldr	r2, [pc, #476]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e01d      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0xbc>
 800199a:	4b72      	ldr	r3, [pc, #456]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a71      	ldr	r2, [pc, #452]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a6e      	ldr	r2, [pc, #440]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 80019b4:	4b6b      	ldr	r3, [pc, #428]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6a      	ldr	r2, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a67      	ldr	r2, [pc, #412]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fbde 	bl	8001194 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff fbda 	bl	8001194 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e200      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0xe4>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fbca 	bl	8001194 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fbc6 	bl	8001194 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	; 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e1ec      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x10c>
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d063      	beq.n	8001afa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a32:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a3e:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d11c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x18c>
 8001a4a:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d116      	bne.n	8001a84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	4b43      	ldr	r3, [pc, #268]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x176>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e1c0      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4939      	ldr	r1, [pc, #228]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	e03a      	b.n	8001afa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fb7f 	bl	8001194 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fb7b 	bl	8001194 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e1a1      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4927      	ldr	r1, [pc, #156]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fb5e 	bl	8001194 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff fb5a 	bl	8001194 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e180      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d03a      	beq.n	8001b7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d019      	beq.n	8001b42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_RCC_OscConfig+0x274>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b14:	f7ff fb3e 	bl	8001194 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fb3a 	bl	8001194 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e160      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f000 face 	bl	80020dc <RCC_Delay>
 8001b40:	e01c      	b.n	8001b7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_RCC_OscConfig+0x274>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7ff fb24 	bl	8001194 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4e:	e00f      	b.n	8001b70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff fb20 	bl	8001194 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d908      	bls.n	8001b70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e146      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	42420000 	.word	0x42420000
 8001b6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	4b92      	ldr	r3, [pc, #584]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e9      	bne.n	8001b50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80a6 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8e:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10d      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a87      	ldr	r2, [pc, #540]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	61d3      	str	r3, [r2, #28]
 8001ba6:	4b85      	ldr	r3, [pc, #532]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb6:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <HAL_RCC_OscConfig+0x4c8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d118      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc2:	4b7f      	ldr	r3, [pc, #508]	; (8001dc0 <HAL_RCC_OscConfig+0x4c8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a7e      	ldr	r2, [pc, #504]	; (8001dc0 <HAL_RCC_OscConfig+0x4c8>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fae1 	bl	8001194 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd6:	f7ff fadd 	bl	8001194 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b64      	cmp	r3, #100	; 0x64
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e103      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	4b75      	ldr	r3, [pc, #468]	; (8001dc0 <HAL_RCC_OscConfig+0x4c8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x312>
 8001bfc:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a6e      	ldr	r2, [pc, #440]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	e02d      	b.n	8001c66 <HAL_RCC_OscConfig+0x36e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x334>
 8001c12:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a69      	ldr	r2, [pc, #420]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	6213      	str	r3, [r2, #32]
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a66      	ldr	r2, [pc, #408]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	f023 0304 	bic.w	r3, r3, #4
 8001c28:	6213      	str	r3, [r2, #32]
 8001c2a:	e01c      	b.n	8001c66 <HAL_RCC_OscConfig+0x36e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d10c      	bne.n	8001c4e <HAL_RCC_OscConfig+0x356>
 8001c34:	4b61      	ldr	r3, [pc, #388]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a60      	ldr	r2, [pc, #384]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	4b5e      	ldr	r3, [pc, #376]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4a5d      	ldr	r2, [pc, #372]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6213      	str	r3, [r2, #32]
 8001c4c:	e00b      	b.n	8001c66 <HAL_RCC_OscConfig+0x36e>
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a5a      	ldr	r2, [pc, #360]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	4b58      	ldr	r3, [pc, #352]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a57      	ldr	r2, [pc, #348]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d015      	beq.n	8001c9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fa91 	bl	8001194 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff fa8d 	bl	8001194 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0b1      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ee      	beq.n	8001c76 <HAL_RCC_OscConfig+0x37e>
 8001c98:	e014      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff fa7b 	bl	8001194 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff fa77 	bl	8001194 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e09b      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb8:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ee      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d105      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cca:	4b3c      	ldr	r3, [pc, #240]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a3b      	ldr	r2, [pc, #236]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8087 	beq.w	8001dee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce0:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d061      	beq.n	8001db0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d146      	bne.n	8001d82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf4:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <HAL_RCC_OscConfig+0x4cc>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fa4b 	bl	8001194 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff fa47 	bl	8001194 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e06d      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d28:	d108      	bne.n	8001d3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	4921      	ldr	r1, [pc, #132]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a19      	ldr	r1, [r3, #32]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	491b      	ldr	r1, [pc, #108]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_OscConfig+0x4cc>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fa1b 	bl	8001194 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d62:	f7ff fa17 	bl	8001194 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e03d      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x46a>
 8001d80:	e035      	b.n	8001dee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_RCC_OscConfig+0x4cc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fa04 	bl	8001194 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d90:	f7ff fa00 	bl	8001194 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e026      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x498>
 8001dae:	e01e      	b.n	8001dee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e019      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_OscConfig+0x500>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0d0      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d910      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 0207 	bic.w	r2, r3, #7
 8001e26:	4965      	ldr	r1, [pc, #404]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b8      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e58:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a58      	ldr	r2, [pc, #352]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e70:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4a52      	ldr	r2, [pc, #328]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	494d      	ldr	r1, [pc, #308]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d040      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d115      	bne.n	8001eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e073      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e06b      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eda:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f023 0203 	bic.w	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4936      	ldr	r1, [pc, #216]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eec:	f7ff f952 	bl	8001194 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef4:	f7ff f94e 	bl	8001194 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e053      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 020c 	and.w	r2, r3, #12
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d1eb      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d210      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 0207 	bic.w	r2, r3, #7
 8001f32:	4922      	ldr	r1, [pc, #136]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e032      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4916      	ldr	r1, [pc, #88]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f8a:	f000 f821 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	490a      	ldr	r1, [pc, #40]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9c:	5ccb      	ldrb	r3, [r1, r3]
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x1d0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f8b0 	bl	8001110 <HAL_InitTick>

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08003b94 	.word	0x08003b94
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d002      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0x30>
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d003      	beq.n	8002006 <HAL_RCC_GetSysClockFreq+0x36>
 8001ffe:	e027      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCC_GetSysClockFreq+0x98>)
 8002002:	613b      	str	r3, [r7, #16]
      break;
 8002004:	e027      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	0c9b      	lsrs	r3, r3, #18
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002010:	5cd3      	ldrb	r3, [r2, r3]
 8002012:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d010      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_RCC_GetSysClockFreq+0x94>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	0c5b      	lsrs	r3, r3, #17
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	4a11      	ldr	r2, [pc, #68]	; (8002070 <HAL_RCC_GetSysClockFreq+0xa0>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_RCC_GetSysClockFreq+0x98>)
 8002032:	fb03 f202 	mul.w	r2, r3, r2
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e004      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a0c      	ldr	r2, [pc, #48]	; (8002074 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	613b      	str	r3, [r7, #16]
      break;
 800204e:	e002      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_RCC_GetSysClockFreq+0x98>)
 8002052:	613b      	str	r3, [r7, #16]
      break;
 8002054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002056:	693b      	ldr	r3, [r7, #16]
}
 8002058:	4618      	mov	r0, r3
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	007a1200 	.word	0x007a1200
 800206c:	08003bac 	.word	0x08003bac
 8002070:	08003bbc 	.word	0x08003bbc
 8002074:	003d0900 	.word	0x003d0900

08002078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800207c:	4b02      	ldr	r3, [pc, #8]	; (8002088 <HAL_RCC_GetHCLKFreq+0x10>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	20000004 	.word	0x20000004

0800208c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002090:	f7ff fff2 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4903      	ldr	r1, [pc, #12]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08003ba4 	.word	0x08003ba4

080020b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020b8:	f7ff ffde 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	0adb      	lsrs	r3, r3, #11
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4903      	ldr	r1, [pc, #12]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	08003ba4 	.word	0x08003ba4

080020dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <RCC_Delay+0x34>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <RCC_Delay+0x38>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	0a5b      	lsrs	r3, r3, #9
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020f8:	bf00      	nop
  }
  while (Delay --);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1e5a      	subs	r2, r3, #1
 80020fe:	60fa      	str	r2, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f9      	bne.n	80020f8 <RCC_Delay+0x1c>
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	20000004 	.word	0x20000004
 8002114:	10624dd3 	.word	0x10624dd3

08002118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e041      	b.n	80021ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe fea6 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3304      	adds	r3, #4
 8002154:	4619      	mov	r1, r3
 8002156:	4610      	mov	r0, r2
 8002158:	f000 fc24 	bl	80029a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d001      	beq.n	80021d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e035      	b.n	800223c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a16      	ldr	r2, [pc, #88]	; (8002248 <HAL_TIM_Base_Start_IT+0x90>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d009      	beq.n	8002206 <HAL_TIM_Base_Start_IT+0x4e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fa:	d004      	beq.n	8002206 <HAL_TIM_Base_Start_IT+0x4e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <HAL_TIM_Base_Start_IT+0x94>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d111      	bne.n	800222a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b06      	cmp	r3, #6
 8002216:	d010      	beq.n	800223a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002228:	e007      	b.n	800223a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40012c00 	.word	0x40012c00
 800224c:	40000400 	.word	0x40000400

08002250 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e041      	b.n	80022e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f839 	bl	80022ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	4619      	mov	r1, r3
 800228e:	4610      	mov	r0, r2
 8002290:	f000 fb88 	bl	80029a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_TIM_PWM_Start+0x24>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	bf14      	ite	ne
 800231c:	2301      	movne	r3, #1
 800231e:	2300      	moveq	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e022      	b.n	800236a <HAL_TIM_PWM_Start+0x6a>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b04      	cmp	r3, #4
 8002328:	d109      	bne.n	800233e <HAL_TIM_PWM_Start+0x3e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	e015      	b.n	800236a <HAL_TIM_PWM_Start+0x6a>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b08      	cmp	r3, #8
 8002342:	d109      	bne.n	8002358 <HAL_TIM_PWM_Start+0x58>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	e008      	b.n	800236a <HAL_TIM_PWM_Start+0x6a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	bf14      	ite	ne
 8002364:	2301      	movne	r3, #1
 8002366:	2300      	moveq	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e059      	b.n	8002426 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_TIM_PWM_Start+0x82>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002380:	e013      	b.n	80023aa <HAL_TIM_PWM_Start+0xaa>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b04      	cmp	r3, #4
 8002386:	d104      	bne.n	8002392 <HAL_TIM_PWM_Start+0x92>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002390:	e00b      	b.n	80023aa <HAL_TIM_PWM_Start+0xaa>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d104      	bne.n	80023a2 <HAL_TIM_PWM_Start+0xa2>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a0:	e003      	b.n	80023aa <HAL_TIM_PWM_Start+0xaa>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2202      	movs	r2, #2
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2201      	movs	r2, #1
 80023b0:	6839      	ldr	r1, [r7, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fd6c 	bl	8002e90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <HAL_TIM_PWM_Start+0x130>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d107      	bne.n	80023d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a16      	ldr	r2, [pc, #88]	; (8002430 <HAL_TIM_PWM_Start+0x130>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d009      	beq.n	80023f0 <HAL_TIM_PWM_Start+0xf0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d004      	beq.n	80023f0 <HAL_TIM_PWM_Start+0xf0>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <HAL_TIM_PWM_Start+0x134>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d111      	bne.n	8002414 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d010      	beq.n	8002424 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002412:	e007      	b.n	8002424 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40012c00 	.word	0x40012c00
 8002434:	40000400 	.word	0x40000400

08002438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b02      	cmp	r3, #2
 800244c:	d122      	bne.n	8002494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b02      	cmp	r3, #2
 800245a:	d11b      	bne.n	8002494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 0202 	mvn.w	r2, #2
 8002464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fa76 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 8002480:	e005      	b.n	800248e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fa69 	bl	800295a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fa78 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d122      	bne.n	80024e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d11b      	bne.n	80024e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0204 	mvn.w	r2, #4
 80024b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fa4c 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 80024d4:	e005      	b.n	80024e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa3f 	bl	800295a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fa4e 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d122      	bne.n	800253c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b08      	cmp	r3, #8
 8002502:	d11b      	bne.n	800253c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0208 	mvn.w	r2, #8
 800250c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2204      	movs	r2, #4
 8002512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fa22 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 8002528:	e005      	b.n	8002536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fa15 	bl	800295a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fa24 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b10      	cmp	r3, #16
 8002548:	d122      	bne.n	8002590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b10      	cmp	r3, #16
 8002556:	d11b      	bne.n	8002590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0210 	mvn.w	r2, #16
 8002560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2208      	movs	r2, #8
 8002566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f9f8 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 800257c:	e005      	b.n	800258a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f9eb 	bl	800295a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f9fa 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b01      	cmp	r3, #1
 800259c:	d10e      	bne.n	80025bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0201 	mvn.w	r2, #1
 80025b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe fa24 	bl	8000a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c6:	2b80      	cmp	r3, #128	; 0x80
 80025c8:	d10e      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d107      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fcd9 	bl	8002f9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d10e      	bne.n	8002614 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	d107      	bne.n	8002614 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800260c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f9be 	bl	8002990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b20      	cmp	r3, #32
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b20      	cmp	r3, #32
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0220 	mvn.w	r2, #32
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fca4 	bl	8002f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002662:	2302      	movs	r3, #2
 8002664:	e0ae      	b.n	80027c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b0c      	cmp	r3, #12
 8002672:	f200 809f 	bhi.w	80027b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002676:	a201      	add	r2, pc, #4	; (adr r2, 800267c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267c:	080026b1 	.word	0x080026b1
 8002680:	080027b5 	.word	0x080027b5
 8002684:	080027b5 	.word	0x080027b5
 8002688:	080027b5 	.word	0x080027b5
 800268c:	080026f1 	.word	0x080026f1
 8002690:	080027b5 	.word	0x080027b5
 8002694:	080027b5 	.word	0x080027b5
 8002698:	080027b5 	.word	0x080027b5
 800269c:	08002733 	.word	0x08002733
 80026a0:	080027b5 	.word	0x080027b5
 80026a4:	080027b5 	.word	0x080027b5
 80026a8:	080027b5 	.word	0x080027b5
 80026ac:	08002773 	.word	0x08002773
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f9cc 	bl	8002a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0208 	orr.w	r2, r2, #8
 80026ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0204 	bic.w	r2, r2, #4
 80026da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6999      	ldr	r1, [r3, #24]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	619a      	str	r2, [r3, #24]
      break;
 80026ee:	e064      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fa12 	bl	8002b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6999      	ldr	r1, [r3, #24]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	021a      	lsls	r2, r3, #8
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	619a      	str	r2, [r3, #24]
      break;
 8002730:	e043      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fa5b 	bl	8002bf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69da      	ldr	r2, [r3, #28]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0208 	orr.w	r2, r2, #8
 800274c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0204 	bic.w	r2, r2, #4
 800275c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69d9      	ldr	r1, [r3, #28]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	61da      	str	r2, [r3, #28]
      break;
 8002770:	e023      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	4618      	mov	r0, r3
 800277a:	f000 faa5 	bl	8002cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69da      	ldr	r2, [r3, #28]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800278c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800279c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69d9      	ldr	r1, [r3, #28]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	021a      	lsls	r2, r3, #8
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	61da      	str	r2, [r3, #28]
      break;
 80027b2:	e002      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	75fb      	strb	r3, [r7, #23]
      break;
 80027b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_TIM_ConfigClockSource+0x1c>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e0b4      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x186>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800280e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002820:	d03e      	beq.n	80028a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002826:	f200 8087 	bhi.w	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	f000 8086 	beq.w	800293e <HAL_TIM_ConfigClockSource+0x172>
 8002832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002836:	d87f      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b70      	cmp	r3, #112	; 0x70
 800283a:	d01a      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0xa6>
 800283c:	2b70      	cmp	r3, #112	; 0x70
 800283e:	d87b      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b60      	cmp	r3, #96	; 0x60
 8002842:	d050      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002844:	2b60      	cmp	r3, #96	; 0x60
 8002846:	d877      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b50      	cmp	r3, #80	; 0x50
 800284a:	d03c      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0xfa>
 800284c:	2b50      	cmp	r3, #80	; 0x50
 800284e:	d873      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d058      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x13a>
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d86f      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b30      	cmp	r3, #48	; 0x30
 800285a:	d064      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x15a>
 800285c:	2b30      	cmp	r3, #48	; 0x30
 800285e:	d86b      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b20      	cmp	r3, #32
 8002862:	d060      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x15a>
 8002864:	2b20      	cmp	r3, #32
 8002866:	d867      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b00      	cmp	r3, #0
 800286a:	d05c      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x15a>
 800286c:	2b10      	cmp	r3, #16
 800286e:	d05a      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x15a>
 8002870:	e062      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002882:	f000 fae6 	bl	8002e52 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	609a      	str	r2, [r3, #8]
      break;
 800289e:	e04f      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028b0:	f000 facf 	bl	8002e52 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c2:	609a      	str	r2, [r3, #8]
      break;
 80028c4:	e03c      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d2:	461a      	mov	r2, r3
 80028d4:	f000 fa46 	bl	8002d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2150      	movs	r1, #80	; 0x50
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fa9d 	bl	8002e1e <TIM_ITRx_SetConfig>
      break;
 80028e4:	e02c      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028f2:	461a      	mov	r2, r3
 80028f4:	f000 fa64 	bl	8002dc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2160      	movs	r1, #96	; 0x60
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fa8d 	bl	8002e1e <TIM_ITRx_SetConfig>
      break;
 8002904:	e01c      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002912:	461a      	mov	r2, r3
 8002914:	f000 fa26 	bl	8002d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2140      	movs	r1, #64	; 0x40
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fa7d 	bl	8002e1e <TIM_ITRx_SetConfig>
      break;
 8002924:	e00c      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f000 fa74 	bl	8002e1e <TIM_ITRx_SetConfig>
      break;
 8002936:	e003      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e000      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800293e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002950:	7bfb      	ldrb	r3, [r7, #15]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
	...

080029a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a25      	ldr	r2, [pc, #148]	; (8002a4c <TIM_Base_SetConfig+0xa8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d007      	beq.n	80029cc <TIM_Base_SetConfig+0x28>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d003      	beq.n	80029cc <TIM_Base_SetConfig+0x28>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a22      	ldr	r2, [pc, #136]	; (8002a50 <TIM_Base_SetConfig+0xac>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d108      	bne.n	80029de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <TIM_Base_SetConfig+0xa8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <TIM_Base_SetConfig+0x52>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d003      	beq.n	80029f6 <TIM_Base_SetConfig+0x52>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <TIM_Base_SetConfig+0xac>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d108      	bne.n	8002a08 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <TIM_Base_SetConfig+0xa8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d103      	bne.n	8002a3c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	615a      	str	r2, [r3, #20]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400

08002a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f023 0201 	bic.w	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0303 	bic.w	r3, r3, #3
 8002a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 0302 	bic.w	r3, r3, #2
 8002a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <TIM_OC1_SetConfig+0xc8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d10c      	bne.n	8002aca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 0308 	bic.w	r3, r3, #8
 8002ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a13      	ldr	r2, [pc, #76]	; (8002b1c <TIM_OC1_SetConfig+0xc8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d111      	bne.n	8002af6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40012c00 	.word	0x40012c00

08002b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f023 0210 	bic.w	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0320 	bic.w	r3, r3, #32
 8002b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <TIM_OC2_SetConfig+0xd0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10d      	bne.n	8002b9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <TIM_OC2_SetConfig+0xd0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d113      	bne.n	8002bcc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	621a      	str	r2, [r3, #32]
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	40012c00 	.word	0x40012c00

08002bf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <TIM_OC3_SetConfig+0xd0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10d      	bne.n	8002c6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <TIM_OC3_SetConfig+0xd0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d113      	bne.n	8002c9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	621a      	str	r2, [r3, #32]
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40012c00 	.word	0x40012c00

08002cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	031b      	lsls	r3, r3, #12
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <TIM_OC4_SetConfig+0x98>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d109      	bne.n	8002d3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	019b      	lsls	r3, r3, #6
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	40012c00 	.word	0x40012c00

08002d64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0201 	bic.w	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f023 030a 	bic.w	r3, r3, #10
 8002da0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	621a      	str	r2, [r3, #32]
}
 8002db6:	bf00      	nop
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f023 0210 	bic.w	r2, r3, #16
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	031b      	lsls	r3, r3, #12
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	621a      	str	r2, [r3, #32]
}
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f043 0307 	orr.w	r3, r3, #7
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b087      	sub	sp, #28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	021a      	lsls	r2, r3, #8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	609a      	str	r2, [r3, #8]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	621a      	str	r2, [r3, #32]
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e041      	b.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3c:	d004      	beq.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10c      	bne.n	8002f62 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400

08002f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e042      	b.n	8003044 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd ffc4 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	; 0x24
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fd09 	bl	8003a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	4613      	mov	r3, r2
 8003058:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b20      	cmp	r3, #32
 8003064:	d121      	bne.n	80030aa <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_UART_Transmit_IT+0x26>
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e01a      	b.n	80030ac <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	88fa      	ldrh	r2, [r7, #6]
 8003086:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2221      	movs	r2, #33	; 0x21
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e000      	b.n	80030ac <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
  }
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	4613      	mov	r3, r2
 80030c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d112      	bne.n	80030f6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_UART_Receive_IT+0x26>
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e00b      	b.n	80030f8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	461a      	mov	r2, r3
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fab6 	bl	800365e <UART_Start_Receive_IT>
 80030f2:	4603      	mov	r3, r0
 80030f4:	e000      	b.n	80030f8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
  }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0ba      	sub	sp, #232	; 0xe8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800313e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_UART_IRQHandler+0x66>
 8003152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fb93 	bl	800388a <UART_Receive_IT>
      return;
 8003164:	e25b      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80de 	beq.w	800332c <HAL_UART_IRQHandler+0x22c>
 8003170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d106      	bne.n	800318a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80d1 	beq.w	800332c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <HAL_UART_IRQHandler+0xae>
 8003196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_UART_IRQHandler+0xd2>
 80031ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f043 0202 	orr.w	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_UART_IRQHandler+0xf6>
 80031de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f043 0204 	orr.w	r2, r3, #4
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d011      	beq.n	8003226 <HAL_UART_IRQHandler+0x126>
 8003202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800320e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f043 0208 	orr.w	r2, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 81f2 	beq.w	8003614 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_UART_IRQHandler+0x14e>
 800323c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fb1e 	bl	800388a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <HAL_UART_IRQHandler+0x17a>
 8003272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d04f      	beq.n	800331a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa28 	bl	80036d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d041      	beq.n	8003312 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3314      	adds	r3, #20
 8003294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3314      	adds	r3, #20
 80032b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1d9      	bne.n	800328e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d013      	beq.n	800330a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	4a7e      	ldr	r2, [pc, #504]	; (80034e0 <HAL_UART_IRQHandler+0x3e0>)
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe f8c6 	bl	8001480 <HAL_DMA_Abort_IT>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003304:	4610      	mov	r0, r2
 8003306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	e00e      	b.n	8003328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f993 	bl	8003636 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003310:	e00a      	b.n	8003328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f98f 	bl	8003636 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	e006      	b.n	8003328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f98b 	bl	8003636 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003326:	e175      	b.n	8003614 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	bf00      	nop
    return;
 800332a:	e173      	b.n	8003614 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 814f 	bne.w	80035d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8148 	beq.w	80035d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8141 	beq.w	80035d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80b6 	beq.w	80034e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003384:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8145 	beq.w	8003618 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003396:	429a      	cmp	r2, r3
 8003398:	f080 813e 	bcs.w	8003618 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	f000 8088 	beq.w	80034c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033dc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1d9      	bne.n	80033b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800340c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3314      	adds	r3, #20
 800341c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003420:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003424:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003428:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800342c:	e841 2300 	strex	r3, r2, [r1]
 8003430:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e1      	bne.n	80033fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3314      	adds	r3, #20
 800343e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800344e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800345c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800345e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003460:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003462:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003464:	e841 2300 	strex	r3, r2, [r1]
 8003468:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800346a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e3      	bne.n	8003438 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800348e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003490:	f023 0310 	bic.w	r3, r3, #16
 8003494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80034a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80034a4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e3      	bne.n	800347e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd ffa5 	bl	800140a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f8b6 	bl	8003648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034dc:	e09c      	b.n	8003618 <HAL_UART_IRQHandler+0x518>
 80034de:	bf00      	nop
 80034e0:	08003795 	.word	0x08003795
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 808e 	beq.w	800361c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8089 	beq.w	800361c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003520:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800352e:	647a      	str	r2, [r7, #68]	; 0x44
 8003530:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800353c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e3      	bne.n	800350a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3314      	adds	r3, #20
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	623b      	str	r3, [r7, #32]
   return(result);
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3314      	adds	r3, #20
 8003562:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003566:	633a      	str	r2, [r7, #48]	; 0x30
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800356c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e3      	bne.n	8003542 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	330c      	adds	r3, #12
 800358e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	60fb      	str	r3, [r7, #12]
   return(result);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80035ac:	61fa      	str	r2, [r7, #28]
 80035ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	617b      	str	r3, [r7, #20]
   return(result);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e3      	bne.n	8003588 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035ca:	4619      	mov	r1, r3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f83b 	bl	8003648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035d2:	e023      	b.n	800361c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_UART_IRQHandler+0x4f4>
 80035e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8e5 	bl	80037bc <UART_Transmit_IT>
    return;
 80035f2:	e014      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <HAL_UART_IRQHandler+0x51e>
 8003600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f924 	bl	800385a <UART_EndTransmit_IT>
    return;
 8003612:	e004      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
    return;
 8003614:	bf00      	nop
 8003616:	e002      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
      return;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
      return;
 800361c:	bf00      	nop
  }
}
 800361e:	37e8      	adds	r7, #232	; 0xe8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	4613      	mov	r3, r2
 800366a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	88fa      	ldrh	r2, [r7, #6]
 8003676:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2222      	movs	r2, #34	; 0x22
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d007      	beq.n	80036a4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0220 	orr.w	r2, r2, #32
 80036c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b095      	sub	sp, #84	; 0x54
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	330c      	adds	r3, #12
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e2:	e853 3f00 	ldrex	r3, [r3]
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036f8:	643a      	str	r2, [r7, #64]	; 0x40
 80036fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003700:	e841 2300 	strex	r3, r2, [r1]
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e5      	bne.n	80036d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3314      	adds	r3, #20
 8003712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	61fb      	str	r3, [r7, #28]
   return(result);
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3314      	adds	r3, #20
 800372a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800372c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e5      	bne.n	800370c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	2b01      	cmp	r3, #1
 8003746:	d119      	bne.n	800377c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	60bb      	str	r3, [r7, #8]
   return(result);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f023 0310 	bic.w	r3, r3, #16
 800375e:	647b      	str	r3, [r7, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003768:	61ba      	str	r2, [r7, #24]
 800376a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6979      	ldr	r1, [r7, #20]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	613b      	str	r3, [r7, #16]
   return(result);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e5      	bne.n	8003748 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
}
 800378a:	bf00      	nop
 800378c:	3754      	adds	r7, #84	; 0x54
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f7ff ff41 	bl	8003636 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b21      	cmp	r3, #33	; 0x21
 80037ce:	d13e      	bne.n	800384e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d8:	d114      	bne.n	8003804 <UART_Transmit_IT+0x48>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d110      	bne.n	8003804 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	1c9a      	adds	r2, r3, #2
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	621a      	str	r2, [r3, #32]
 8003802:	e008      	b.n	8003816 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	1c59      	adds	r1, r3, #1
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6211      	str	r1, [r2, #32]
 800380e:	781a      	ldrb	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29b      	uxth	r3, r3
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4619      	mov	r1, r3
 8003824:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10f      	bne.n	800384a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003838:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003848:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e000      	b.n	8003850 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800384e:	2302      	movs	r3, #2
  }
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003870:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff fed2 	bl	8003624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b08c      	sub	sp, #48	; 0x30
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b22      	cmp	r3, #34	; 0x22
 800389c:	f040 80ae 	bne.w	80039fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a8:	d117      	bne.n	80038da <UART_Receive_IT+0x50>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d113      	bne.n	80038da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	1c9a      	adds	r2, r3, #2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
 80038d8:	e026      	b.n	8003928 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ec:	d007      	beq.n	80038fe <UART_Receive_IT+0x74>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10a      	bne.n	800390c <UART_Receive_IT+0x82>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	e008      	b.n	800391e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003918:	b2da      	uxtb	r2, r3
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4619      	mov	r1, r3
 8003936:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003938:	2b00      	cmp	r3, #0
 800393a:	d15d      	bne.n	80039f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0220 	bic.w	r2, r2, #32
 800394a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800395a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	2b01      	cmp	r3, #1
 8003980:	d135      	bne.n	80039ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	613b      	str	r3, [r7, #16]
   return(result);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f023 0310 	bic.w	r3, r3, #16
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a8:	623a      	str	r2, [r7, #32]
 80039aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	69f9      	ldr	r1, [r7, #28]
 80039ae:	6a3a      	ldr	r2, [r7, #32]
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e5      	bne.n	8003988 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d10a      	bne.n	80039e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fe2e 	bl	8003648 <HAL_UARTEx_RxEventCallback>
 80039ec:	e002      	b.n	80039f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fc ff9e 	bl	8000930 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e002      	b.n	80039fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3730      	adds	r7, #48	; 0x30
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a42:	f023 030c 	bic.w	r3, r3, #12
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2c      	ldr	r2, [pc, #176]	; (8003b1c <UART_SetConfig+0x114>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d103      	bne.n	8003a78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a70:	f7fe fb20 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	e002      	b.n	8003a7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a78:	f7fe fb08 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8003a7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009a      	lsls	r2, r3, #2
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <UART_SetConfig+0x118>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	0119      	lsls	r1, r3, #4
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009a      	lsls	r2, r3, #2
 8003aa8:	441a      	add	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <UART_SetConfig+0x118>)
 8003ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2064      	movs	r0, #100	; 0x64
 8003abe:	fb00 f303 	mul.w	r3, r0, r3
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	3332      	adds	r3, #50	; 0x32
 8003ac8:	4a15      	ldr	r2, [pc, #84]	; (8003b20 <UART_SetConfig+0x118>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad4:	4419      	add	r1, r3
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009a      	lsls	r2, r3, #2
 8003ae0:	441a      	add	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <UART_SetConfig+0x118>)
 8003aee:	fba3 0302 	umull	r0, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2064      	movs	r0, #100	; 0x64
 8003af6:	fb00 f303 	mul.w	r3, r0, r3
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	3332      	adds	r3, #50	; 0x32
 8003b00:	4a07      	ldr	r2, [pc, #28]	; (8003b20 <UART_SetConfig+0x118>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	f003 020f 	and.w	r2, r3, #15
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	440a      	add	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40013800 	.word	0x40013800
 8003b20:	51eb851f 	.word	0x51eb851f

08003b24 <memset>:
 8003b24:	4603      	mov	r3, r0
 8003b26:	4402      	add	r2, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <__libc_init_array>:
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	2600      	movs	r6, #0
 8003b38:	4d0c      	ldr	r5, [pc, #48]	; (8003b6c <__libc_init_array+0x38>)
 8003b3a:	4c0d      	ldr	r4, [pc, #52]	; (8003b70 <__libc_init_array+0x3c>)
 8003b3c:	1b64      	subs	r4, r4, r5
 8003b3e:	10a4      	asrs	r4, r4, #2
 8003b40:	42a6      	cmp	r6, r4
 8003b42:	d109      	bne.n	8003b58 <__libc_init_array+0x24>
 8003b44:	f000 f81a 	bl	8003b7c <_init>
 8003b48:	2600      	movs	r6, #0
 8003b4a:	4d0a      	ldr	r5, [pc, #40]	; (8003b74 <__libc_init_array+0x40>)
 8003b4c:	4c0a      	ldr	r4, [pc, #40]	; (8003b78 <__libc_init_array+0x44>)
 8003b4e:	1b64      	subs	r4, r4, r5
 8003b50:	10a4      	asrs	r4, r4, #2
 8003b52:	42a6      	cmp	r6, r4
 8003b54:	d105      	bne.n	8003b62 <__libc_init_array+0x2e>
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5c:	4798      	blx	r3
 8003b5e:	3601      	adds	r6, #1
 8003b60:	e7ee      	b.n	8003b40 <__libc_init_array+0xc>
 8003b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b66:	4798      	blx	r3
 8003b68:	3601      	adds	r6, #1
 8003b6a:	e7f2      	b.n	8003b52 <__libc_init_array+0x1e>
 8003b6c:	08003bc0 	.word	0x08003bc0
 8003b70:	08003bc0 	.word	0x08003bc0
 8003b74:	08003bc0 	.word	0x08003bc0
 8003b78:	08003bc4 	.word	0x08003bc4

08003b7c <_init>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	bf00      	nop
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr

08003b88 <_fini>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	bf00      	nop
 8003b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8e:	bc08      	pop	{r3}
 8003b90:	469e      	mov	lr, r3
 8003b92:	4770      	bx	lr
