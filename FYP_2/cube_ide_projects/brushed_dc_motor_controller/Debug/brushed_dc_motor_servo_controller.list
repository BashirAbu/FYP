
brushed_dc_motor_servo_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080064d8  080064d8  000164d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006580  08006580  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006580  08006580  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006580  08006580  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006580  08006580  00016580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006584  08006584  00016584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006588  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000078  08006600  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08006600  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c45d  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca9  00000000  00000000  0002c541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002e1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ac  00000000  00000000  0002ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017830  00000000  00000000  0002f7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd94  00000000  00000000  0004701c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088c50  00000000  00000000  00054db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ee8  00000000  00000000  000dda00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e18e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080064bc 	.word	0x080064bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080064bc 	.word	0x080064bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpun>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__aeabi_fcmpun+0x14>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d108      	bne.n	80010a6 <__aeabi_fcmpun+0x26>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d102      	bne.n	80010a0 <__aeabi_fcmpun+0x20>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d102      	bne.n	80010a6 <__aeabi_fcmpun+0x26>
 80010a0:	f04f 0000 	mov.w	r0, #0
 80010a4:	4770      	bx	lr
 80010a6:	f04f 0001 	mov.w	r0, #1
 80010aa:	4770      	bx	lr

080010ac <__aeabi_f2iz>:
 80010ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b4:	d30f      	bcc.n	80010d6 <__aeabi_f2iz+0x2a>
 80010b6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010be:	d90d      	bls.n	80010dc <__aeabi_f2iz+0x30>
 80010c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010cc:	fa23 f002 	lsr.w	r0, r3, r2
 80010d0:	bf18      	it	ne
 80010d2:	4240      	negne	r0, r0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	4770      	bx	lr
 80010dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e0:	d101      	bne.n	80010e6 <__aeabi_f2iz+0x3a>
 80010e2:	0242      	lsls	r2, r0, #9
 80010e4:	d105      	bne.n	80010f2 <__aeabi_f2iz+0x46>
 80010e6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ea:	bf08      	it	eq
 80010ec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr

080010f8 <__aeabi_f2uiz>:
 80010f8:	0042      	lsls	r2, r0, #1
 80010fa:	d20e      	bcs.n	800111a <__aeabi_f2uiz+0x22>
 80010fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001100:	d30b      	bcc.n	800111a <__aeabi_f2uiz+0x22>
 8001102:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001106:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110a:	d409      	bmi.n	8001120 <__aeabi_f2uiz+0x28>
 800110c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001114:	fa23 f002 	lsr.w	r0, r3, r2
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr
 8001120:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001124:	d101      	bne.n	800112a <__aeabi_f2uiz+0x32>
 8001126:	0242      	lsls	r2, r0, #9
 8001128:	d102      	bne.n	8001130 <__aeabi_f2uiz+0x38>
 800112a:	f04f 30ff 	mov.w	r0, #4294967295
 800112e:	4770      	bx	lr
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <CalculateMotionProfile>:
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */


void CalculateMotionProfile()
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	af00      	add	r7, sp, #0
	memset(&motionProfile, 0, sizeof(motionProfile));
 800113c:	2230      	movs	r2, #48	; 0x30
 800113e:	2100      	movs	r1, #0
 8001140:	488b      	ldr	r0, [pc, #556]	; (8001370 <CalculateMotionProfile+0x238>)
 8001142:	f003 fe1f 	bl	8004d84 <memset>

  if(data.position < 0.0f)
 8001146:	4b8b      	ldr	r3, [pc, #556]	; (8001374 <CalculateMotionProfile+0x23c>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f04f 0100 	mov.w	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff6e 	bl	8001030 <__aeabi_fcmplt>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <CalculateMotionProfile+0x2c>
    motionProfile.dir = ClockWise;
 800115a:	4b85      	ldr	r3, [pc, #532]	; (8001370 <CalculateMotionProfile+0x238>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001162:	e003      	b.n	800116c <CalculateMotionProfile+0x34>
  else
    motionProfile.dir = CounterClockWise;
 8001164:	4b82      	ldr	r3, [pc, #520]	; (8001370 <CalculateMotionProfile+0x238>)
 8001166:	2201      	movs	r2, #1
 8001168:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	motionProfile.max_acceleration = data.acceleration;
 800116c:	4b81      	ldr	r3, [pc, #516]	; (8001374 <CalculateMotionProfile+0x23c>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a7f      	ldr	r2, [pc, #508]	; (8001370 <CalculateMotionProfile+0x238>)
 8001172:	6013      	str	r3, [r2, #0]
	motionProfile.max_deceleration = data.deceleration;
 8001174:	4b7f      	ldr	r3, [pc, #508]	; (8001374 <CalculateMotionProfile+0x23c>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	4a7d      	ldr	r2, [pc, #500]	; (8001370 <CalculateMotionProfile+0x238>)
 800117a:	6053      	str	r3, [r2, #4]
	motionProfile.total_distance = fabs(data.position) - (motor_current_position * ( (data.gearRatio * data.encoderPulses) / 360.0f));
 800117c:	4b7d      	ldr	r3, [pc, #500]	; (8001374 <CalculateMotionProfile+0x23c>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001184:	4b7b      	ldr	r3, [pc, #492]	; (8001374 <CalculateMotionProfile+0x23c>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	4a7a      	ldr	r2, [pc, #488]	; (8001374 <CalculateMotionProfile+0x23c>)
 800118a:	6992      	ldr	r2, [r2, #24]
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fdb0 	bl	8000cf4 <__aeabi_fmul>
 8001194:	4603      	mov	r3, r0
 8001196:	4978      	ldr	r1, [pc, #480]	; (8001378 <CalculateMotionProfile+0x240>)
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fe5f 	bl	8000e5c <__aeabi_fdiv>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b76      	ldr	r3, [pc, #472]	; (800137c <CalculateMotionProfile+0x244>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4610      	mov	r0, r2
 80011aa:	f7ff fda3 	bl	8000cf4 <__aeabi_fmul>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4619      	mov	r1, r3
 80011b2:	4620      	mov	r0, r4
 80011b4:	f7ff fc94 	bl	8000ae0 <__aeabi_fsub>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b6c      	ldr	r3, [pc, #432]	; (8001370 <CalculateMotionProfile+0x238>)
 80011be:	609a      	str	r2, [r3, #8]
	motionProfile.max_velocity = data.speed;
 80011c0:	4b6c      	ldr	r3, [pc, #432]	; (8001374 <CalculateMotionProfile+0x23c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a6a      	ldr	r2, [pc, #424]	; (8001370 <CalculateMotionProfile+0x238>)
 80011c6:	6293      	str	r3, [r2, #40]	; 0x28
	if(motionProfile.max_acceleration == 0.0f || motionProfile.max_deceleration == 0.0f || motionProfile.max_velocity == 0.0f)
 80011c8:	4b69      	ldr	r3, [pc, #420]	; (8001370 <CalculateMotionProfile+0x238>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f04f 0100 	mov.w	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff23 	bl	800101c <__aeabi_fcmpeq>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f040 80c6 	bne.w	800136a <CalculateMotionProfile+0x232>
 80011de:	4b64      	ldr	r3, [pc, #400]	; (8001370 <CalculateMotionProfile+0x238>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f04f 0100 	mov.w	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff18 	bl	800101c <__aeabi_fcmpeq>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f040 80bb 	bne.w	800136a <CalculateMotionProfile+0x232>
 80011f4:	4b5e      	ldr	r3, [pc, #376]	; (8001370 <CalculateMotionProfile+0x238>)
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	f04f 0100 	mov.w	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff0d 	bl	800101c <__aeabi_fcmpeq>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	f040 80b0 	bne.w	800136a <CalculateMotionProfile+0x232>
		return;
	motionProfile.time_to_max_velocity = motionProfile.max_velocity / motionProfile.max_acceleration;
 800120a:	4b59      	ldr	r3, [pc, #356]	; (8001370 <CalculateMotionProfile+0x238>)
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	4a58      	ldr	r2, [pc, #352]	; (8001370 <CalculateMotionProfile+0x238>)
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fe21 	bl	8000e5c <__aeabi_fdiv>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b54      	ldr	r3, [pc, #336]	; (8001370 <CalculateMotionProfile+0x238>)
 8001220:	619a      	str	r2, [r3, #24]
	motionProfile.time_to_stop = motionProfile.max_velocity / motionProfile.max_deceleration;
 8001222:	4b53      	ldr	r3, [pc, #332]	; (8001370 <CalculateMotionProfile+0x238>)
 8001224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001226:	4a52      	ldr	r2, [pc, #328]	; (8001370 <CalculateMotionProfile+0x238>)
 8001228:	6852      	ldr	r2, [r2, #4]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fe15 	bl	8000e5c <__aeabi_fdiv>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b4e      	ldr	r3, [pc, #312]	; (8001370 <CalculateMotionProfile+0x238>)
 8001238:	621a      	str	r2, [r3, #32]

	motionProfile.distance_to_max_velocity = 0.5 * motionProfile.max_acceleration * (float)pow(motionProfile.time_to_max_velocity, 2);
 800123a:	4b4d      	ldr	r3, [pc, #308]	; (8001370 <CalculateMotionProfile+0x238>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f8f2 	bl	8000428 <__aeabi_f2d>
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b4d      	ldr	r3, [pc, #308]	; (8001380 <CalculateMotionProfile+0x248>)
 800124a:	f7ff f945 	bl	80004d8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
 8001256:	4b46      	ldr	r3, [pc, #280]	; (8001370 <CalculateMotionProfile+0x238>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f8e4 	bl	8000428 <__aeabi_f2d>
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001268:	f004 fa1e 	bl	80056a8 <pow>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fbe0 	bl	8000a38 <__aeabi_d2f>
 8001278:	4603      	mov	r3, r0
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f8d4 	bl	8000428 <__aeabi_f2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4620      	mov	r0, r4
 8001286:	4629      	mov	r1, r5
 8001288:	f7ff f926 	bl	80004d8 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fbd0 	bl	8000a38 <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	4a35      	ldr	r2, [pc, #212]	; (8001370 <CalculateMotionProfile+0x238>)
 800129c:	60d3      	str	r3, [r2, #12]
	motionProfile.distance_to_stop = 0.5 * motionProfile.max_deceleration * (float)pow(motionProfile.time_to_stop, 2);
 800129e:	4b34      	ldr	r3, [pc, #208]	; (8001370 <CalculateMotionProfile+0x238>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f8c0 	bl	8000428 <__aeabi_f2d>
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4b34      	ldr	r3, [pc, #208]	; (8001380 <CalculateMotionProfile+0x248>)
 80012ae:	f7ff f913 	bl	80004d8 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <CalculateMotionProfile+0x238>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f8b2 	bl	8000428 <__aeabi_f2d>
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012cc:	f004 f9ec 	bl	80056a8 <pow>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fbae 	bl	8000a38 <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f8a2 	bl	8000428 <__aeabi_f2d>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7ff f8f4 	bl	80004d8 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fb9e 	bl	8000a38 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <CalculateMotionProfile+0x238>)
 8001300:	6113      	str	r3, [r2, #16]
	motionProfile.distance_at_max_velocity = motionProfile.total_distance - (motionProfile.distance_to_max_velocity + motionProfile.distance_to_stop);
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <CalculateMotionProfile+0x238>)
 8001304:	689c      	ldr	r4, [r3, #8]
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <CalculateMotionProfile+0x238>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	4a19      	ldr	r2, [pc, #100]	; (8001370 <CalculateMotionProfile+0x238>)
 800130c:	6912      	ldr	r2, [r2, #16]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fbe7 	bl	8000ae4 <__addsf3>
 8001316:	4603      	mov	r3, r0
 8001318:	4619      	mov	r1, r3
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff fbe0 	bl	8000ae0 <__aeabi_fsub>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <CalculateMotionProfile+0x238>)
 8001326:	615a      	str	r2, [r3, #20]
  
	motionProfile.time_at_max_velocity = motionProfile.distance_at_max_velocity / motionProfile.max_velocity;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <CalculateMotionProfile+0x238>)
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	4a10      	ldr	r2, [pc, #64]	; (8001370 <CalculateMotionProfile+0x238>)
 800132e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fd92 	bl	8000e5c <__aeabi_fdiv>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <CalculateMotionProfile+0x238>)
 800133e:	61da      	str	r2, [r3, #28]
  motionProfile.total_time = motionProfile.time_at_max_velocity + motionProfile.time_to_max_velocity + motionProfile.time_to_stop;
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <CalculateMotionProfile+0x238>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <CalculateMotionProfile+0x238>)
 8001346:	6992      	ldr	r2, [r2, #24]
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fbca 	bl	8000ae4 <__addsf3>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <CalculateMotionProfile+0x238>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4619      	mov	r1, r3
 800135a:	4610      	mov	r0, r2
 800135c:	f7ff fbc2 	bl	8000ae4 <__addsf3>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	4b02      	ldr	r3, [pc, #8]	; (8001370 <CalculateMotionProfile+0x238>)
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
 8001368:	e000      	b.n	800136c <CalculateMotionProfile+0x234>
		return;
 800136a:	bf00      	nop
}
 800136c:	bdb0      	pop	{r4, r5, r7, pc}
 800136e:	bf00      	nop
 8001370:	20000210 	.word	0x20000210
 8001374:	200001b0 	.word	0x200001b0
 8001378:	43b40000 	.word	0x43b40000
 800137c:	200001e0 	.word	0x200001e0
 8001380:	3fe00000 	.word	0x3fe00000

08001384 <GetVelocityAtTime>:

float GetVelocityAtTime()
{
 8001384:	b5b0      	push	{r4, r5, r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
	float velocity;
	//Acceleration Phase
	if(_time < motionProfile.time_to_max_velocity)
 800138a:	4b35      	ldr	r3, [pc, #212]	; (8001460 <GetVelocityAtTime+0xdc>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a35      	ldr	r2, [pc, #212]	; (8001464 <GetVelocityAtTime+0xe0>)
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe69 	bl	800106c <__aeabi_fcmpgt>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00a      	beq.n	80013b6 <GetVelocityAtTime+0x32>
	{
		velocity = motionProfile.max_acceleration * _time;
 80013a0:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <GetVelocityAtTime+0xdc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <GetVelocityAtTime+0xe0>)
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fca2 	bl	8000cf4 <__aeabi_fmul>
 80013b0:	4603      	mov	r3, r0
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	e045      	b.n	8001442 <GetVelocityAtTime+0xbe>
	}
	//Max Velocity Phase
	else if(_time < (motionProfile.time_at_max_velocity + motionProfile.time_to_max_velocity))
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <GetVelocityAtTime+0xdc>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a29      	ldr	r2, [pc, #164]	; (8001460 <GetVelocityAtTime+0xdc>)
 80013bc:	6992      	ldr	r2, [r2, #24]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fb8f 	bl	8000ae4 <__addsf3>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <GetVelocityAtTime+0xe0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4619      	mov	r1, r3
 80013d0:	4610      	mov	r0, r2
 80013d2:	f7ff fe4b 	bl	800106c <__aeabi_fcmpgt>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <GetVelocityAtTime+0x60>
	{
		velocity = motionProfile.max_velocity;
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <GetVelocityAtTime+0xdc>)
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	e02e      	b.n	8001442 <GetVelocityAtTime+0xbe>
	}
	//Deceleration Phase
	else if (_time < (motionProfile.total_time))
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <GetVelocityAtTime+0xdc>)
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <GetVelocityAtTime+0xe0>)
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe3c 	bl	800106c <__aeabi_fcmpgt>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d020      	beq.n	800143c <GetVelocityAtTime+0xb8>
	{
		velocity = motionProfile.max_velocity - (motionProfile.max_deceleration * (_time - motionProfile.time_at_max_velocity - motionProfile.time_to_max_velocity));
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <GetVelocityAtTime+0xdc>)
 80013fc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <GetVelocityAtTime+0xdc>)
 8001400:	685d      	ldr	r5, [r3, #4]
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <GetVelocityAtTime+0xe0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a16      	ldr	r2, [pc, #88]	; (8001460 <GetVelocityAtTime+0xdc>)
 8001408:	69d2      	ldr	r2, [r2, #28]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fb67 	bl	8000ae0 <__aeabi_fsub>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <GetVelocityAtTime+0xdc>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4619      	mov	r1, r3
 800141c:	4610      	mov	r0, r2
 800141e:	f7ff fb5f 	bl	8000ae0 <__aeabi_fsub>
 8001422:	4603      	mov	r3, r0
 8001424:	4619      	mov	r1, r3
 8001426:	4628      	mov	r0, r5
 8001428:	f7ff fc64 	bl	8000cf4 <__aeabi_fmul>
 800142c:	4603      	mov	r3, r0
 800142e:	4619      	mov	r1, r3
 8001430:	4620      	mov	r0, r4
 8001432:	f7ff fb55 	bl	8000ae0 <__aeabi_fsub>
 8001436:	4603      	mov	r3, r0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	e002      	b.n	8001442 <GetVelocityAtTime+0xbe>
	}
	else
	{
		velocity = 0.0f;
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
	}
	return motionProfile.dir == ClockWise? -velocity : velocity;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <GetVelocityAtTime+0xdc>)
 8001444:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001448:	2b00      	cmp	r3, #0
 800144a:	d103      	bne.n	8001454 <GetVelocityAtTime+0xd0>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001452:	e000      	b.n	8001456 <GetVelocityAtTime+0xd2>
 8001454:	687b      	ldr	r3, [r7, #4]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bdb0      	pop	{r4, r5, r7, pc}
 800145e:	bf00      	nop
 8001460:	20000210 	.word	0x20000210
 8001464:	200001ec 	.word	0x200001ec

08001468 <PulsestoDegrees>:

float PulsestoDegrees(float pulses)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	return ((pulses * 360.0f) / (data.gearRatio * data.encoderPulses));
 8001470:	490b      	ldr	r1, [pc, #44]	; (80014a0 <PulsestoDegrees+0x38>)
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fc3e 	bl	8000cf4 <__aeabi_fmul>
 8001478:	4603      	mov	r3, r0
 800147a:	461c      	mov	r4, r3
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <PulsestoDegrees+0x3c>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <PulsestoDegrees+0x3c>)
 8001482:	6992      	ldr	r2, [r2, #24]
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fc34 	bl	8000cf4 <__aeabi_fmul>
 800148c:	4603      	mov	r3, r0
 800148e:	4619      	mov	r1, r3
 8001490:	4620      	mov	r0, r4
 8001492:	f7ff fce3 	bl	8000e5c <__aeabi_fdiv>
 8001496:	4603      	mov	r3, r0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	43b40000 	.word	0x43b40000
 80014a4:	200001b0 	.word	0x200001b0

080014a8 <CalculateSpeed>:

void CalculateSpeed()
{
 80014a8:	b598      	push	{r3, r4, r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	motor_current_speed = (PulsestoDegrees(motor_current_position) - PulsestoDegrees(motor_prev_position)) / deltaTime;
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <CalculateSpeed+0x48>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ffd9 	bl	8001468 <PulsestoDegrees>
 80014b6:	4604      	mov	r4, r0
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <CalculateSpeed+0x4c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ffd3 	bl	8001468 <PulsestoDegrees>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4619      	mov	r1, r3
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff fb0a 	bl	8000ae0 <__aeabi_fsub>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <CalculateSpeed+0x50>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4610      	mov	r0, r2
 80014d8:	f7ff fcc0 	bl	8000e5c <__aeabi_fdiv>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <CalculateSpeed+0x54>)
 80014e2:	601a      	str	r2, [r3, #0]
	motor_prev_position = motor_current_position;
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <CalculateSpeed+0x48>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a02      	ldr	r2, [pc, #8]	; (80014f4 <CalculateSpeed+0x4c>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	bd98      	pop	{r3, r4, r7, pc}
 80014f0:	200001e0 	.word	0x200001e0
 80014f4:	200001e4 	.word	0x200001e4
 80014f8:	200001f4 	.word	0x200001f4
 80014fc:	20000004 	.word	0x20000004

08001500 <CalculatePID>:

void CalculatePID()
{
 8001500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001504:	b0c4      	sub	sp, #272	; 0x110
 8001506:	af04      	add	r7, sp, #16

	currentTime = HAL_GetTick();
 8001508:	f000 fe98 	bl	800223c <HAL_GetTick>
 800150c:	4603      	mov	r3, r0
 800150e:	4a86      	ldr	r2, [pc, #536]	; (8001728 <CalculatePID+0x228>)
 8001510:	6013      	str	r3, [r2, #0]
	deltaTime = (float)((float)(currentTime) - (float)(prevTime)) / 1000.0f;
 8001512:	4b85      	ldr	r3, [pc, #532]	; (8001728 <CalculatePID+0x228>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fb94 	bl	8000c44 <__aeabi_ui2f>
 800151c:	4604      	mov	r4, r0
 800151e:	4b83      	ldr	r3, [pc, #524]	; (800172c <CalculatePID+0x22c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fb8e 	bl	8000c44 <__aeabi_ui2f>
 8001528:	4603      	mov	r3, r0
 800152a:	4619      	mov	r1, r3
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff fad7 	bl	8000ae0 <__aeabi_fsub>
 8001532:	4603      	mov	r3, r0
 8001534:	497e      	ldr	r1, [pc, #504]	; (8001730 <CalculatePID+0x230>)
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fc90 	bl	8000e5c <__aeabi_fdiv>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b7c      	ldr	r3, [pc, #496]	; (8001734 <CalculatePID+0x234>)
 8001542:	601a      	str	r2, [r3, #0]

	_time = _time + deltaTime;
 8001544:	4b7c      	ldr	r3, [pc, #496]	; (8001738 <CalculatePID+0x238>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a7a      	ldr	r2, [pc, #488]	; (8001734 <CalculatePID+0x234>)
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fac8 	bl	8000ae4 <__addsf3>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	4b77      	ldr	r3, [pc, #476]	; (8001738 <CalculatePID+0x238>)
 800155a:	601a      	str	r2, [r3, #0]

	//errorValue = motor_current_position - (data.position * ((data.gearRatio * data.encoderPulses) / 360.0f));

  static float fs = 0.0f;
  if (!isnanf(motor_current_speed) && !isinf(motor_current_speed))
 800155c:	4b77      	ldr	r3, [pc, #476]	; (800173c <CalculatePID+0x23c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fd8c 	bl	8001080 <__aeabi_fcmpun>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d137      	bne.n	80015de <CalculatePID+0xde>
 800156e:	4b73      	ldr	r3, [pc, #460]	; (800173c <CalculatePID+0x23c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001576:	2301      	movs	r3, #1
 8001578:	461d      	mov	r5, r3
 800157a:	4971      	ldr	r1, [pc, #452]	; (8001740 <CalculatePID+0x240>)
 800157c:	4620      	mov	r0, r4
 800157e:	f7ff fd7f 	bl	8001080 <__aeabi_fcmpun>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d108      	bne.n	800159a <CalculatePID+0x9a>
 8001588:	496d      	ldr	r1, [pc, #436]	; (8001740 <CalculatePID+0x240>)
 800158a:	4620      	mov	r0, r4
 800158c:	f7ff fd5a 	bl	8001044 <__aeabi_fcmple>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <CalculatePID+0x9a>
 8001596:	2300      	movs	r3, #0
 8001598:	461d      	mov	r5, r3
 800159a:	b2eb      	uxtb	r3, r5
 800159c:	f083 0301 	eor.w	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <CalculatePID+0xaa>
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <CalculatePID+0xac>
 80015aa:	2301      	movs	r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d016      	beq.n	80015de <CalculatePID+0xde>
    // fs =  (0.1116f * motor_current_speed);
    // fs += (0.1116f * motor_speed_1);
    // fs += (0.7767f * filt_speed_1);
    // motor_speed_1 = motor_current_speed;
    // filt_speed_1 = fs;
    fs = 0.1f * motor_current_speed + (1.0f - 0.1f) * fs;
 80015b0:	4b62      	ldr	r3, [pc, #392]	; (800173c <CalculatePID+0x23c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4963      	ldr	r1, [pc, #396]	; (8001744 <CalculatePID+0x244>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fb9c 	bl	8000cf4 <__aeabi_fmul>
 80015bc:	4603      	mov	r3, r0
 80015be:	461c      	mov	r4, r3
 80015c0:	4b61      	ldr	r3, [pc, #388]	; (8001748 <CalculatePID+0x248>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4961      	ldr	r1, [pc, #388]	; (800174c <CalculatePID+0x24c>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fb94 	bl	8000cf4 <__aeabi_fmul>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff fa87 	bl	8000ae4 <__addsf3>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	4b5b      	ldr	r3, [pc, #364]	; (8001748 <CalculatePID+0x248>)
 80015dc:	601a      	str	r2, [r3, #0]

  }


	errorValue = GetVelocityAtTime() - fs;
 80015de:	f7ff fed1 	bl	8001384 <GetVelocityAtTime>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b58      	ldr	r3, [pc, #352]	; (8001748 <CalculatePID+0x248>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4610      	mov	r0, r2
 80015ec:	f7ff fa78 	bl	8000ae0 <__aeabi_fsub>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b56      	ldr	r3, [pc, #344]	; (8001750 <CalculatePID+0x250>)
 80015f6:	601a      	str	r2, [r3, #0]
	derivative = (errorValue - prevErrorValue) / deltaTime;
 80015f8:	4b55      	ldr	r3, [pc, #340]	; (8001750 <CalculatePID+0x250>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a55      	ldr	r2, [pc, #340]	; (8001754 <CalculatePID+0x254>)
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fa6c 	bl	8000ae0 <__aeabi_fsub>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	4b49      	ldr	r3, [pc, #292]	; (8001734 <CalculatePID+0x234>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f7ff fc22 	bl	8000e5c <__aeabi_fdiv>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <CalculatePID+0x258>)
 800161e:	601a      	str	r2, [r3, #0]
	integral = integral + errorValue * deltaTime;
 8001620:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <CalculatePID+0x250>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a43      	ldr	r2, [pc, #268]	; (8001734 <CalculatePID+0x234>)
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fb62 	bl	8000cf4 <__aeabi_fmul>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b49      	ldr	r3, [pc, #292]	; (800175c <CalculatePID+0x25c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	4610      	mov	r0, r2
 800163c:	f7ff fa52 	bl	8000ae4 <__addsf3>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	4b45      	ldr	r3, [pc, #276]	; (800175c <CalculatePID+0x25c>)
 8001646:	601a      	str	r2, [r3, #0]

	controlSignal = data.kp * errorValue + data.ki * integral + data.kd * derivative;
 8001648:	4b45      	ldr	r3, [pc, #276]	; (8001760 <CalculatePID+0x260>)
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	4a40      	ldr	r2, [pc, #256]	; (8001750 <CalculatePID+0x250>)
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fb4e 	bl	8000cf4 <__aeabi_fmul>
 8001658:	4603      	mov	r3, r0
 800165a:	461c      	mov	r4, r3
 800165c:	4b40      	ldr	r3, [pc, #256]	; (8001760 <CalculatePID+0x260>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a3e      	ldr	r2, [pc, #248]	; (800175c <CalculatePID+0x25c>)
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fb44 	bl	8000cf4 <__aeabi_fmul>
 800166c:	4603      	mov	r3, r0
 800166e:	4619      	mov	r1, r3
 8001670:	4620      	mov	r0, r4
 8001672:	f7ff fa37 	bl	8000ae4 <__addsf3>
 8001676:	4603      	mov	r3, r0
 8001678:	461c      	mov	r4, r3
 800167a:	4b39      	ldr	r3, [pc, #228]	; (8001760 <CalculatePID+0x260>)
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	4a36      	ldr	r2, [pc, #216]	; (8001758 <CalculatePID+0x258>)
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fb35 	bl	8000cf4 <__aeabi_fmul>
 800168a:	4603      	mov	r3, r0
 800168c:	4619      	mov	r1, r3
 800168e:	4620      	mov	r0, r4
 8001690:	f7ff fa28 	bl	8000ae4 <__addsf3>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	4b32      	ldr	r3, [pc, #200]	; (8001764 <CalculatePID+0x264>)
 800169a:	601a      	str	r2, [r3, #0]


	char msg[255];
	//sprintf(msg, "pos: %f, ev: %f, dv: %f, intg: %f, controlSignal: %f,  dt: %f\n\r\0", ((motor_current_position * 360.0f) / (data.gearRatio * data.encoderPulses)) ,errorValue, derivative, integral, controlSignal, deltaTime);	//de
	//sprintf(msg, "%d, %d, %d, %d\n\0", (int)((motor_current_position * 360.0f) / (data.gearRatio * data.encoderPulses)) ,(int)_time, (int)add_speed_measurement(motor_current_speed), (int) GetVelocityAtTime());	//de
  sprintf(msg, "%d %d %d %d %d\n\0", (int)GetVelocityAtTime(), (int)motor_current_speed, (int)fs, (int) PulsestoDegrees(motor_current_position), (int) controlSignal);
 800169c:	f7ff fe72 	bl	8001384 <GetVelocityAtTime>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd02 	bl	80010ac <__aeabi_f2iz>
 80016a8:	4606      	mov	r6, r0
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <CalculatePID+0x23c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fcfc 	bl	80010ac <__aeabi_f2iz>
 80016b4:	4680      	mov	r8, r0
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <CalculatePID+0x248>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fcf6 	bl	80010ac <__aeabi_f2iz>
 80016c0:	4604      	mov	r4, r0
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <CalculatePID+0x268>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fece 	bl	8001468 <PulsestoDegrees>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fcec 	bl	80010ac <__aeabi_f2iz>
 80016d4:	4605      	mov	r5, r0
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <CalculatePID+0x264>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fce6 	bl	80010ac <__aeabi_f2iz>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4638      	mov	r0, r7
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	9501      	str	r5, [sp, #4]
 80016e8:	9400      	str	r4, [sp, #0]
 80016ea:	4643      	mov	r3, r8
 80016ec:	4632      	mov	r2, r6
 80016ee:	491f      	ldr	r1, [pc, #124]	; (800176c <CalculatePID+0x26c>)
 80016f0:	f003 fb28 	bl	8004d44 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80016f4:	463b      	mov	r3, r7
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fd2a 	bl	8000150 <strlen>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4639      	mov	r1, r7
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	481a      	ldr	r0, [pc, #104]	; (8001770 <CalculatePID+0x270>)
 8001708:	f002 fcf4 	bl	80040f4 <HAL_UART_Transmit>

	prevTime = currentTime;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <CalculatePID+0x228>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a06      	ldr	r2, [pc, #24]	; (800172c <CalculatePID+0x22c>)
 8001712:	6013      	str	r3, [r2, #0]
	prevErrorValue = errorValue;
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <CalculatePID+0x250>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <CalculatePID+0x254>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001722:	46bd      	mov	sp, r7
 8001724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001728:	200001f0 	.word	0x200001f0
 800172c:	200001f8 	.word	0x200001f8
 8001730:	447a0000 	.word	0x447a0000
 8001734:	200001f4 	.word	0x200001f4
 8001738:	200001ec 	.word	0x200001ec
 800173c:	20000004 	.word	0x20000004
 8001740:	7f7fffff 	.word	0x7f7fffff
 8001744:	3dcccccd 	.word	0x3dcccccd
 8001748:	20000240 	.word	0x20000240
 800174c:	3f666666 	.word	0x3f666666
 8001750:	200001fc 	.word	0x200001fc
 8001754:	20000200 	.word	0x20000200
 8001758:	20000204 	.word	0x20000204
 800175c:	20000208 	.word	0x20000208
 8001760:	200001b0 	.word	0x200001b0
 8001764:	2000020c 	.word	0x2000020c
 8001768:	200001e0 	.word	0x200001e0
 800176c:	080064d8 	.word	0x080064d8
 8001770:	20000124 	.word	0x20000124

08001774 <DriveMotor>:

void DriveMotor()
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0

	if(controlSignal < 0)
 8001778:	4b65      	ldr	r3, [pc, #404]	; (8001910 <DriveMotor+0x19c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fc55 	bl	8001030 <__aeabi_fcmplt>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <DriveMotor+0x20>
	{
		motorDirection = ClockWise;
 800178c:	4b61      	ldr	r3, [pc, #388]	; (8001914 <DriveMotor+0x1a0>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	e002      	b.n	800179a <DriveMotor+0x26>
	}
	else
	{
		motorDirection = CounterClockWise;
 8001794:	4b5f      	ldr	r3, [pc, #380]	; (8001914 <DriveMotor+0x1a0>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
	}

	if(prevMotorDirection != motorDirection)
 800179a:	4b5f      	ldr	r3, [pc, #380]	; (8001918 <DriveMotor+0x1a4>)
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	4b5d      	ldr	r3, [pc, #372]	; (8001914 <DriveMotor+0x1a0>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d07a      	beq.n	800189c <DriveMotor+0x128>
	{
		switch(motorDirection)
 80017a6:	4b5b      	ldr	r3, [pc, #364]	; (8001914 <DriveMotor+0x1a0>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <DriveMotor+0x40>
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d03a      	beq.n	8001828 <DriveMotor+0xb4>
 80017b2:	e073      	b.n	800189c <DriveMotor+0x128>
		{
		case ClockWise:
		{
		  PWM_CurrentChannel = PWM_CLOCKWISE_CHANNEL;
 80017b4:	4b59      	ldr	r3, [pc, #356]	; (800191c <DriveMotor+0x1a8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 80017ba:	4b59      	ldr	r3, [pc, #356]	; (8001920 <DriveMotor+0x1ac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, 0);
 80017c2:	4b57      	ldr	r3, [pc, #348]	; (8001920 <DriveMotor+0x1ac>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	635a      	str	r2, [r3, #52]	; 0x34
		  //delay here
		  HAL_Delay(PWM_DEADTIME_DELAY);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f000 fd40 	bl	8002250 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, 0);
 80017d0:	4b52      	ldr	r3, [pc, #328]	; (800191c <DriveMotor+0x1a8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d104      	bne.n	80017e2 <DriveMotor+0x6e>
 80017d8:	4b51      	ldr	r3, [pc, #324]	; (8001920 <DriveMotor+0x1ac>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2200      	movs	r2, #0
 80017de:	635a      	str	r2, [r3, #52]	; 0x34
 80017e0:	e015      	b.n	800180e <DriveMotor+0x9a>
 80017e2:	4b4e      	ldr	r3, [pc, #312]	; (800191c <DriveMotor+0x1a8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d104      	bne.n	80017f4 <DriveMotor+0x80>
 80017ea:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <DriveMotor+0x1ac>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	6393      	str	r3, [r2, #56]	; 0x38
 80017f2:	e00c      	b.n	800180e <DriveMotor+0x9a>
 80017f4:	4b49      	ldr	r3, [pc, #292]	; (800191c <DriveMotor+0x1a8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d104      	bne.n	8001806 <DriveMotor+0x92>
 80017fc:	4b48      	ldr	r3, [pc, #288]	; (8001920 <DriveMotor+0x1ac>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2300      	movs	r3, #0
 8001802:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001804:	e003      	b.n	800180e <DriveMotor+0x9a>
 8001806:	4b46      	ldr	r3, [pc, #280]	; (8001920 <DriveMotor+0x1ac>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
		  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001814:	4843      	ldr	r0, [pc, #268]	; (8001924 <DriveMotor+0x1b0>)
 8001816:	f001 f892 	bl	800293e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001820:	4840      	ldr	r0, [pc, #256]	; (8001924 <DriveMotor+0x1b0>)
 8001822:	f001 f88c 	bl	800293e <HAL_GPIO_WritePin>

		}break;
 8001826:	e039      	b.n	800189c <DriveMotor+0x128>
		case CounterClockWise:
		{
		  PWM_CurrentChannel = PWM_COUNTER_CLOCKWISE_CHANNEL;
 8001828:	4b3c      	ldr	r3, [pc, #240]	; (800191c <DriveMotor+0x1a8>)
 800182a:	2204      	movs	r2, #4
 800182c:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, 0);
 800182e:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <DriveMotor+0x1ac>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 8001836:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <DriveMotor+0x1ac>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	639a      	str	r2, [r3, #56]	; 0x38
		  //delay here
		  HAL_Delay(PWM_DEADTIME_DELAY);
 800183e:	2001      	movs	r0, #1
 8001840:	f000 fd06 	bl	8002250 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, 0);
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <DriveMotor+0x1a8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d104      	bne.n	8001856 <DriveMotor+0xe2>
 800184c:	4b34      	ldr	r3, [pc, #208]	; (8001920 <DriveMotor+0x1ac>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2200      	movs	r2, #0
 8001852:	635a      	str	r2, [r3, #52]	; 0x34
 8001854:	e015      	b.n	8001882 <DriveMotor+0x10e>
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <DriveMotor+0x1a8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b04      	cmp	r3, #4
 800185c:	d104      	bne.n	8001868 <DriveMotor+0xf4>
 800185e:	4b30      	ldr	r3, [pc, #192]	; (8001920 <DriveMotor+0x1ac>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2300      	movs	r3, #0
 8001864:	6393      	str	r3, [r2, #56]	; 0x38
 8001866:	e00c      	b.n	8001882 <DriveMotor+0x10e>
 8001868:	4b2c      	ldr	r3, [pc, #176]	; (800191c <DriveMotor+0x1a8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b08      	cmp	r3, #8
 800186e:	d104      	bne.n	800187a <DriveMotor+0x106>
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <DriveMotor+0x1ac>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001878:	e003      	b.n	8001882 <DriveMotor+0x10e>
 800187a:	4b29      	ldr	r3, [pc, #164]	; (8001920 <DriveMotor+0x1ac>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
		  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_SET);
 8001882:	2201      	movs	r2, #1
 8001884:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001888:	4826      	ldr	r0, [pc, #152]	; (8001924 <DriveMotor+0x1b0>)
 800188a:	f001 f858 	bl	800293e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001894:	4823      	ldr	r0, [pc, #140]	; (8001924 <DriveMotor+0x1b0>)
 8001896:	f001 f852 	bl	800293e <HAL_GPIO_WritePin>
		}break;
 800189a:	bf00      	nop
		}
	}

	//setting PWM value
	PWM_countingDutyCycle = (uint32_t)fabs(controlSignal);
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <DriveMotor+0x19c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fc27 	bl	80010f8 <__aeabi_f2uiz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a1e      	ldr	r2, [pc, #120]	; (8001928 <DriveMotor+0x1b4>)
 80018ae:	6013      	str	r3, [r2, #0]
	if(PWM_countingDutyCycle > 180)
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <DriveMotor+0x1b4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2bb4      	cmp	r3, #180	; 0xb4
 80018b6:	d902      	bls.n	80018be <DriveMotor+0x14a>
	{
		PWM_countingDutyCycle = 180;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <DriveMotor+0x1b4>)
 80018ba:	22b4      	movs	r2, #180	; 0xb4
 80018bc:	601a      	str	r2, [r3, #0]
	}
    __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, PWM_countingDutyCycle);
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <DriveMotor+0x1a8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d105      	bne.n	80018d2 <DriveMotor+0x15e>
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <DriveMotor+0x1ac>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a17      	ldr	r2, [pc, #92]	; (8001928 <DriveMotor+0x1b4>)
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	635a      	str	r2, [r3, #52]	; 0x34
 80018d0:	e018      	b.n	8001904 <DriveMotor+0x190>
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <DriveMotor+0x1a8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d105      	bne.n	80018e6 <DriveMotor+0x172>
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <DriveMotor+0x1ac>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <DriveMotor+0x1b4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6393      	str	r3, [r2, #56]	; 0x38
 80018e4:	e00e      	b.n	8001904 <DriveMotor+0x190>
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <DriveMotor+0x1a8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d105      	bne.n	80018fa <DriveMotor+0x186>
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <DriveMotor+0x1ac>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <DriveMotor+0x1b4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80018f8:	e004      	b.n	8001904 <DriveMotor+0x190>
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <DriveMotor+0x1ac>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <DriveMotor+0x1b4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6413      	str	r3, [r2, #64]	; 0x40

	prevMotorDirection = motorDirection;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <DriveMotor+0x1a0>)
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <DriveMotor+0x1a4>)
 800190a:	701a      	strb	r2, [r3, #0]
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000020c 	.word	0x2000020c
 8001914:	2000016c 	.word	0x2000016c
 8001918:	20000000 	.word	0x20000000
 800191c:	20000170 	.word	0x20000170
 8001920:	20000094 	.word	0x20000094
 8001924:	40010c00 	.word	0x40010c00
 8001928:	20000174 	.word	0x20000174

0800192c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800192c:	b5b0      	push	{r4, r5, r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8001934:	2201      	movs	r2, #1
 8001936:	491b      	ldr	r1, [pc, #108]	; (80019a4 <HAL_UART_RxCpltCallback+0x78>)
 8001938:	481b      	ldr	r0, [pc, #108]	; (80019a8 <HAL_UART_RxCpltCallback+0x7c>)
 800193a:	f002 fc5e 	bl	80041fa <HAL_UART_Receive_IT>
	buffer[bufferIndex] = rx_buffer[0];
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_UART_RxCpltCallback+0x80>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_UART_RxCpltCallback+0x78>)
 8001946:	7819      	ldrb	r1, [r3, #0]
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_UART_RxCpltCallback+0x84>)
 800194a:	5499      	strb	r1, [r3, r2]
	bufferIndex++;
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_UART_RxCpltCallback+0x80>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_UART_RxCpltCallback+0x80>)
 8001956:	701a      	strb	r2, [r3, #0]
	if(bufferIndex == sizeof(ConfigData))
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_UART_RxCpltCallback+0x80>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b30      	cmp	r3, #48	; 0x30
 800195e:	d11d      	bne.n	800199c <HAL_UART_RxCpltCallback+0x70>
	{
		bufferIndex = 0;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_UART_RxCpltCallback+0x80>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
		memset(&data,0 , sizeof(data));
 8001966:	2230      	movs	r2, #48	; 0x30
 8001968:	2100      	movs	r1, #0
 800196a:	4812      	ldr	r0, [pc, #72]	; (80019b4 <HAL_UART_RxCpltCallback+0x88>)
 800196c:	f003 fa0a 	bl	8004d84 <memset>
		memcpy(&data, buffer, sizeof(buffer));
 8001970:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <HAL_UART_RxCpltCallback+0x88>)
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_UART_RxCpltCallback+0x84>)
 8001974:	4614      	mov	r4, r2
 8001976:	461d      	mov	r5, r3
 8001978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001980:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_time = 0.0f;
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_UART_RxCpltCallback+0x8c>)
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
		integral = 0.0f;
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_UART_RxCpltCallback+0x90>)
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
		CalculateMotionProfile();
 8001998:	f7ff fbce 	bl	8001138 <CalculateMotionProfile>
	}
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}
 80019a4:	20000178 	.word	0x20000178
 80019a8:	20000124 	.word	0x20000124
 80019ac:	200001ac 	.word	0x200001ac
 80019b0:	2000017c 	.word	0x2000017c
 80019b4:	200001b0 	.word	0x200001b0
 80019b8:	200001ec 	.word	0x200001ec
 80019bc:	20000208 	.word	0x20000208

080019c0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_6)
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	2b40      	cmp	r3, #64	; 0x40
 80019ce:	d11c      	bne.n	8001a0a <HAL_GPIO_EXTI_Callback+0x4a>
  {
	  int32_t inc = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	480f      	ldr	r0, [pc, #60]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x54>)
 80019d8:	f000 ff9a 	bl	8002910 <HAL_GPIO_ReadPin>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_GPIO_EXTI_Callback+0x28>
	  {
		   inc = 1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_EXTI_Callback+0x2e>
	  }
	  else
	  {
		  inc = -1;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	60fb      	str	r3, [r7, #12]
	  }
	  motor_current_position += (float)inc;
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f7ff f92c 	bl	8000c4c <__aeabi_i2f>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_GPIO_EXTI_Callback+0x58>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4619      	mov	r1, r3
 80019fc:	4610      	mov	r0, r2
 80019fe:	f7ff f871 	bl	8000ae4 <__addsf3>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a08:	601a      	str	r2, [r3, #0]
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40010c00 	.word	0x40010c00
 8001a18:	200001e0 	.word	0x200001e0

08001a1c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d111      	bne.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		StatusData send_data = {0};
 8001a2c:	f107 0308 	add.w	r3, r7, #8
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
		send_data.motor_current_position = motor_current_position;
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	60fb      	str	r3, [r7, #12]
		send_data.motor_current_speed = motor_current_speed;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60bb      	str	r3, [r7, #8]
		send_data.motor_current_acceleration= motor_current_acceleration;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	613b      	str	r3, [r7, #16]
		send_data.dummy = 1212.22f;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001a4e:	617b      	str	r3, [r7, #20]
		//if(data.send)
			//HAL_UART_Transmit_IT(&huart1, (uint8_t*)&send_data, sizeof(StatusData));
	}
}
 8001a50:	bf00      	nop
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	200000dc 	.word	0x200000dc
 8001a60:	200001e0 	.word	0x200001e0
 8001a64:	20000004 	.word	0x20000004
 8001a68:	200001e8 	.word	0x200001e8
 8001a6c:	4497870a 	.word	0x4497870a

08001a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a74:	f000 fb8a 	bl	800218c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a78:	f000 f852 	bl	8001b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a7c:	f000 f98c 	bl	8001d98 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001a80:	f000 f960 	bl	8001d44 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001a84:	f000 f88e 	bl	8001ba4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a88:	f000 f90e 	bl	8001ca8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	491b      	ldr	r1, [pc, #108]	; (8001afc <main+0x8c>)
 8001a90:	481b      	ldr	r0, [pc, #108]	; (8001b00 <main+0x90>)
 8001a92:	f002 fbb2 	bl	80041fa <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a96:	2100      	movs	r1, #0
 8001a98:	481a      	ldr	r0, [pc, #104]	; (8001b04 <main+0x94>)
 8001a9a:	f001 fc85 	bl	80033a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	4818      	ldr	r0, [pc, #96]	; (8001b04 <main+0x94>)
 8001aa2:	f001 fc81 	bl	80033a8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001aa6:	4818      	ldr	r0, [pc, #96]	; (8001b08 <main+0x98>)
 8001aa8:	f001 fbda 	bl	8003260 <HAL_TIM_Base_Start_IT>
  data.gearRatio = 3249.0f / 121.0f;
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <main+0x9c>)
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <main+0xa0>)
 8001ab0:	61da      	str	r2, [r3, #28]
  data.encoderPulses = 500.0f;
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <main+0x9c>)
 8001ab4:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <main+0xa4>)
 8001ab6:	619a      	str	r2, [r3, #24]

  data.kp = 1.0f;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <main+0x9c>)
 8001aba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
  data.ki = 4.0f;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <main+0x9c>)
 8001ac2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001ac6:	621a      	str	r2, [r3, #32]
  data.kd = 0.0f;
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <main+0x9c>)
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28


  data.position = 5463.0f;
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <main+0x9c>)
 8001ad2:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <main+0xa8>)
 8001ad4:	605a      	str	r2, [r3, #4]
  data.speed = 550.0f;
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <main+0x9c>)
 8001ad8:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <main+0xac>)
 8001ada:	601a      	str	r2, [r3, #0]
  data.acceleration = 500.0f;
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <main+0x9c>)
 8001ade:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <main+0xa4>)
 8001ae0:	609a      	str	r2, [r3, #8]
  data.deceleration = 500.0f;
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <main+0x9c>)
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <main+0xa4>)
 8001ae6:	60da      	str	r2, [r3, #12]
  CalculateMotionProfile();
 8001ae8:	f7ff fb26 	bl	8001138 <CalculateMotionProfile>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CalculateSpeed();
 8001aec:	f7ff fcdc 	bl	80014a8 <CalculateSpeed>
	  CalculatePID();
 8001af0:	f7ff fd06 	bl	8001500 <CalculatePID>
	  DriveMotor();
 8001af4:	f7ff fe3e 	bl	8001774 <DriveMotor>
	  CalculateSpeed();
 8001af8:	e7f8      	b.n	8001aec <main+0x7c>
 8001afa:	bf00      	nop
 8001afc:	20000178 	.word	0x20000178
 8001b00:	20000124 	.word	0x20000124
 8001b04:	20000094 	.word	0x20000094
 8001b08:	200000dc 	.word	0x200000dc
 8001b0c:	200001b0 	.word	0x200001b0
 8001b10:	41d6cf57 	.word	0x41d6cf57
 8001b14:	43fa0000 	.word	0x43fa0000
 8001b18:	45aab800 	.word	0x45aab800
 8001b1c:	44098000 	.word	0x44098000

08001b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b090      	sub	sp, #64	; 0x40
 8001b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b26:	f107 0318 	add.w	r3, r7, #24
 8001b2a:	2228      	movs	r2, #40	; 0x28
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 f928 	bl	8004d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b46:	2301      	movs	r3, #1
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b52:	2300      	movs	r3, #0
 8001b54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001b56:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5c:	f107 0318 	add.w	r3, r7, #24
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 ff1d 	bl	80029a0 <HAL_RCC_OscConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001b6c:	f000 f976 	bl	8001e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b70:	230f      	movs	r3, #15
 8001b72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b74:	2302      	movs	r3, #2
 8001b76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2102      	movs	r1, #2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 f98a 	bl	8002ea4 <HAL_RCC_ClockConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001b96:	f000 f961 	bl	8001e5c <Error_Handler>
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	3740      	adds	r7, #64	; 0x40
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08e      	sub	sp, #56	; 0x38
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	f107 0320 	add.w	r3, r7, #32
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	615a      	str	r2, [r3, #20]
 8001bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd4:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001bd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bdc:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be2:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001be8:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001bea:	22ff      	movs	r2, #255	; 0xff
 8001bec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001bf6:	2280      	movs	r2, #128	; 0x80
 8001bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bfa:	482a      	ldr	r0, [pc, #168]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001bfc:	f001 fae0 	bl	80031c0 <HAL_TIM_Base_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001c06:	f000 f929 	bl	8001e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c14:	4619      	mov	r1, r3
 8001c16:	4823      	ldr	r0, [pc, #140]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001c18:	f001 fe2c 	bl	8003874 <HAL_TIM_ConfigClockSource>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001c22:	f000 f91b 	bl	8001e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c26:	481f      	ldr	r0, [pc, #124]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001c28:	f001 fb66 	bl	80032f8 <HAL_TIM_PWM_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001c32:	f000 f913 	bl	8001e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c3e:	f107 0320 	add.w	r3, r7, #32
 8001c42:	4619      	mov	r1, r3
 8001c44:	4817      	ldr	r0, [pc, #92]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001c46:	f002 f99b 	bl	8003f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001c50:	f000 f904 	bl	8001e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c54:	2360      	movs	r3, #96	; 0x60
 8001c56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 8001c58:	237d      	movs	r3, #125	; 0x7d
 8001c5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2200      	movs	r2, #0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001c6c:	f001 fd40 	bl	80036f0 <HAL_TIM_PWM_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001c76:	f000 f8f1 	bl	8001e5c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2204      	movs	r2, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001c86:	f001 fd33 	bl	80036f0 <HAL_TIM_PWM_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001c90:	f000 f8e4 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <MX_TIM2_Init+0x100>)
 8001c96:	f000 f951 	bl	8001f3c <HAL_TIM_MspPostInit>

}
 8001c9a:	bf00      	nop
 8001c9c:	3738      	adds	r7, #56	; 0x38
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000094 	.word	0x20000094

08001ca8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <MX_TIM3_Init+0x94>)
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <MX_TIM3_Init+0x98>)
 8001cc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 128 - 1;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <MX_TIM3_Init+0x94>)
 8001ccc:	227f      	movs	r2, #127	; 0x7f
 8001cce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MX_TIM3_Init+0x94>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535 - 1;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <MX_TIM3_Init+0x94>)
 8001cd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001cdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <MX_TIM3_Init+0x94>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <MX_TIM3_Init+0x94>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cea:	4814      	ldr	r0, [pc, #80]	; (8001d3c <MX_TIM3_Init+0x94>)
 8001cec:	f001 fa68 	bl	80031c0 <HAL_TIM_Base_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001cf6:	f000 f8b1 	bl	8001e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	4619      	mov	r1, r3
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <MX_TIM3_Init+0x94>)
 8001d08:	f001 fdb4 	bl	8003874 <HAL_TIM_ConfigClockSource>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d12:	f000 f8a3 	bl	8001e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d1e:	463b      	mov	r3, r7
 8001d20:	4619      	mov	r1, r3
 8001d22:	4806      	ldr	r0, [pc, #24]	; (8001d3c <MX_TIM3_Init+0x94>)
 8001d24:	f002 f92c 	bl	8003f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d2e:	f000 f895 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200000dc 	.word	0x200000dc
 8001d40:	40000400 	.word	0x40000400

08001d44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <MX_USART1_UART_Init+0x50>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d7c:	f002 f96a 	bl	8004054 <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d86:	f000 f869 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000124 	.word	0x20000124
 8001d94:	40013800 	.word	0x40013800

08001d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9e:	f107 0308 	add.w	r3, r7, #8
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <MX_GPIO_Init+0xb8>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a27      	ldr	r2, [pc, #156]	; (8001e50 <MX_GPIO_Init+0xb8>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <MX_GPIO_Init+0xb8>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <MX_GPIO_Init+0xb8>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <MX_GPIO_Init+0xb8>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <MX_GPIO_Init+0xb8>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001de2:	481c      	ldr	r0, [pc, #112]	; (8001e54 <MX_GPIO_Init+0xbc>)
 8001de4:	f000 fdab 	bl	800293e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001de8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001dec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2302      	movs	r3, #2
 8001df8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4814      	ldr	r0, [pc, #80]	; (8001e54 <MX_GPIO_Init+0xbc>)
 8001e02:	f000 fc09 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e06:	2340      	movs	r3, #64	; 0x40
 8001e08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <MX_GPIO_Init+0xc0>)
 8001e0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	4619      	mov	r1, r3
 8001e18:	480e      	ldr	r0, [pc, #56]	; (8001e54 <MX_GPIO_Init+0xbc>)
 8001e1a:	f000 fbfd 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 0308 	add.w	r3, r7, #8
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4808      	ldr	r0, [pc, #32]	; (8001e54 <MX_GPIO_Init+0xbc>)
 8001e32:	f000 fbf1 	bl	8002618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2017      	movs	r0, #23
 8001e3c:	f000 fb03 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e40:	2017      	movs	r0, #23
 8001e42:	f000 fb1c 	bl	800247e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010c00 	.word	0x40010c00
 8001e58:	10110000 	.word	0x10110000

08001e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e60:	b672      	cpsid	i
}
 8001e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <Error_Handler+0x8>
	...

08001e68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_MspInit+0x5c>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_MspInit+0x5c>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6193      	str	r3, [r2, #24]
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_MspInit+0x5c>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_MspInit+0x5c>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <HAL_MspInit+0x5c>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	61d3      	str	r3, [r2, #28]
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_MspInit+0x5c>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_MspInit+0x60>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_MspInit+0x60>)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010000 	.word	0x40010000

08001ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001edc:	d10c      	bne.n	8001ef8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_TIM_Base_MspInit+0x68>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <HAL_TIM_Base_MspInit+0x68>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	61d3      	str	r3, [r2, #28]
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_TIM_Base_MspInit+0x68>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ef6:	e018      	b.n	8001f2a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_TIM_Base_MspInit+0x6c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d113      	bne.n	8001f2a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_TIM_Base_MspInit+0x68>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <HAL_TIM_Base_MspInit+0x68>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	61d3      	str	r3, [r2, #28]
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_TIM_Base_MspInit+0x68>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	201d      	movs	r0, #29
 8001f20:	f000 fa91 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f24:	201d      	movs	r0, #29
 8001f26:	f000 faaa 	bl	800247e <HAL_NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40000400 	.word	0x40000400

08001f3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5a:	d117      	bne.n	8001f8c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_TIM_MspPostInit+0x58>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <HAL_TIM_MspPostInit+0x58>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_TIM_MspPostInit+0x58>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f74:	2303      	movs	r3, #3
 8001f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	4619      	mov	r1, r3
 8001f86:	4804      	ldr	r0, [pc, #16]	; (8001f98 <HAL_TIM_MspPostInit+0x5c>)
 8001f88:	f000 fb46 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3720      	adds	r7, #32
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010800 	.word	0x40010800

08001f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a20      	ldr	r2, [pc, #128]	; (8002038 <HAL_UART_MspInit+0x9c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d139      	bne.n	8002030 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	; (800203c <HAL_UART_MspInit+0xa0>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a1e      	ldr	r2, [pc, #120]	; (800203c <HAL_UART_MspInit+0xa0>)
 8001fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_UART_MspInit+0xa0>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_UART_MspInit+0xa0>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a18      	ldr	r2, [pc, #96]	; (800203c <HAL_UART_MspInit+0xa0>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_UART_MspInit+0xa0>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 0310 	add.w	r3, r7, #16
 8001ffe:	4619      	mov	r1, r3
 8002000:	480f      	ldr	r0, [pc, #60]	; (8002040 <HAL_UART_MspInit+0xa4>)
 8002002:	f000 fb09 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	4619      	mov	r1, r3
 800201a:	4809      	ldr	r0, [pc, #36]	; (8002040 <HAL_UART_MspInit+0xa4>)
 800201c:	f000 fafc 	bl	8002618 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	2025      	movs	r0, #37	; 0x25
 8002026:	f000 fa0e 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800202a:	2025      	movs	r0, #37	; 0x25
 800202c:	f000 fa27 	bl	800247e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002030:	bf00      	nop
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40013800 	.word	0x40013800
 800203c:	40021000 	.word	0x40021000
 8002040:	40010800 	.word	0x40010800

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800208a:	f000 f8c5 	bl	8002218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}

08002092 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002096:	2040      	movs	r0, #64	; 0x40
 8002098:	f000 fc6a 	bl	8002970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <TIM3_IRQHandler+0x10>)
 80020a6:	f001 fa1b 	bl	80034e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200000dc 	.word	0x200000dc

080020b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <USART1_IRQHandler+0x10>)
 80020ba:	f002 f8c3 	bl	8004244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000124 	.word	0x20000124

080020c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <_sbrk+0x5c>)
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <_sbrk+0x60>)
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <_sbrk+0x64>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <_sbrk+0x68>)
 80020e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d207      	bcs.n	8002108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f8:	f002 fe4c 	bl	8004d94 <__errno>
 80020fc:	4603      	mov	r3, r0
 80020fe:	220c      	movs	r2, #12
 8002100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	e009      	b.n	800211c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	4a05      	ldr	r2, [pc, #20]	; (800212c <_sbrk+0x64>)
 8002118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211a:	68fb      	ldr	r3, [r7, #12]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20002800 	.word	0x20002800
 8002128:	00000400 	.word	0x00000400
 800212c:	20000244 	.word	0x20000244
 8002130:	20000398 	.word	0x20000398

08002134 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002140:	f7ff fff8 	bl	8002134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002144:	480b      	ldr	r0, [pc, #44]	; (8002174 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002146:	490c      	ldr	r1, [pc, #48]	; (8002178 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <LoopFillZerobss+0x16>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800214c:	e002      	b.n	8002154 <LoopCopyDataInit>

0800214e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002152:	3304      	adds	r3, #4

08002154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002158:	d3f9      	bcc.n	800214e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800215c:	4c09      	ldr	r4, [pc, #36]	; (8002184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002160:	e001      	b.n	8002166 <LoopFillZerobss>

08002162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002164:	3204      	adds	r2, #4

08002166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002168:	d3fb      	bcc.n	8002162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800216a:	f002 fe19 	bl	8004da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800216e:	f7ff fc7f 	bl	8001a70 <main>
  bx lr
 8002172:	4770      	bx	lr
  ldr r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002178:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800217c:	08006588 	.word	0x08006588
  ldr r2, =_sbss
 8002180:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002184:	20000394 	.word	0x20000394

08002188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC1_2_IRQHandler>
	...

0800218c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_Init+0x28>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_Init+0x28>)
 8002196:	f043 0310 	orr.w	r3, r3, #16
 800219a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f000 f947 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a2:	200f      	movs	r0, #15
 80021a4:	f000 f808 	bl	80021b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a8:	f7ff fe5e 	bl	8001e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_InitTick+0x54>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x58>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f95f 	bl	800249a <HAL_SYSTICK_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00e      	b.n	8002204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d80a      	bhi.n	8002202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 f927 	bl	8002446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4a06      	ldr	r2, [pc, #24]	; (8002214 <HAL_InitTick+0x5c>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000008 	.word	0x20000008
 8002210:	20000010 	.word	0x20000010
 8002214:	2000000c 	.word	0x2000000c

08002218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_IncTick+0x1c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_IncTick+0x20>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a03      	ldr	r2, [pc, #12]	; (8002238 <HAL_IncTick+0x20>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	20000010 	.word	0x20000010
 8002238:	20000248 	.word	0x20000248

0800223c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b02      	ldr	r3, [pc, #8]	; (800224c <HAL_GetTick+0x10>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	20000248 	.word	0x20000248

08002250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff fff0 	bl	800223c <HAL_GetTick>
 800225c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002268:	d005      	beq.n	8002276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_Delay+0x44>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002276:	bf00      	nop
 8002278:	f7ff ffe0 	bl	800223c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	429a      	cmp	r2, r3
 8002286:	d8f7      	bhi.n	8002278 <HAL_Delay+0x28>
  {
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000010 	.word	0x20000010

08002298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ca:	4a04      	ldr	r2, [pc, #16]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <__NVIC_GetPriorityGrouping+0x18>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 0307 	and.w	r3, r3, #7
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db0b      	blt.n	8002326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	4906      	ldr	r1, [pc, #24]	; (8002330 <__NVIC_EnableIRQ+0x34>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2001      	movs	r0, #1
 800231e:	fa00 f202 	lsl.w	r2, r0, r2
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fc:	d301      	bcc.n	8002402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fe:	2301      	movs	r3, #1
 8002400:	e00f      	b.n	8002422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <SysTick_Config+0x40>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240a:	210f      	movs	r1, #15
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f7ff ff90 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <SysTick_Config+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <SysTick_Config+0x40>)
 800241c:	2207      	movs	r2, #7
 800241e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff2d 	bl	8002298 <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002458:	f7ff ff42 	bl	80022e0 <__NVIC_GetPriorityGrouping>
 800245c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ff90 	bl	8002388 <NVIC_EncodePriority>
 8002468:	4602      	mov	r2, r0
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff5f 	bl	8002334 <__NVIC_SetPriority>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff35 	bl	80022fc <__NVIC_EnableIRQ>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ffa2 	bl	80023ec <SysTick_Config>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d008      	beq.n	80024dc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2204      	movs	r2, #4
 80024ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e020      	b.n	800251e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 020e 	bic.w	r2, r2, #14
 80024ea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	2101      	movs	r1, #1
 8002506:	fa01 f202 	lsl.w	r2, r1, r2
 800250a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d005      	beq.n	800254c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2204      	movs	r2, #4
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
 800254a:	e051      	b.n	80025f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 020e 	bic.w	r2, r2, #14
 800255a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a22      	ldr	r2, [pc, #136]	; (80025fc <HAL_DMA_Abort_IT+0xd4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d029      	beq.n	80025ca <HAL_DMA_Abort_IT+0xa2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a21      	ldr	r2, [pc, #132]	; (8002600 <HAL_DMA_Abort_IT+0xd8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d022      	beq.n	80025c6 <HAL_DMA_Abort_IT+0x9e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <HAL_DMA_Abort_IT+0xdc>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01a      	beq.n	80025c0 <HAL_DMA_Abort_IT+0x98>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_DMA_Abort_IT+0xe0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d012      	beq.n	80025ba <HAL_DMA_Abort_IT+0x92>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_DMA_Abort_IT+0xe4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00a      	beq.n	80025b4 <HAL_DMA_Abort_IT+0x8c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_DMA_Abort_IT+0xe8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d102      	bne.n	80025ae <HAL_DMA_Abort_IT+0x86>
 80025a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025ac:	e00e      	b.n	80025cc <HAL_DMA_Abort_IT+0xa4>
 80025ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b2:	e00b      	b.n	80025cc <HAL_DMA_Abort_IT+0xa4>
 80025b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b8:	e008      	b.n	80025cc <HAL_DMA_Abort_IT+0xa4>
 80025ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025be:	e005      	b.n	80025cc <HAL_DMA_Abort_IT+0xa4>
 80025c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025c4:	e002      	b.n	80025cc <HAL_DMA_Abort_IT+0xa4>
 80025c6:	2310      	movs	r3, #16
 80025c8:	e000      	b.n	80025cc <HAL_DMA_Abort_IT+0xa4>
 80025ca:	2301      	movs	r3, #1
 80025cc:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_DMA_Abort_IT+0xec>)
 80025ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
    } 
  }
  return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40020008 	.word	0x40020008
 8002600:	4002001c 	.word	0x4002001c
 8002604:	40020030 	.word	0x40020030
 8002608:	40020044 	.word	0x40020044
 800260c:	40020058 	.word	0x40020058
 8002610:	4002006c 	.word	0x4002006c
 8002614:	40020000 	.word	0x40020000

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b08b      	sub	sp, #44	; 0x2c
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262a:	e161      	b.n	80028f0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800262c:	2201      	movs	r2, #1
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	429a      	cmp	r2, r3
 8002646:	f040 8150 	bne.w	80028ea <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4a97      	ldr	r2, [pc, #604]	; (80028ac <HAL_GPIO_Init+0x294>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d05e      	beq.n	8002712 <HAL_GPIO_Init+0xfa>
 8002654:	4a95      	ldr	r2, [pc, #596]	; (80028ac <HAL_GPIO_Init+0x294>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d875      	bhi.n	8002746 <HAL_GPIO_Init+0x12e>
 800265a:	4a95      	ldr	r2, [pc, #596]	; (80028b0 <HAL_GPIO_Init+0x298>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d058      	beq.n	8002712 <HAL_GPIO_Init+0xfa>
 8002660:	4a93      	ldr	r2, [pc, #588]	; (80028b0 <HAL_GPIO_Init+0x298>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d86f      	bhi.n	8002746 <HAL_GPIO_Init+0x12e>
 8002666:	4a93      	ldr	r2, [pc, #588]	; (80028b4 <HAL_GPIO_Init+0x29c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d052      	beq.n	8002712 <HAL_GPIO_Init+0xfa>
 800266c:	4a91      	ldr	r2, [pc, #580]	; (80028b4 <HAL_GPIO_Init+0x29c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d869      	bhi.n	8002746 <HAL_GPIO_Init+0x12e>
 8002672:	4a91      	ldr	r2, [pc, #580]	; (80028b8 <HAL_GPIO_Init+0x2a0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d04c      	beq.n	8002712 <HAL_GPIO_Init+0xfa>
 8002678:	4a8f      	ldr	r2, [pc, #572]	; (80028b8 <HAL_GPIO_Init+0x2a0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d863      	bhi.n	8002746 <HAL_GPIO_Init+0x12e>
 800267e:	4a8f      	ldr	r2, [pc, #572]	; (80028bc <HAL_GPIO_Init+0x2a4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d046      	beq.n	8002712 <HAL_GPIO_Init+0xfa>
 8002684:	4a8d      	ldr	r2, [pc, #564]	; (80028bc <HAL_GPIO_Init+0x2a4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d85d      	bhi.n	8002746 <HAL_GPIO_Init+0x12e>
 800268a:	2b12      	cmp	r3, #18
 800268c:	d82a      	bhi.n	80026e4 <HAL_GPIO_Init+0xcc>
 800268e:	2b12      	cmp	r3, #18
 8002690:	d859      	bhi.n	8002746 <HAL_GPIO_Init+0x12e>
 8002692:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <HAL_GPIO_Init+0x80>)
 8002694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002698:	08002713 	.word	0x08002713
 800269c:	080026ed 	.word	0x080026ed
 80026a0:	080026ff 	.word	0x080026ff
 80026a4:	08002741 	.word	0x08002741
 80026a8:	08002747 	.word	0x08002747
 80026ac:	08002747 	.word	0x08002747
 80026b0:	08002747 	.word	0x08002747
 80026b4:	08002747 	.word	0x08002747
 80026b8:	08002747 	.word	0x08002747
 80026bc:	08002747 	.word	0x08002747
 80026c0:	08002747 	.word	0x08002747
 80026c4:	08002747 	.word	0x08002747
 80026c8:	08002747 	.word	0x08002747
 80026cc:	08002747 	.word	0x08002747
 80026d0:	08002747 	.word	0x08002747
 80026d4:	08002747 	.word	0x08002747
 80026d8:	08002747 	.word	0x08002747
 80026dc:	080026f5 	.word	0x080026f5
 80026e0:	08002709 	.word	0x08002709
 80026e4:	4a76      	ldr	r2, [pc, #472]	; (80028c0 <HAL_GPIO_Init+0x2a8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026ea:	e02c      	b.n	8002746 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	623b      	str	r3, [r7, #32]
          break;
 80026f2:	e029      	b.n	8002748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	3304      	adds	r3, #4
 80026fa:	623b      	str	r3, [r7, #32]
          break;
 80026fc:	e024      	b.n	8002748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	3308      	adds	r3, #8
 8002704:	623b      	str	r3, [r7, #32]
          break;
 8002706:	e01f      	b.n	8002748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	330c      	adds	r3, #12
 800270e:	623b      	str	r3, [r7, #32]
          break;
 8002710:	e01a      	b.n	8002748 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800271a:	2304      	movs	r3, #4
 800271c:	623b      	str	r3, [r7, #32]
          break;
 800271e:	e013      	b.n	8002748 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002728:	2308      	movs	r3, #8
 800272a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	611a      	str	r2, [r3, #16]
          break;
 8002732:	e009      	b.n	8002748 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002734:	2308      	movs	r3, #8
 8002736:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	615a      	str	r2, [r3, #20]
          break;
 800273e:	e003      	b.n	8002748 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002740:	2300      	movs	r3, #0
 8002742:	623b      	str	r3, [r7, #32]
          break;
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x130>
          break;
 8002746:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2bff      	cmp	r3, #255	; 0xff
 800274c:	d801      	bhi.n	8002752 <HAL_GPIO_Init+0x13a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	e001      	b.n	8002756 <HAL_GPIO_Init+0x13e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3304      	adds	r3, #4
 8002756:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2bff      	cmp	r3, #255	; 0xff
 800275c:	d802      	bhi.n	8002764 <HAL_GPIO_Init+0x14c>
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	e002      	b.n	800276a <HAL_GPIO_Init+0x152>
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	3b08      	subs	r3, #8
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	210f      	movs	r1, #15
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	401a      	ands	r2, r3
 800277c:	6a39      	ldr	r1, [r7, #32]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	431a      	orrs	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80a9 	beq.w	80028ea <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002798:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <HAL_GPIO_Init+0x2ac>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	4a49      	ldr	r2, [pc, #292]	; (80028c4 <HAL_GPIO_Init+0x2ac>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6193      	str	r3, [r2, #24]
 80027a4:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <HAL_GPIO_Init+0x2ac>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027b0:	4a45      	ldr	r2, [pc, #276]	; (80028c8 <HAL_GPIO_Init+0x2b0>)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3302      	adds	r3, #2
 80027b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4013      	ands	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3d      	ldr	r2, [pc, #244]	; (80028cc <HAL_GPIO_Init+0x2b4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00d      	beq.n	80027f8 <HAL_GPIO_Init+0x1e0>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3c      	ldr	r2, [pc, #240]	; (80028d0 <HAL_GPIO_Init+0x2b8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d007      	beq.n	80027f4 <HAL_GPIO_Init+0x1dc>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <HAL_GPIO_Init+0x2bc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_GPIO_Init+0x1d8>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e004      	b.n	80027fa <HAL_GPIO_Init+0x1e2>
 80027f0:	2303      	movs	r3, #3
 80027f2:	e002      	b.n	80027fa <HAL_GPIO_Init+0x1e2>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <HAL_GPIO_Init+0x1e2>
 80027f8:	2300      	movs	r3, #0
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	f002 0203 	and.w	r2, r2, #3
 8002800:	0092      	lsls	r2, r2, #2
 8002802:	4093      	lsls	r3, r2
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800280a:	492f      	ldr	r1, [pc, #188]	; (80028c8 <HAL_GPIO_Init+0x2b0>)
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	3302      	adds	r3, #2
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002824:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	492b      	ldr	r1, [pc, #172]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	608b      	str	r3, [r1, #8]
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002832:	4b29      	ldr	r3, [pc, #164]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	43db      	mvns	r3, r3
 800283a:	4927      	ldr	r1, [pc, #156]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 800283c:	4013      	ands	r3, r2
 800283e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800284c:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	4921      	ldr	r1, [pc, #132]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	60cb      	str	r3, [r1, #12]
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800285a:	4b1f      	ldr	r3, [pc, #124]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	43db      	mvns	r3, r3
 8002862:	491d      	ldr	r1, [pc, #116]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 8002864:	4013      	ands	r3, r2
 8002866:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4917      	ldr	r1, [pc, #92]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	43db      	mvns	r3, r3
 800288a:	4913      	ldr	r1, [pc, #76]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 800288c:	4013      	ands	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d01f      	beq.n	80028dc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	490d      	ldr	r1, [pc, #52]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
 80028a8:	e01f      	b.n	80028ea <HAL_GPIO_Init+0x2d2>
 80028aa:	bf00      	nop
 80028ac:	10320000 	.word	0x10320000
 80028b0:	10310000 	.word	0x10310000
 80028b4:	10220000 	.word	0x10220000
 80028b8:	10210000 	.word	0x10210000
 80028bc:	10120000 	.word	0x10120000
 80028c0:	10110000 	.word	0x10110000
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40010000 	.word	0x40010000
 80028cc:	40010800 	.word	0x40010800
 80028d0:	40010c00 	.word	0x40010c00
 80028d4:	40011000 	.word	0x40011000
 80028d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_GPIO_Init+0x2f4>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	4909      	ldr	r1, [pc, #36]	; (800290c <HAL_GPIO_Init+0x2f4>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	3301      	adds	r3, #1
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	fa22 f303 	lsr.w	r3, r2, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f47f ae96 	bne.w	800262c <HAL_GPIO_Init+0x14>
  }
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	372c      	adds	r7, #44	; 0x2c
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	40010400 	.word	0x40010400

08002910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e001      	b.n	8002932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002932:	7bfb      	ldrb	r3, [r7, #15]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	807b      	strh	r3, [r7, #2]
 800294a:	4613      	mov	r3, r2
 800294c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800294e:	787b      	ldrb	r3, [r7, #1]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002954:	887a      	ldrh	r2, [r7, #2]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800295a:	e003      	b.n	8002964 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800295c:	887b      	ldrh	r3, [r7, #2]
 800295e:	041a      	lsls	r2, r3, #16
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	611a      	str	r2, [r3, #16]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
	...

08002970 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002986:	4a05      	ldr	r2, [pc, #20]	; (800299c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff f816 	bl	80019c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40010400 	.word	0x40010400

080029a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e272      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8087 	beq.w	8002ace <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c0:	4b92      	ldr	r3, [pc, #584]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d00c      	beq.n	80029e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029cc:	4b8f      	ldr	r3, [pc, #572]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d112      	bne.n	80029fe <HAL_RCC_OscConfig+0x5e>
 80029d8:	4b8c      	ldr	r3, [pc, #560]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e4:	d10b      	bne.n	80029fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e6:	4b89      	ldr	r3, [pc, #548]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d06c      	beq.n	8002acc <HAL_RCC_OscConfig+0x12c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d168      	bne.n	8002acc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e24c      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x76>
 8002a08:	4b80      	ldr	r3, [pc, #512]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a7f      	ldr	r2, [pc, #508]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	e02e      	b.n	8002a74 <HAL_RCC_OscConfig+0xd4>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x98>
 8002a1e:	4b7b      	ldr	r3, [pc, #492]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a7a      	ldr	r2, [pc, #488]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b78      	ldr	r3, [pc, #480]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a77      	ldr	r2, [pc, #476]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e01d      	b.n	8002a74 <HAL_RCC_OscConfig+0xd4>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0xbc>
 8002a42:	4b72      	ldr	r3, [pc, #456]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a71      	ldr	r2, [pc, #452]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b6f      	ldr	r3, [pc, #444]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6e      	ldr	r2, [pc, #440]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e00b      	b.n	8002a74 <HAL_RCC_OscConfig+0xd4>
 8002a5c:	4b6b      	ldr	r3, [pc, #428]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a6a      	ldr	r2, [pc, #424]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b68      	ldr	r3, [pc, #416]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a67      	ldr	r2, [pc, #412]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d013      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7ff fbde 	bl	800223c <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a84:	f7ff fbda 	bl	800223c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	; 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e200      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0xe4>
 8002aa2:	e014      	b.n	8002ace <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7ff fbca 	bl	800223c <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aac:	f7ff fbc6 	bl	800223c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1ec      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abe:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x10c>
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d063      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ada:	4b4c      	ldr	r3, [pc, #304]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ae6:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d11c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x18c>
 8002af2:	4b46      	ldr	r3, [pc, #280]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d116      	bne.n	8002b2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afe:	4b43      	ldr	r3, [pc, #268]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_RCC_OscConfig+0x176>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d001      	beq.n	8002b16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e1c0      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b16:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4939      	ldr	r1, [pc, #228]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	e03a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b34:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3a:	f7ff fb7f 	bl	800223c <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b42:	f7ff fb7b 	bl	800223c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e1a1      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b54:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b60:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4927      	ldr	r1, [pc, #156]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]
 8002b74:	e015      	b.n	8002ba2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7ff fb5e 	bl	800223c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b84:	f7ff fb5a 	bl	800223c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e180      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b96:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d03a      	beq.n	8002c24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d019      	beq.n	8002bea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb6:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbc:	f7ff fb3e 	bl	800223c <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7ff fb3a 	bl	800223c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e160      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002be2:	2001      	movs	r0, #1
 8002be4:	f000 face 	bl	8003184 <RCC_Delay>
 8002be8:	e01c      	b.n	8002c24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_RCC_OscConfig+0x274>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7ff fb24 	bl	800223c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf6:	e00f      	b.n	8002c18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7ff fb20 	bl	800223c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d908      	bls.n	8002c18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e146      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	42420000 	.word	0x42420000
 8002c14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c18:	4b92      	ldr	r3, [pc, #584]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1e9      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80a6 	beq.w	8002d7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c36:	4b8b      	ldr	r3, [pc, #556]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10d      	bne.n	8002c5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	4b88      	ldr	r3, [pc, #544]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	4a87      	ldr	r2, [pc, #540]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	61d3      	str	r3, [r2, #28]
 8002c4e:	4b85      	ldr	r3, [pc, #532]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5e:	4b82      	ldr	r3, [pc, #520]	; (8002e68 <HAL_RCC_OscConfig+0x4c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d118      	bne.n	8002c9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6a:	4b7f      	ldr	r3, [pc, #508]	; (8002e68 <HAL_RCC_OscConfig+0x4c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a7e      	ldr	r2, [pc, #504]	; (8002e68 <HAL_RCC_OscConfig+0x4c8>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c76:	f7ff fae1 	bl	800223c <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7e:	f7ff fadd 	bl	800223c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b64      	cmp	r3, #100	; 0x64
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e103      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	4b75      	ldr	r3, [pc, #468]	; (8002e68 <HAL_RCC_OscConfig+0x4c8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x312>
 8002ca4:	4b6f      	ldr	r3, [pc, #444]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4a6e      	ldr	r2, [pc, #440]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6213      	str	r3, [r2, #32]
 8002cb0:	e02d      	b.n	8002d0e <HAL_RCC_OscConfig+0x36e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x334>
 8002cba:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4a69      	ldr	r2, [pc, #420]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6213      	str	r3, [r2, #32]
 8002cc6:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	4a66      	ldr	r2, [pc, #408]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	f023 0304 	bic.w	r3, r3, #4
 8002cd0:	6213      	str	r3, [r2, #32]
 8002cd2:	e01c      	b.n	8002d0e <HAL_RCC_OscConfig+0x36e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d10c      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x356>
 8002cdc:	4b61      	ldr	r3, [pc, #388]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a60      	ldr	r2, [pc, #384]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	4b5e      	ldr	r3, [pc, #376]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4a5d      	ldr	r2, [pc, #372]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6213      	str	r3, [r2, #32]
 8002cf4:	e00b      	b.n	8002d0e <HAL_RCC_OscConfig+0x36e>
 8002cf6:	4b5b      	ldr	r3, [pc, #364]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a5a      	ldr	r2, [pc, #360]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6213      	str	r3, [r2, #32]
 8002d02:	4b58      	ldr	r3, [pc, #352]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4a57      	ldr	r2, [pc, #348]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d015      	beq.n	8002d42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d16:	f7ff fa91 	bl	800223c <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7ff fa8d 	bl	800223c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e0b1      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d34:	4b4b      	ldr	r3, [pc, #300]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ee      	beq.n	8002d1e <HAL_RCC_OscConfig+0x37e>
 8002d40:	e014      	b.n	8002d6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d42:	f7ff fa7b 	bl	800223c <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4a:	f7ff fa77 	bl	800223c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e09b      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d60:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1ee      	bne.n	8002d4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d72:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	4a3b      	ldr	r2, [pc, #236]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 8087 	beq.w	8002e96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d88:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d061      	beq.n	8002e58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d146      	bne.n	8002e2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9c:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <HAL_RCC_OscConfig+0x4cc>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da2:	f7ff fa4b 	bl	800223c <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002daa:	f7ff fa47 	bl	800223c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e06d      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dbc:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f0      	bne.n	8002daa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d108      	bne.n	8002de4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dd2:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	4921      	ldr	r1, [pc, #132]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de4:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a19      	ldr	r1, [r3, #32]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	430b      	orrs	r3, r1
 8002df6:	491b      	ldr	r1, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x4cc>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7ff fa1b 	bl	800223c <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0a:	f7ff fa17 	bl	800223c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e03d      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x46a>
 8002e28:	e035      	b.n	8002e96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_RCC_OscConfig+0x4cc>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7ff fa04 	bl	800223c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e38:	f7ff fa00 	bl	800223c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e026      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x498>
 8002e56:	e01e      	b.n	8002e96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e019      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_OscConfig+0x500>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d106      	bne.n	8002e92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0d0      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d910      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b67      	ldr	r3, [pc, #412]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 0207 	bic.w	r2, r3, #7
 8002ece:	4965      	ldr	r1, [pc, #404]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b63      	ldr	r3, [pc, #396]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0b8      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f00:	4b59      	ldr	r3, [pc, #356]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4a58      	ldr	r2, [pc, #352]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f18:	4b53      	ldr	r3, [pc, #332]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f24:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	494d      	ldr	r1, [pc, #308]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d040      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d115      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e07f      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d107      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f62:	4b41      	ldr	r3, [pc, #260]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e073      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f72:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06b      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f82:	4b39      	ldr	r3, [pc, #228]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f023 0203 	bic.w	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4936      	ldr	r1, [pc, #216]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f94:	f7ff f952 	bl	800223c <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9c:	f7ff f94e 	bl	800223c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e053      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	4b2d      	ldr	r3, [pc, #180]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 020c 	and.w	r2, r3, #12
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d1eb      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b27      	ldr	r3, [pc, #156]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d210      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 0207 	bic.w	r2, r3, #7
 8002fda:	4922      	ldr	r1, [pc, #136]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e032      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4916      	ldr	r1, [pc, #88]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	490e      	ldr	r1, [pc, #56]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003032:	f000 f821 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003036:	4602      	mov	r2, r0
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	490a      	ldr	r1, [pc, #40]	; (800306c <HAL_RCC_ClockConfig+0x1c8>)
 8003044:	5ccb      	ldrb	r3, [r1, r3]
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	4a09      	ldr	r2, [pc, #36]	; (8003070 <HAL_RCC_ClockConfig+0x1cc>)
 800304c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_RCC_ClockConfig+0x1d0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f8b0 	bl	80021b8 <HAL_InitTick>

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40022000 	.word	0x40022000
 8003068:	40021000 	.word	0x40021000
 800306c:	080064ec 	.word	0x080064ec
 8003070:	20000008 	.word	0x20000008
 8003074:	2000000c 	.word	0x2000000c

08003078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	2300      	movs	r3, #0
 800308c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003092:	4b1e      	ldr	r3, [pc, #120]	; (800310c <HAL_RCC_GetSysClockFreq+0x94>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d002      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x30>
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d003      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x36>
 80030a6:	e027      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <HAL_RCC_GetSysClockFreq+0x98>)
 80030aa:	613b      	str	r3, [r7, #16]
      break;
 80030ac:	e027      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	0c9b      	lsrs	r3, r3, #18
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	4a17      	ldr	r2, [pc, #92]	; (8003114 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030b8:	5cd3      	ldrb	r3, [r2, r3]
 80030ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d010      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030c6:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_RCC_GetSysClockFreq+0x94>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	0c5b      	lsrs	r3, r3, #17
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	4a11      	ldr	r2, [pc, #68]	; (8003118 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a0d      	ldr	r2, [pc, #52]	; (8003110 <HAL_RCC_GetSysClockFreq+0x98>)
 80030da:	fb03 f202 	mul.w	r2, r3, r2
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	e004      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a0c      	ldr	r2, [pc, #48]	; (800311c <HAL_RCC_GetSysClockFreq+0xa4>)
 80030ec:	fb02 f303 	mul.w	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	613b      	str	r3, [r7, #16]
      break;
 80030f6:	e002      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_RCC_GetSysClockFreq+0x98>)
 80030fa:	613b      	str	r3, [r7, #16]
      break;
 80030fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030fe:	693b      	ldr	r3, [r7, #16]
}
 8003100:	4618      	mov	r0, r3
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	007a1200 	.word	0x007a1200
 8003114:	08006504 	.word	0x08006504
 8003118:	08006514 	.word	0x08006514
 800311c:	003d0900 	.word	0x003d0900

08003120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003124:	4b02      	ldr	r3, [pc, #8]	; (8003130 <HAL_RCC_GetHCLKFreq+0x10>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	20000008 	.word	0x20000008

08003134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003138:	f7ff fff2 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	080064fc 	.word	0x080064fc

0800315c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003160:	f7ff ffde 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	0adb      	lsrs	r3, r3, #11
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4903      	ldr	r1, [pc, #12]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	080064fc 	.word	0x080064fc

08003184 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <RCC_Delay+0x34>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <RCC_Delay+0x38>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0a5b      	lsrs	r3, r3, #9
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031a0:	bf00      	nop
  }
  while (Delay --);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1e5a      	subs	r2, r3, #1
 80031a6:	60fa      	str	r2, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f9      	bne.n	80031a0 <RCC_Delay+0x1c>
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	20000008 	.word	0x20000008
 80031bc:	10624dd3 	.word	0x10624dd3

080031c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e041      	b.n	8003256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe fe70 	bl	8001ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f000 fc24 	bl	8003a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d001      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e035      	b.n	80032e4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <HAL_TIM_Base_Start_IT+0x90>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d009      	beq.n	80032ae <HAL_TIM_Base_Start_IT+0x4e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d004      	beq.n	80032ae <HAL_TIM_Base_Start_IT+0x4e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <HAL_TIM_Base_Start_IT+0x94>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d111      	bne.n	80032d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d010      	beq.n	80032e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d0:	e007      	b.n	80032e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40000400 	.word	0x40000400

080032f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e041      	b.n	800338e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f839 	bl	8003396 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f000 fb88 	bl	8003a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr

080033a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d109      	bne.n	80033cc <HAL_TIM_PWM_Start+0x24>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e022      	b.n	8003412 <HAL_TIM_PWM_Start+0x6a>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d109      	bne.n	80033e6 <HAL_TIM_PWM_Start+0x3e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	e015      	b.n	8003412 <HAL_TIM_PWM_Start+0x6a>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d109      	bne.n	8003400 <HAL_TIM_PWM_Start+0x58>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e008      	b.n	8003412 <HAL_TIM_PWM_Start+0x6a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e059      	b.n	80034ce <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <HAL_TIM_PWM_Start+0x82>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003428:	e013      	b.n	8003452 <HAL_TIM_PWM_Start+0xaa>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b04      	cmp	r3, #4
 800342e:	d104      	bne.n	800343a <HAL_TIM_PWM_Start+0x92>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003438:	e00b      	b.n	8003452 <HAL_TIM_PWM_Start+0xaa>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b08      	cmp	r3, #8
 800343e:	d104      	bne.n	800344a <HAL_TIM_PWM_Start+0xa2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003448:	e003      	b.n	8003452 <HAL_TIM_PWM_Start+0xaa>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2202      	movs	r2, #2
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	6839      	ldr	r1, [r7, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fd6c 	bl	8003f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <HAL_TIM_PWM_Start+0x130>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d107      	bne.n	800347a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <HAL_TIM_PWM_Start+0x130>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d009      	beq.n	8003498 <HAL_TIM_PWM_Start+0xf0>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348c:	d004      	beq.n	8003498 <HAL_TIM_PWM_Start+0xf0>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_TIM_PWM_Start+0x134>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d111      	bne.n	80034bc <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d010      	beq.n	80034cc <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ba:	e007      	b.n	80034cc <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40000400 	.word	0x40000400

080034e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d122      	bne.n	800353c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b02      	cmp	r3, #2
 8003502:	d11b      	bne.n	800353c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0202 	mvn.w	r2, #2
 800350c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fa76 	bl	8003a14 <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa69 	bl	8003a02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fa78 	bl	8003a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b04      	cmp	r3, #4
 8003548:	d122      	bne.n	8003590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b04      	cmp	r3, #4
 8003556:	d11b      	bne.n	8003590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0204 	mvn.w	r2, #4
 8003560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa4c 	bl	8003a14 <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fa3f 	bl	8003a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fa4e 	bl	8003a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b08      	cmp	r3, #8
 800359c:	d122      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d11b      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0208 	mvn.w	r2, #8
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2204      	movs	r2, #4
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fa22 	bl	8003a14 <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fa15 	bl	8003a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fa24 	bl	8003a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d122      	bne.n	8003638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d11b      	bne.n	8003638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0210 	mvn.w	r2, #16
 8003608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2208      	movs	r2, #8
 800360e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f9f8 	bl	8003a14 <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9eb 	bl	8003a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f9fa 	bl	8003a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d10e      	bne.n	8003664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	d107      	bne.n	8003664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0201 	mvn.w	r2, #1
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe f9dc 	bl	8001a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b80      	cmp	r3, #128	; 0x80
 8003670:	d10e      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b80      	cmp	r3, #128	; 0x80
 800367e:	d107      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fcd9 	bl	8004042 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b40      	cmp	r3, #64	; 0x40
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f9be 	bl	8003a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0220 	mvn.w	r2, #32
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fca4 	bl	8004030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800370a:	2302      	movs	r3, #2
 800370c:	e0ae      	b.n	800386c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	f200 809f 	bhi.w	800385c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800371e:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003724:	08003759 	.word	0x08003759
 8003728:	0800385d 	.word	0x0800385d
 800372c:	0800385d 	.word	0x0800385d
 8003730:	0800385d 	.word	0x0800385d
 8003734:	08003799 	.word	0x08003799
 8003738:	0800385d 	.word	0x0800385d
 800373c:	0800385d 	.word	0x0800385d
 8003740:	0800385d 	.word	0x0800385d
 8003744:	080037db 	.word	0x080037db
 8003748:	0800385d 	.word	0x0800385d
 800374c:	0800385d 	.word	0x0800385d
 8003750:	0800385d 	.word	0x0800385d
 8003754:	0800381b 	.word	0x0800381b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68b9      	ldr	r1, [r7, #8]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f9cc 	bl	8003afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0208 	orr.w	r2, r2, #8
 8003772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0204 	bic.w	r2, r2, #4
 8003782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6999      	ldr	r1, [r3, #24]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	619a      	str	r2, [r3, #24]
      break;
 8003796:	e064      	b.n	8003862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fa12 	bl	8003bc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6999      	ldr	r1, [r3, #24]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	021a      	lsls	r2, r3, #8
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	619a      	str	r2, [r3, #24]
      break;
 80037d8:	e043      	b.n	8003862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fa5b 	bl	8003c9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69da      	ldr	r2, [r3, #28]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0208 	orr.w	r2, r2, #8
 80037f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0204 	bic.w	r2, r2, #4
 8003804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69d9      	ldr	r1, [r3, #28]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	61da      	str	r2, [r3, #28]
      break;
 8003818:	e023      	b.n	8003862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 faa5 	bl	8003d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69da      	ldr	r2, [r3, #28]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69d9      	ldr	r1, [r3, #28]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	021a      	lsls	r2, r3, #8
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	61da      	str	r2, [r3, #28]
      break;
 800385a:	e002      	b.n	8003862 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	75fb      	strb	r3, [r7, #23]
      break;
 8003860:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_TIM_ConfigClockSource+0x1c>
 800388c:	2302      	movs	r3, #2
 800388e:	e0b4      	b.n	80039fa <HAL_TIM_ConfigClockSource+0x186>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c8:	d03e      	beq.n	8003948 <HAL_TIM_ConfigClockSource+0xd4>
 80038ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ce:	f200 8087 	bhi.w	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d6:	f000 8086 	beq.w	80039e6 <HAL_TIM_ConfigClockSource+0x172>
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d87f      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b70      	cmp	r3, #112	; 0x70
 80038e2:	d01a      	beq.n	800391a <HAL_TIM_ConfigClockSource+0xa6>
 80038e4:	2b70      	cmp	r3, #112	; 0x70
 80038e6:	d87b      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b60      	cmp	r3, #96	; 0x60
 80038ea:	d050      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x11a>
 80038ec:	2b60      	cmp	r3, #96	; 0x60
 80038ee:	d877      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f0:	2b50      	cmp	r3, #80	; 0x50
 80038f2:	d03c      	beq.n	800396e <HAL_TIM_ConfigClockSource+0xfa>
 80038f4:	2b50      	cmp	r3, #80	; 0x50
 80038f6:	d873      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d058      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x13a>
 80038fc:	2b40      	cmp	r3, #64	; 0x40
 80038fe:	d86f      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b30      	cmp	r3, #48	; 0x30
 8003902:	d064      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x15a>
 8003904:	2b30      	cmp	r3, #48	; 0x30
 8003906:	d86b      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	2b20      	cmp	r3, #32
 800390a:	d060      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x15a>
 800390c:	2b20      	cmp	r3, #32
 800390e:	d867      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d05c      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x15a>
 8003914:	2b10      	cmp	r3, #16
 8003916:	d05a      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x15a>
 8003918:	e062      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800392a:	f000 fae6 	bl	8003efa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800393c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	609a      	str	r2, [r3, #8]
      break;
 8003946:	e04f      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003958:	f000 facf 	bl	8003efa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800396a:	609a      	str	r2, [r3, #8]
      break;
 800396c:	e03c      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800397a:	461a      	mov	r2, r3
 800397c:	f000 fa46 	bl	8003e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2150      	movs	r1, #80	; 0x50
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fa9d 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 800398c:	e02c      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800399a:	461a      	mov	r2, r3
 800399c:	f000 fa64 	bl	8003e68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2160      	movs	r1, #96	; 0x60
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fa8d 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 80039ac:	e01c      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ba:	461a      	mov	r2, r3
 80039bc:	f000 fa26 	bl	8003e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2140      	movs	r1, #64	; 0x40
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fa7d 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 80039cc:	e00c      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f000 fa74 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 80039de:	e003      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      break;
 80039e4:	e000      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr
	...

08003a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a25      	ldr	r2, [pc, #148]	; (8003af4 <TIM_Base_SetConfig+0xa8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <TIM_Base_SetConfig+0x28>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6a:	d003      	beq.n	8003a74 <TIM_Base_SetConfig+0x28>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a22      	ldr	r2, [pc, #136]	; (8003af8 <TIM_Base_SetConfig+0xac>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d108      	bne.n	8003a86 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <TIM_Base_SetConfig+0xa8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <TIM_Base_SetConfig+0x52>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d003      	beq.n	8003a9e <TIM_Base_SetConfig+0x52>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a17      	ldr	r2, [pc, #92]	; (8003af8 <TIM_Base_SetConfig+0xac>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d108      	bne.n	8003ab0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <TIM_Base_SetConfig+0xa8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d103      	bne.n	8003ae4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	615a      	str	r2, [r3, #20]
}
 8003aea:	bf00      	nop
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40000400 	.word	0x40000400

08003afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f023 0201 	bic.w	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0303 	bic.w	r3, r3, #3
 8003b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f023 0302 	bic.w	r3, r3, #2
 8003b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <TIM_OC1_SetConfig+0xc8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d10c      	bne.n	8003b72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0308 	bic.w	r3, r3, #8
 8003b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f023 0304 	bic.w	r3, r3, #4
 8003b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <TIM_OC1_SetConfig+0xc8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d111      	bne.n	8003b9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	621a      	str	r2, [r3, #32]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00

08003bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f023 0210 	bic.w	r2, r3, #16
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0320 	bic.w	r3, r3, #32
 8003c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <TIM_OC2_SetConfig+0xd0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d10d      	bne.n	8003c44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <TIM_OC2_SetConfig+0xd0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d113      	bne.n	8003c74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	40012c00 	.word	0x40012c00

08003c9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <TIM_OC3_SetConfig+0xd0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10d      	bne.n	8003d16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <TIM_OC3_SetConfig+0xd0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d113      	bne.n	8003d46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	621a      	str	r2, [r3, #32]
}
 8003d60:	bf00      	nop
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40012c00 	.word	0x40012c00

08003d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	031b      	lsls	r3, r3, #12
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a0f      	ldr	r2, [pc, #60]	; (8003e08 <TIM_OC4_SetConfig+0x98>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d109      	bne.n	8003de4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	019b      	lsls	r3, r3, #6
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	40012c00 	.word	0x40012c00

08003e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f023 0201 	bic.w	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f023 030a 	bic.w	r3, r3, #10
 8003e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f023 0210 	bic.w	r2, r3, #16
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	031b      	lsls	r3, r3, #12
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f043 0307 	orr.w	r3, r3, #7
 8003ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b087      	sub	sp, #28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	021a      	lsls	r2, r3, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	609a      	str	r2, [r3, #8]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a1a      	ldr	r2, [r3, #32]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a1a      	ldr	r2, [r3, #32]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f70:	431a      	orrs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e041      	b.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a14      	ldr	r2, [pc, #80]	; (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe4:	d004      	beq.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a10      	ldr	r2, [pc, #64]	; (800402c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10c      	bne.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40012c00 	.word	0x40012c00
 800402c:	40000400 	.word	0x40000400

08004030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e042      	b.n	80040ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fd ff8e 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2224      	movs	r2, #36	; 0x24
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fdc5 	bl	8004c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	; 0x28
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b20      	cmp	r3, #32
 8004112:	d16d      	bne.n	80041f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_UART_Transmit+0x2c>
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e066      	b.n	80041f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2221      	movs	r2, #33	; 0x21
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004132:	f7fe f883 	bl	800223c <HAL_GetTick>
 8004136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	88fa      	ldrh	r2, [r7, #6]
 8004142:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414c:	d108      	bne.n	8004160 <HAL_UART_Transmit+0x6c>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d104      	bne.n	8004160 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e003      	b.n	8004168 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004168:	e02a      	b.n	80041c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	2180      	movs	r1, #128	; 0x80
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fb14 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e036      	b.n	80041f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004198:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	3302      	adds	r3, #2
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	e007      	b.n	80041b2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	3301      	adds	r3, #1
 80041b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1cf      	bne.n	800416a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	2140      	movs	r1, #64	; 0x40
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fae4 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e006      	b.n	80041f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	4613      	mov	r3, r2
 8004206:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b20      	cmp	r3, #32
 8004212:	d112      	bne.n	800423a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_UART_Receive_IT+0x26>
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e00b      	b.n	800423c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	461a      	mov	r2, r3
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fb24 	bl	800487e <UART_Start_Receive_IT>
 8004236:	4603      	mov	r3, r0
 8004238:	e000      	b.n	800423c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800423a:	2302      	movs	r3, #2
  }
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b0ba      	sub	sp, #232	; 0xe8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800426a:	2300      	movs	r3, #0
 800426c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004270:	2300      	movs	r3, #0
 8004272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <HAL_UART_IRQHandler+0x66>
 8004296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fc01 	bl	8004aaa <UART_Receive_IT>
      return;
 80042a8:	e25b      	b.n	8004762 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80de 	beq.w	8004470 <HAL_UART_IRQHandler+0x22c>
 80042b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d106      	bne.n	80042ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80d1 	beq.w	8004470 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <HAL_UART_IRQHandler+0xae>
 80042da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f043 0201 	orr.w	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <HAL_UART_IRQHandler+0xd2>
 80042fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	f043 0202 	orr.w	r2, r3, #2
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_UART_IRQHandler+0xf6>
 8004322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	f043 0204 	orr.w	r2, r3, #4
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800433a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d011      	beq.n	800436a <HAL_UART_IRQHandler+0x126>
 8004346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d105      	bne.n	800435e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f043 0208 	orr.w	r2, r3, #8
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 81f2 	beq.w	8004758 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_UART_IRQHandler+0x14e>
 8004380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fb8c 	bl	8004aaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf14      	ite	ne
 80043a0:	2301      	movne	r3, #1
 80043a2:	2300      	moveq	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <HAL_UART_IRQHandler+0x17a>
 80043b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d04f      	beq.n	800445e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fa96 	bl	80048f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d041      	beq.n	8004456 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3314      	adds	r3, #20
 80043d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3314      	adds	r3, #20
 80043fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800440a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1d9      	bne.n	80043d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d013      	beq.n	800444e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	4a7e      	ldr	r2, [pc, #504]	; (8004624 <HAL_UART_IRQHandler+0x3e0>)
 800442c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe f878 	bl	8002528 <HAL_DMA_Abort_IT>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004448:	4610      	mov	r0, r2
 800444a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	e00e      	b.n	800446c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f993 	bl	800477a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	e00a      	b.n	800446c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f98f 	bl	800477a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445c:	e006      	b.n	800446c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f98b 	bl	800477a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800446a:	e175      	b.n	8004758 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446c:	bf00      	nop
    return;
 800446e:	e173      	b.n	8004758 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	2b01      	cmp	r3, #1
 8004476:	f040 814f 	bne.w	8004718 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8148 	beq.w	8004718 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8141 	beq.w	8004718 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80b6 	beq.w	8004628 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8145 	beq.w	800475c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044da:	429a      	cmp	r2, r3
 80044dc:	f080 813e 	bcs.w	800475c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	f000 8088 	beq.w	8004604 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800450a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800450e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004512:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004520:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800452c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1d9      	bne.n	80044f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004552:	f023 0301 	bic.w	r3, r3, #1
 8004556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3314      	adds	r3, #20
 8004560:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004564:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004568:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800456c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e1      	bne.n	8004540 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800458c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800458e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004592:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3314      	adds	r3, #20
 800459c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e3      	bne.n	800457c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d4:	f023 0310 	bic.w	r3, r3, #16
 80045d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	330c      	adds	r3, #12
 80045e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80045e8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e3      	bne.n	80045c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fd ff57 	bl	80024b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004612:	b29b      	uxth	r3, r3
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	b29b      	uxth	r3, r3
 8004618:	4619      	mov	r1, r3
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f8b6 	bl	800478c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004620:	e09c      	b.n	800475c <HAL_UART_IRQHandler+0x518>
 8004622:	bf00      	nop
 8004624:	080049b5 	.word	0x080049b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004630:	b29b      	uxth	r3, r3
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 808e 	beq.w	8004760 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8089 	beq.w	8004760 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800465e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004672:	647a      	str	r2, [r7, #68]	; 0x44
 8004674:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004678:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e3      	bne.n	800464e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3314      	adds	r3, #20
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	623b      	str	r3, [r7, #32]
   return(result);
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3314      	adds	r3, #20
 80046a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046aa:	633a      	str	r2, [r7, #48]	; 0x30
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e3      	bne.n	8004686 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	60fb      	str	r3, [r7, #12]
   return(result);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0310 	bic.w	r3, r3, #16
 80046e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046f0:	61fa      	str	r2, [r7, #28]
 80046f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	69b9      	ldr	r1, [r7, #24]
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	617b      	str	r3, [r7, #20]
   return(result);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e3      	bne.n	80046cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800470a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f83b 	bl	800478c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004716:	e023      	b.n	8004760 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <HAL_UART_IRQHandler+0x4f4>
 8004724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f953 	bl	80049dc <UART_Transmit_IT>
    return;
 8004736:	e014      	b.n	8004762 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00e      	beq.n	8004762 <HAL_UART_IRQHandler+0x51e>
 8004744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f992 	bl	8004a7a <UART_EndTransmit_IT>
    return;
 8004756:	e004      	b.n	8004762 <HAL_UART_IRQHandler+0x51e>
    return;
 8004758:	bf00      	nop
 800475a:	e002      	b.n	8004762 <HAL_UART_IRQHandler+0x51e>
      return;
 800475c:	bf00      	nop
 800475e:	e000      	b.n	8004762 <HAL_UART_IRQHandler+0x51e>
      return;
 8004760:	bf00      	nop
  }
}
 8004762:	37e8      	adds	r7, #232	; 0xe8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr

080047a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b090      	sub	sp, #64	; 0x40
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	4613      	mov	r3, r2
 80047b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b2:	e050      	b.n	8004856 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d04c      	beq.n	8004856 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80047c2:	f7fd fd3b 	bl	800223c <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d241      	bcs.n	8004856 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047f2:	637a      	str	r2, [r7, #52]	; 0x34
 80047f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e5      	bne.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3314      	adds	r3, #20
 800480c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	613b      	str	r3, [r7, #16]
   return(result);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	63bb      	str	r3, [r7, #56]	; 0x38
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004826:	623a      	str	r2, [r7, #32]
 8004828:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	69f9      	ldr	r1, [r7, #28]
 800482c:	6a3a      	ldr	r2, [r7, #32]
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	61bb      	str	r3, [r7, #24]
   return(result);
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e5      	bne.n	8004806 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e00f      	b.n	8004876 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4013      	ands	r3, r2
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	bf0c      	ite	eq
 8004866:	2301      	moveq	r3, #1
 8004868:	2300      	movne	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	461a      	mov	r2, r3
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	429a      	cmp	r2, r3
 8004872:	d09f      	beq.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3740      	adds	r7, #64	; 0x40
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	4613      	mov	r3, r2
 800488a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	88fa      	ldrh	r2, [r7, #6]
 8004896:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	88fa      	ldrh	r2, [r7, #6]
 800489c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2222      	movs	r2, #34	; 0x22
 80048a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0220 	orr.w	r2, r2, #32
 80048e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b095      	sub	sp, #84	; 0x54
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800490e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	330c      	adds	r3, #12
 8004916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004918:	643a      	str	r2, [r7, #64]	; 0x40
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800491e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e5      	bne.n	80048f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3314      	adds	r3, #20
 8004932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	61fb      	str	r3, [r7, #28]
   return(result);
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	64bb      	str	r3, [r7, #72]	; 0x48
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3314      	adds	r3, #20
 800494a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800494c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	2b01      	cmp	r3, #1
 8004966:	d119      	bne.n	800499c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	60bb      	str	r3, [r7, #8]
   return(result);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f023 0310 	bic.w	r3, r3, #16
 800497e:	647b      	str	r3, [r7, #68]	; 0x44
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004988:	61ba      	str	r2, [r7, #24]
 800498a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6979      	ldr	r1, [r7, #20]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	613b      	str	r3, [r7, #16]
   return(result);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e5      	bne.n	8004968 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049aa:	bf00      	nop
 80049ac:	3754      	adds	r7, #84	; 0x54
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr

080049b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f7ff fed3 	bl	800477a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049d4:	bf00      	nop
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b21      	cmp	r3, #33	; 0x21
 80049ee:	d13e      	bne.n	8004a6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f8:	d114      	bne.n	8004a24 <UART_Transmit_IT+0x48>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d110      	bne.n	8004a24 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	1c9a      	adds	r2, r3, #2
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]
 8004a22:	e008      	b.n	8004a36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	1c59      	adds	r1, r3, #1
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6211      	str	r1, [r2, #32]
 8004a2e:	781a      	ldrb	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4619      	mov	r1, r3
 8004a44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10f      	bne.n	8004a6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e000      	b.n	8004a70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
  }
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr

08004a7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff fe64 	bl	8004768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b08c      	sub	sp, #48	; 0x30
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b22      	cmp	r3, #34	; 0x22
 8004abc:	f040 80ae 	bne.w	8004c1c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac8:	d117      	bne.n	8004afa <UART_Receive_IT+0x50>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d113      	bne.n	8004afa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	1c9a      	adds	r2, r3, #2
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
 8004af8:	e026      	b.n	8004b48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0c:	d007      	beq.n	8004b1e <UART_Receive_IT+0x74>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10a      	bne.n	8004b2c <UART_Receive_IT+0x82>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e008      	b.n	8004b3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	4619      	mov	r1, r3
 8004b56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d15d      	bne.n	8004c18 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0220 	bic.w	r2, r2, #32
 8004b6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d135      	bne.n	8004c0e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	330c      	adds	r3, #12
 8004bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f023 0310 	bic.w	r3, r3, #16
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc8:	623a      	str	r2, [r7, #32]
 8004bca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	69f9      	ldr	r1, [r7, #28]
 8004bce:	6a3a      	ldr	r2, [r7, #32]
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e5      	bne.n	8004ba8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b10      	cmp	r3, #16
 8004be8:	d10a      	bne.n	8004c00 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c04:	4619      	mov	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fdc0 	bl	800478c <HAL_UARTEx_RxEventCallback>
 8004c0c:	e002      	b.n	8004c14 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fc fe8c 	bl	800192c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	e002      	b.n	8004c1e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e000      	b.n	8004c1e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c1c:	2302      	movs	r3, #2
  }
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3730      	adds	r7, #48	; 0x30
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c62:	f023 030c 	bic.w	r3, r3, #12
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2c      	ldr	r2, [pc, #176]	; (8004d3c <UART_SetConfig+0x114>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d103      	bne.n	8004c98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c90:	f7fe fa64 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	e002      	b.n	8004c9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c98:	f7fe fa4c 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 8004c9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009a      	lsls	r2, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	4a22      	ldr	r2, [pc, #136]	; (8004d40 <UART_SetConfig+0x118>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	0119      	lsls	r1, r3, #4
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009a      	lsls	r2, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <UART_SetConfig+0x118>)
 8004cd6:	fba3 0302 	umull	r0, r3, r3, r2
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	2064      	movs	r0, #100	; 0x64
 8004cde:	fb00 f303 	mul.w	r3, r0, r3
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	3332      	adds	r3, #50	; 0x32
 8004ce8:	4a15      	ldr	r2, [pc, #84]	; (8004d40 <UART_SetConfig+0x118>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf4:	4419      	add	r1, r3
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009a      	lsls	r2, r3, #2
 8004d00:	441a      	add	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <UART_SetConfig+0x118>)
 8004d0e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	2064      	movs	r0, #100	; 0x64
 8004d16:	fb00 f303 	mul.w	r3, r0, r3
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	3332      	adds	r3, #50	; 0x32
 8004d20:	4a07      	ldr	r2, [pc, #28]	; (8004d40 <UART_SetConfig+0x118>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	f003 020f 	and.w	r2, r3, #15
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	440a      	add	r2, r1
 8004d32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40013800 	.word	0x40013800
 8004d40:	51eb851f 	.word	0x51eb851f

08004d44 <siprintf>:
 8004d44:	b40e      	push	{r1, r2, r3}
 8004d46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d4a:	b500      	push	{lr}
 8004d4c:	b09c      	sub	sp, #112	; 0x70
 8004d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d50:	9002      	str	r0, [sp, #8]
 8004d52:	9006      	str	r0, [sp, #24]
 8004d54:	9107      	str	r1, [sp, #28]
 8004d56:	9104      	str	r1, [sp, #16]
 8004d58:	4808      	ldr	r0, [pc, #32]	; (8004d7c <siprintf+0x38>)
 8004d5a:	4909      	ldr	r1, [pc, #36]	; (8004d80 <siprintf+0x3c>)
 8004d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d60:	9105      	str	r1, [sp, #20]
 8004d62:	6800      	ldr	r0, [r0, #0]
 8004d64:	a902      	add	r1, sp, #8
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	f000 f98e 	bl	8005088 <_svfiprintf_r>
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	9b02      	ldr	r3, [sp, #8]
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	b01c      	add	sp, #112	; 0x70
 8004d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d78:	b003      	add	sp, #12
 8004d7a:	4770      	bx	lr
 8004d7c:	20000060 	.word	0x20000060
 8004d80:	ffff0208 	.word	0xffff0208

08004d84 <memset>:
 8004d84:	4603      	mov	r3, r0
 8004d86:	4402      	add	r2, r0
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d100      	bne.n	8004d8e <memset+0xa>
 8004d8c:	4770      	bx	lr
 8004d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d92:	e7f9      	b.n	8004d88 <memset+0x4>

08004d94 <__errno>:
 8004d94:	4b01      	ldr	r3, [pc, #4]	; (8004d9c <__errno+0x8>)
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000060 	.word	0x20000060

08004da0 <__libc_init_array>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	2600      	movs	r6, #0
 8004da4:	4d0c      	ldr	r5, [pc, #48]	; (8004dd8 <__libc_init_array+0x38>)
 8004da6:	4c0d      	ldr	r4, [pc, #52]	; (8004ddc <__libc_init_array+0x3c>)
 8004da8:	1b64      	subs	r4, r4, r5
 8004daa:	10a4      	asrs	r4, r4, #2
 8004dac:	42a6      	cmp	r6, r4
 8004dae:	d109      	bne.n	8004dc4 <__libc_init_array+0x24>
 8004db0:	f001 fb84 	bl	80064bc <_init>
 8004db4:	2600      	movs	r6, #0
 8004db6:	4d0a      	ldr	r5, [pc, #40]	; (8004de0 <__libc_init_array+0x40>)
 8004db8:	4c0a      	ldr	r4, [pc, #40]	; (8004de4 <__libc_init_array+0x44>)
 8004dba:	1b64      	subs	r4, r4, r5
 8004dbc:	10a4      	asrs	r4, r4, #2
 8004dbe:	42a6      	cmp	r6, r4
 8004dc0:	d105      	bne.n	8004dce <__libc_init_array+0x2e>
 8004dc2:	bd70      	pop	{r4, r5, r6, pc}
 8004dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc8:	4798      	blx	r3
 8004dca:	3601      	adds	r6, #1
 8004dcc:	e7ee      	b.n	8004dac <__libc_init_array+0xc>
 8004dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd2:	4798      	blx	r3
 8004dd4:	3601      	adds	r6, #1
 8004dd6:	e7f2      	b.n	8004dbe <__libc_init_array+0x1e>
 8004dd8:	08006580 	.word	0x08006580
 8004ddc:	08006580 	.word	0x08006580
 8004de0:	08006580 	.word	0x08006580
 8004de4:	08006584 	.word	0x08006584

08004de8 <__retarget_lock_acquire_recursive>:
 8004de8:	4770      	bx	lr

08004dea <__retarget_lock_release_recursive>:
 8004dea:	4770      	bx	lr

08004dec <_free_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4605      	mov	r5, r0
 8004df0:	2900      	cmp	r1, #0
 8004df2:	d040      	beq.n	8004e76 <_free_r+0x8a>
 8004df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004df8:	1f0c      	subs	r4, r1, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bfb8      	it	lt
 8004dfe:	18e4      	addlt	r4, r4, r3
 8004e00:	f000 f8dc 	bl	8004fbc <__malloc_lock>
 8004e04:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <_free_r+0x8c>)
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	b933      	cbnz	r3, 8004e18 <_free_r+0x2c>
 8004e0a:	6063      	str	r3, [r4, #4]
 8004e0c:	6014      	str	r4, [r2, #0]
 8004e0e:	4628      	mov	r0, r5
 8004e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e14:	f000 b8d8 	b.w	8004fc8 <__malloc_unlock>
 8004e18:	42a3      	cmp	r3, r4
 8004e1a:	d908      	bls.n	8004e2e <_free_r+0x42>
 8004e1c:	6820      	ldr	r0, [r4, #0]
 8004e1e:	1821      	adds	r1, r4, r0
 8004e20:	428b      	cmp	r3, r1
 8004e22:	bf01      	itttt	eq
 8004e24:	6819      	ldreq	r1, [r3, #0]
 8004e26:	685b      	ldreq	r3, [r3, #4]
 8004e28:	1809      	addeq	r1, r1, r0
 8004e2a:	6021      	streq	r1, [r4, #0]
 8004e2c:	e7ed      	b.n	8004e0a <_free_r+0x1e>
 8004e2e:	461a      	mov	r2, r3
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	b10b      	cbz	r3, 8004e38 <_free_r+0x4c>
 8004e34:	42a3      	cmp	r3, r4
 8004e36:	d9fa      	bls.n	8004e2e <_free_r+0x42>
 8004e38:	6811      	ldr	r1, [r2, #0]
 8004e3a:	1850      	adds	r0, r2, r1
 8004e3c:	42a0      	cmp	r0, r4
 8004e3e:	d10b      	bne.n	8004e58 <_free_r+0x6c>
 8004e40:	6820      	ldr	r0, [r4, #0]
 8004e42:	4401      	add	r1, r0
 8004e44:	1850      	adds	r0, r2, r1
 8004e46:	4283      	cmp	r3, r0
 8004e48:	6011      	str	r1, [r2, #0]
 8004e4a:	d1e0      	bne.n	8004e0e <_free_r+0x22>
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4408      	add	r0, r1
 8004e52:	6010      	str	r0, [r2, #0]
 8004e54:	6053      	str	r3, [r2, #4]
 8004e56:	e7da      	b.n	8004e0e <_free_r+0x22>
 8004e58:	d902      	bls.n	8004e60 <_free_r+0x74>
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	602b      	str	r3, [r5, #0]
 8004e5e:	e7d6      	b.n	8004e0e <_free_r+0x22>
 8004e60:	6820      	ldr	r0, [r4, #0]
 8004e62:	1821      	adds	r1, r4, r0
 8004e64:	428b      	cmp	r3, r1
 8004e66:	bf01      	itttt	eq
 8004e68:	6819      	ldreq	r1, [r3, #0]
 8004e6a:	685b      	ldreq	r3, [r3, #4]
 8004e6c:	1809      	addeq	r1, r1, r0
 8004e6e:	6021      	streq	r1, [r4, #0]
 8004e70:	6063      	str	r3, [r4, #4]
 8004e72:	6054      	str	r4, [r2, #4]
 8004e74:	e7cb      	b.n	8004e0e <_free_r+0x22>
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	2000038c 	.word	0x2000038c

08004e7c <sbrk_aligned>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	4e0e      	ldr	r6, [pc, #56]	; (8004eb8 <sbrk_aligned+0x3c>)
 8004e80:	460c      	mov	r4, r1
 8004e82:	6831      	ldr	r1, [r6, #0]
 8004e84:	4605      	mov	r5, r0
 8004e86:	b911      	cbnz	r1, 8004e8e <sbrk_aligned+0x12>
 8004e88:	f000 fbaa 	bl	80055e0 <_sbrk_r>
 8004e8c:	6030      	str	r0, [r6, #0]
 8004e8e:	4621      	mov	r1, r4
 8004e90:	4628      	mov	r0, r5
 8004e92:	f000 fba5 	bl	80055e0 <_sbrk_r>
 8004e96:	1c43      	adds	r3, r0, #1
 8004e98:	d00a      	beq.n	8004eb0 <sbrk_aligned+0x34>
 8004e9a:	1cc4      	adds	r4, r0, #3
 8004e9c:	f024 0403 	bic.w	r4, r4, #3
 8004ea0:	42a0      	cmp	r0, r4
 8004ea2:	d007      	beq.n	8004eb4 <sbrk_aligned+0x38>
 8004ea4:	1a21      	subs	r1, r4, r0
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f000 fb9a 	bl	80055e0 <_sbrk_r>
 8004eac:	3001      	adds	r0, #1
 8004eae:	d101      	bne.n	8004eb4 <sbrk_aligned+0x38>
 8004eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	20000390 	.word	0x20000390

08004ebc <_malloc_r>:
 8004ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec0:	1ccd      	adds	r5, r1, #3
 8004ec2:	f025 0503 	bic.w	r5, r5, #3
 8004ec6:	3508      	adds	r5, #8
 8004ec8:	2d0c      	cmp	r5, #12
 8004eca:	bf38      	it	cc
 8004ecc:	250c      	movcc	r5, #12
 8004ece:	2d00      	cmp	r5, #0
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	db01      	blt.n	8004ed8 <_malloc_r+0x1c>
 8004ed4:	42a9      	cmp	r1, r5
 8004ed6:	d905      	bls.n	8004ee4 <_malloc_r+0x28>
 8004ed8:	230c      	movs	r3, #12
 8004eda:	2600      	movs	r6, #0
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	4630      	mov	r0, r6
 8004ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ee4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004fb8 <_malloc_r+0xfc>
 8004ee8:	f000 f868 	bl	8004fbc <__malloc_lock>
 8004eec:	f8d8 3000 	ldr.w	r3, [r8]
 8004ef0:	461c      	mov	r4, r3
 8004ef2:	bb5c      	cbnz	r4, 8004f4c <_malloc_r+0x90>
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	f7ff ffc0 	bl	8004e7c <sbrk_aligned>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	4604      	mov	r4, r0
 8004f00:	d155      	bne.n	8004fae <_malloc_r+0xf2>
 8004f02:	f8d8 4000 	ldr.w	r4, [r8]
 8004f06:	4626      	mov	r6, r4
 8004f08:	2e00      	cmp	r6, #0
 8004f0a:	d145      	bne.n	8004f98 <_malloc_r+0xdc>
 8004f0c:	2c00      	cmp	r4, #0
 8004f0e:	d048      	beq.n	8004fa2 <_malloc_r+0xe6>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	4631      	mov	r1, r6
 8004f14:	4638      	mov	r0, r7
 8004f16:	eb04 0903 	add.w	r9, r4, r3
 8004f1a:	f000 fb61 	bl	80055e0 <_sbrk_r>
 8004f1e:	4581      	cmp	r9, r0
 8004f20:	d13f      	bne.n	8004fa2 <_malloc_r+0xe6>
 8004f22:	6821      	ldr	r1, [r4, #0]
 8004f24:	4638      	mov	r0, r7
 8004f26:	1a6d      	subs	r5, r5, r1
 8004f28:	4629      	mov	r1, r5
 8004f2a:	f7ff ffa7 	bl	8004e7c <sbrk_aligned>
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d037      	beq.n	8004fa2 <_malloc_r+0xe6>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	442b      	add	r3, r5
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	f8d8 3000 	ldr.w	r3, [r8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d038      	beq.n	8004fb2 <_malloc_r+0xf6>
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	42a2      	cmp	r2, r4
 8004f44:	d12b      	bne.n	8004f9e <_malloc_r+0xe2>
 8004f46:	2200      	movs	r2, #0
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	e00f      	b.n	8004f6c <_malloc_r+0xb0>
 8004f4c:	6822      	ldr	r2, [r4, #0]
 8004f4e:	1b52      	subs	r2, r2, r5
 8004f50:	d41f      	bmi.n	8004f92 <_malloc_r+0xd6>
 8004f52:	2a0b      	cmp	r2, #11
 8004f54:	d917      	bls.n	8004f86 <_malloc_r+0xca>
 8004f56:	1961      	adds	r1, r4, r5
 8004f58:	42a3      	cmp	r3, r4
 8004f5a:	6025      	str	r5, [r4, #0]
 8004f5c:	bf18      	it	ne
 8004f5e:	6059      	strne	r1, [r3, #4]
 8004f60:	6863      	ldr	r3, [r4, #4]
 8004f62:	bf08      	it	eq
 8004f64:	f8c8 1000 	streq.w	r1, [r8]
 8004f68:	5162      	str	r2, [r4, r5]
 8004f6a:	604b      	str	r3, [r1, #4]
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	f104 060b 	add.w	r6, r4, #11
 8004f72:	f000 f829 	bl	8004fc8 <__malloc_unlock>
 8004f76:	f026 0607 	bic.w	r6, r6, #7
 8004f7a:	1d23      	adds	r3, r4, #4
 8004f7c:	1af2      	subs	r2, r6, r3
 8004f7e:	d0ae      	beq.n	8004ede <_malloc_r+0x22>
 8004f80:	1b9b      	subs	r3, r3, r6
 8004f82:	50a3      	str	r3, [r4, r2]
 8004f84:	e7ab      	b.n	8004ede <_malloc_r+0x22>
 8004f86:	42a3      	cmp	r3, r4
 8004f88:	6862      	ldr	r2, [r4, #4]
 8004f8a:	d1dd      	bne.n	8004f48 <_malloc_r+0x8c>
 8004f8c:	f8c8 2000 	str.w	r2, [r8]
 8004f90:	e7ec      	b.n	8004f6c <_malloc_r+0xb0>
 8004f92:	4623      	mov	r3, r4
 8004f94:	6864      	ldr	r4, [r4, #4]
 8004f96:	e7ac      	b.n	8004ef2 <_malloc_r+0x36>
 8004f98:	4634      	mov	r4, r6
 8004f9a:	6876      	ldr	r6, [r6, #4]
 8004f9c:	e7b4      	b.n	8004f08 <_malloc_r+0x4c>
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	e7cc      	b.n	8004f3c <_malloc_r+0x80>
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	f000 f80e 	bl	8004fc8 <__malloc_unlock>
 8004fac:	e797      	b.n	8004ede <_malloc_r+0x22>
 8004fae:	6025      	str	r5, [r4, #0]
 8004fb0:	e7dc      	b.n	8004f6c <_malloc_r+0xb0>
 8004fb2:	605b      	str	r3, [r3, #4]
 8004fb4:	deff      	udf	#255	; 0xff
 8004fb6:	bf00      	nop
 8004fb8:	2000038c 	.word	0x2000038c

08004fbc <__malloc_lock>:
 8004fbc:	4801      	ldr	r0, [pc, #4]	; (8004fc4 <__malloc_lock+0x8>)
 8004fbe:	f7ff bf13 	b.w	8004de8 <__retarget_lock_acquire_recursive>
 8004fc2:	bf00      	nop
 8004fc4:	20000388 	.word	0x20000388

08004fc8 <__malloc_unlock>:
 8004fc8:	4801      	ldr	r0, [pc, #4]	; (8004fd0 <__malloc_unlock+0x8>)
 8004fca:	f7ff bf0e 	b.w	8004dea <__retarget_lock_release_recursive>
 8004fce:	bf00      	nop
 8004fd0:	20000388 	.word	0x20000388

08004fd4 <__ssputs_r>:
 8004fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd8:	461f      	mov	r7, r3
 8004fda:	688e      	ldr	r6, [r1, #8]
 8004fdc:	4682      	mov	sl, r0
 8004fde:	42be      	cmp	r6, r7
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	4690      	mov	r8, r2
 8004fe4:	680b      	ldr	r3, [r1, #0]
 8004fe6:	d82c      	bhi.n	8005042 <__ssputs_r+0x6e>
 8004fe8:	898a      	ldrh	r2, [r1, #12]
 8004fea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fee:	d026      	beq.n	800503e <__ssputs_r+0x6a>
 8004ff0:	6965      	ldr	r5, [r4, #20]
 8004ff2:	6909      	ldr	r1, [r1, #16]
 8004ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ff8:	eba3 0901 	sub.w	r9, r3, r1
 8004ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005000:	1c7b      	adds	r3, r7, #1
 8005002:	444b      	add	r3, r9
 8005004:	106d      	asrs	r5, r5, #1
 8005006:	429d      	cmp	r5, r3
 8005008:	bf38      	it	cc
 800500a:	461d      	movcc	r5, r3
 800500c:	0553      	lsls	r3, r2, #21
 800500e:	d527      	bpl.n	8005060 <__ssputs_r+0x8c>
 8005010:	4629      	mov	r1, r5
 8005012:	f7ff ff53 	bl	8004ebc <_malloc_r>
 8005016:	4606      	mov	r6, r0
 8005018:	b360      	cbz	r0, 8005074 <__ssputs_r+0xa0>
 800501a:	464a      	mov	r2, r9
 800501c:	6921      	ldr	r1, [r4, #16]
 800501e:	f000 fafd 	bl	800561c <memcpy>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502c:	81a3      	strh	r3, [r4, #12]
 800502e:	6126      	str	r6, [r4, #16]
 8005030:	444e      	add	r6, r9
 8005032:	6026      	str	r6, [r4, #0]
 8005034:	463e      	mov	r6, r7
 8005036:	6165      	str	r5, [r4, #20]
 8005038:	eba5 0509 	sub.w	r5, r5, r9
 800503c:	60a5      	str	r5, [r4, #8]
 800503e:	42be      	cmp	r6, r7
 8005040:	d900      	bls.n	8005044 <__ssputs_r+0x70>
 8005042:	463e      	mov	r6, r7
 8005044:	4632      	mov	r2, r6
 8005046:	4641      	mov	r1, r8
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	f000 faaf 	bl	80055ac <memmove>
 800504e:	2000      	movs	r0, #0
 8005050:	68a3      	ldr	r3, [r4, #8]
 8005052:	1b9b      	subs	r3, r3, r6
 8005054:	60a3      	str	r3, [r4, #8]
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	4433      	add	r3, r6
 800505a:	6023      	str	r3, [r4, #0]
 800505c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005060:	462a      	mov	r2, r5
 8005062:	f000 fae9 	bl	8005638 <_realloc_r>
 8005066:	4606      	mov	r6, r0
 8005068:	2800      	cmp	r0, #0
 800506a:	d1e0      	bne.n	800502e <__ssputs_r+0x5a>
 800506c:	4650      	mov	r0, sl
 800506e:	6921      	ldr	r1, [r4, #16]
 8005070:	f7ff febc 	bl	8004dec <_free_r>
 8005074:	230c      	movs	r3, #12
 8005076:	f8ca 3000 	str.w	r3, [sl]
 800507a:	89a3      	ldrh	r3, [r4, #12]
 800507c:	f04f 30ff 	mov.w	r0, #4294967295
 8005080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005084:	81a3      	strh	r3, [r4, #12]
 8005086:	e7e9      	b.n	800505c <__ssputs_r+0x88>

08005088 <_svfiprintf_r>:
 8005088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508c:	4698      	mov	r8, r3
 800508e:	898b      	ldrh	r3, [r1, #12]
 8005090:	4607      	mov	r7, r0
 8005092:	061b      	lsls	r3, r3, #24
 8005094:	460d      	mov	r5, r1
 8005096:	4614      	mov	r4, r2
 8005098:	b09d      	sub	sp, #116	; 0x74
 800509a:	d50e      	bpl.n	80050ba <_svfiprintf_r+0x32>
 800509c:	690b      	ldr	r3, [r1, #16]
 800509e:	b963      	cbnz	r3, 80050ba <_svfiprintf_r+0x32>
 80050a0:	2140      	movs	r1, #64	; 0x40
 80050a2:	f7ff ff0b 	bl	8004ebc <_malloc_r>
 80050a6:	6028      	str	r0, [r5, #0]
 80050a8:	6128      	str	r0, [r5, #16]
 80050aa:	b920      	cbnz	r0, 80050b6 <_svfiprintf_r+0x2e>
 80050ac:	230c      	movs	r3, #12
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295
 80050b4:	e0d0      	b.n	8005258 <_svfiprintf_r+0x1d0>
 80050b6:	2340      	movs	r3, #64	; 0x40
 80050b8:	616b      	str	r3, [r5, #20]
 80050ba:	2300      	movs	r3, #0
 80050bc:	9309      	str	r3, [sp, #36]	; 0x24
 80050be:	2320      	movs	r3, #32
 80050c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050c4:	2330      	movs	r3, #48	; 0x30
 80050c6:	f04f 0901 	mov.w	r9, #1
 80050ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ce:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005270 <_svfiprintf_r+0x1e8>
 80050d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050d6:	4623      	mov	r3, r4
 80050d8:	469a      	mov	sl, r3
 80050da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050de:	b10a      	cbz	r2, 80050e4 <_svfiprintf_r+0x5c>
 80050e0:	2a25      	cmp	r2, #37	; 0x25
 80050e2:	d1f9      	bne.n	80050d8 <_svfiprintf_r+0x50>
 80050e4:	ebba 0b04 	subs.w	fp, sl, r4
 80050e8:	d00b      	beq.n	8005102 <_svfiprintf_r+0x7a>
 80050ea:	465b      	mov	r3, fp
 80050ec:	4622      	mov	r2, r4
 80050ee:	4629      	mov	r1, r5
 80050f0:	4638      	mov	r0, r7
 80050f2:	f7ff ff6f 	bl	8004fd4 <__ssputs_r>
 80050f6:	3001      	adds	r0, #1
 80050f8:	f000 80a9 	beq.w	800524e <_svfiprintf_r+0x1c6>
 80050fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050fe:	445a      	add	r2, fp
 8005100:	9209      	str	r2, [sp, #36]	; 0x24
 8005102:	f89a 3000 	ldrb.w	r3, [sl]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80a1 	beq.w	800524e <_svfiprintf_r+0x1c6>
 800510c:	2300      	movs	r3, #0
 800510e:	f04f 32ff 	mov.w	r2, #4294967295
 8005112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005116:	f10a 0a01 	add.w	sl, sl, #1
 800511a:	9304      	str	r3, [sp, #16]
 800511c:	9307      	str	r3, [sp, #28]
 800511e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005122:	931a      	str	r3, [sp, #104]	; 0x68
 8005124:	4654      	mov	r4, sl
 8005126:	2205      	movs	r2, #5
 8005128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800512c:	4850      	ldr	r0, [pc, #320]	; (8005270 <_svfiprintf_r+0x1e8>)
 800512e:	f000 fa67 	bl	8005600 <memchr>
 8005132:	9a04      	ldr	r2, [sp, #16]
 8005134:	b9d8      	cbnz	r0, 800516e <_svfiprintf_r+0xe6>
 8005136:	06d0      	lsls	r0, r2, #27
 8005138:	bf44      	itt	mi
 800513a:	2320      	movmi	r3, #32
 800513c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005140:	0711      	lsls	r1, r2, #28
 8005142:	bf44      	itt	mi
 8005144:	232b      	movmi	r3, #43	; 0x2b
 8005146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800514a:	f89a 3000 	ldrb.w	r3, [sl]
 800514e:	2b2a      	cmp	r3, #42	; 0x2a
 8005150:	d015      	beq.n	800517e <_svfiprintf_r+0xf6>
 8005152:	4654      	mov	r4, sl
 8005154:	2000      	movs	r0, #0
 8005156:	f04f 0c0a 	mov.w	ip, #10
 800515a:	9a07      	ldr	r2, [sp, #28]
 800515c:	4621      	mov	r1, r4
 800515e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005162:	3b30      	subs	r3, #48	; 0x30
 8005164:	2b09      	cmp	r3, #9
 8005166:	d94d      	bls.n	8005204 <_svfiprintf_r+0x17c>
 8005168:	b1b0      	cbz	r0, 8005198 <_svfiprintf_r+0x110>
 800516a:	9207      	str	r2, [sp, #28]
 800516c:	e014      	b.n	8005198 <_svfiprintf_r+0x110>
 800516e:	eba0 0308 	sub.w	r3, r0, r8
 8005172:	fa09 f303 	lsl.w	r3, r9, r3
 8005176:	4313      	orrs	r3, r2
 8005178:	46a2      	mov	sl, r4
 800517a:	9304      	str	r3, [sp, #16]
 800517c:	e7d2      	b.n	8005124 <_svfiprintf_r+0x9c>
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	1d19      	adds	r1, r3, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	9103      	str	r1, [sp, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	bfbb      	ittet	lt
 800518a:	425b      	neglt	r3, r3
 800518c:	f042 0202 	orrlt.w	r2, r2, #2
 8005190:	9307      	strge	r3, [sp, #28]
 8005192:	9307      	strlt	r3, [sp, #28]
 8005194:	bfb8      	it	lt
 8005196:	9204      	strlt	r2, [sp, #16]
 8005198:	7823      	ldrb	r3, [r4, #0]
 800519a:	2b2e      	cmp	r3, #46	; 0x2e
 800519c:	d10c      	bne.n	80051b8 <_svfiprintf_r+0x130>
 800519e:	7863      	ldrb	r3, [r4, #1]
 80051a0:	2b2a      	cmp	r3, #42	; 0x2a
 80051a2:	d134      	bne.n	800520e <_svfiprintf_r+0x186>
 80051a4:	9b03      	ldr	r3, [sp, #12]
 80051a6:	3402      	adds	r4, #2
 80051a8:	1d1a      	adds	r2, r3, #4
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	9203      	str	r2, [sp, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfb8      	it	lt
 80051b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80051b6:	9305      	str	r3, [sp, #20]
 80051b8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005274 <_svfiprintf_r+0x1ec>
 80051bc:	2203      	movs	r2, #3
 80051be:	4650      	mov	r0, sl
 80051c0:	7821      	ldrb	r1, [r4, #0]
 80051c2:	f000 fa1d 	bl	8005600 <memchr>
 80051c6:	b138      	cbz	r0, 80051d8 <_svfiprintf_r+0x150>
 80051c8:	2240      	movs	r2, #64	; 0x40
 80051ca:	9b04      	ldr	r3, [sp, #16]
 80051cc:	eba0 000a 	sub.w	r0, r0, sl
 80051d0:	4082      	lsls	r2, r0
 80051d2:	4313      	orrs	r3, r2
 80051d4:	3401      	adds	r4, #1
 80051d6:	9304      	str	r3, [sp, #16]
 80051d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051dc:	2206      	movs	r2, #6
 80051de:	4826      	ldr	r0, [pc, #152]	; (8005278 <_svfiprintf_r+0x1f0>)
 80051e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051e4:	f000 fa0c 	bl	8005600 <memchr>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d038      	beq.n	800525e <_svfiprintf_r+0x1d6>
 80051ec:	4b23      	ldr	r3, [pc, #140]	; (800527c <_svfiprintf_r+0x1f4>)
 80051ee:	bb1b      	cbnz	r3, 8005238 <_svfiprintf_r+0x1b0>
 80051f0:	9b03      	ldr	r3, [sp, #12]
 80051f2:	3307      	adds	r3, #7
 80051f4:	f023 0307 	bic.w	r3, r3, #7
 80051f8:	3308      	adds	r3, #8
 80051fa:	9303      	str	r3, [sp, #12]
 80051fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051fe:	4433      	add	r3, r6
 8005200:	9309      	str	r3, [sp, #36]	; 0x24
 8005202:	e768      	b.n	80050d6 <_svfiprintf_r+0x4e>
 8005204:	460c      	mov	r4, r1
 8005206:	2001      	movs	r0, #1
 8005208:	fb0c 3202 	mla	r2, ip, r2, r3
 800520c:	e7a6      	b.n	800515c <_svfiprintf_r+0xd4>
 800520e:	2300      	movs	r3, #0
 8005210:	f04f 0c0a 	mov.w	ip, #10
 8005214:	4619      	mov	r1, r3
 8005216:	3401      	adds	r4, #1
 8005218:	9305      	str	r3, [sp, #20]
 800521a:	4620      	mov	r0, r4
 800521c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005220:	3a30      	subs	r2, #48	; 0x30
 8005222:	2a09      	cmp	r2, #9
 8005224:	d903      	bls.n	800522e <_svfiprintf_r+0x1a6>
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0c6      	beq.n	80051b8 <_svfiprintf_r+0x130>
 800522a:	9105      	str	r1, [sp, #20]
 800522c:	e7c4      	b.n	80051b8 <_svfiprintf_r+0x130>
 800522e:	4604      	mov	r4, r0
 8005230:	2301      	movs	r3, #1
 8005232:	fb0c 2101 	mla	r1, ip, r1, r2
 8005236:	e7f0      	b.n	800521a <_svfiprintf_r+0x192>
 8005238:	ab03      	add	r3, sp, #12
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	462a      	mov	r2, r5
 800523e:	4638      	mov	r0, r7
 8005240:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <_svfiprintf_r+0x1f8>)
 8005242:	a904      	add	r1, sp, #16
 8005244:	f3af 8000 	nop.w
 8005248:	1c42      	adds	r2, r0, #1
 800524a:	4606      	mov	r6, r0
 800524c:	d1d6      	bne.n	80051fc <_svfiprintf_r+0x174>
 800524e:	89ab      	ldrh	r3, [r5, #12]
 8005250:	065b      	lsls	r3, r3, #25
 8005252:	f53f af2d 	bmi.w	80050b0 <_svfiprintf_r+0x28>
 8005256:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005258:	b01d      	add	sp, #116	; 0x74
 800525a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525e:	ab03      	add	r3, sp, #12
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	462a      	mov	r2, r5
 8005264:	4638      	mov	r0, r7
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <_svfiprintf_r+0x1f8>)
 8005268:	a904      	add	r1, sp, #16
 800526a:	f000 f87d 	bl	8005368 <_printf_i>
 800526e:	e7eb      	b.n	8005248 <_svfiprintf_r+0x1c0>
 8005270:	08006516 	.word	0x08006516
 8005274:	0800651c 	.word	0x0800651c
 8005278:	08006520 	.word	0x08006520
 800527c:	00000000 	.word	0x00000000
 8005280:	08004fd5 	.word	0x08004fd5

08005284 <_printf_common>:
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	4616      	mov	r6, r2
 800528a:	4699      	mov	r9, r3
 800528c:	688a      	ldr	r2, [r1, #8]
 800528e:	690b      	ldr	r3, [r1, #16]
 8005290:	4607      	mov	r7, r0
 8005292:	4293      	cmp	r3, r2
 8005294:	bfb8      	it	lt
 8005296:	4613      	movlt	r3, r2
 8005298:	6033      	str	r3, [r6, #0]
 800529a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800529e:	460c      	mov	r4, r1
 80052a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a4:	b10a      	cbz	r2, 80052aa <_printf_common+0x26>
 80052a6:	3301      	adds	r3, #1
 80052a8:	6033      	str	r3, [r6, #0]
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	0699      	lsls	r1, r3, #26
 80052ae:	bf42      	ittt	mi
 80052b0:	6833      	ldrmi	r3, [r6, #0]
 80052b2:	3302      	addmi	r3, #2
 80052b4:	6033      	strmi	r3, [r6, #0]
 80052b6:	6825      	ldr	r5, [r4, #0]
 80052b8:	f015 0506 	ands.w	r5, r5, #6
 80052bc:	d106      	bne.n	80052cc <_printf_common+0x48>
 80052be:	f104 0a19 	add.w	sl, r4, #25
 80052c2:	68e3      	ldr	r3, [r4, #12]
 80052c4:	6832      	ldr	r2, [r6, #0]
 80052c6:	1a9b      	subs	r3, r3, r2
 80052c8:	42ab      	cmp	r3, r5
 80052ca:	dc2b      	bgt.n	8005324 <_printf_common+0xa0>
 80052cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052d0:	1e13      	subs	r3, r2, #0
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	bf18      	it	ne
 80052d6:	2301      	movne	r3, #1
 80052d8:	0692      	lsls	r2, r2, #26
 80052da:	d430      	bmi.n	800533e <_printf_common+0xba>
 80052dc:	4649      	mov	r1, r9
 80052de:	4638      	mov	r0, r7
 80052e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052e4:	47c0      	blx	r8
 80052e6:	3001      	adds	r0, #1
 80052e8:	d023      	beq.n	8005332 <_printf_common+0xae>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	6922      	ldr	r2, [r4, #16]
 80052ee:	f003 0306 	and.w	r3, r3, #6
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	bf14      	ite	ne
 80052f6:	2500      	movne	r5, #0
 80052f8:	6833      	ldreq	r3, [r6, #0]
 80052fa:	f04f 0600 	mov.w	r6, #0
 80052fe:	bf08      	it	eq
 8005300:	68e5      	ldreq	r5, [r4, #12]
 8005302:	f104 041a 	add.w	r4, r4, #26
 8005306:	bf08      	it	eq
 8005308:	1aed      	subeq	r5, r5, r3
 800530a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800530e:	bf08      	it	eq
 8005310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005314:	4293      	cmp	r3, r2
 8005316:	bfc4      	itt	gt
 8005318:	1a9b      	subgt	r3, r3, r2
 800531a:	18ed      	addgt	r5, r5, r3
 800531c:	42b5      	cmp	r5, r6
 800531e:	d11a      	bne.n	8005356 <_printf_common+0xd2>
 8005320:	2000      	movs	r0, #0
 8005322:	e008      	b.n	8005336 <_printf_common+0xb2>
 8005324:	2301      	movs	r3, #1
 8005326:	4652      	mov	r2, sl
 8005328:	4649      	mov	r1, r9
 800532a:	4638      	mov	r0, r7
 800532c:	47c0      	blx	r8
 800532e:	3001      	adds	r0, #1
 8005330:	d103      	bne.n	800533a <_printf_common+0xb6>
 8005332:	f04f 30ff 	mov.w	r0, #4294967295
 8005336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533a:	3501      	adds	r5, #1
 800533c:	e7c1      	b.n	80052c2 <_printf_common+0x3e>
 800533e:	2030      	movs	r0, #48	; 0x30
 8005340:	18e1      	adds	r1, r4, r3
 8005342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800534c:	4422      	add	r2, r4
 800534e:	3302      	adds	r3, #2
 8005350:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005354:	e7c2      	b.n	80052dc <_printf_common+0x58>
 8005356:	2301      	movs	r3, #1
 8005358:	4622      	mov	r2, r4
 800535a:	4649      	mov	r1, r9
 800535c:	4638      	mov	r0, r7
 800535e:	47c0      	blx	r8
 8005360:	3001      	adds	r0, #1
 8005362:	d0e6      	beq.n	8005332 <_printf_common+0xae>
 8005364:	3601      	adds	r6, #1
 8005366:	e7d9      	b.n	800531c <_printf_common+0x98>

08005368 <_printf_i>:
 8005368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800536c:	7e0f      	ldrb	r7, [r1, #24]
 800536e:	4691      	mov	r9, r2
 8005370:	2f78      	cmp	r7, #120	; 0x78
 8005372:	4680      	mov	r8, r0
 8005374:	460c      	mov	r4, r1
 8005376:	469a      	mov	sl, r3
 8005378:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800537a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800537e:	d807      	bhi.n	8005390 <_printf_i+0x28>
 8005380:	2f62      	cmp	r7, #98	; 0x62
 8005382:	d80a      	bhi.n	800539a <_printf_i+0x32>
 8005384:	2f00      	cmp	r7, #0
 8005386:	f000 80d5 	beq.w	8005534 <_printf_i+0x1cc>
 800538a:	2f58      	cmp	r7, #88	; 0x58
 800538c:	f000 80c1 	beq.w	8005512 <_printf_i+0x1aa>
 8005390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005398:	e03a      	b.n	8005410 <_printf_i+0xa8>
 800539a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800539e:	2b15      	cmp	r3, #21
 80053a0:	d8f6      	bhi.n	8005390 <_printf_i+0x28>
 80053a2:	a101      	add	r1, pc, #4	; (adr r1, 80053a8 <_printf_i+0x40>)
 80053a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053a8:	08005401 	.word	0x08005401
 80053ac:	08005415 	.word	0x08005415
 80053b0:	08005391 	.word	0x08005391
 80053b4:	08005391 	.word	0x08005391
 80053b8:	08005391 	.word	0x08005391
 80053bc:	08005391 	.word	0x08005391
 80053c0:	08005415 	.word	0x08005415
 80053c4:	08005391 	.word	0x08005391
 80053c8:	08005391 	.word	0x08005391
 80053cc:	08005391 	.word	0x08005391
 80053d0:	08005391 	.word	0x08005391
 80053d4:	0800551b 	.word	0x0800551b
 80053d8:	08005441 	.word	0x08005441
 80053dc:	080054d5 	.word	0x080054d5
 80053e0:	08005391 	.word	0x08005391
 80053e4:	08005391 	.word	0x08005391
 80053e8:	0800553d 	.word	0x0800553d
 80053ec:	08005391 	.word	0x08005391
 80053f0:	08005441 	.word	0x08005441
 80053f4:	08005391 	.word	0x08005391
 80053f8:	08005391 	.word	0x08005391
 80053fc:	080054dd 	.word	0x080054dd
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	1d1a      	adds	r2, r3, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	602a      	str	r2, [r5, #0]
 8005408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800540c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005410:	2301      	movs	r3, #1
 8005412:	e0a0      	b.n	8005556 <_printf_i+0x1ee>
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	682b      	ldr	r3, [r5, #0]
 8005418:	0607      	lsls	r7, r0, #24
 800541a:	f103 0104 	add.w	r1, r3, #4
 800541e:	6029      	str	r1, [r5, #0]
 8005420:	d501      	bpl.n	8005426 <_printf_i+0xbe>
 8005422:	681e      	ldr	r6, [r3, #0]
 8005424:	e003      	b.n	800542e <_printf_i+0xc6>
 8005426:	0646      	lsls	r6, r0, #25
 8005428:	d5fb      	bpl.n	8005422 <_printf_i+0xba>
 800542a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800542e:	2e00      	cmp	r6, #0
 8005430:	da03      	bge.n	800543a <_printf_i+0xd2>
 8005432:	232d      	movs	r3, #45	; 0x2d
 8005434:	4276      	negs	r6, r6
 8005436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800543a:	230a      	movs	r3, #10
 800543c:	4859      	ldr	r0, [pc, #356]	; (80055a4 <_printf_i+0x23c>)
 800543e:	e012      	b.n	8005466 <_printf_i+0xfe>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	6820      	ldr	r0, [r4, #0]
 8005444:	1d19      	adds	r1, r3, #4
 8005446:	6029      	str	r1, [r5, #0]
 8005448:	0605      	lsls	r5, r0, #24
 800544a:	d501      	bpl.n	8005450 <_printf_i+0xe8>
 800544c:	681e      	ldr	r6, [r3, #0]
 800544e:	e002      	b.n	8005456 <_printf_i+0xee>
 8005450:	0641      	lsls	r1, r0, #25
 8005452:	d5fb      	bpl.n	800544c <_printf_i+0xe4>
 8005454:	881e      	ldrh	r6, [r3, #0]
 8005456:	2f6f      	cmp	r7, #111	; 0x6f
 8005458:	bf0c      	ite	eq
 800545a:	2308      	moveq	r3, #8
 800545c:	230a      	movne	r3, #10
 800545e:	4851      	ldr	r0, [pc, #324]	; (80055a4 <_printf_i+0x23c>)
 8005460:	2100      	movs	r1, #0
 8005462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005466:	6865      	ldr	r5, [r4, #4]
 8005468:	2d00      	cmp	r5, #0
 800546a:	bfa8      	it	ge
 800546c:	6821      	ldrge	r1, [r4, #0]
 800546e:	60a5      	str	r5, [r4, #8]
 8005470:	bfa4      	itt	ge
 8005472:	f021 0104 	bicge.w	r1, r1, #4
 8005476:	6021      	strge	r1, [r4, #0]
 8005478:	b90e      	cbnz	r6, 800547e <_printf_i+0x116>
 800547a:	2d00      	cmp	r5, #0
 800547c:	d04b      	beq.n	8005516 <_printf_i+0x1ae>
 800547e:	4615      	mov	r5, r2
 8005480:	fbb6 f1f3 	udiv	r1, r6, r3
 8005484:	fb03 6711 	mls	r7, r3, r1, r6
 8005488:	5dc7      	ldrb	r7, [r0, r7]
 800548a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800548e:	4637      	mov	r7, r6
 8005490:	42bb      	cmp	r3, r7
 8005492:	460e      	mov	r6, r1
 8005494:	d9f4      	bls.n	8005480 <_printf_i+0x118>
 8005496:	2b08      	cmp	r3, #8
 8005498:	d10b      	bne.n	80054b2 <_printf_i+0x14a>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	07de      	lsls	r6, r3, #31
 800549e:	d508      	bpl.n	80054b2 <_printf_i+0x14a>
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	6861      	ldr	r1, [r4, #4]
 80054a4:	4299      	cmp	r1, r3
 80054a6:	bfde      	ittt	le
 80054a8:	2330      	movle	r3, #48	; 0x30
 80054aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054b2:	1b52      	subs	r2, r2, r5
 80054b4:	6122      	str	r2, [r4, #16]
 80054b6:	464b      	mov	r3, r9
 80054b8:	4621      	mov	r1, r4
 80054ba:	4640      	mov	r0, r8
 80054bc:	f8cd a000 	str.w	sl, [sp]
 80054c0:	aa03      	add	r2, sp, #12
 80054c2:	f7ff fedf 	bl	8005284 <_printf_common>
 80054c6:	3001      	adds	r0, #1
 80054c8:	d14a      	bne.n	8005560 <_printf_i+0x1f8>
 80054ca:	f04f 30ff 	mov.w	r0, #4294967295
 80054ce:	b004      	add	sp, #16
 80054d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	f043 0320 	orr.w	r3, r3, #32
 80054da:	6023      	str	r3, [r4, #0]
 80054dc:	2778      	movs	r7, #120	; 0x78
 80054de:	4832      	ldr	r0, [pc, #200]	; (80055a8 <_printf_i+0x240>)
 80054e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	6829      	ldr	r1, [r5, #0]
 80054e8:	061f      	lsls	r7, r3, #24
 80054ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80054ee:	d402      	bmi.n	80054f6 <_printf_i+0x18e>
 80054f0:	065f      	lsls	r7, r3, #25
 80054f2:	bf48      	it	mi
 80054f4:	b2b6      	uxthmi	r6, r6
 80054f6:	07df      	lsls	r7, r3, #31
 80054f8:	bf48      	it	mi
 80054fa:	f043 0320 	orrmi.w	r3, r3, #32
 80054fe:	6029      	str	r1, [r5, #0]
 8005500:	bf48      	it	mi
 8005502:	6023      	strmi	r3, [r4, #0]
 8005504:	b91e      	cbnz	r6, 800550e <_printf_i+0x1a6>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	f023 0320 	bic.w	r3, r3, #32
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	2310      	movs	r3, #16
 8005510:	e7a6      	b.n	8005460 <_printf_i+0xf8>
 8005512:	4824      	ldr	r0, [pc, #144]	; (80055a4 <_printf_i+0x23c>)
 8005514:	e7e4      	b.n	80054e0 <_printf_i+0x178>
 8005516:	4615      	mov	r5, r2
 8005518:	e7bd      	b.n	8005496 <_printf_i+0x12e>
 800551a:	682b      	ldr	r3, [r5, #0]
 800551c:	6826      	ldr	r6, [r4, #0]
 800551e:	1d18      	adds	r0, r3, #4
 8005520:	6961      	ldr	r1, [r4, #20]
 8005522:	6028      	str	r0, [r5, #0]
 8005524:	0635      	lsls	r5, r6, #24
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	d501      	bpl.n	800552e <_printf_i+0x1c6>
 800552a:	6019      	str	r1, [r3, #0]
 800552c:	e002      	b.n	8005534 <_printf_i+0x1cc>
 800552e:	0670      	lsls	r0, r6, #25
 8005530:	d5fb      	bpl.n	800552a <_printf_i+0x1c2>
 8005532:	8019      	strh	r1, [r3, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	4615      	mov	r5, r2
 8005538:	6123      	str	r3, [r4, #16]
 800553a:	e7bc      	b.n	80054b6 <_printf_i+0x14e>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	2100      	movs	r1, #0
 8005540:	1d1a      	adds	r2, r3, #4
 8005542:	602a      	str	r2, [r5, #0]
 8005544:	681d      	ldr	r5, [r3, #0]
 8005546:	6862      	ldr	r2, [r4, #4]
 8005548:	4628      	mov	r0, r5
 800554a:	f000 f859 	bl	8005600 <memchr>
 800554e:	b108      	cbz	r0, 8005554 <_printf_i+0x1ec>
 8005550:	1b40      	subs	r0, r0, r5
 8005552:	6060      	str	r0, [r4, #4]
 8005554:	6863      	ldr	r3, [r4, #4]
 8005556:	6123      	str	r3, [r4, #16]
 8005558:	2300      	movs	r3, #0
 800555a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800555e:	e7aa      	b.n	80054b6 <_printf_i+0x14e>
 8005560:	462a      	mov	r2, r5
 8005562:	4649      	mov	r1, r9
 8005564:	4640      	mov	r0, r8
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	47d0      	blx	sl
 800556a:	3001      	adds	r0, #1
 800556c:	d0ad      	beq.n	80054ca <_printf_i+0x162>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	079b      	lsls	r3, r3, #30
 8005572:	d413      	bmi.n	800559c <_printf_i+0x234>
 8005574:	68e0      	ldr	r0, [r4, #12]
 8005576:	9b03      	ldr	r3, [sp, #12]
 8005578:	4298      	cmp	r0, r3
 800557a:	bfb8      	it	lt
 800557c:	4618      	movlt	r0, r3
 800557e:	e7a6      	b.n	80054ce <_printf_i+0x166>
 8005580:	2301      	movs	r3, #1
 8005582:	4632      	mov	r2, r6
 8005584:	4649      	mov	r1, r9
 8005586:	4640      	mov	r0, r8
 8005588:	47d0      	blx	sl
 800558a:	3001      	adds	r0, #1
 800558c:	d09d      	beq.n	80054ca <_printf_i+0x162>
 800558e:	3501      	adds	r5, #1
 8005590:	68e3      	ldr	r3, [r4, #12]
 8005592:	9903      	ldr	r1, [sp, #12]
 8005594:	1a5b      	subs	r3, r3, r1
 8005596:	42ab      	cmp	r3, r5
 8005598:	dcf2      	bgt.n	8005580 <_printf_i+0x218>
 800559a:	e7eb      	b.n	8005574 <_printf_i+0x20c>
 800559c:	2500      	movs	r5, #0
 800559e:	f104 0619 	add.w	r6, r4, #25
 80055a2:	e7f5      	b.n	8005590 <_printf_i+0x228>
 80055a4:	08006527 	.word	0x08006527
 80055a8:	08006538 	.word	0x08006538

080055ac <memmove>:
 80055ac:	4288      	cmp	r0, r1
 80055ae:	b510      	push	{r4, lr}
 80055b0:	eb01 0402 	add.w	r4, r1, r2
 80055b4:	d902      	bls.n	80055bc <memmove+0x10>
 80055b6:	4284      	cmp	r4, r0
 80055b8:	4623      	mov	r3, r4
 80055ba:	d807      	bhi.n	80055cc <memmove+0x20>
 80055bc:	1e43      	subs	r3, r0, #1
 80055be:	42a1      	cmp	r1, r4
 80055c0:	d008      	beq.n	80055d4 <memmove+0x28>
 80055c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055ca:	e7f8      	b.n	80055be <memmove+0x12>
 80055cc:	4601      	mov	r1, r0
 80055ce:	4402      	add	r2, r0
 80055d0:	428a      	cmp	r2, r1
 80055d2:	d100      	bne.n	80055d6 <memmove+0x2a>
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055de:	e7f7      	b.n	80055d0 <memmove+0x24>

080055e0 <_sbrk_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	2300      	movs	r3, #0
 80055e4:	4d05      	ldr	r5, [pc, #20]	; (80055fc <_sbrk_r+0x1c>)
 80055e6:	4604      	mov	r4, r0
 80055e8:	4608      	mov	r0, r1
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	f7fc fd6c 	bl	80020c8 <_sbrk>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_sbrk_r+0x1a>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_sbrk_r+0x1a>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	20000384 	.word	0x20000384

08005600 <memchr>:
 8005600:	4603      	mov	r3, r0
 8005602:	b510      	push	{r4, lr}
 8005604:	b2c9      	uxtb	r1, r1
 8005606:	4402      	add	r2, r0
 8005608:	4293      	cmp	r3, r2
 800560a:	4618      	mov	r0, r3
 800560c:	d101      	bne.n	8005612 <memchr+0x12>
 800560e:	2000      	movs	r0, #0
 8005610:	e003      	b.n	800561a <memchr+0x1a>
 8005612:	7804      	ldrb	r4, [r0, #0]
 8005614:	3301      	adds	r3, #1
 8005616:	428c      	cmp	r4, r1
 8005618:	d1f6      	bne.n	8005608 <memchr+0x8>
 800561a:	bd10      	pop	{r4, pc}

0800561c <memcpy>:
 800561c:	440a      	add	r2, r1
 800561e:	4291      	cmp	r1, r2
 8005620:	f100 33ff 	add.w	r3, r0, #4294967295
 8005624:	d100      	bne.n	8005628 <memcpy+0xc>
 8005626:	4770      	bx	lr
 8005628:	b510      	push	{r4, lr}
 800562a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800562e:	4291      	cmp	r1, r2
 8005630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005634:	d1f9      	bne.n	800562a <memcpy+0xe>
 8005636:	bd10      	pop	{r4, pc}

08005638 <_realloc_r>:
 8005638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563c:	4680      	mov	r8, r0
 800563e:	4614      	mov	r4, r2
 8005640:	460e      	mov	r6, r1
 8005642:	b921      	cbnz	r1, 800564e <_realloc_r+0x16>
 8005644:	4611      	mov	r1, r2
 8005646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800564a:	f7ff bc37 	b.w	8004ebc <_malloc_r>
 800564e:	b92a      	cbnz	r2, 800565c <_realloc_r+0x24>
 8005650:	f7ff fbcc 	bl	8004dec <_free_r>
 8005654:	4625      	mov	r5, r4
 8005656:	4628      	mov	r0, r5
 8005658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800565c:	f000 f81b 	bl	8005696 <_malloc_usable_size_r>
 8005660:	4284      	cmp	r4, r0
 8005662:	4607      	mov	r7, r0
 8005664:	d802      	bhi.n	800566c <_realloc_r+0x34>
 8005666:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800566a:	d812      	bhi.n	8005692 <_realloc_r+0x5a>
 800566c:	4621      	mov	r1, r4
 800566e:	4640      	mov	r0, r8
 8005670:	f7ff fc24 	bl	8004ebc <_malloc_r>
 8005674:	4605      	mov	r5, r0
 8005676:	2800      	cmp	r0, #0
 8005678:	d0ed      	beq.n	8005656 <_realloc_r+0x1e>
 800567a:	42bc      	cmp	r4, r7
 800567c:	4622      	mov	r2, r4
 800567e:	4631      	mov	r1, r6
 8005680:	bf28      	it	cs
 8005682:	463a      	movcs	r2, r7
 8005684:	f7ff ffca 	bl	800561c <memcpy>
 8005688:	4631      	mov	r1, r6
 800568a:	4640      	mov	r0, r8
 800568c:	f7ff fbae 	bl	8004dec <_free_r>
 8005690:	e7e1      	b.n	8005656 <_realloc_r+0x1e>
 8005692:	4635      	mov	r5, r6
 8005694:	e7df      	b.n	8005656 <_realloc_r+0x1e>

08005696 <_malloc_usable_size_r>:
 8005696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800569a:	1f18      	subs	r0, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	bfbc      	itt	lt
 80056a0:	580b      	ldrlt	r3, [r1, r0]
 80056a2:	18c0      	addlt	r0, r0, r3
 80056a4:	4770      	bx	lr
	...

080056a8 <pow>:
 80056a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056ac:	4614      	mov	r4, r2
 80056ae:	461d      	mov	r5, r3
 80056b0:	4680      	mov	r8, r0
 80056b2:	4689      	mov	r9, r1
 80056b4:	f000 f868 	bl	8005788 <__ieee754_pow>
 80056b8:	4622      	mov	r2, r4
 80056ba:	4606      	mov	r6, r0
 80056bc:	460f      	mov	r7, r1
 80056be:	462b      	mov	r3, r5
 80056c0:	4620      	mov	r0, r4
 80056c2:	4629      	mov	r1, r5
 80056c4:	f7fb f9a2 	bl	8000a0c <__aeabi_dcmpun>
 80056c8:	bbc8      	cbnz	r0, 800573e <pow+0x96>
 80056ca:	2200      	movs	r2, #0
 80056cc:	2300      	movs	r3, #0
 80056ce:	4640      	mov	r0, r8
 80056d0:	4649      	mov	r1, r9
 80056d2:	f7fb f969 	bl	80009a8 <__aeabi_dcmpeq>
 80056d6:	b1b8      	cbz	r0, 8005708 <pow+0x60>
 80056d8:	2200      	movs	r2, #0
 80056da:	2300      	movs	r3, #0
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fb f962 	bl	80009a8 <__aeabi_dcmpeq>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d141      	bne.n	800576c <pow+0xc4>
 80056e8:	4620      	mov	r0, r4
 80056ea:	4629      	mov	r1, r5
 80056ec:	f000 f844 	bl	8005778 <finite>
 80056f0:	b328      	cbz	r0, 800573e <pow+0x96>
 80056f2:	2200      	movs	r2, #0
 80056f4:	2300      	movs	r3, #0
 80056f6:	4620      	mov	r0, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7fb f95f 	bl	80009bc <__aeabi_dcmplt>
 80056fe:	b1f0      	cbz	r0, 800573e <pow+0x96>
 8005700:	f7ff fb48 	bl	8004d94 <__errno>
 8005704:	2322      	movs	r3, #34	; 0x22
 8005706:	e019      	b.n	800573c <pow+0x94>
 8005708:	4630      	mov	r0, r6
 800570a:	4639      	mov	r1, r7
 800570c:	f000 f834 	bl	8005778 <finite>
 8005710:	b9c8      	cbnz	r0, 8005746 <pow+0x9e>
 8005712:	4640      	mov	r0, r8
 8005714:	4649      	mov	r1, r9
 8005716:	f000 f82f 	bl	8005778 <finite>
 800571a:	b1a0      	cbz	r0, 8005746 <pow+0x9e>
 800571c:	4620      	mov	r0, r4
 800571e:	4629      	mov	r1, r5
 8005720:	f000 f82a 	bl	8005778 <finite>
 8005724:	b178      	cbz	r0, 8005746 <pow+0x9e>
 8005726:	4632      	mov	r2, r6
 8005728:	463b      	mov	r3, r7
 800572a:	4630      	mov	r0, r6
 800572c:	4639      	mov	r1, r7
 800572e:	f7fb f96d 	bl	8000a0c <__aeabi_dcmpun>
 8005732:	2800      	cmp	r0, #0
 8005734:	d0e4      	beq.n	8005700 <pow+0x58>
 8005736:	f7ff fb2d 	bl	8004d94 <__errno>
 800573a:	2321      	movs	r3, #33	; 0x21
 800573c:	6003      	str	r3, [r0, #0]
 800573e:	4630      	mov	r0, r6
 8005740:	4639      	mov	r1, r7
 8005742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005746:	2200      	movs	r2, #0
 8005748:	2300      	movs	r3, #0
 800574a:	4630      	mov	r0, r6
 800574c:	4639      	mov	r1, r7
 800574e:	f7fb f92b 	bl	80009a8 <__aeabi_dcmpeq>
 8005752:	2800      	cmp	r0, #0
 8005754:	d0f3      	beq.n	800573e <pow+0x96>
 8005756:	4640      	mov	r0, r8
 8005758:	4649      	mov	r1, r9
 800575a:	f000 f80d 	bl	8005778 <finite>
 800575e:	2800      	cmp	r0, #0
 8005760:	d0ed      	beq.n	800573e <pow+0x96>
 8005762:	4620      	mov	r0, r4
 8005764:	4629      	mov	r1, r5
 8005766:	f000 f807 	bl	8005778 <finite>
 800576a:	e7c8      	b.n	80056fe <pow+0x56>
 800576c:	2600      	movs	r6, #0
 800576e:	4f01      	ldr	r7, [pc, #4]	; (8005774 <pow+0xcc>)
 8005770:	e7e5      	b.n	800573e <pow+0x96>
 8005772:	bf00      	nop
 8005774:	3ff00000 	.word	0x3ff00000

08005778 <finite>:
 8005778:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800577c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005780:	0fc0      	lsrs	r0, r0, #31
 8005782:	4770      	bx	lr
 8005784:	0000      	movs	r0, r0
	...

08005788 <__ieee754_pow>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	b093      	sub	sp, #76	; 0x4c
 800578e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005792:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8005796:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800579a:	4689      	mov	r9, r1
 800579c:	ea56 0102 	orrs.w	r1, r6, r2
 80057a0:	4680      	mov	r8, r0
 80057a2:	d111      	bne.n	80057c8 <__ieee754_pow+0x40>
 80057a4:	1803      	adds	r3, r0, r0
 80057a6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80057aa:	4152      	adcs	r2, r2
 80057ac:	4299      	cmp	r1, r3
 80057ae:	4b82      	ldr	r3, [pc, #520]	; (80059b8 <__ieee754_pow+0x230>)
 80057b0:	4193      	sbcs	r3, r2
 80057b2:	f080 84ba 	bcs.w	800612a <__ieee754_pow+0x9a2>
 80057b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057ba:	4640      	mov	r0, r8
 80057bc:	4649      	mov	r1, r9
 80057be:	f7fa fcd5 	bl	800016c <__adddf3>
 80057c2:	4683      	mov	fp, r0
 80057c4:	468c      	mov	ip, r1
 80057c6:	e06f      	b.n	80058a8 <__ieee754_pow+0x120>
 80057c8:	4b7c      	ldr	r3, [pc, #496]	; (80059bc <__ieee754_pow+0x234>)
 80057ca:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80057ce:	429c      	cmp	r4, r3
 80057d0:	464d      	mov	r5, r9
 80057d2:	4682      	mov	sl, r0
 80057d4:	dc06      	bgt.n	80057e4 <__ieee754_pow+0x5c>
 80057d6:	d101      	bne.n	80057dc <__ieee754_pow+0x54>
 80057d8:	2800      	cmp	r0, #0
 80057da:	d1ec      	bne.n	80057b6 <__ieee754_pow+0x2e>
 80057dc:	429e      	cmp	r6, r3
 80057de:	dc01      	bgt.n	80057e4 <__ieee754_pow+0x5c>
 80057e0:	d10f      	bne.n	8005802 <__ieee754_pow+0x7a>
 80057e2:	b172      	cbz	r2, 8005802 <__ieee754_pow+0x7a>
 80057e4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80057e8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80057ec:	ea55 050a 	orrs.w	r5, r5, sl
 80057f0:	d1e1      	bne.n	80057b6 <__ieee754_pow+0x2e>
 80057f2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80057f6:	18db      	adds	r3, r3, r3
 80057f8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80057fc:	4152      	adcs	r2, r2
 80057fe:	429d      	cmp	r5, r3
 8005800:	e7d5      	b.n	80057ae <__ieee754_pow+0x26>
 8005802:	2d00      	cmp	r5, #0
 8005804:	da39      	bge.n	800587a <__ieee754_pow+0xf2>
 8005806:	4b6e      	ldr	r3, [pc, #440]	; (80059c0 <__ieee754_pow+0x238>)
 8005808:	429e      	cmp	r6, r3
 800580a:	dc52      	bgt.n	80058b2 <__ieee754_pow+0x12a>
 800580c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005810:	429e      	cmp	r6, r3
 8005812:	f340 849d 	ble.w	8006150 <__ieee754_pow+0x9c8>
 8005816:	1533      	asrs	r3, r6, #20
 8005818:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800581c:	2b14      	cmp	r3, #20
 800581e:	dd0f      	ble.n	8005840 <__ieee754_pow+0xb8>
 8005820:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005824:	fa22 f103 	lsr.w	r1, r2, r3
 8005828:	fa01 f303 	lsl.w	r3, r1, r3
 800582c:	4293      	cmp	r3, r2
 800582e:	f040 848f 	bne.w	8006150 <__ieee754_pow+0x9c8>
 8005832:	f001 0101 	and.w	r1, r1, #1
 8005836:	f1c1 0302 	rsb	r3, r1, #2
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	b182      	cbz	r2, 8005860 <__ieee754_pow+0xd8>
 800583e:	e05d      	b.n	80058fc <__ieee754_pow+0x174>
 8005840:	2a00      	cmp	r2, #0
 8005842:	d159      	bne.n	80058f8 <__ieee754_pow+0x170>
 8005844:	f1c3 0314 	rsb	r3, r3, #20
 8005848:	fa46 f103 	asr.w	r1, r6, r3
 800584c:	fa01 f303 	lsl.w	r3, r1, r3
 8005850:	42b3      	cmp	r3, r6
 8005852:	f040 847a 	bne.w	800614a <__ieee754_pow+0x9c2>
 8005856:	f001 0101 	and.w	r1, r1, #1
 800585a:	f1c1 0302 	rsb	r3, r1, #2
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	4b58      	ldr	r3, [pc, #352]	; (80059c4 <__ieee754_pow+0x23c>)
 8005862:	429e      	cmp	r6, r3
 8005864:	d132      	bne.n	80058cc <__ieee754_pow+0x144>
 8005866:	2f00      	cmp	r7, #0
 8005868:	f280 846b 	bge.w	8006142 <__ieee754_pow+0x9ba>
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	2000      	movs	r0, #0
 8005872:	4954      	ldr	r1, [pc, #336]	; (80059c4 <__ieee754_pow+0x23c>)
 8005874:	f7fa ff5a 	bl	800072c <__aeabi_ddiv>
 8005878:	e7a3      	b.n	80057c2 <__ieee754_pow+0x3a>
 800587a:	2300      	movs	r3, #0
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	2a00      	cmp	r2, #0
 8005880:	d13c      	bne.n	80058fc <__ieee754_pow+0x174>
 8005882:	4b4e      	ldr	r3, [pc, #312]	; (80059bc <__ieee754_pow+0x234>)
 8005884:	429e      	cmp	r6, r3
 8005886:	d1eb      	bne.n	8005860 <__ieee754_pow+0xd8>
 8005888:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800588c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005890:	ea53 030a 	orrs.w	r3, r3, sl
 8005894:	f000 8449 	beq.w	800612a <__ieee754_pow+0x9a2>
 8005898:	4b4b      	ldr	r3, [pc, #300]	; (80059c8 <__ieee754_pow+0x240>)
 800589a:	429c      	cmp	r4, r3
 800589c:	dd0b      	ble.n	80058b6 <__ieee754_pow+0x12e>
 800589e:	2f00      	cmp	r7, #0
 80058a0:	f2c0 8449 	blt.w	8006136 <__ieee754_pow+0x9ae>
 80058a4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80058a8:	4658      	mov	r0, fp
 80058aa:	4661      	mov	r1, ip
 80058ac:	b013      	add	sp, #76	; 0x4c
 80058ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b2:	2302      	movs	r3, #2
 80058b4:	e7e2      	b.n	800587c <__ieee754_pow+0xf4>
 80058b6:	2f00      	cmp	r7, #0
 80058b8:	f04f 0b00 	mov.w	fp, #0
 80058bc:	f04f 0c00 	mov.w	ip, #0
 80058c0:	daf2      	bge.n	80058a8 <__ieee754_pow+0x120>
 80058c2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80058c6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80058ca:	e7ed      	b.n	80058a8 <__ieee754_pow+0x120>
 80058cc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80058d0:	d106      	bne.n	80058e0 <__ieee754_pow+0x158>
 80058d2:	4642      	mov	r2, r8
 80058d4:	464b      	mov	r3, r9
 80058d6:	4640      	mov	r0, r8
 80058d8:	4649      	mov	r1, r9
 80058da:	f7fa fdfd 	bl	80004d8 <__aeabi_dmul>
 80058de:	e770      	b.n	80057c2 <__ieee754_pow+0x3a>
 80058e0:	4b3a      	ldr	r3, [pc, #232]	; (80059cc <__ieee754_pow+0x244>)
 80058e2:	429f      	cmp	r7, r3
 80058e4:	d10a      	bne.n	80058fc <__ieee754_pow+0x174>
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	db08      	blt.n	80058fc <__ieee754_pow+0x174>
 80058ea:	4640      	mov	r0, r8
 80058ec:	4649      	mov	r1, r9
 80058ee:	b013      	add	sp, #76	; 0x4c
 80058f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f4:	f000 bd0a 	b.w	800630c <__ieee754_sqrt>
 80058f8:	2300      	movs	r3, #0
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	4640      	mov	r0, r8
 80058fe:	4649      	mov	r1, r9
 8005900:	f000 fc58 	bl	80061b4 <fabs>
 8005904:	4683      	mov	fp, r0
 8005906:	468c      	mov	ip, r1
 8005908:	f1ba 0f00 	cmp.w	sl, #0
 800590c:	d128      	bne.n	8005960 <__ieee754_pow+0x1d8>
 800590e:	b124      	cbz	r4, 800591a <__ieee754_pow+0x192>
 8005910:	4b2c      	ldr	r3, [pc, #176]	; (80059c4 <__ieee754_pow+0x23c>)
 8005912:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005916:	429a      	cmp	r2, r3
 8005918:	d122      	bne.n	8005960 <__ieee754_pow+0x1d8>
 800591a:	2f00      	cmp	r7, #0
 800591c:	da07      	bge.n	800592e <__ieee754_pow+0x1a6>
 800591e:	465a      	mov	r2, fp
 8005920:	4663      	mov	r3, ip
 8005922:	2000      	movs	r0, #0
 8005924:	4927      	ldr	r1, [pc, #156]	; (80059c4 <__ieee754_pow+0x23c>)
 8005926:	f7fa ff01 	bl	800072c <__aeabi_ddiv>
 800592a:	4683      	mov	fp, r0
 800592c:	468c      	mov	ip, r1
 800592e:	2d00      	cmp	r5, #0
 8005930:	daba      	bge.n	80058a8 <__ieee754_pow+0x120>
 8005932:	9b00      	ldr	r3, [sp, #0]
 8005934:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005938:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800593c:	431c      	orrs	r4, r3
 800593e:	d108      	bne.n	8005952 <__ieee754_pow+0x1ca>
 8005940:	465a      	mov	r2, fp
 8005942:	4663      	mov	r3, ip
 8005944:	4658      	mov	r0, fp
 8005946:	4661      	mov	r1, ip
 8005948:	f7fa fc0e 	bl	8000168 <__aeabi_dsub>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	e790      	b.n	8005874 <__ieee754_pow+0xec>
 8005952:	9b00      	ldr	r3, [sp, #0]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d1a7      	bne.n	80058a8 <__ieee754_pow+0x120>
 8005958:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800595c:	469c      	mov	ip, r3
 800595e:	e7a3      	b.n	80058a8 <__ieee754_pow+0x120>
 8005960:	0feb      	lsrs	r3, r5, #31
 8005962:	3b01      	subs	r3, #1
 8005964:	930c      	str	r3, [sp, #48]	; 0x30
 8005966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005968:	9b00      	ldr	r3, [sp, #0]
 800596a:	4313      	orrs	r3, r2
 800596c:	d104      	bne.n	8005978 <__ieee754_pow+0x1f0>
 800596e:	4642      	mov	r2, r8
 8005970:	464b      	mov	r3, r9
 8005972:	4640      	mov	r0, r8
 8005974:	4649      	mov	r1, r9
 8005976:	e7e7      	b.n	8005948 <__ieee754_pow+0x1c0>
 8005978:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <__ieee754_pow+0x248>)
 800597a:	429e      	cmp	r6, r3
 800597c:	f340 80f6 	ble.w	8005b6c <__ieee754_pow+0x3e4>
 8005980:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005984:	429e      	cmp	r6, r3
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <__ieee754_pow+0x240>)
 8005988:	dd09      	ble.n	800599e <__ieee754_pow+0x216>
 800598a:	429c      	cmp	r4, r3
 800598c:	dc0c      	bgt.n	80059a8 <__ieee754_pow+0x220>
 800598e:	2f00      	cmp	r7, #0
 8005990:	da0c      	bge.n	80059ac <__ieee754_pow+0x224>
 8005992:	2000      	movs	r0, #0
 8005994:	b013      	add	sp, #76	; 0x4c
 8005996:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	f000 bcb2 	b.w	8006302 <__math_oflow>
 800599e:	429c      	cmp	r4, r3
 80059a0:	dbf5      	blt.n	800598e <__ieee754_pow+0x206>
 80059a2:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <__ieee754_pow+0x23c>)
 80059a4:	429c      	cmp	r4, r3
 80059a6:	dd15      	ble.n	80059d4 <__ieee754_pow+0x24c>
 80059a8:	2f00      	cmp	r7, #0
 80059aa:	dcf2      	bgt.n	8005992 <__ieee754_pow+0x20a>
 80059ac:	2000      	movs	r0, #0
 80059ae:	b013      	add	sp, #76	; 0x4c
 80059b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	f000 bca0 	b.w	80062f8 <__math_uflow>
 80059b8:	fff00000 	.word	0xfff00000
 80059bc:	7ff00000 	.word	0x7ff00000
 80059c0:	433fffff 	.word	0x433fffff
 80059c4:	3ff00000 	.word	0x3ff00000
 80059c8:	3fefffff 	.word	0x3fefffff
 80059cc:	3fe00000 	.word	0x3fe00000
 80059d0:	41e00000 	.word	0x41e00000
 80059d4:	4661      	mov	r1, ip
 80059d6:	2200      	movs	r2, #0
 80059d8:	4658      	mov	r0, fp
 80059da:	4b5f      	ldr	r3, [pc, #380]	; (8005b58 <__ieee754_pow+0x3d0>)
 80059dc:	f7fa fbc4 	bl	8000168 <__aeabi_dsub>
 80059e0:	a355      	add	r3, pc, #340	; (adr r3, 8005b38 <__ieee754_pow+0x3b0>)
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	4604      	mov	r4, r0
 80059e8:	460d      	mov	r5, r1
 80059ea:	f7fa fd75 	bl	80004d8 <__aeabi_dmul>
 80059ee:	a354      	add	r3, pc, #336	; (adr r3, 8005b40 <__ieee754_pow+0x3b8>)
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	4606      	mov	r6, r0
 80059f6:	460f      	mov	r7, r1
 80059f8:	4620      	mov	r0, r4
 80059fa:	4629      	mov	r1, r5
 80059fc:	f7fa fd6c 	bl	80004d8 <__aeabi_dmul>
 8005a00:	2200      	movs	r2, #0
 8005a02:	4682      	mov	sl, r0
 8005a04:	468b      	mov	fp, r1
 8005a06:	4620      	mov	r0, r4
 8005a08:	4629      	mov	r1, r5
 8005a0a:	4b54      	ldr	r3, [pc, #336]	; (8005b5c <__ieee754_pow+0x3d4>)
 8005a0c:	f7fa fd64 	bl	80004d8 <__aeabi_dmul>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	a14c      	add	r1, pc, #304	; (adr r1, 8005b48 <__ieee754_pow+0x3c0>)
 8005a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a1a:	f7fa fba5 	bl	8000168 <__aeabi_dsub>
 8005a1e:	4622      	mov	r2, r4
 8005a20:	462b      	mov	r3, r5
 8005a22:	f7fa fd59 	bl	80004d8 <__aeabi_dmul>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	494c      	ldr	r1, [pc, #304]	; (8005b60 <__ieee754_pow+0x3d8>)
 8005a2e:	f7fa fb9b 	bl	8000168 <__aeabi_dsub>
 8005a32:	4622      	mov	r2, r4
 8005a34:	462b      	mov	r3, r5
 8005a36:	4680      	mov	r8, r0
 8005a38:	4689      	mov	r9, r1
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	f7fa fd4b 	bl	80004d8 <__aeabi_dmul>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	4640      	mov	r0, r8
 8005a48:	4649      	mov	r1, r9
 8005a4a:	f7fa fd45 	bl	80004d8 <__aeabi_dmul>
 8005a4e:	a340      	add	r3, pc, #256	; (adr r3, 8005b50 <__ieee754_pow+0x3c8>)
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f7fa fd40 	bl	80004d8 <__aeabi_dmul>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4650      	mov	r0, sl
 8005a5e:	4659      	mov	r1, fp
 8005a60:	f7fa fb82 	bl	8000168 <__aeabi_dsub>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4604      	mov	r4, r0
 8005a6a:	460d      	mov	r5, r1
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	4639      	mov	r1, r7
 8005a70:	f7fa fb7c 	bl	800016c <__adddf3>
 8005a74:	2000      	movs	r0, #0
 8005a76:	4632      	mov	r2, r6
 8005a78:	463b      	mov	r3, r7
 8005a7a:	4682      	mov	sl, r0
 8005a7c:	468b      	mov	fp, r1
 8005a7e:	f7fa fb73 	bl	8000168 <__aeabi_dsub>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4620      	mov	r0, r4
 8005a88:	4629      	mov	r1, r5
 8005a8a:	f7fa fb6d 	bl	8000168 <__aeabi_dsub>
 8005a8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a92:	9b00      	ldr	r3, [sp, #0]
 8005a94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a96:	3b01      	subs	r3, #1
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f04f 0600 	mov.w	r6, #0
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	bf0c      	ite	eq
 8005aa4:	4b2f      	ldreq	r3, [pc, #188]	; (8005b64 <__ieee754_pow+0x3dc>)
 8005aa6:	4b2c      	ldrne	r3, [pc, #176]	; (8005b58 <__ieee754_pow+0x3d0>)
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	460d      	mov	r5, r1
 8005aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ab0:	e9cd 2300 	strd	r2, r3, [sp]
 8005ab4:	4632      	mov	r2, r6
 8005ab6:	463b      	mov	r3, r7
 8005ab8:	f7fa fb56 	bl	8000168 <__aeabi_dsub>
 8005abc:	4652      	mov	r2, sl
 8005abe:	465b      	mov	r3, fp
 8005ac0:	f7fa fd0a 	bl	80004d8 <__aeabi_dmul>
 8005ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ac8:	4680      	mov	r8, r0
 8005aca:	4689      	mov	r9, r1
 8005acc:	4620      	mov	r0, r4
 8005ace:	4629      	mov	r1, r5
 8005ad0:	f7fa fd02 	bl	80004d8 <__aeabi_dmul>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4640      	mov	r0, r8
 8005ada:	4649      	mov	r1, r9
 8005adc:	f7fa fb46 	bl	800016c <__adddf3>
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	4680      	mov	r8, r0
 8005ae6:	4689      	mov	r9, r1
 8005ae8:	4650      	mov	r0, sl
 8005aea:	4659      	mov	r1, fp
 8005aec:	f7fa fcf4 	bl	80004d8 <__aeabi_dmul>
 8005af0:	4604      	mov	r4, r0
 8005af2:	460d      	mov	r5, r1
 8005af4:	460b      	mov	r3, r1
 8005af6:	4602      	mov	r2, r0
 8005af8:	4649      	mov	r1, r9
 8005afa:	4640      	mov	r0, r8
 8005afc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005b00:	f7fa fb34 	bl	800016c <__adddf3>
 8005b04:	4b18      	ldr	r3, [pc, #96]	; (8005b68 <__ieee754_pow+0x3e0>)
 8005b06:	4682      	mov	sl, r0
 8005b08:	4299      	cmp	r1, r3
 8005b0a:	460f      	mov	r7, r1
 8005b0c:	460e      	mov	r6, r1
 8005b0e:	f340 82e7 	ble.w	80060e0 <__ieee754_pow+0x958>
 8005b12:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005b16:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005b1a:	4303      	orrs	r3, r0
 8005b1c:	f000 81e2 	beq.w	8005ee4 <__ieee754_pow+0x75c>
 8005b20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2300      	movs	r3, #0
 8005b28:	f7fa ff48 	bl	80009bc <__aeabi_dcmplt>
 8005b2c:	3800      	subs	r0, #0
 8005b2e:	bf18      	it	ne
 8005b30:	2001      	movne	r0, #1
 8005b32:	e72f      	b.n	8005994 <__ieee754_pow+0x20c>
 8005b34:	f3af 8000 	nop.w
 8005b38:	60000000 	.word	0x60000000
 8005b3c:	3ff71547 	.word	0x3ff71547
 8005b40:	f85ddf44 	.word	0xf85ddf44
 8005b44:	3e54ae0b 	.word	0x3e54ae0b
 8005b48:	55555555 	.word	0x55555555
 8005b4c:	3fd55555 	.word	0x3fd55555
 8005b50:	652b82fe 	.word	0x652b82fe
 8005b54:	3ff71547 	.word	0x3ff71547
 8005b58:	3ff00000 	.word	0x3ff00000
 8005b5c:	3fd00000 	.word	0x3fd00000
 8005b60:	3fe00000 	.word	0x3fe00000
 8005b64:	bff00000 	.word	0xbff00000
 8005b68:	408fffff 	.word	0x408fffff
 8005b6c:	4bd4      	ldr	r3, [pc, #848]	; (8005ec0 <__ieee754_pow+0x738>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	402b      	ands	r3, r5
 8005b72:	b943      	cbnz	r3, 8005b86 <__ieee754_pow+0x3fe>
 8005b74:	4658      	mov	r0, fp
 8005b76:	4661      	mov	r1, ip
 8005b78:	4bd2      	ldr	r3, [pc, #840]	; (8005ec4 <__ieee754_pow+0x73c>)
 8005b7a:	f7fa fcad 	bl	80004d8 <__aeabi_dmul>
 8005b7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005b82:	4683      	mov	fp, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	1523      	asrs	r3, r4, #20
 8005b88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005b8c:	4413      	add	r3, r2
 8005b8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b90:	4bcd      	ldr	r3, [pc, #820]	; (8005ec8 <__ieee754_pow+0x740>)
 8005b92:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005b96:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005b9a:	429c      	cmp	r4, r3
 8005b9c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005ba0:	dd08      	ble.n	8005bb4 <__ieee754_pow+0x42c>
 8005ba2:	4bca      	ldr	r3, [pc, #808]	; (8005ecc <__ieee754_pow+0x744>)
 8005ba4:	429c      	cmp	r4, r3
 8005ba6:	f340 8164 	ble.w	8005e72 <__ieee754_pow+0x6ea>
 8005baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bac:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bb4:	2600      	movs	r6, #0
 8005bb6:	00f3      	lsls	r3, r6, #3
 8005bb8:	930d      	str	r3, [sp, #52]	; 0x34
 8005bba:	4bc5      	ldr	r3, [pc, #788]	; (8005ed0 <__ieee754_pow+0x748>)
 8005bbc:	4658      	mov	r0, fp
 8005bbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005bc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	461a      	mov	r2, r3
 8005bca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005bce:	4623      	mov	r3, r4
 8005bd0:	f7fa faca 	bl	8000168 <__aeabi_dsub>
 8005bd4:	46da      	mov	sl, fp
 8005bd6:	462b      	mov	r3, r5
 8005bd8:	4652      	mov	r2, sl
 8005bda:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005bde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005be2:	f7fa fac3 	bl	800016c <__adddf3>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	2000      	movs	r0, #0
 8005bec:	49b9      	ldr	r1, [pc, #740]	; (8005ed4 <__ieee754_pow+0x74c>)
 8005bee:	f7fa fd9d 	bl	800072c <__aeabi_ddiv>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bfa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005bfe:	f7fa fc6b 	bl	80004d8 <__aeabi_dmul>
 8005c02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c06:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005c0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	2200      	movs	r2, #0
 8005c12:	46ab      	mov	fp, r5
 8005c14:	106d      	asrs	r5, r5, #1
 8005c16:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005c1a:	9304      	str	r3, [sp, #16]
 8005c1c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005c20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005c24:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005c28:	4640      	mov	r0, r8
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	461d      	mov	r5, r3
 8005c30:	f7fa fc52 	bl	80004d8 <__aeabi_dmul>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005c3c:	f7fa fa94 	bl	8000168 <__aeabi_dsub>
 8005c40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c44:	4606      	mov	r6, r0
 8005c46:	460f      	mov	r7, r1
 8005c48:	4620      	mov	r0, r4
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	f7fa fa8c 	bl	8000168 <__aeabi_dsub>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4650      	mov	r0, sl
 8005c56:	4659      	mov	r1, fp
 8005c58:	f7fa fa86 	bl	8000168 <__aeabi_dsub>
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	464b      	mov	r3, r9
 8005c60:	f7fa fc3a 	bl	80004d8 <__aeabi_dmul>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4630      	mov	r0, r6
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	f7fa fa7c 	bl	8000168 <__aeabi_dsub>
 8005c70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c74:	f7fa fc30 	bl	80004d8 <__aeabi_dmul>
 8005c78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c7c:	4682      	mov	sl, r0
 8005c7e:	468b      	mov	fp, r1
 8005c80:	4610      	mov	r0, r2
 8005c82:	4619      	mov	r1, r3
 8005c84:	f7fa fc28 	bl	80004d8 <__aeabi_dmul>
 8005c88:	a37b      	add	r3, pc, #492	; (adr r3, 8005e78 <__ieee754_pow+0x6f0>)
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	4604      	mov	r4, r0
 8005c90:	460d      	mov	r5, r1
 8005c92:	f7fa fc21 	bl	80004d8 <__aeabi_dmul>
 8005c96:	a37a      	add	r3, pc, #488	; (adr r3, 8005e80 <__ieee754_pow+0x6f8>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f7fa fa66 	bl	800016c <__adddf3>
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	462b      	mov	r3, r5
 8005ca4:	f7fa fc18 	bl	80004d8 <__aeabi_dmul>
 8005ca8:	a377      	add	r3, pc, #476	; (adr r3, 8005e88 <__ieee754_pow+0x700>)
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	f7fa fa5d 	bl	800016c <__adddf3>
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	462b      	mov	r3, r5
 8005cb6:	f7fa fc0f 	bl	80004d8 <__aeabi_dmul>
 8005cba:	a375      	add	r3, pc, #468	; (adr r3, 8005e90 <__ieee754_pow+0x708>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa fa54 	bl	800016c <__adddf3>
 8005cc4:	4622      	mov	r2, r4
 8005cc6:	462b      	mov	r3, r5
 8005cc8:	f7fa fc06 	bl	80004d8 <__aeabi_dmul>
 8005ccc:	a372      	add	r3, pc, #456	; (adr r3, 8005e98 <__ieee754_pow+0x710>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa fa4b 	bl	800016c <__adddf3>
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	462b      	mov	r3, r5
 8005cda:	f7fa fbfd 	bl	80004d8 <__aeabi_dmul>
 8005cde:	a370      	add	r3, pc, #448	; (adr r3, 8005ea0 <__ieee754_pow+0x718>)
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	f7fa fa42 	bl	800016c <__adddf3>
 8005ce8:	4622      	mov	r2, r4
 8005cea:	4606      	mov	r6, r0
 8005cec:	460f      	mov	r7, r1
 8005cee:	462b      	mov	r3, r5
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	f7fa fbf0 	bl	80004d8 <__aeabi_dmul>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	4639      	mov	r1, r7
 8005d00:	f7fa fbea 	bl	80004d8 <__aeabi_dmul>
 8005d04:	4604      	mov	r4, r0
 8005d06:	460d      	mov	r5, r1
 8005d08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	464b      	mov	r3, r9
 8005d10:	f7fa fa2c 	bl	800016c <__adddf3>
 8005d14:	4652      	mov	r2, sl
 8005d16:	465b      	mov	r3, fp
 8005d18:	f7fa fbde 	bl	80004d8 <__aeabi_dmul>
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	462b      	mov	r3, r5
 8005d20:	f7fa fa24 	bl	800016c <__adddf3>
 8005d24:	4642      	mov	r2, r8
 8005d26:	4606      	mov	r6, r0
 8005d28:	460f      	mov	r7, r1
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	4640      	mov	r0, r8
 8005d2e:	4649      	mov	r1, r9
 8005d30:	f7fa fbd2 	bl	80004d8 <__aeabi_dmul>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	4b66      	ldr	r3, [pc, #408]	; (8005ed8 <__ieee754_pow+0x750>)
 8005d40:	f7fa fa14 	bl	800016c <__adddf3>
 8005d44:	4632      	mov	r2, r6
 8005d46:	463b      	mov	r3, r7
 8005d48:	f7fa fa10 	bl	800016c <__adddf3>
 8005d4c:	2400      	movs	r4, #0
 8005d4e:	460d      	mov	r5, r1
 8005d50:	4622      	mov	r2, r4
 8005d52:	460b      	mov	r3, r1
 8005d54:	4640      	mov	r0, r8
 8005d56:	4649      	mov	r1, r9
 8005d58:	f7fa fbbe 	bl	80004d8 <__aeabi_dmul>
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	4680      	mov	r8, r0
 8005d60:	4689      	mov	r9, r1
 8005d62:	4620      	mov	r0, r4
 8005d64:	4629      	mov	r1, r5
 8005d66:	4b5c      	ldr	r3, [pc, #368]	; (8005ed8 <__ieee754_pow+0x750>)
 8005d68:	f7fa f9fe 	bl	8000168 <__aeabi_dsub>
 8005d6c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d70:	f7fa f9fa 	bl	8000168 <__aeabi_dsub>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4630      	mov	r0, r6
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	f7fa f9f4 	bl	8000168 <__aeabi_dsub>
 8005d80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d84:	f7fa fba8 	bl	80004d8 <__aeabi_dmul>
 8005d88:	4622      	mov	r2, r4
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	460f      	mov	r7, r1
 8005d8e:	462b      	mov	r3, r5
 8005d90:	4650      	mov	r0, sl
 8005d92:	4659      	mov	r1, fp
 8005d94:	f7fa fba0 	bl	80004d8 <__aeabi_dmul>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	4639      	mov	r1, r7
 8005da0:	f7fa f9e4 	bl	800016c <__adddf3>
 8005da4:	2400      	movs	r4, #0
 8005da6:	4606      	mov	r6, r0
 8005da8:	460f      	mov	r7, r1
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4640      	mov	r0, r8
 8005db0:	4649      	mov	r1, r9
 8005db2:	f7fa f9db 	bl	800016c <__adddf3>
 8005db6:	a33c      	add	r3, pc, #240	; (adr r3, 8005ea8 <__ieee754_pow+0x720>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	460d      	mov	r5, r1
 8005dc0:	f7fa fb8a 	bl	80004d8 <__aeabi_dmul>
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005dcc:	4620      	mov	r0, r4
 8005dce:	4629      	mov	r1, r5
 8005dd0:	f7fa f9ca 	bl	8000168 <__aeabi_dsub>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4630      	mov	r0, r6
 8005dda:	4639      	mov	r1, r7
 8005ddc:	f7fa f9c4 	bl	8000168 <__aeabi_dsub>
 8005de0:	a333      	add	r3, pc, #204	; (adr r3, 8005eb0 <__ieee754_pow+0x728>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f7fa fb77 	bl	80004d8 <__aeabi_dmul>
 8005dea:	a333      	add	r3, pc, #204	; (adr r3, 8005eb8 <__ieee754_pow+0x730>)
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	4606      	mov	r6, r0
 8005df2:	460f      	mov	r7, r1
 8005df4:	4620      	mov	r0, r4
 8005df6:	4629      	mov	r1, r5
 8005df8:	f7fa fb6e 	bl	80004d8 <__aeabi_dmul>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4630      	mov	r0, r6
 8005e02:	4639      	mov	r1, r7
 8005e04:	f7fa f9b2 	bl	800016c <__adddf3>
 8005e08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e0a:	4b34      	ldr	r3, [pc, #208]	; (8005edc <__ieee754_pow+0x754>)
 8005e0c:	4413      	add	r3, r2
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa f9ab 	bl	800016c <__adddf3>
 8005e16:	4680      	mov	r8, r0
 8005e18:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005e1a:	4689      	mov	r9, r1
 8005e1c:	f7fa faf2 	bl	8000404 <__aeabi_i2d>
 8005e20:	4604      	mov	r4, r0
 8005e22:	460d      	mov	r5, r1
 8005e24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ee0 <__ieee754_pow+0x758>)
 8005e2c:	4413      	add	r3, r2
 8005e2e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005e32:	4642      	mov	r2, r8
 8005e34:	464b      	mov	r3, r9
 8005e36:	f7fa f999 	bl	800016c <__adddf3>
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	f7fa f995 	bl	800016c <__adddf3>
 8005e42:	4622      	mov	r2, r4
 8005e44:	462b      	mov	r3, r5
 8005e46:	f7fa f991 	bl	800016c <__adddf3>
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	462b      	mov	r3, r5
 8005e50:	4682      	mov	sl, r0
 8005e52:	468b      	mov	fp, r1
 8005e54:	f7fa f988 	bl	8000168 <__aeabi_dsub>
 8005e58:	4632      	mov	r2, r6
 8005e5a:	463b      	mov	r3, r7
 8005e5c:	f7fa f984 	bl	8000168 <__aeabi_dsub>
 8005e60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e64:	f7fa f980 	bl	8000168 <__aeabi_dsub>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	4649      	mov	r1, r9
 8005e70:	e60b      	b.n	8005a8a <__ieee754_pow+0x302>
 8005e72:	2601      	movs	r6, #1
 8005e74:	e69f      	b.n	8005bb6 <__ieee754_pow+0x42e>
 8005e76:	bf00      	nop
 8005e78:	4a454eef 	.word	0x4a454eef
 8005e7c:	3fca7e28 	.word	0x3fca7e28
 8005e80:	93c9db65 	.word	0x93c9db65
 8005e84:	3fcd864a 	.word	0x3fcd864a
 8005e88:	a91d4101 	.word	0xa91d4101
 8005e8c:	3fd17460 	.word	0x3fd17460
 8005e90:	518f264d 	.word	0x518f264d
 8005e94:	3fd55555 	.word	0x3fd55555
 8005e98:	db6fabff 	.word	0xdb6fabff
 8005e9c:	3fdb6db6 	.word	0x3fdb6db6
 8005ea0:	33333303 	.word	0x33333303
 8005ea4:	3fe33333 	.word	0x3fe33333
 8005ea8:	e0000000 	.word	0xe0000000
 8005eac:	3feec709 	.word	0x3feec709
 8005eb0:	dc3a03fd 	.word	0xdc3a03fd
 8005eb4:	3feec709 	.word	0x3feec709
 8005eb8:	145b01f5 	.word	0x145b01f5
 8005ebc:	be3e2fe0 	.word	0xbe3e2fe0
 8005ec0:	7ff00000 	.word	0x7ff00000
 8005ec4:	43400000 	.word	0x43400000
 8005ec8:	0003988e 	.word	0x0003988e
 8005ecc:	000bb679 	.word	0x000bb679
 8005ed0:	08006550 	.word	0x08006550
 8005ed4:	3ff00000 	.word	0x3ff00000
 8005ed8:	40080000 	.word	0x40080000
 8005edc:	08006570 	.word	0x08006570
 8005ee0:	08006560 	.word	0x08006560
 8005ee4:	a39c      	add	r3, pc, #624	; (adr r3, 8006158 <__ieee754_pow+0x9d0>)
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	4640      	mov	r0, r8
 8005eec:	4649      	mov	r1, r9
 8005eee:	f7fa f93d 	bl	800016c <__adddf3>
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ef8:	462b      	mov	r3, r5
 8005efa:	4650      	mov	r0, sl
 8005efc:	4639      	mov	r1, r7
 8005efe:	f7fa f933 	bl	8000168 <__aeabi_dsub>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f0a:	f7fa fd75 	bl	80009f8 <__aeabi_dcmpgt>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f47f ae06 	bne.w	8005b20 <__ieee754_pow+0x398>
 8005f14:	4aa2      	ldr	r2, [pc, #648]	; (80061a0 <__ieee754_pow+0xa18>)
 8005f16:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	f340 8100 	ble.w	8006120 <__ieee754_pow+0x998>
 8005f20:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005f24:	151b      	asrs	r3, r3, #20
 8005f26:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005f2a:	fa4a fa03 	asr.w	sl, sl, r3
 8005f2e:	44b2      	add	sl, r6
 8005f30:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005f34:	489b      	ldr	r0, [pc, #620]	; (80061a4 <__ieee754_pow+0xa1c>)
 8005f36:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005f3a:	4108      	asrs	r0, r1
 8005f3c:	ea00 030a 	and.w	r3, r0, sl
 8005f40:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005f44:	f1c1 0114 	rsb	r1, r1, #20
 8005f48:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005f4c:	fa4a fa01 	asr.w	sl, sl, r1
 8005f50:	2e00      	cmp	r6, #0
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	4620      	mov	r0, r4
 8005f58:	4629      	mov	r1, r5
 8005f5a:	bfb8      	it	lt
 8005f5c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005f60:	f7fa f902 	bl	8000168 <__aeabi_dsub>
 8005f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f6c:	2400      	movs	r4, #0
 8005f6e:	4642      	mov	r2, r8
 8005f70:	464b      	mov	r3, r9
 8005f72:	f7fa f8fb 	bl	800016c <__adddf3>
 8005f76:	a37a      	add	r3, pc, #488	; (adr r3, 8006160 <__ieee754_pow+0x9d8>)
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	460d      	mov	r5, r1
 8005f80:	f7fa faaa 	bl	80004d8 <__aeabi_dmul>
 8005f84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f88:	4606      	mov	r6, r0
 8005f8a:	460f      	mov	r7, r1
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7fa f8ea 	bl	8000168 <__aeabi_dsub>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4640      	mov	r0, r8
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	f7fa f8e4 	bl	8000168 <__aeabi_dsub>
 8005fa0:	a371      	add	r3, pc, #452	; (adr r3, 8006168 <__ieee754_pow+0x9e0>)
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	f7fa fa97 	bl	80004d8 <__aeabi_dmul>
 8005faa:	a371      	add	r3, pc, #452	; (adr r3, 8006170 <__ieee754_pow+0x9e8>)
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	4680      	mov	r8, r0
 8005fb2:	4689      	mov	r9, r1
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f7fa fa8e 	bl	80004d8 <__aeabi_dmul>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	f7fa f8d2 	bl	800016c <__adddf3>
 8005fc8:	4604      	mov	r4, r0
 8005fca:	460d      	mov	r5, r1
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	f7fa f8ca 	bl	800016c <__adddf3>
 8005fd8:	4632      	mov	r2, r6
 8005fda:	463b      	mov	r3, r7
 8005fdc:	4680      	mov	r8, r0
 8005fde:	4689      	mov	r9, r1
 8005fe0:	f7fa f8c2 	bl	8000168 <__aeabi_dsub>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	f7fa f8bc 	bl	8000168 <__aeabi_dsub>
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	460f      	mov	r7, r1
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	f7fa fa6c 	bl	80004d8 <__aeabi_dmul>
 8006000:	a35d      	add	r3, pc, #372	; (adr r3, 8006178 <__ieee754_pow+0x9f0>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	4604      	mov	r4, r0
 8006008:	460d      	mov	r5, r1
 800600a:	f7fa fa65 	bl	80004d8 <__aeabi_dmul>
 800600e:	a35c      	add	r3, pc, #368	; (adr r3, 8006180 <__ieee754_pow+0x9f8>)
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f7fa f8a8 	bl	8000168 <__aeabi_dsub>
 8006018:	4622      	mov	r2, r4
 800601a:	462b      	mov	r3, r5
 800601c:	f7fa fa5c 	bl	80004d8 <__aeabi_dmul>
 8006020:	a359      	add	r3, pc, #356	; (adr r3, 8006188 <__ieee754_pow+0xa00>)
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f7fa f8a1 	bl	800016c <__adddf3>
 800602a:	4622      	mov	r2, r4
 800602c:	462b      	mov	r3, r5
 800602e:	f7fa fa53 	bl	80004d8 <__aeabi_dmul>
 8006032:	a357      	add	r3, pc, #348	; (adr r3, 8006190 <__ieee754_pow+0xa08>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f7fa f896 	bl	8000168 <__aeabi_dsub>
 800603c:	4622      	mov	r2, r4
 800603e:	462b      	mov	r3, r5
 8006040:	f7fa fa4a 	bl	80004d8 <__aeabi_dmul>
 8006044:	a354      	add	r3, pc, #336	; (adr r3, 8006198 <__ieee754_pow+0xa10>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa f88f 	bl	800016c <__adddf3>
 800604e:	4622      	mov	r2, r4
 8006050:	462b      	mov	r3, r5
 8006052:	f7fa fa41 	bl	80004d8 <__aeabi_dmul>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4640      	mov	r0, r8
 800605c:	4649      	mov	r1, r9
 800605e:	f7fa f883 	bl	8000168 <__aeabi_dsub>
 8006062:	4604      	mov	r4, r0
 8006064:	460d      	mov	r5, r1
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4640      	mov	r0, r8
 800606c:	4649      	mov	r1, r9
 800606e:	f7fa fa33 	bl	80004d8 <__aeabi_dmul>
 8006072:	2200      	movs	r2, #0
 8006074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800607c:	4620      	mov	r0, r4
 800607e:	4629      	mov	r1, r5
 8006080:	f7fa f872 	bl	8000168 <__aeabi_dsub>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800608c:	f7fa fb4e 	bl	800072c <__aeabi_ddiv>
 8006090:	4632      	mov	r2, r6
 8006092:	4604      	mov	r4, r0
 8006094:	460d      	mov	r5, r1
 8006096:	463b      	mov	r3, r7
 8006098:	4640      	mov	r0, r8
 800609a:	4649      	mov	r1, r9
 800609c:	f7fa fa1c 	bl	80004d8 <__aeabi_dmul>
 80060a0:	4632      	mov	r2, r6
 80060a2:	463b      	mov	r3, r7
 80060a4:	f7fa f862 	bl	800016c <__adddf3>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4620      	mov	r0, r4
 80060ae:	4629      	mov	r1, r5
 80060b0:	f7fa f85a 	bl	8000168 <__aeabi_dsub>
 80060b4:	4642      	mov	r2, r8
 80060b6:	464b      	mov	r3, r9
 80060b8:	f7fa f856 	bl	8000168 <__aeabi_dsub>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	2000      	movs	r0, #0
 80060c2:	4939      	ldr	r1, [pc, #228]	; (80061a8 <__ieee754_pow+0xa20>)
 80060c4:	f7fa f850 	bl	8000168 <__aeabi_dsub>
 80060c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80060cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80060d0:	da29      	bge.n	8006126 <__ieee754_pow+0x99e>
 80060d2:	4652      	mov	r2, sl
 80060d4:	f000 f874 	bl	80061c0 <scalbn>
 80060d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060dc:	f7ff bbfd 	b.w	80058da <__ieee754_pow+0x152>
 80060e0:	4b32      	ldr	r3, [pc, #200]	; (80061ac <__ieee754_pow+0xa24>)
 80060e2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80060e6:	429f      	cmp	r7, r3
 80060e8:	f77f af14 	ble.w	8005f14 <__ieee754_pow+0x78c>
 80060ec:	4b30      	ldr	r3, [pc, #192]	; (80061b0 <__ieee754_pow+0xa28>)
 80060ee:	440b      	add	r3, r1
 80060f0:	4303      	orrs	r3, r0
 80060f2:	d009      	beq.n	8006108 <__ieee754_pow+0x980>
 80060f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060f8:	2200      	movs	r2, #0
 80060fa:	2300      	movs	r3, #0
 80060fc:	f7fa fc5e 	bl	80009bc <__aeabi_dcmplt>
 8006100:	3800      	subs	r0, #0
 8006102:	bf18      	it	ne
 8006104:	2001      	movne	r0, #1
 8006106:	e452      	b.n	80059ae <__ieee754_pow+0x226>
 8006108:	4622      	mov	r2, r4
 800610a:	462b      	mov	r3, r5
 800610c:	f7fa f82c 	bl	8000168 <__aeabi_dsub>
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	f7fa fc66 	bl	80009e4 <__aeabi_dcmpge>
 8006118:	2800      	cmp	r0, #0
 800611a:	f43f aefb 	beq.w	8005f14 <__ieee754_pow+0x78c>
 800611e:	e7e9      	b.n	80060f4 <__ieee754_pow+0x96c>
 8006120:	f04f 0a00 	mov.w	sl, #0
 8006124:	e720      	b.n	8005f68 <__ieee754_pow+0x7e0>
 8006126:	4621      	mov	r1, r4
 8006128:	e7d6      	b.n	80060d8 <__ieee754_pow+0x950>
 800612a:	f04f 0b00 	mov.w	fp, #0
 800612e:	f8df c078 	ldr.w	ip, [pc, #120]	; 80061a8 <__ieee754_pow+0xa20>
 8006132:	f7ff bbb9 	b.w	80058a8 <__ieee754_pow+0x120>
 8006136:	f04f 0b00 	mov.w	fp, #0
 800613a:	f04f 0c00 	mov.w	ip, #0
 800613e:	f7ff bbb3 	b.w	80058a8 <__ieee754_pow+0x120>
 8006142:	4640      	mov	r0, r8
 8006144:	4649      	mov	r1, r9
 8006146:	f7ff bb3c 	b.w	80057c2 <__ieee754_pow+0x3a>
 800614a:	9200      	str	r2, [sp, #0]
 800614c:	f7ff bb88 	b.w	8005860 <__ieee754_pow+0xd8>
 8006150:	2300      	movs	r3, #0
 8006152:	f7ff bb72 	b.w	800583a <__ieee754_pow+0xb2>
 8006156:	bf00      	nop
 8006158:	652b82fe 	.word	0x652b82fe
 800615c:	3c971547 	.word	0x3c971547
 8006160:	00000000 	.word	0x00000000
 8006164:	3fe62e43 	.word	0x3fe62e43
 8006168:	fefa39ef 	.word	0xfefa39ef
 800616c:	3fe62e42 	.word	0x3fe62e42
 8006170:	0ca86c39 	.word	0x0ca86c39
 8006174:	be205c61 	.word	0xbe205c61
 8006178:	72bea4d0 	.word	0x72bea4d0
 800617c:	3e663769 	.word	0x3e663769
 8006180:	c5d26bf1 	.word	0xc5d26bf1
 8006184:	3ebbbd41 	.word	0x3ebbbd41
 8006188:	af25de2c 	.word	0xaf25de2c
 800618c:	3f11566a 	.word	0x3f11566a
 8006190:	16bebd93 	.word	0x16bebd93
 8006194:	3f66c16c 	.word	0x3f66c16c
 8006198:	5555553e 	.word	0x5555553e
 800619c:	3fc55555 	.word	0x3fc55555
 80061a0:	3fe00000 	.word	0x3fe00000
 80061a4:	fff00000 	.word	0xfff00000
 80061a8:	3ff00000 	.word	0x3ff00000
 80061ac:	4090cbff 	.word	0x4090cbff
 80061b0:	3f6f3400 	.word	0x3f6f3400

080061b4 <fabs>:
 80061b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80061b8:	4619      	mov	r1, r3
 80061ba:	4770      	bx	lr
 80061bc:	0000      	movs	r0, r0
	...

080061c0 <scalbn>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	4616      	mov	r6, r2
 80061c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80061c8:	4604      	mov	r4, r0
 80061ca:	460d      	mov	r5, r1
 80061cc:	460b      	mov	r3, r1
 80061ce:	b992      	cbnz	r2, 80061f6 <scalbn+0x36>
 80061d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80061d4:	4303      	orrs	r3, r0
 80061d6:	d03c      	beq.n	8006252 <scalbn+0x92>
 80061d8:	4b31      	ldr	r3, [pc, #196]	; (80062a0 <scalbn+0xe0>)
 80061da:	2200      	movs	r2, #0
 80061dc:	f7fa f97c 	bl	80004d8 <__aeabi_dmul>
 80061e0:	4b30      	ldr	r3, [pc, #192]	; (80062a4 <scalbn+0xe4>)
 80061e2:	4604      	mov	r4, r0
 80061e4:	429e      	cmp	r6, r3
 80061e6:	460d      	mov	r5, r1
 80061e8:	da0f      	bge.n	800620a <scalbn+0x4a>
 80061ea:	a329      	add	r3, pc, #164	; (adr r3, 8006290 <scalbn+0xd0>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f7fa f972 	bl	80004d8 <__aeabi_dmul>
 80061f4:	e006      	b.n	8006204 <scalbn+0x44>
 80061f6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80061fa:	42ba      	cmp	r2, r7
 80061fc:	d109      	bne.n	8006212 <scalbn+0x52>
 80061fe:	4602      	mov	r2, r0
 8006200:	f7f9 ffb4 	bl	800016c <__adddf3>
 8006204:	4604      	mov	r4, r0
 8006206:	460d      	mov	r5, r1
 8006208:	e023      	b.n	8006252 <scalbn+0x92>
 800620a:	460b      	mov	r3, r1
 800620c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006210:	3a36      	subs	r2, #54	; 0x36
 8006212:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006216:	428e      	cmp	r6, r1
 8006218:	dd0e      	ble.n	8006238 <scalbn+0x78>
 800621a:	a31f      	add	r3, pc, #124	; (adr r3, 8006298 <scalbn+0xd8>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006224:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006228:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800622c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006230:	481d      	ldr	r0, [pc, #116]	; (80062a8 <scalbn+0xe8>)
 8006232:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006236:	e7db      	b.n	80061f0 <scalbn+0x30>
 8006238:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800623c:	4432      	add	r2, r6
 800623e:	428a      	cmp	r2, r1
 8006240:	dceb      	bgt.n	800621a <scalbn+0x5a>
 8006242:	2a00      	cmp	r2, #0
 8006244:	dd08      	ble.n	8006258 <scalbn+0x98>
 8006246:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800624a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800624e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006252:	4620      	mov	r0, r4
 8006254:	4629      	mov	r1, r5
 8006256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006258:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800625c:	da0c      	bge.n	8006278 <scalbn+0xb8>
 800625e:	a30c      	add	r3, pc, #48	; (adr r3, 8006290 <scalbn+0xd0>)
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006268:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800626c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006270:	480e      	ldr	r0, [pc, #56]	; (80062ac <scalbn+0xec>)
 8006272:	f041 011f 	orr.w	r1, r1, #31
 8006276:	e7bb      	b.n	80061f0 <scalbn+0x30>
 8006278:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800627c:	3236      	adds	r2, #54	; 0x36
 800627e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006282:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006286:	4620      	mov	r0, r4
 8006288:	4629      	mov	r1, r5
 800628a:	2200      	movs	r2, #0
 800628c:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <scalbn+0xf0>)
 800628e:	e7af      	b.n	80061f0 <scalbn+0x30>
 8006290:	c2f8f359 	.word	0xc2f8f359
 8006294:	01a56e1f 	.word	0x01a56e1f
 8006298:	8800759c 	.word	0x8800759c
 800629c:	7e37e43c 	.word	0x7e37e43c
 80062a0:	43500000 	.word	0x43500000
 80062a4:	ffff3cb0 	.word	0xffff3cb0
 80062a8:	8800759c 	.word	0x8800759c
 80062ac:	c2f8f359 	.word	0xc2f8f359
 80062b0:	3c900000 	.word	0x3c900000

080062b4 <with_errno>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	4604      	mov	r4, r0
 80062b8:	460d      	mov	r5, r1
 80062ba:	4616      	mov	r6, r2
 80062bc:	f7fe fd6a 	bl	8004d94 <__errno>
 80062c0:	4629      	mov	r1, r5
 80062c2:	6006      	str	r6, [r0, #0]
 80062c4:	4620      	mov	r0, r4
 80062c6:	bd70      	pop	{r4, r5, r6, pc}

080062c8 <xflow>:
 80062c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062ca:	4615      	mov	r5, r2
 80062cc:	461c      	mov	r4, r3
 80062ce:	b180      	cbz	r0, 80062f2 <xflow+0x2a>
 80062d0:	4610      	mov	r0, r2
 80062d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80062d6:	e9cd 0100 	strd	r0, r1, [sp]
 80062da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062de:	4628      	mov	r0, r5
 80062e0:	4621      	mov	r1, r4
 80062e2:	f7fa f8f9 	bl	80004d8 <__aeabi_dmul>
 80062e6:	2222      	movs	r2, #34	; 0x22
 80062e8:	b003      	add	sp, #12
 80062ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062ee:	f7ff bfe1 	b.w	80062b4 <with_errno>
 80062f2:	4610      	mov	r0, r2
 80062f4:	4619      	mov	r1, r3
 80062f6:	e7ee      	b.n	80062d6 <xflow+0xe>

080062f8 <__math_uflow>:
 80062f8:	2200      	movs	r2, #0
 80062fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062fe:	f7ff bfe3 	b.w	80062c8 <xflow>

08006302 <__math_oflow>:
 8006302:	2200      	movs	r2, #0
 8006304:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006308:	f7ff bfde 	b.w	80062c8 <xflow>

0800630c <__ieee754_sqrt>:
 800630c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80064b0 <__ieee754_sqrt+0x1a4>
 8006310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	ea3c 0c01 	bics.w	ip, ip, r1
 8006318:	460b      	mov	r3, r1
 800631a:	4606      	mov	r6, r0
 800631c:	460d      	mov	r5, r1
 800631e:	460a      	mov	r2, r1
 8006320:	4604      	mov	r4, r0
 8006322:	d10e      	bne.n	8006342 <__ieee754_sqrt+0x36>
 8006324:	4602      	mov	r2, r0
 8006326:	f7fa f8d7 	bl	80004d8 <__aeabi_dmul>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4630      	mov	r0, r6
 8006330:	4629      	mov	r1, r5
 8006332:	f7f9 ff1b 	bl	800016c <__adddf3>
 8006336:	4606      	mov	r6, r0
 8006338:	460d      	mov	r5, r1
 800633a:	4630      	mov	r0, r6
 800633c:	4629      	mov	r1, r5
 800633e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006342:	2900      	cmp	r1, #0
 8006344:	dc0d      	bgt.n	8006362 <__ieee754_sqrt+0x56>
 8006346:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800634a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800634e:	d0f4      	beq.n	800633a <__ieee754_sqrt+0x2e>
 8006350:	b139      	cbz	r1, 8006362 <__ieee754_sqrt+0x56>
 8006352:	4602      	mov	r2, r0
 8006354:	f7f9 ff08 	bl	8000168 <__aeabi_dsub>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	f7fa f9e6 	bl	800072c <__aeabi_ddiv>
 8006360:	e7e9      	b.n	8006336 <__ieee754_sqrt+0x2a>
 8006362:	1512      	asrs	r2, r2, #20
 8006364:	f000 8089 	beq.w	800647a <__ieee754_sqrt+0x16e>
 8006368:	2500      	movs	r5, #0
 800636a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800636e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006376:	07d2      	lsls	r2, r2, #31
 8006378:	bf5c      	itt	pl
 800637a:	005b      	lslpl	r3, r3, #1
 800637c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006380:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006384:	bf58      	it	pl
 8006386:	0064      	lslpl	r4, r4, #1
 8006388:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800638c:	0062      	lsls	r2, r4, #1
 800638e:	2016      	movs	r0, #22
 8006390:	4629      	mov	r1, r5
 8006392:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8006396:	1076      	asrs	r6, r6, #1
 8006398:	190f      	adds	r7, r1, r4
 800639a:	429f      	cmp	r7, r3
 800639c:	bfde      	ittt	le
 800639e:	1bdb      	suble	r3, r3, r7
 80063a0:	1939      	addle	r1, r7, r4
 80063a2:	192d      	addle	r5, r5, r4
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	3801      	subs	r0, #1
 80063a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80063ac:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80063b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80063b4:	d1f0      	bne.n	8006398 <__ieee754_sqrt+0x8c>
 80063b6:	4604      	mov	r4, r0
 80063b8:	2720      	movs	r7, #32
 80063ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80063be:	428b      	cmp	r3, r1
 80063c0:	eb0c 0e00 	add.w	lr, ip, r0
 80063c4:	dc02      	bgt.n	80063cc <__ieee754_sqrt+0xc0>
 80063c6:	d113      	bne.n	80063f0 <__ieee754_sqrt+0xe4>
 80063c8:	4596      	cmp	lr, r2
 80063ca:	d811      	bhi.n	80063f0 <__ieee754_sqrt+0xe4>
 80063cc:	f1be 0f00 	cmp.w	lr, #0
 80063d0:	eb0e 000c 	add.w	r0, lr, ip
 80063d4:	da56      	bge.n	8006484 <__ieee754_sqrt+0x178>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	db54      	blt.n	8006484 <__ieee754_sqrt+0x178>
 80063da:	f101 0801 	add.w	r8, r1, #1
 80063de:	1a5b      	subs	r3, r3, r1
 80063e0:	4641      	mov	r1, r8
 80063e2:	4596      	cmp	lr, r2
 80063e4:	bf88      	it	hi
 80063e6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80063ea:	eba2 020e 	sub.w	r2, r2, lr
 80063ee:	4464      	add	r4, ip
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	3f01      	subs	r7, #1
 80063f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80063f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80063fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006400:	d1dd      	bne.n	80063be <__ieee754_sqrt+0xb2>
 8006402:	4313      	orrs	r3, r2
 8006404:	d01b      	beq.n	800643e <__ieee754_sqrt+0x132>
 8006406:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80064b4 <__ieee754_sqrt+0x1a8>
 800640a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80064b8 <__ieee754_sqrt+0x1ac>
 800640e:	e9da 0100 	ldrd	r0, r1, [sl]
 8006412:	e9db 2300 	ldrd	r2, r3, [fp]
 8006416:	f7f9 fea7 	bl	8000168 <__aeabi_dsub>
 800641a:	e9da 8900 	ldrd	r8, r9, [sl]
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4640      	mov	r0, r8
 8006424:	4649      	mov	r1, r9
 8006426:	f7fa fad3 	bl	80009d0 <__aeabi_dcmple>
 800642a:	b140      	cbz	r0, 800643e <__ieee754_sqrt+0x132>
 800642c:	e9da 0100 	ldrd	r0, r1, [sl]
 8006430:	e9db 2300 	ldrd	r2, r3, [fp]
 8006434:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006438:	d126      	bne.n	8006488 <__ieee754_sqrt+0x17c>
 800643a:	463c      	mov	r4, r7
 800643c:	3501      	adds	r5, #1
 800643e:	106b      	asrs	r3, r5, #1
 8006440:	0864      	lsrs	r4, r4, #1
 8006442:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006446:	07ea      	lsls	r2, r5, #31
 8006448:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800644c:	bf48      	it	mi
 800644e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8006452:	4620      	mov	r0, r4
 8006454:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8006458:	e76d      	b.n	8006336 <__ieee754_sqrt+0x2a>
 800645a:	0ae3      	lsrs	r3, r4, #11
 800645c:	3915      	subs	r1, #21
 800645e:	0564      	lsls	r4, r4, #21
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0fa      	beq.n	800645a <__ieee754_sqrt+0x14e>
 8006464:	02d8      	lsls	r0, r3, #11
 8006466:	d50a      	bpl.n	800647e <__ieee754_sqrt+0x172>
 8006468:	f1c2 0020 	rsb	r0, r2, #32
 800646c:	fa24 f000 	lsr.w	r0, r4, r0
 8006470:	1e55      	subs	r5, r2, #1
 8006472:	4094      	lsls	r4, r2
 8006474:	4303      	orrs	r3, r0
 8006476:	1b4a      	subs	r2, r1, r5
 8006478:	e776      	b.n	8006368 <__ieee754_sqrt+0x5c>
 800647a:	4611      	mov	r1, r2
 800647c:	e7f0      	b.n	8006460 <__ieee754_sqrt+0x154>
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	3201      	adds	r2, #1
 8006482:	e7ef      	b.n	8006464 <__ieee754_sqrt+0x158>
 8006484:	4688      	mov	r8, r1
 8006486:	e7aa      	b.n	80063de <__ieee754_sqrt+0xd2>
 8006488:	f7f9 fe70 	bl	800016c <__adddf3>
 800648c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4640      	mov	r0, r8
 8006496:	4649      	mov	r1, r9
 8006498:	f7fa fa90 	bl	80009bc <__aeabi_dcmplt>
 800649c:	b120      	cbz	r0, 80064a8 <__ieee754_sqrt+0x19c>
 800649e:	1ca1      	adds	r1, r4, #2
 80064a0:	bf08      	it	eq
 80064a2:	3501      	addeq	r5, #1
 80064a4:	3402      	adds	r4, #2
 80064a6:	e7ca      	b.n	800643e <__ieee754_sqrt+0x132>
 80064a8:	3401      	adds	r4, #1
 80064aa:	f024 0401 	bic.w	r4, r4, #1
 80064ae:	e7c6      	b.n	800643e <__ieee754_sqrt+0x132>
 80064b0:	7ff00000 	.word	0x7ff00000
 80064b4:	20000068 	.word	0x20000068
 80064b8:	20000070 	.word	0x20000070

080064bc <_init>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr

080064c8 <_fini>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	bf00      	nop
 80064cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ce:	bc08      	pop	{r3}
 80064d0:	469e      	mov	lr, r3
 80064d2:	4770      	bx	lr
