
brushed_dc_motor_servo_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007514  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08007628  08007628  00017628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079cc  080079cc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080079cc  080079cc  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079cc  080079cc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079d0  080079d0  000179d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080079d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200001d8  08007bac  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08007bac  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c99b  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e09  00000000  00000000  0002cbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  0002e9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0b  00000000  00000000  0002f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184a9  00000000  00000000  000300cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e3d9  00000000  00000000  00048574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a725  00000000  00000000  0005694d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004858  00000000  00000000  000e1074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e58cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800760c 	.word	0x0800760c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800760c 	.word	0x0800760c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <CalculatePID>:
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */


void CalculatePID()
{
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b0c2      	sub	sp, #264	; 0x108
 8001074:	af02      	add	r7, sp, #8

	currentTime = HAL_GetTick();
 8001076:	f000 fed9 	bl	8001e2c <HAL_GetTick>
 800107a:	4603      	mov	r3, r0
 800107c:	4a6e      	ldr	r2, [pc, #440]	; (8001238 <CalculatePID+0x1c8>)
 800107e:	6013      	str	r3, [r2, #0]
	deltaTime = (float)((float)(currentTime) - (float)(prevTime)) / 1000.0f;
 8001080:	4b6d      	ldr	r3, [pc, #436]	; (8001238 <CalculatePID+0x1c8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fdb5 	bl	8000bf4 <__aeabi_ui2f>
 800108a:	4604      	mov	r4, r0
 800108c:	4b6b      	ldr	r3, [pc, #428]	; (800123c <CalculatePID+0x1cc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fdaf 	bl	8000bf4 <__aeabi_ui2f>
 8001096:	4603      	mov	r3, r0
 8001098:	4619      	mov	r1, r3
 800109a:	4620      	mov	r0, r4
 800109c:	f7ff fcf8 	bl	8000a90 <__aeabi_fsub>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4967      	ldr	r1, [pc, #412]	; (8001240 <CalculatePID+0x1d0>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff feb1 	bl	8000e0c <__aeabi_fdiv>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b65      	ldr	r3, [pc, #404]	; (8001244 <CalculatePID+0x1d4>)
 80010b0:	601a      	str	r2, [r3, #0]

	_time = _time + deltaTime;
 80010b2:	4b65      	ldr	r3, [pc, #404]	; (8001248 <CalculatePID+0x1d8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a63      	ldr	r2, [pc, #396]	; (8001244 <CalculatePID+0x1d4>)
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fce9 	bl	8000a94 <__addsf3>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b60      	ldr	r3, [pc, #384]	; (8001248 <CalculatePID+0x1d8>)
 80010c8:	601a      	str	r2, [r3, #0]

	errorValue = motor_current_position - (data.position * ((data.gearRatio * data.encoderPulses) / 360.0f));
 80010ca:	4b60      	ldr	r3, [pc, #384]	; (800124c <CalculatePID+0x1dc>)
 80010cc:	681c      	ldr	r4, [r3, #0]
 80010ce:	4b60      	ldr	r3, [pc, #384]	; (8001250 <CalculatePID+0x1e0>)
 80010d0:	685d      	ldr	r5, [r3, #4]
 80010d2:	4b5f      	ldr	r3, [pc, #380]	; (8001250 <CalculatePID+0x1e0>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a5e      	ldr	r2, [pc, #376]	; (8001250 <CalculatePID+0x1e0>)
 80010d8:	6992      	ldr	r2, [r2, #24]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fde1 	bl	8000ca4 <__aeabi_fmul>
 80010e2:	4603      	mov	r3, r0
 80010e4:	495b      	ldr	r1, [pc, #364]	; (8001254 <CalculatePID+0x1e4>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fe90 	bl	8000e0c <__aeabi_fdiv>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4619      	mov	r1, r3
 80010f0:	4628      	mov	r0, r5
 80010f2:	f7ff fdd7 	bl	8000ca4 <__aeabi_fmul>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4619      	mov	r1, r3
 80010fa:	4620      	mov	r0, r4
 80010fc:	f7ff fcc8 	bl	8000a90 <__aeabi_fsub>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b54      	ldr	r3, [pc, #336]	; (8001258 <CalculatePID+0x1e8>)
 8001106:	601a      	str	r2, [r3, #0]
	derivative = (errorValue - prevErrorValue) / deltaTime;
 8001108:	4b53      	ldr	r3, [pc, #332]	; (8001258 <CalculatePID+0x1e8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a53      	ldr	r2, [pc, #332]	; (800125c <CalculatePID+0x1ec>)
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fcbc 	bl	8000a90 <__aeabi_fsub>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b49      	ldr	r3, [pc, #292]	; (8001244 <CalculatePID+0x1d4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	4610      	mov	r0, r2
 8001124:	f7ff fe72 	bl	8000e0c <__aeabi_fdiv>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <CalculatePID+0x1f0>)
 800112e:	601a      	str	r2, [r3, #0]
	integral = integral + errorValue * deltaTime;
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <CalculatePID+0x1e8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a43      	ldr	r2, [pc, #268]	; (8001244 <CalculatePID+0x1d4>)
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fdb2 	bl	8000ca4 <__aeabi_fmul>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b47      	ldr	r3, [pc, #284]	; (8001264 <CalculatePID+0x1f4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	4610      	mov	r0, r2
 800114c:	f7ff fca2 	bl	8000a94 <__addsf3>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b43      	ldr	r3, [pc, #268]	; (8001264 <CalculatePID+0x1f4>)
 8001156:	601a      	str	r2, [r3, #0]

	controlSignal = data.kp * errorValue + data.ki * integral + data.kd * derivative;
 8001158:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <CalculatePID+0x1e0>)
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	4a3e      	ldr	r2, [pc, #248]	; (8001258 <CalculatePID+0x1e8>)
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fd9e 	bl	8000ca4 <__aeabi_fmul>
 8001168:	4603      	mov	r3, r0
 800116a:	461c      	mov	r4, r3
 800116c:	4b38      	ldr	r3, [pc, #224]	; (8001250 <CalculatePID+0x1e0>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4a3c      	ldr	r2, [pc, #240]	; (8001264 <CalculatePID+0x1f4>)
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fd94 	bl	8000ca4 <__aeabi_fmul>
 800117c:	4603      	mov	r3, r0
 800117e:	4619      	mov	r1, r3
 8001180:	4620      	mov	r0, r4
 8001182:	f7ff fc87 	bl	8000a94 <__addsf3>
 8001186:	4603      	mov	r3, r0
 8001188:	461c      	mov	r4, r3
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <CalculatePID+0x1e0>)
 800118c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118e:	4a34      	ldr	r2, [pc, #208]	; (8001260 <CalculatePID+0x1f0>)
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fd85 	bl	8000ca4 <__aeabi_fmul>
 800119a:	4603      	mov	r3, r0
 800119c:	4619      	mov	r1, r3
 800119e:	4620      	mov	r0, r4
 80011a0:	f7ff fc78 	bl	8000a94 <__addsf3>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <CalculatePID+0x1f8>)
 80011aa:	601a      	str	r2, [r3, #0]


	char msg[255];
	//sprintf(msg, "pos: %f, ev: %f, dv: %f, intg: %f, controlSignal: %f,  dt: %f\n\r\0", ((motor_current_position * 360.0f) / (data.gearRatio * data.encoderPulses)) ,errorValue, derivative, integral, controlSignal, deltaTime);	//de
	sprintf(msg, "%f, %f\n\0", ((motor_current_position * 360.0f) / (data.gearRatio * data.encoderPulses)) ,_time);	//de
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <CalculatePID+0x1dc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4928      	ldr	r1, [pc, #160]	; (8001254 <CalculatePID+0x1e4>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fd76 	bl	8000ca4 <__aeabi_fmul>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461c      	mov	r4, r3
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <CalculatePID+0x1e0>)
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	4a23      	ldr	r2, [pc, #140]	; (8001250 <CalculatePID+0x1e0>)
 80011c2:	6992      	ldr	r2, [r2, #24]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fd6c 	bl	8000ca4 <__aeabi_fmul>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4619      	mov	r1, r3
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff fe1b 	bl	8000e0c <__aeabi_fdiv>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f925 	bl	8000428 <__aeabi_f2d>
 80011de:	4604      	mov	r4, r0
 80011e0:	460d      	mov	r5, r1
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <CalculatePID+0x1d8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f91e 	bl	8000428 <__aeabi_f2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4638      	mov	r0, r7
 80011f2:	e9cd 2300 	strd	r2, r3, [sp]
 80011f6:	4622      	mov	r2, r4
 80011f8:	462b      	mov	r3, r5
 80011fa:	491c      	ldr	r1, [pc, #112]	; (800126c <CalculatePID+0x1fc>)
 80011fc:	f004 f8ba 	bl	8005374 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg) + 1, HAL_MAX_DELAY);
 8001200:	463b      	mov	r3, r7
 8001202:	4618      	mov	r0, r3
 8001204:	f7fe ffa4 	bl	8000150 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29b      	uxth	r3, r3
 800120c:	3301      	adds	r3, #1
 800120e:	b29a      	uxth	r2, r3
 8001210:	4639      	mov	r1, r7
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	4816      	ldr	r0, [pc, #88]	; (8001270 <CalculatePID+0x200>)
 8001218:	f002 fd64 	bl	8003ce4 <HAL_UART_Transmit>

	prevTime = currentTime;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <CalculatePID+0x1c8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <CalculatePID+0x1cc>)
 8001222:	6013      	str	r3, [r2, #0]
	prevErrorValue = errorValue;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <CalculatePID+0x1e8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <CalculatePID+0x1ec>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001232:	46bd      	mov	sp, r7
 8001234:	bdb0      	pop	{r4, r5, r7, pc}
 8001236:	bf00      	nop
 8001238:	20000344 	.word	0x20000344
 800123c:	2000034c 	.word	0x2000034c
 8001240:	447a0000 	.word	0x447a0000
 8001244:	20000348 	.word	0x20000348
 8001248:	200002dc 	.word	0x200002dc
 800124c:	200002d0 	.word	0x200002d0
 8001250:	20000318 	.word	0x20000318
 8001254:	43b40000 	.word	0x43b40000
 8001258:	20000350 	.word	0x20000350
 800125c:	20000354 	.word	0x20000354
 8001260:	20000358 	.word	0x20000358
 8001264:	2000035c 	.word	0x2000035c
 8001268:	20000360 	.word	0x20000360
 800126c:	08007628 	.word	0x08007628
 8001270:	20000284 	.word	0x20000284

08001274 <DriveMotor>:

void DriveMotor()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

	if(controlSignal < 0)
 8001278:	4b65      	ldr	r3, [pc, #404]	; (8001410 <DriveMotor+0x19c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f04f 0100 	mov.w	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fead 	bl	8000fe0 <__aeabi_fcmplt>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <DriveMotor+0x20>
	{
		motorDirection = CounterClockWise;
 800128c:	4b61      	ldr	r3, [pc, #388]	; (8001414 <DriveMotor+0x1a0>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	e002      	b.n	800129a <DriveMotor+0x26>
	}
	else
	{
		motorDirection = ClockWise;
 8001294:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <DriveMotor+0x1a0>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
	}

	if(prevMotorDirection != motorDirection)
 800129a:	4b5f      	ldr	r3, [pc, #380]	; (8001418 <DriveMotor+0x1a4>)
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	4b5d      	ldr	r3, [pc, #372]	; (8001414 <DriveMotor+0x1a0>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d07a      	beq.n	800139c <DriveMotor+0x128>
	{
		switch(motorDirection)
 80012a6:	4b5b      	ldr	r3, [pc, #364]	; (8001414 <DriveMotor+0x1a0>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <DriveMotor+0x40>
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d03a      	beq.n	8001328 <DriveMotor+0xb4>
 80012b2:	e073      	b.n	800139c <DriveMotor+0x128>
		{
		case ClockWise:
		{
		  PWM_CurrentChannel = PWM_CLOCKWISE_CHANNEL;
 80012b4:	4b59      	ldr	r3, [pc, #356]	; (800141c <DriveMotor+0x1a8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 80012ba:	4b59      	ldr	r3, [pc, #356]	; (8001420 <DriveMotor+0x1ac>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2200      	movs	r2, #0
 80012c0:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, 0);
 80012c2:	4b57      	ldr	r3, [pc, #348]	; (8001420 <DriveMotor+0x1ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
		  //delay here
		  HAL_Delay(PWM_DEADTIME_DELAY);
 80012ca:	2005      	movs	r0, #5
 80012cc:	f000 fdb8 	bl	8001e40 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, 0);
 80012d0:	4b52      	ldr	r3, [pc, #328]	; (800141c <DriveMotor+0x1a8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d104      	bne.n	80012e2 <DriveMotor+0x6e>
 80012d8:	4b51      	ldr	r3, [pc, #324]	; (8001420 <DriveMotor+0x1ac>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	635a      	str	r2, [r3, #52]	; 0x34
 80012e0:	e015      	b.n	800130e <DriveMotor+0x9a>
 80012e2:	4b4e      	ldr	r3, [pc, #312]	; (800141c <DriveMotor+0x1a8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d104      	bne.n	80012f4 <DriveMotor+0x80>
 80012ea:	4b4d      	ldr	r3, [pc, #308]	; (8001420 <DriveMotor+0x1ac>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	6393      	str	r3, [r2, #56]	; 0x38
 80012f2:	e00c      	b.n	800130e <DriveMotor+0x9a>
 80012f4:	4b49      	ldr	r3, [pc, #292]	; (800141c <DriveMotor+0x1a8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d104      	bne.n	8001306 <DriveMotor+0x92>
 80012fc:	4b48      	ldr	r3, [pc, #288]	; (8001420 <DriveMotor+0x1ac>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001304:	e003      	b.n	800130e <DriveMotor+0x9a>
 8001306:	4b46      	ldr	r3, [pc, #280]	; (8001420 <DriveMotor+0x1ac>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2300      	movs	r3, #0
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
		  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001314:	4843      	ldr	r0, [pc, #268]	; (8001424 <DriveMotor+0x1b0>)
 8001316:	f001 f90a 	bl	800252e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001320:	4840      	ldr	r0, [pc, #256]	; (8001424 <DriveMotor+0x1b0>)
 8001322:	f001 f904 	bl	800252e <HAL_GPIO_WritePin>

		}break;
 8001326:	e039      	b.n	800139c <DriveMotor+0x128>
		case CounterClockWise:
		{
		  PWM_CurrentChannel = PWM_COUNTER_CLOCKWISE_CHANNEL;
 8001328:	4b3c      	ldr	r3, [pc, #240]	; (800141c <DriveMotor+0x1a8>)
 800132a:	2204      	movs	r2, #4
 800132c:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CLOCKWISE_CHANNEL, 0);
 800132e:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <DriveMotor+0x1ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2200      	movs	r2, #0
 8001334:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_COUNTER_CLOCKWISE_CHANNEL, 0);
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <DriveMotor+0x1ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	639a      	str	r2, [r3, #56]	; 0x38
		  //delay here
		  HAL_Delay(PWM_DEADTIME_DELAY);
 800133e:	2005      	movs	r0, #5
 8001340:	f000 fd7e 	bl	8001e40 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, 0);
 8001344:	4b35      	ldr	r3, [pc, #212]	; (800141c <DriveMotor+0x1a8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d104      	bne.n	8001356 <DriveMotor+0xe2>
 800134c:	4b34      	ldr	r3, [pc, #208]	; (8001420 <DriveMotor+0x1ac>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2200      	movs	r2, #0
 8001352:	635a      	str	r2, [r3, #52]	; 0x34
 8001354:	e015      	b.n	8001382 <DriveMotor+0x10e>
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <DriveMotor+0x1a8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b04      	cmp	r3, #4
 800135c:	d104      	bne.n	8001368 <DriveMotor+0xf4>
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <DriveMotor+0x1ac>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	6393      	str	r3, [r2, #56]	; 0x38
 8001366:	e00c      	b.n	8001382 <DriveMotor+0x10e>
 8001368:	4b2c      	ldr	r3, [pc, #176]	; (800141c <DriveMotor+0x1a8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b08      	cmp	r3, #8
 800136e:	d104      	bne.n	800137a <DriveMotor+0x106>
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <DriveMotor+0x1ac>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2300      	movs	r3, #0
 8001376:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001378:	e003      	b.n	8001382 <DriveMotor+0x10e>
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <DriveMotor+0x1ac>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	2300      	movs	r3, #0
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
		  HAL_GPIO_WritePin(GPIOB, GPIO_CLOCKWISE_PIN, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001388:	4826      	ldr	r0, [pc, #152]	; (8001424 <DriveMotor+0x1b0>)
 800138a:	f001 f8d0 	bl	800252e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_COUNTER_CLOCKWISE_PIN, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001394:	4823      	ldr	r0, [pc, #140]	; (8001424 <DriveMotor+0x1b0>)
 8001396:	f001 f8ca 	bl	800252e <HAL_GPIO_WritePin>
		}break;
 800139a:	bf00      	nop
		}
	}

	//setting PWM value
	PWM_countingDutyCycle = (uint32_t)fabs(controlSignal);
 800139c:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <DriveMotor+0x19c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe43 	bl	8001030 <__aeabi_f2uiz>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <DriveMotor+0x1b4>)
 80013ae:	6013      	str	r3, [r2, #0]
	if(PWM_countingDutyCycle > 200)
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <DriveMotor+0x1b4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2bc8      	cmp	r3, #200	; 0xc8
 80013b6:	d902      	bls.n	80013be <DriveMotor+0x14a>
	{
		PWM_countingDutyCycle = 200;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <DriveMotor+0x1b4>)
 80013ba:	22c8      	movs	r2, #200	; 0xc8
 80013bc:	601a      	str	r2, [r3, #0]
	}
    __HAL_TIM_SET_COMPARE(&htim2, PWM_CurrentChannel, PWM_countingDutyCycle);
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <DriveMotor+0x1a8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d105      	bne.n	80013d2 <DriveMotor+0x15e>
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <DriveMotor+0x1ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <DriveMotor+0x1b4>)
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	635a      	str	r2, [r3, #52]	; 0x34
 80013d0:	e018      	b.n	8001404 <DriveMotor+0x190>
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <DriveMotor+0x1a8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d105      	bne.n	80013e6 <DriveMotor+0x172>
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <DriveMotor+0x1ac>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <DriveMotor+0x1b4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6393      	str	r3, [r2, #56]	; 0x38
 80013e4:	e00e      	b.n	8001404 <DriveMotor+0x190>
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <DriveMotor+0x1a8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d105      	bne.n	80013fa <DriveMotor+0x186>
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <DriveMotor+0x1ac>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <DriveMotor+0x1b4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013f8:	e004      	b.n	8001404 <DriveMotor+0x190>
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <DriveMotor+0x1ac>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <DriveMotor+0x1b4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6413      	str	r3, [r2, #64]	; 0x40

	prevMotorDirection = motorDirection;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <DriveMotor+0x1a0>)
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <DriveMotor+0x1a4>)
 800140a:	701a      	strb	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000360 	.word	0x20000360
 8001414:	200002cd 	.word	0x200002cd
 8001418:	20000000 	.word	0x20000000
 800141c:	200002e0 	.word	0x200002e0
 8001420:	200001f4 	.word	0x200001f4
 8001424:	40010c00 	.word	0x40010c00
 8001428:	200002e4 	.word	0x200002e4

0800142c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800142c:	b5b0      	push	{r4, r5, r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8001434:	2201      	movs	r2, #1
 8001436:	491a      	ldr	r1, [pc, #104]	; (80014a0 <HAL_UART_RxCpltCallback+0x74>)
 8001438:	481a      	ldr	r0, [pc, #104]	; (80014a4 <HAL_UART_RxCpltCallback+0x78>)
 800143a:	f002 fcd6 	bl	8003dea <HAL_UART_Receive_IT>
	buffer[bufferIndex] = rx_buffer[0];
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_UART_RxCpltCallback+0x7c>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_UART_RxCpltCallback+0x74>)
 8001446:	7819      	ldrb	r1, [r3, #0]
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_UART_RxCpltCallback+0x80>)
 800144a:	5499      	strb	r1, [r3, r2]
	bufferIndex++;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_UART_RxCpltCallback+0x7c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_UART_RxCpltCallback+0x7c>)
 8001456:	701a      	strb	r2, [r3, #0]
	if(bufferIndex == sizeof(ConfigData))
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_UART_RxCpltCallback+0x7c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b2c      	cmp	r3, #44	; 0x2c
 800145e:	d11b      	bne.n	8001498 <HAL_UART_RxCpltCallback+0x6c>
	{
		bufferIndex = 0;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_UART_RxCpltCallback+0x7c>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
		memset(&data,0 , sizeof(data));
 8001466:	222c      	movs	r2, #44	; 0x2c
 8001468:	2100      	movs	r1, #0
 800146a:	4811      	ldr	r0, [pc, #68]	; (80014b0 <HAL_UART_RxCpltCallback+0x84>)
 800146c:	f003 ffe5 	bl	800543a <memset>
		memcpy(&data, buffer, sizeof(buffer));
 8001470:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_UART_RxCpltCallback+0x84>)
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <HAL_UART_RxCpltCallback+0x80>)
 8001474:	4614      	mov	r4, r2
 8001476:	461d      	mov	r5, r3
 8001478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800147a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800147c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800147e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001480:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		_time = 0.0f;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_UART_RxCpltCallback+0x88>)
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
		integral = 0.0f;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_UART_RxCpltCallback+0x8c>)
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
	}
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bdb0      	pop	{r4, r5, r7, pc}
 80014a0:	200002cc 	.word	0x200002cc
 80014a4:	20000284 	.word	0x20000284
 80014a8:	20000314 	.word	0x20000314
 80014ac:	200002e8 	.word	0x200002e8
 80014b0:	20000318 	.word	0x20000318
 80014b4:	200002dc 	.word	0x200002dc
 80014b8:	2000035c 	.word	0x2000035c

080014bc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_6)
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	2b40      	cmp	r3, #64	; 0x40
 80014ca:	d11c      	bne.n	8001506 <HAL_GPIO_EXTI_Callback+0x4a>
  {
	  int32_t inc = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	480f      	ldr	r0, [pc, #60]	; (8001510 <HAL_GPIO_EXTI_Callback+0x54>)
 80014d4:	f001 f814 	bl	8002500 <HAL_GPIO_ReadPin>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <HAL_GPIO_EXTI_Callback+0x28>
	  {
		   inc = 1;
 80014de:	2301      	movs	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e002      	b.n	80014ea <HAL_GPIO_EXTI_Callback+0x2e>
	  }
	  else
	  {
		  inc = -1;
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
 80014e8:	60fb      	str	r3, [r7, #12]
	  }
	  motor_current_position += (float)inc;
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f7ff fb86 	bl	8000bfc <__aeabi_i2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_GPIO_EXTI_Callback+0x58>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f7ff facb 	bl	8000a94 <__addsf3>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_GPIO_EXTI_Callback+0x58>)
 8001504:	601a      	str	r2, [r3, #0]
  }
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40010c00 	.word	0x40010c00
 8001514:	200002d0 	.word	0x200002d0

08001518 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d111      	bne.n	800154c <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		StatusData send_data = {0};
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
		send_data.motor_current_position = motor_current_position;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60fb      	str	r3, [r7, #12]
		send_data.motor_current_speed = motor_current_speed;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60bb      	str	r3, [r7, #8]
		send_data.motor_current_acceleration= motor_current_acceleration;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]
		send_data.dummy = 1212.22f;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800154a:	617b      	str	r3, [r7, #20]
		//HAL_UART_Transmit_IT(&huart1, (uint8_t*)&send_data, sizeof(StatusData));
	}
}
 800154c:	bf00      	nop
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	2000023c 	.word	0x2000023c
 800155c:	200002d0 	.word	0x200002d0
 8001560:	200002d4 	.word	0x200002d4
 8001564:	200002d8 	.word	0x200002d8
 8001568:	4497870a 	.word	0x4497870a

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001570:	f000 fc04 	bl	8001d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001574:	f000 f842 	bl	80015fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001578:	f000 f97c 	bl	8001874 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800157c:	f000 f950 	bl	8001820 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001580:	f000 f87e 	bl	8001680 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001584:	f000 f8fe 	bl	8001784 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	4915      	ldr	r1, [pc, #84]	; (80015e0 <main+0x74>)
 800158c:	4815      	ldr	r0, [pc, #84]	; (80015e4 <main+0x78>)
 800158e:	f002 fc2c 	bl	8003dea <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001592:	2100      	movs	r1, #0
 8001594:	4814      	ldr	r0, [pc, #80]	; (80015e8 <main+0x7c>)
 8001596:	f001 fcff 	bl	8002f98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800159a:	2104      	movs	r1, #4
 800159c:	4812      	ldr	r0, [pc, #72]	; (80015e8 <main+0x7c>)
 800159e:	f001 fcfb 	bl	8002f98 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80015a2:	4812      	ldr	r0, [pc, #72]	; (80015ec <main+0x80>)
 80015a4:	f001 fc54 	bl	8002e50 <HAL_TIM_Base_Start_IT>

  data.kp = 0.0f;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <main+0x84>)
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
  data.ki = 0.0f;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <main+0x84>)
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  data.kd = 0.0f;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <main+0x84>)
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	; 0x28

  data.position = 0.0f;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <main+0x84>)
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
  data.gearRatio = 3249.0f / 121.0f;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <main+0x84>)
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <main+0x88>)
 80015cc:	61da      	str	r2, [r3, #28]
  data.encoderPulses = 500.0f;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <main+0x84>)
 80015d0:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <main+0x8c>)
 80015d2:	619a      	str	r2, [r3, #24]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CalculatePID();
 80015d4:	f7ff fd4c 	bl	8001070 <CalculatePID>
	  DriveMotor();
 80015d8:	f7ff fe4c 	bl	8001274 <DriveMotor>
	  CalculatePID();
 80015dc:	e7fa      	b.n	80015d4 <main+0x68>
 80015de:	bf00      	nop
 80015e0:	200002cc 	.word	0x200002cc
 80015e4:	20000284 	.word	0x20000284
 80015e8:	200001f4 	.word	0x200001f4
 80015ec:	2000023c 	.word	0x2000023c
 80015f0:	20000318 	.word	0x20000318
 80015f4:	41d6cf57 	.word	0x41d6cf57
 80015f8:	43fa0000 	.word	0x43fa0000

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b090      	sub	sp, #64	; 0x40
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	2228      	movs	r2, #40	; 0x28
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f003 ff15 	bl	800543a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001622:	2301      	movs	r3, #1
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001626:	2310      	movs	r3, #16
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162a:	2302      	movs	r3, #2
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800162e:	2300      	movs	r3, #0
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001632:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	4618      	mov	r0, r3
 800163e:	f000 ffa7 	bl	8002590 <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001648:	f000 f976 	bl	8001938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001650:	2302      	movs	r3, #2
 8001652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2102      	movs	r1, #2
 8001666:	4618      	mov	r0, r3
 8001668:	f001 fa14 	bl	8002a94 <HAL_RCC_ClockConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001672:	f000 f961 	bl	8001938 <Error_Handler>
  }
}
 8001676:	bf00      	nop
 8001678:	3740      	adds	r7, #64	; 0x40
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	; 0x38
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001694:	f107 0320 	add.w	r3, r7, #32
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
 80016ac:	615a      	str	r2, [r3, #20]
 80016ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b0:	4b33      	ldr	r3, [pc, #204]	; (8001780 <MX_TIM2_Init+0x100>)
 80016b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016b8:	4b31      	ldr	r3, [pc, #196]	; (8001780 <MX_TIM2_Init+0x100>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016be:	4b30      	ldr	r3, [pc, #192]	; (8001780 <MX_TIM2_Init+0x100>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <MX_TIM2_Init+0x100>)
 80016c6:	22ff      	movs	r2, #255	; 0xff
 80016c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <MX_TIM2_Init+0x100>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <MX_TIM2_Init+0x100>)
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016d6:	482a      	ldr	r0, [pc, #168]	; (8001780 <MX_TIM2_Init+0x100>)
 80016d8:	f001 fb6a 	bl	8002db0 <HAL_TIM_Base_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80016e2:	f000 f929 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016f0:	4619      	mov	r1, r3
 80016f2:	4823      	ldr	r0, [pc, #140]	; (8001780 <MX_TIM2_Init+0x100>)
 80016f4:	f001 feb6 	bl	8003464 <HAL_TIM_ConfigClockSource>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80016fe:	f000 f91b 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001702:	481f      	ldr	r0, [pc, #124]	; (8001780 <MX_TIM2_Init+0x100>)
 8001704:	f001 fbf0 	bl	8002ee8 <HAL_TIM_PWM_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800170e:	f000 f913 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800171a:	f107 0320 	add.w	r3, r7, #32
 800171e:	4619      	mov	r1, r3
 8001720:	4817      	ldr	r0, [pc, #92]	; (8001780 <MX_TIM2_Init+0x100>)
 8001722:	f002 fa25 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800172c:	f000 f904 	bl	8001938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001730:	2360      	movs	r3, #96	; 0x60
 8001732:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 8001734:	237d      	movs	r3, #125	; 0x7d
 8001736:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	480e      	ldr	r0, [pc, #56]	; (8001780 <MX_TIM2_Init+0x100>)
 8001748:	f001 fdca 	bl	80032e0 <HAL_TIM_PWM_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001752:	f000 f8f1 	bl	8001938 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2204      	movs	r2, #4
 800175e:	4619      	mov	r1, r3
 8001760:	4807      	ldr	r0, [pc, #28]	; (8001780 <MX_TIM2_Init+0x100>)
 8001762:	f001 fdbd 	bl	80032e0 <HAL_TIM_PWM_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800176c:	f000 f8e4 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001770:	4803      	ldr	r0, [pc, #12]	; (8001780 <MX_TIM2_Init+0x100>)
 8001772:	f000 f951 	bl	8001a18 <HAL_TIM_MspPostInit>

}
 8001776:	bf00      	nop
 8001778:	3738      	adds	r7, #56	; 0x38
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200001f4 	.word	0x200001f4

08001784 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	463b      	mov	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <MX_TIM3_Init+0x94>)
 80017a2:	4a1e      	ldr	r2, [pc, #120]	; (800181c <MX_TIM3_Init+0x98>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 128 - 1;
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <MX_TIM3_Init+0x94>)
 80017a8:	227f      	movs	r2, #127	; 0x7f
 80017aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_TIM3_Init+0x94>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535 - 1;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <MX_TIM3_Init+0x94>)
 80017b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_TIM3_Init+0x94>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_TIM3_Init+0x94>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c6:	4814      	ldr	r0, [pc, #80]	; (8001818 <MX_TIM3_Init+0x94>)
 80017c8:	f001 faf2 	bl	8002db0 <HAL_TIM_Base_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80017d2:	f000 f8b1 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4619      	mov	r1, r3
 80017e2:	480d      	ldr	r0, [pc, #52]	; (8001818 <MX_TIM3_Init+0x94>)
 80017e4:	f001 fe3e 	bl	8003464 <HAL_TIM_ConfigClockSource>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80017ee:	f000 f8a3 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017fa:	463b      	mov	r3, r7
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <MX_TIM3_Init+0x94>)
 8001800:	f002 f9b6 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800180a:	f000 f895 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000023c 	.word	0x2000023c
 800181c:	40000400 	.word	0x40000400

08001820 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <MX_USART1_UART_Init+0x50>)
 8001828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <MX_USART1_UART_Init+0x4c>)
 800182c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_USART1_UART_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <MX_USART1_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001858:	f002 f9f4 	bl	8003c44 <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001862:	f000 f869 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000284 	.word	0x20000284
 8001870:	40013800 	.word	0x40013800

08001874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	4b28      	ldr	r3, [pc, #160]	; (800192c <MX_GPIO_Init+0xb8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a27      	ldr	r2, [pc, #156]	; (800192c <MX_GPIO_Init+0xb8>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <MX_GPIO_Init+0xb8>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <MX_GPIO_Init+0xb8>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a21      	ldr	r2, [pc, #132]	; (800192c <MX_GPIO_Init+0xb8>)
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <MX_GPIO_Init+0xb8>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80018be:	481c      	ldr	r0, [pc, #112]	; (8001930 <MX_GPIO_Init+0xbc>)
 80018c0:	f000 fe35 	bl	800252e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2302      	movs	r3, #2
 80018d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	4619      	mov	r1, r3
 80018dc:	4814      	ldr	r0, [pc, #80]	; (8001930 <MX_GPIO_Init+0xbc>)
 80018de:	f000 fc93 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018e2:	2340      	movs	r3, #64	; 0x40
 80018e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <MX_GPIO_Init+0xc0>)
 80018e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	4619      	mov	r1, r3
 80018f4:	480e      	ldr	r0, [pc, #56]	; (8001930 <MX_GPIO_Init+0xbc>)
 80018f6:	f000 fc87 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	4619      	mov	r1, r3
 800190c:	4808      	ldr	r0, [pc, #32]	; (8001930 <MX_GPIO_Init+0xbc>)
 800190e:	f000 fc7b 	bl	8002208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2017      	movs	r0, #23
 8001918:	f000 fb8d 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800191c:	2017      	movs	r0, #23
 800191e:	f000 fba6 	bl	800206e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	40010c00 	.word	0x40010c00
 8001934:	10110000 	.word	0x10110000

08001938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800193c:	b672      	cpsid	i
}
 800193e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001940:	e7fe      	b.n	8001940 <Error_Handler+0x8>
	...

08001944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_MspInit+0x5c>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_MspInit+0x5c>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6193      	str	r3, [r2, #24]
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_MspInit+0x5c>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_MspInit+0x5c>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_MspInit+0x5c>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_MspInit+0x5c>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_MspInit+0x60>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_MspInit+0x60>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000

080019a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b8:	d10c      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_TIM_Base_MspInit+0x68>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <HAL_TIM_Base_MspInit+0x68>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_TIM_Base_MspInit+0x68>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019d2:	e018      	b.n	8001a06 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_TIM_Base_MspInit+0x6c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d113      	bne.n	8001a06 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_TIM_Base_MspInit+0x68>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_TIM_Base_MspInit+0x68>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_TIM_Base_MspInit+0x68>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	201d      	movs	r0, #29
 80019fc:	f000 fb1b 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a00:	201d      	movs	r0, #29
 8001a02:	f000 fb34 	bl	800206e <HAL_NVIC_EnableIRQ>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40000400 	.word	0x40000400

08001a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a36:	d117      	bne.n	8001a68 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_TIM_MspPostInit+0x58>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <HAL_TIM_MspPostInit+0x58>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_TIM_MspPostInit+0x58>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a50:	2303      	movs	r3, #3
 8001a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4619      	mov	r1, r3
 8001a62:	4804      	ldr	r0, [pc, #16]	; (8001a74 <HAL_TIM_MspPostInit+0x5c>)
 8001a64:	f000 fbd0 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a68:	bf00      	nop
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010800 	.word	0x40010800

08001a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d139      	bne.n	8001b0c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <HAL_UART_MspInit+0xa0>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_UART_MspInit+0xa0>)
 8001a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_UART_MspInit+0xa0>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_UART_MspInit+0xa0>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <HAL_UART_MspInit+0xa0>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6193      	str	r3, [r2, #24]
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_UART_MspInit+0xa0>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001acc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	4619      	mov	r1, r3
 8001adc:	480f      	ldr	r0, [pc, #60]	; (8001b1c <HAL_UART_MspInit+0xa4>)
 8001ade:	f000 fb93 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4619      	mov	r1, r3
 8001af6:	4809      	ldr	r0, [pc, #36]	; (8001b1c <HAL_UART_MspInit+0xa4>)
 8001af8:	f000 fb86 	bl	8002208 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	2025      	movs	r0, #37	; 0x25
 8001b02:	f000 fa98 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b06:	2025      	movs	r0, #37	; 0x25
 8001b08:	f000 fab1 	bl	800206e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40013800 	.word	0x40013800
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010800 	.word	0x40010800

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <NMI_Handler+0x4>

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b66:	f000 f94f 	bl	8001e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b72:	2040      	movs	r0, #64	; 0x40
 8001b74:	f000 fcf4 	bl	8002560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <TIM3_IRQHandler+0x10>)
 8001b82:	f001 faa5 	bl	80030d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000023c 	.word	0x2000023c

08001b90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <USART1_IRQHandler+0x10>)
 8001b96:	f002 f94d 	bl	8003e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000284 	.word	0x20000284

08001ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return 1;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <_kill>:

int _kill(int pid, int sig)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bbc:	f003 fc90 	bl	80054e0 <__errno>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2216      	movs	r2, #22
 8001bc4:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_exit>:

void _exit (int status)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bda:	f04f 31ff 	mov.w	r1, #4294967295
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffe7 	bl	8001bb2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be4:	e7fe      	b.n	8001be4 <_exit+0x12>

08001be6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	e00a      	b.n	8001c0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bf8:	f3af 8000 	nop.w
 8001bfc:	4601      	mov	r1, r0
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	60ba      	str	r2, [r7, #8]
 8001c04:	b2ca      	uxtb	r2, r1
 8001c06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	dbf0      	blt.n	8001bf8 <_read+0x12>
  }

  return len;
 8001c16:	687b      	ldr	r3, [r7, #4]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e009      	b.n	8001c46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	60ba      	str	r2, [r7, #8]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	dbf1      	blt.n	8001c32 <_write+0x12>
  }
  return len;
 8001c4e:	687b      	ldr	r3, [r7, #4]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_close>:

int _close(int file)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <_isatty>:

int _isatty(int file)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c94:	2301      	movs	r3, #1
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <_sbrk+0x5c>)
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <_sbrk+0x60>)
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <_sbrk+0x64>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <_sbrk+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d207      	bcs.n	8001cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce8:	f003 fbfa 	bl	80054e0 <__errno>
 8001cec:	4603      	mov	r3, r0
 8001cee:	220c      	movs	r2, #12
 8001cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	e009      	b.n	8001d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <_sbrk+0x64>)
 8001d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20002800 	.word	0x20002800
 8001d18:	00000400 	.word	0x00000400
 8001d1c:	20000364 	.word	0x20000364
 8001d20:	200004b8 	.word	0x200004b8

08001d24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d30:	f7ff fff8 	bl	8001d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d34:	480b      	ldr	r0, [pc, #44]	; (8001d64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d36:	490c      	ldr	r1, [pc, #48]	; (8001d68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d38:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d4c:	4c09      	ldr	r4, [pc, #36]	; (8001d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f003 fbc7 	bl	80054ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d5e:	f7ff fc05 	bl	800156c <main>
  bx lr
 8001d62:	4770      	bx	lr
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001d6c:	080079d4 	.word	0x080079d4
  ldr r2, =_sbss
 8001d70:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d74:	200004b8 	.word	0x200004b8

08001d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC1_2_IRQHandler>
	...

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_Init+0x28>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <HAL_Init+0x28>)
 8001d86:	f043 0310 	orr.w	r3, r3, #16
 8001d8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f000 f947 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d92:	200f      	movs	r0, #15
 8001d94:	f000 f808 	bl	8001da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d98:	f7ff fdd4 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40022000 	.word	0x40022000

08001da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x54>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_InitTick+0x58>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f95f 	bl	800208a <HAL_SYSTICK_Config>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00e      	b.n	8001df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b0f      	cmp	r3, #15
 8001dda:	d80a      	bhi.n	8001df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f000 f927 	bl	8002036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de8:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <HAL_InitTick+0x5c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000004 	.word	0x20000004
 8001e00:	2000000c 	.word	0x2000000c
 8001e04:	20000008 	.word	0x20000008

08001e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_IncTick+0x1c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_IncTick+0x20>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	4a03      	ldr	r2, [pc, #12]	; (8001e28 <HAL_IncTick+0x20>)
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	2000000c 	.word	0x2000000c
 8001e28:	20000368 	.word	0x20000368

08001e2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <HAL_GetTick+0x10>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	20000368 	.word	0x20000368

08001e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff fff0 	bl	8001e2c <HAL_GetTick>
 8001e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d005      	beq.n	8001e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_Delay+0x44>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e66:	bf00      	nop
 8001e68:	f7ff ffe0 	bl	8001e2c <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d8f7      	bhi.n	8001e68 <HAL_Delay+0x28>
  {
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000000c 	.word	0x2000000c

08001e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eba:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	60d3      	str	r3, [r2, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db0b      	blt.n	8001f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	f003 021f 	and.w	r2, r3, #31
 8001f04:	4906      	ldr	r1, [pc, #24]	; (8001f20 <__NVIC_EnableIRQ+0x34>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	; (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff90 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff2d 	bl	8001e88 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002048:	f7ff ff42 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 800204c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f7ff ff90 	bl	8001f78 <NVIC_EncodePriority>
 8002058:	4602      	mov	r2, r0
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff5f 	bl	8001f24 <__NVIC_SetPriority>
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff35 	bl	8001eec <__NVIC_EnableIRQ>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ffa2 	bl	8001fdc <SysTick_Config>
 8002098:	4603      	mov	r3, r0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d008      	beq.n	80020cc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2204      	movs	r2, #4
 80020be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e020      	b.n	800210e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 020e 	bic.w	r2, r2, #14
 80020da:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	2101      	movs	r1, #1
 80020f6:	fa01 f202 	lsl.w	r2, r1, r2
 80020fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d005      	beq.n	800213c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2204      	movs	r2, #4
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	e051      	b.n	80021e0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 020e 	bic.w	r2, r2, #14
 800214a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a22      	ldr	r2, [pc, #136]	; (80021ec <HAL_DMA_Abort_IT+0xd4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d029      	beq.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <HAL_DMA_Abort_IT+0xd8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d022      	beq.n	80021b6 <HAL_DMA_Abort_IT+0x9e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <HAL_DMA_Abort_IT+0xdc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01a      	beq.n	80021b0 <HAL_DMA_Abort_IT+0x98>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <HAL_DMA_Abort_IT+0xe0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d012      	beq.n	80021aa <HAL_DMA_Abort_IT+0x92>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <HAL_DMA_Abort_IT+0xe4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00a      	beq.n	80021a4 <HAL_DMA_Abort_IT+0x8c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_DMA_Abort_IT+0xe8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d102      	bne.n	800219e <HAL_DMA_Abort_IT+0x86>
 8002198:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800219c:	e00e      	b.n	80021bc <HAL_DMA_Abort_IT+0xa4>
 800219e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a2:	e00b      	b.n	80021bc <HAL_DMA_Abort_IT+0xa4>
 80021a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a8:	e008      	b.n	80021bc <HAL_DMA_Abort_IT+0xa4>
 80021aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ae:	e005      	b.n	80021bc <HAL_DMA_Abort_IT+0xa4>
 80021b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b4:	e002      	b.n	80021bc <HAL_DMA_Abort_IT+0xa4>
 80021b6:	2310      	movs	r3, #16
 80021b8:	e000      	b.n	80021bc <HAL_DMA_Abort_IT+0xa4>
 80021ba:	2301      	movs	r3, #1
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <HAL_DMA_Abort_IT+0xec>)
 80021be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
    } 
  }
  return status;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40020008 	.word	0x40020008
 80021f0:	4002001c 	.word	0x4002001c
 80021f4:	40020030 	.word	0x40020030
 80021f8:	40020044 	.word	0x40020044
 80021fc:	40020058 	.word	0x40020058
 8002200:	4002006c 	.word	0x4002006c
 8002204:	40020000 	.word	0x40020000

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b08b      	sub	sp, #44	; 0x2c
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221a:	e161      	b.n	80024e0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800221c:	2201      	movs	r2, #1
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	429a      	cmp	r2, r3
 8002236:	f040 8150 	bne.w	80024da <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a97      	ldr	r2, [pc, #604]	; (800249c <HAL_GPIO_Init+0x294>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d05e      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 8002244:	4a95      	ldr	r2, [pc, #596]	; (800249c <HAL_GPIO_Init+0x294>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d875      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 800224a:	4a95      	ldr	r2, [pc, #596]	; (80024a0 <HAL_GPIO_Init+0x298>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d058      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 8002250:	4a93      	ldr	r2, [pc, #588]	; (80024a0 <HAL_GPIO_Init+0x298>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d86f      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 8002256:	4a93      	ldr	r2, [pc, #588]	; (80024a4 <HAL_GPIO_Init+0x29c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d052      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 800225c:	4a91      	ldr	r2, [pc, #580]	; (80024a4 <HAL_GPIO_Init+0x29c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d869      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 8002262:	4a91      	ldr	r2, [pc, #580]	; (80024a8 <HAL_GPIO_Init+0x2a0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d04c      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 8002268:	4a8f      	ldr	r2, [pc, #572]	; (80024a8 <HAL_GPIO_Init+0x2a0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d863      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 800226e:	4a8f      	ldr	r2, [pc, #572]	; (80024ac <HAL_GPIO_Init+0x2a4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d046      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 8002274:	4a8d      	ldr	r2, [pc, #564]	; (80024ac <HAL_GPIO_Init+0x2a4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d85d      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 800227a:	2b12      	cmp	r3, #18
 800227c:	d82a      	bhi.n	80022d4 <HAL_GPIO_Init+0xcc>
 800227e:	2b12      	cmp	r3, #18
 8002280:	d859      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 8002282:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <HAL_GPIO_Init+0x80>)
 8002284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002288:	08002303 	.word	0x08002303
 800228c:	080022dd 	.word	0x080022dd
 8002290:	080022ef 	.word	0x080022ef
 8002294:	08002331 	.word	0x08002331
 8002298:	08002337 	.word	0x08002337
 800229c:	08002337 	.word	0x08002337
 80022a0:	08002337 	.word	0x08002337
 80022a4:	08002337 	.word	0x08002337
 80022a8:	08002337 	.word	0x08002337
 80022ac:	08002337 	.word	0x08002337
 80022b0:	08002337 	.word	0x08002337
 80022b4:	08002337 	.word	0x08002337
 80022b8:	08002337 	.word	0x08002337
 80022bc:	08002337 	.word	0x08002337
 80022c0:	08002337 	.word	0x08002337
 80022c4:	08002337 	.word	0x08002337
 80022c8:	08002337 	.word	0x08002337
 80022cc:	080022e5 	.word	0x080022e5
 80022d0:	080022f9 	.word	0x080022f9
 80022d4:	4a76      	ldr	r2, [pc, #472]	; (80024b0 <HAL_GPIO_Init+0x2a8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022da:	e02c      	b.n	8002336 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	623b      	str	r3, [r7, #32]
          break;
 80022e2:	e029      	b.n	8002338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	3304      	adds	r3, #4
 80022ea:	623b      	str	r3, [r7, #32]
          break;
 80022ec:	e024      	b.n	8002338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	3308      	adds	r3, #8
 80022f4:	623b      	str	r3, [r7, #32]
          break;
 80022f6:	e01f      	b.n	8002338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	330c      	adds	r3, #12
 80022fe:	623b      	str	r3, [r7, #32]
          break;
 8002300:	e01a      	b.n	8002338 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800230a:	2304      	movs	r3, #4
 800230c:	623b      	str	r3, [r7, #32]
          break;
 800230e:	e013      	b.n	8002338 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002318:	2308      	movs	r3, #8
 800231a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	611a      	str	r2, [r3, #16]
          break;
 8002322:	e009      	b.n	8002338 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002324:	2308      	movs	r3, #8
 8002326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	615a      	str	r2, [r3, #20]
          break;
 800232e:	e003      	b.n	8002338 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
          break;
 8002334:	e000      	b.n	8002338 <HAL_GPIO_Init+0x130>
          break;
 8002336:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2bff      	cmp	r3, #255	; 0xff
 800233c:	d801      	bhi.n	8002342 <HAL_GPIO_Init+0x13a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	e001      	b.n	8002346 <HAL_GPIO_Init+0x13e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2bff      	cmp	r3, #255	; 0xff
 800234c:	d802      	bhi.n	8002354 <HAL_GPIO_Init+0x14c>
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	e002      	b.n	800235a <HAL_GPIO_Init+0x152>
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	3b08      	subs	r3, #8
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	210f      	movs	r1, #15
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	401a      	ands	r2, r3
 800236c:	6a39      	ldr	r1, [r7, #32]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	431a      	orrs	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80a9 	beq.w	80024da <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002388:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <HAL_GPIO_Init+0x2ac>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4a49      	ldr	r2, [pc, #292]	; (80024b4 <HAL_GPIO_Init+0x2ac>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6193      	str	r3, [r2, #24]
 8002394:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_GPIO_Init+0x2ac>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023a0:	4a45      	ldr	r2, [pc, #276]	; (80024b8 <HAL_GPIO_Init+0x2b0>)
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4013      	ands	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3d      	ldr	r2, [pc, #244]	; (80024bc <HAL_GPIO_Init+0x2b4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d00d      	beq.n	80023e8 <HAL_GPIO_Init+0x1e0>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3c      	ldr	r2, [pc, #240]	; (80024c0 <HAL_GPIO_Init+0x2b8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d007      	beq.n	80023e4 <HAL_GPIO_Init+0x1dc>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a3b      	ldr	r2, [pc, #236]	; (80024c4 <HAL_GPIO_Init+0x2bc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d101      	bne.n	80023e0 <HAL_GPIO_Init+0x1d8>
 80023dc:	2302      	movs	r3, #2
 80023de:	e004      	b.n	80023ea <HAL_GPIO_Init+0x1e2>
 80023e0:	2303      	movs	r3, #3
 80023e2:	e002      	b.n	80023ea <HAL_GPIO_Init+0x1e2>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_GPIO_Init+0x1e2>
 80023e8:	2300      	movs	r3, #0
 80023ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ec:	f002 0203 	and.w	r2, r2, #3
 80023f0:	0092      	lsls	r2, r2, #2
 80023f2:	4093      	lsls	r3, r2
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023fa:	492f      	ldr	r1, [pc, #188]	; (80024b8 <HAL_GPIO_Init+0x2b0>)
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002414:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	492b      	ldr	r1, [pc, #172]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	43db      	mvns	r3, r3
 800242a:	4927      	ldr	r1, [pc, #156]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 800242c:	4013      	ands	r3, r2
 800242e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	4921      	ldr	r1, [pc, #132]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	60cb      	str	r3, [r1, #12]
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800244a:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	43db      	mvns	r3, r3
 8002452:	491d      	ldr	r1, [pc, #116]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 8002454:	4013      	ands	r3, r2
 8002456:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002464:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4917      	ldr	r1, [pc, #92]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	43db      	mvns	r3, r3
 800247a:	4913      	ldr	r1, [pc, #76]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 800247c:	4013      	ands	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01f      	beq.n	80024cc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	490d      	ldr	r1, [pc, #52]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e01f      	b.n	80024da <HAL_GPIO_Init+0x2d2>
 800249a:	bf00      	nop
 800249c:	10320000 	.word	0x10320000
 80024a0:	10310000 	.word	0x10310000
 80024a4:	10220000 	.word	0x10220000
 80024a8:	10210000 	.word	0x10210000
 80024ac:	10120000 	.word	0x10120000
 80024b0:	10110000 	.word	0x10110000
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40010800 	.word	0x40010800
 80024c0:	40010c00 	.word	0x40010c00
 80024c4:	40011000 	.word	0x40011000
 80024c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_GPIO_Init+0x2f4>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	4909      	ldr	r1, [pc, #36]	; (80024fc <HAL_GPIO_Init+0x2f4>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f47f ae96 	bne.w	800221c <HAL_GPIO_Init+0x14>
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	372c      	adds	r7, #44	; 0x2c
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	40010400 	.word	0x40010400

08002500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	887b      	ldrh	r3, [r7, #2]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e001      	b.n	8002522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	807b      	strh	r3, [r7, #2]
 800253a:	4613      	mov	r3, r2
 800253c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800253e:	787b      	ldrb	r3, [r7, #1]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002544:	887a      	ldrh	r2, [r7, #2]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800254a:	e003      	b.n	8002554 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	041a      	lsls	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	611a      	str	r2, [r3, #16]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
	...

08002560 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002576:	4a05      	ldr	r2, [pc, #20]	; (800258c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe ff9c 	bl	80014bc <HAL_GPIO_EXTI_Callback>
  }
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40010400 	.word	0x40010400

08002590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e272      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8087 	beq.w	80026be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b0:	4b92      	ldr	r3, [pc, #584]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d00c      	beq.n	80025d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025bc:	4b8f      	ldr	r3, [pc, #572]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d112      	bne.n	80025ee <HAL_RCC_OscConfig+0x5e>
 80025c8:	4b8c      	ldr	r3, [pc, #560]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d4:	d10b      	bne.n	80025ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d6:	4b89      	ldr	r3, [pc, #548]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d06c      	beq.n	80026bc <HAL_RCC_OscConfig+0x12c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d168      	bne.n	80026bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e24c      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x76>
 80025f8:	4b80      	ldr	r3, [pc, #512]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a7f      	ldr	r2, [pc, #508]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e02e      	b.n	8002664 <HAL_RCC_OscConfig+0xd4>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x98>
 800260e:	4b7b      	ldr	r3, [pc, #492]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a7a      	ldr	r2, [pc, #488]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b78      	ldr	r3, [pc, #480]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a77      	ldr	r2, [pc, #476]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e01d      	b.n	8002664 <HAL_RCC_OscConfig+0xd4>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0xbc>
 8002632:	4b72      	ldr	r3, [pc, #456]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a71      	ldr	r2, [pc, #452]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a6e      	ldr	r2, [pc, #440]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0xd4>
 800264c:	4b6b      	ldr	r3, [pc, #428]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a6a      	ldr	r2, [pc, #424]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b68      	ldr	r3, [pc, #416]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a67      	ldr	r2, [pc, #412]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 800265e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002662:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d013      	beq.n	8002694 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7ff fbde 	bl	8001e2c <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7ff fbda 	bl	8001e2c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e200      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0xe4>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff fbca 	bl	8001e2c <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7ff fbc6 	bl	8001e2c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e1ec      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ae:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x10c>
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d063      	beq.n	8002792 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ca:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026d6:	4b49      	ldr	r3, [pc, #292]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d11c      	bne.n	800271c <HAL_RCC_OscConfig+0x18c>
 80026e2:	4b46      	ldr	r3, [pc, #280]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d116      	bne.n	800271c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ee:	4b43      	ldr	r3, [pc, #268]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_RCC_OscConfig+0x176>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e1c0      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002706:	4b3d      	ldr	r3, [pc, #244]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4939      	ldr	r1, [pc, #228]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271a:	e03a      	b.n	8002792 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002724:	4b36      	ldr	r3, [pc, #216]	; (8002800 <HAL_RCC_OscConfig+0x270>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7ff fb7f 	bl	8001e2c <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002732:	f7ff fb7b 	bl	8001e2c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e1a1      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002744:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4927      	ldr	r1, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
 8002764:	e015      	b.n	8002792 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002766:	4b26      	ldr	r3, [pc, #152]	; (8002800 <HAL_RCC_OscConfig+0x270>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff fb5e 	bl	8001e2c <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002774:	f7ff fb5a 	bl	8001e2c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e180      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d03a      	beq.n	8002814 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d019      	beq.n	80027da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_RCC_OscConfig+0x274>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7ff fb3e 	bl	8001e2c <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b4:	f7ff fb3a 	bl	8001e2c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e160      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f000 face 	bl	8002d74 <RCC_Delay>
 80027d8:	e01c      	b.n	8002814 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_RCC_OscConfig+0x274>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e0:	f7ff fb24 	bl	8001e2c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e6:	e00f      	b.n	8002808 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e8:	f7ff fb20 	bl	8001e2c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d908      	bls.n	8002808 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e146      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	42420000 	.word	0x42420000
 8002804:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	4b92      	ldr	r3, [pc, #584]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e9      	bne.n	80027e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a6 	beq.w	800296e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002826:	4b8b      	ldr	r3, [pc, #556]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10d      	bne.n	800284e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	4b88      	ldr	r3, [pc, #544]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4a87      	ldr	r2, [pc, #540]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	61d3      	str	r3, [r2, #28]
 800283e:	4b85      	ldr	r3, [pc, #532]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284a:	2301      	movs	r3, #1
 800284c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284e:	4b82      	ldr	r3, [pc, #520]	; (8002a58 <HAL_RCC_OscConfig+0x4c8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d118      	bne.n	800288c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285a:	4b7f      	ldr	r3, [pc, #508]	; (8002a58 <HAL_RCC_OscConfig+0x4c8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7e      	ldr	r2, [pc, #504]	; (8002a58 <HAL_RCC_OscConfig+0x4c8>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002866:	f7ff fae1 	bl	8001e2c <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286e:	f7ff fadd 	bl	8001e2c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b64      	cmp	r3, #100	; 0x64
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e103      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	4b75      	ldr	r3, [pc, #468]	; (8002a58 <HAL_RCC_OscConfig+0x4c8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_OscConfig+0x312>
 8002894:	4b6f      	ldr	r3, [pc, #444]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a6e      	ldr	r2, [pc, #440]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	e02d      	b.n	80028fe <HAL_RCC_OscConfig+0x36e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x334>
 80028aa:	4b6a      	ldr	r3, [pc, #424]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a69      	ldr	r2, [pc, #420]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6213      	str	r3, [r2, #32]
 80028b6:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4a66      	ldr	r2, [pc, #408]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	f023 0304 	bic.w	r3, r3, #4
 80028c0:	6213      	str	r3, [r2, #32]
 80028c2:	e01c      	b.n	80028fe <HAL_RCC_OscConfig+0x36e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d10c      	bne.n	80028e6 <HAL_RCC_OscConfig+0x356>
 80028cc:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4a60      	ldr	r2, [pc, #384]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	6213      	str	r3, [r2, #32]
 80028d8:	4b5e      	ldr	r3, [pc, #376]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4a5d      	ldr	r2, [pc, #372]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6213      	str	r3, [r2, #32]
 80028e4:	e00b      	b.n	80028fe <HAL_RCC_OscConfig+0x36e>
 80028e6:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a5a      	ldr	r2, [pc, #360]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6213      	str	r3, [r2, #32]
 80028f2:	4b58      	ldr	r3, [pc, #352]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a57      	ldr	r2, [pc, #348]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	f023 0304 	bic.w	r3, r3, #4
 80028fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d015      	beq.n	8002932 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002906:	f7ff fa91 	bl	8001e2c <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7ff fa8d 	bl	8001e2c <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e0b1      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	4b4b      	ldr	r3, [pc, #300]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ee      	beq.n	800290e <HAL_RCC_OscConfig+0x37e>
 8002930:	e014      	b.n	800295c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002932:	f7ff fa7b 	bl	8001e2c <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002938:	e00a      	b.n	8002950 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293a:	f7ff fa77 	bl	8001e2c <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f241 3288 	movw	r2, #5000	; 0x1388
 8002948:	4293      	cmp	r3, r2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e09b      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	4b40      	ldr	r3, [pc, #256]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ee      	bne.n	800293a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d105      	bne.n	800296e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002962:	4b3c      	ldr	r3, [pc, #240]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4a3b      	ldr	r2, [pc, #236]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8087 	beq.w	8002a86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002978:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b08      	cmp	r3, #8
 8002982:	d061      	beq.n	8002a48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d146      	bne.n	8002a1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298c:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <HAL_RCC_OscConfig+0x4cc>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7ff fa4b 	bl	8001e2c <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299a:	f7ff fa47 	bl	8001e2c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e06d      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ac:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f0      	bne.n	800299a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c0:	d108      	bne.n	80029d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4921      	ldr	r1, [pc, #132]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a19      	ldr	r1, [r3, #32]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	430b      	orrs	r3, r1
 80029e6:	491b      	ldr	r1, [pc, #108]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_RCC_OscConfig+0x4cc>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7ff fa1b 	bl	8001e2c <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fa:	f7ff fa17 	bl	8001e2c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e03d      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x46a>
 8002a18:	e035      	b.n	8002a86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <HAL_RCC_OscConfig+0x4cc>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7ff fa04 	bl	8001e2c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7ff fa00 	bl	8001e2c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e026      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x498>
 8002a46:	e01e      	b.n	8002a86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d107      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e019      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_OscConfig+0x500>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000

08002a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0d0      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d910      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b67      	ldr	r3, [pc, #412]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 0207 	bic.w	r2, r3, #7
 8002abe:	4965      	ldr	r1, [pc, #404]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0b8      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af0:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4a58      	ldr	r2, [pc, #352]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002afa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	494d      	ldr	r1, [pc, #308]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d040      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d115      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e07f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e073      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e06b      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4936      	ldr	r1, [pc, #216]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b84:	f7ff f952 	bl	8001e2c <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7ff f94e 	bl	8001e2c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e053      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d210      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 0207 	bic.w	r2, r3, #7
 8002bca:	4922      	ldr	r1, [pc, #136]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e032      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4916      	ldr	r1, [pc, #88]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	490e      	ldr	r1, [pc, #56]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c22:	f000 f821 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	490a      	ldr	r1, [pc, #40]	; (8002c5c <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	5ccb      	ldrb	r3, [r1, r3]
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <HAL_RCC_ClockConfig+0x1cc>)
 8002c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_ClockConfig+0x1d0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f8b0 	bl	8001da8 <HAL_InitTick>

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40022000 	.word	0x40022000
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08007634 	.word	0x08007634
 8002c60:	20000004 	.word	0x20000004
 8002c64:	20000008 	.word	0x20000008

08002c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c82:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x94>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d002      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x30>
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0x36>
 8002c96:	e027      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c9a:	613b      	str	r3, [r7, #16]
      break;
 8002c9c:	e027      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	0c9b      	lsrs	r3, r3, #18
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ca8:	5cd3      	ldrb	r3, [r2, r3]
 8002caa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d010      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x94>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	0c5b      	lsrs	r3, r3, #17
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
 8002cc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cca:	fb03 f202 	mul.w	r2, r3, r2
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e004      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a0c      	ldr	r2, [pc, #48]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	613b      	str	r3, [r7, #16]
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cea:	613b      	str	r3, [r7, #16]
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	693b      	ldr	r3, [r7, #16]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	007a1200 	.word	0x007a1200
 8002d04:	0800764c 	.word	0x0800764c
 8002d08:	0800765c 	.word	0x0800765c
 8002d0c:	003d0900 	.word	0x003d0900

08002d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d14:	4b02      	ldr	r3, [pc, #8]	; (8002d20 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	20000004 	.word	0x20000004

08002d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d28:	f7ff fff2 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	4903      	ldr	r1, [pc, #12]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3a:	5ccb      	ldrb	r3, [r1, r3]
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000
 8002d48:	08007644 	.word	0x08007644

08002d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d50:	f7ff ffde 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	0adb      	lsrs	r3, r3, #11
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4903      	ldr	r1, [pc, #12]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	08007644 	.word	0x08007644

08002d74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <RCC_Delay+0x34>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <RCC_Delay+0x38>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	0a5b      	lsrs	r3, r3, #9
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d90:	bf00      	nop
  }
  while (Delay --);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1e5a      	subs	r2, r3, #1
 8002d96:	60fa      	str	r2, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f9      	bne.n	8002d90 <RCC_Delay+0x1c>
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	20000004 	.word	0x20000004
 8002dac:	10624dd3 	.word	0x10624dd3

08002db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e041      	b.n	8002e46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe fde6 	bl	80019a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3304      	adds	r3, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f000 fc24 	bl	800363c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d001      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e035      	b.n	8002ed4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a16      	ldr	r2, [pc, #88]	; (8002ee0 <HAL_TIM_Base_Start_IT+0x90>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x4e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e92:	d004      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x4e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <HAL_TIM_Base_Start_IT+0x94>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d111      	bne.n	8002ec2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b06      	cmp	r3, #6
 8002eae:	d010      	beq.n	8002ed2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec0:	e007      	b.n	8002ed2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40000400 	.word	0x40000400

08002ee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e041      	b.n	8002f7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f839 	bl	8002f86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f000 fb88 	bl	800363c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_TIM_PWM_Start+0x24>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e022      	b.n	8003002 <HAL_TIM_PWM_Start+0x6a>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d109      	bne.n	8002fd6 <HAL_TIM_PWM_Start+0x3e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	bf14      	ite	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	2300      	moveq	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	e015      	b.n	8003002 <HAL_TIM_PWM_Start+0x6a>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d109      	bne.n	8002ff0 <HAL_TIM_PWM_Start+0x58>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e008      	b.n	8003002 <HAL_TIM_PWM_Start+0x6a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e059      	b.n	80030be <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <HAL_TIM_PWM_Start+0x82>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003018:	e013      	b.n	8003042 <HAL_TIM_PWM_Start+0xaa>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d104      	bne.n	800302a <HAL_TIM_PWM_Start+0x92>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003028:	e00b      	b.n	8003042 <HAL_TIM_PWM_Start+0xaa>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d104      	bne.n	800303a <HAL_TIM_PWM_Start+0xa2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003038:	e003      	b.n	8003042 <HAL_TIM_PWM_Start+0xaa>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2201      	movs	r2, #1
 8003048:	6839      	ldr	r1, [r7, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fd6c 	bl	8003b28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_TIM_PWM_Start+0x130>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d107      	bne.n	800306a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003068:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <HAL_TIM_PWM_Start+0x130>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d009      	beq.n	8003088 <HAL_TIM_PWM_Start+0xf0>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307c:	d004      	beq.n	8003088 <HAL_TIM_PWM_Start+0xf0>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a12      	ldr	r2, [pc, #72]	; (80030cc <HAL_TIM_PWM_Start+0x134>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d111      	bne.n	80030ac <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b06      	cmp	r3, #6
 8003098:	d010      	beq.n	80030bc <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030aa:	e007      	b.n	80030bc <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40000400 	.word	0x40000400

080030d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d122      	bne.n	800312c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d11b      	bne.n	800312c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0202 	mvn.w	r2, #2
 80030fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fa76 	bl	8003604 <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa69 	bl	80035f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fa78 	bl	8003616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d122      	bne.n	8003180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b04      	cmp	r3, #4
 8003146:	d11b      	bne.n	8003180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0204 	mvn.w	r2, #4
 8003150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fa4c 	bl	8003604 <HAL_TIM_IC_CaptureCallback>
 800316c:	e005      	b.n	800317a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa3f 	bl	80035f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fa4e 	bl	8003616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b08      	cmp	r3, #8
 800318c:	d122      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b08      	cmp	r3, #8
 800319a:	d11b      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0208 	mvn.w	r2, #8
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2204      	movs	r2, #4
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fa22 	bl	8003604 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa15 	bl	80035f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fa24 	bl	8003616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b10      	cmp	r3, #16
 80031e0:	d122      	bne.n	8003228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d11b      	bne.n	8003228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0210 	mvn.w	r2, #16
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2208      	movs	r2, #8
 80031fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f9f8 	bl	8003604 <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f9eb 	bl	80035f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f9fa 	bl	8003616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d10e      	bne.n	8003254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0201 	mvn.w	r2, #1
 800324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fe f962 	bl	8001518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325e:	2b80      	cmp	r3, #128	; 0x80
 8003260:	d10e      	bne.n	8003280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b80      	cmp	r3, #128	; 0x80
 800326e:	d107      	bne.n	8003280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fcd9 	bl	8003c32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b40      	cmp	r3, #64	; 0x40
 800328c:	d10e      	bne.n	80032ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d107      	bne.n	80032ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9be 	bl	8003628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d10e      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d107      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0220 	mvn.w	r2, #32
 80032d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fca4 	bl	8003c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e0ae      	b.n	800345c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b0c      	cmp	r3, #12
 800330a:	f200 809f 	bhi.w	800344c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800330e:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	08003349 	.word	0x08003349
 8003318:	0800344d 	.word	0x0800344d
 800331c:	0800344d 	.word	0x0800344d
 8003320:	0800344d 	.word	0x0800344d
 8003324:	08003389 	.word	0x08003389
 8003328:	0800344d 	.word	0x0800344d
 800332c:	0800344d 	.word	0x0800344d
 8003330:	0800344d 	.word	0x0800344d
 8003334:	080033cb 	.word	0x080033cb
 8003338:	0800344d 	.word	0x0800344d
 800333c:	0800344d 	.word	0x0800344d
 8003340:	0800344d 	.word	0x0800344d
 8003344:	0800340b 	.word	0x0800340b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f9cc 	bl	80036ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0208 	orr.w	r2, r2, #8
 8003362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0204 	bic.w	r2, r2, #4
 8003372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6999      	ldr	r1, [r3, #24]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	619a      	str	r2, [r3, #24]
      break;
 8003386:	e064      	b.n	8003452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fa12 	bl	80037b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6999      	ldr	r1, [r3, #24]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	021a      	lsls	r2, r3, #8
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	619a      	str	r2, [r3, #24]
      break;
 80033c8:	e043      	b.n	8003452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fa5b 	bl	800388c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0208 	orr.w	r2, r2, #8
 80033e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0204 	bic.w	r2, r2, #4
 80033f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69d9      	ldr	r1, [r3, #28]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	61da      	str	r2, [r3, #28]
      break;
 8003408:	e023      	b.n	8003452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 faa5 	bl	8003960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69da      	ldr	r2, [r3, #28]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69d9      	ldr	r1, [r3, #28]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	021a      	lsls	r2, r3, #8
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	61da      	str	r2, [r3, #28]
      break;
 800344a:	e002      	b.n	8003452 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	75fb      	strb	r3, [r7, #23]
      break;
 8003450:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800345a:	7dfb      	ldrb	r3, [r7, #23]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_TIM_ConfigClockSource+0x1c>
 800347c:	2302      	movs	r3, #2
 800347e:	e0b4      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x186>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800349e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b8:	d03e      	beq.n	8003538 <HAL_TIM_ConfigClockSource+0xd4>
 80034ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034be:	f200 8087 	bhi.w	80035d0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c6:	f000 8086 	beq.w	80035d6 <HAL_TIM_ConfigClockSource+0x172>
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	d87f      	bhi.n	80035d0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b70      	cmp	r3, #112	; 0x70
 80034d2:	d01a      	beq.n	800350a <HAL_TIM_ConfigClockSource+0xa6>
 80034d4:	2b70      	cmp	r3, #112	; 0x70
 80034d6:	d87b      	bhi.n	80035d0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d8:	2b60      	cmp	r3, #96	; 0x60
 80034da:	d050      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x11a>
 80034dc:	2b60      	cmp	r3, #96	; 0x60
 80034de:	d877      	bhi.n	80035d0 <HAL_TIM_ConfigClockSource+0x16c>
 80034e0:	2b50      	cmp	r3, #80	; 0x50
 80034e2:	d03c      	beq.n	800355e <HAL_TIM_ConfigClockSource+0xfa>
 80034e4:	2b50      	cmp	r3, #80	; 0x50
 80034e6:	d873      	bhi.n	80035d0 <HAL_TIM_ConfigClockSource+0x16c>
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d058      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x13a>
 80034ec:	2b40      	cmp	r3, #64	; 0x40
 80034ee:	d86f      	bhi.n	80035d0 <HAL_TIM_ConfigClockSource+0x16c>
 80034f0:	2b30      	cmp	r3, #48	; 0x30
 80034f2:	d064      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x15a>
 80034f4:	2b30      	cmp	r3, #48	; 0x30
 80034f6:	d86b      	bhi.n	80035d0 <HAL_TIM_ConfigClockSource+0x16c>
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d060      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x15a>
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d867      	bhi.n	80035d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d05c      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x15a>
 8003504:	2b10      	cmp	r3, #16
 8003506:	d05a      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x15a>
 8003508:	e062      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800351a:	f000 fae6 	bl	8003aea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800352c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	609a      	str	r2, [r3, #8]
      break;
 8003536:	e04f      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003548:	f000 facf 	bl	8003aea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800355a:	609a      	str	r2, [r3, #8]
      break;
 800355c:	e03c      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800356a:	461a      	mov	r2, r3
 800356c:	f000 fa46 	bl	80039fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2150      	movs	r1, #80	; 0x50
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fa9d 	bl	8003ab6 <TIM_ITRx_SetConfig>
      break;
 800357c:	e02c      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800358a:	461a      	mov	r2, r3
 800358c:	f000 fa64 	bl	8003a58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2160      	movs	r1, #96	; 0x60
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa8d 	bl	8003ab6 <TIM_ITRx_SetConfig>
      break;
 800359c:	e01c      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035aa:	461a      	mov	r2, r3
 80035ac:	f000 fa26 	bl	80039fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2140      	movs	r1, #64	; 0x40
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fa7d 	bl	8003ab6 <TIM_ITRx_SetConfig>
      break;
 80035bc:	e00c      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4619      	mov	r1, r3
 80035c8:	4610      	mov	r0, r2
 80035ca:	f000 fa74 	bl	8003ab6 <TIM_ITRx_SetConfig>
      break;
 80035ce:	e003      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      break;
 80035d4:	e000      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
	...

0800363c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <TIM_Base_SetConfig+0xa8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d007      	beq.n	8003664 <TIM_Base_SetConfig+0x28>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d003      	beq.n	8003664 <TIM_Base_SetConfig+0x28>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a22      	ldr	r2, [pc, #136]	; (80036e8 <TIM_Base_SetConfig+0xac>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d108      	bne.n	8003676 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a1a      	ldr	r2, [pc, #104]	; (80036e4 <TIM_Base_SetConfig+0xa8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <TIM_Base_SetConfig+0x52>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003684:	d003      	beq.n	800368e <TIM_Base_SetConfig+0x52>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <TIM_Base_SetConfig+0xac>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d108      	bne.n	80036a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <TIM_Base_SetConfig+0xa8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d103      	bne.n	80036d4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	615a      	str	r2, [r3, #20]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40000400 	.word	0x40000400

080036ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f023 0201 	bic.w	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f023 0302 	bic.w	r3, r3, #2
 8003734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <TIM_OC1_SetConfig+0xc8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d10c      	bne.n	8003762 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0308 	bic.w	r3, r3, #8
 800374e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f023 0304 	bic.w	r3, r3, #4
 8003760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <TIM_OC1_SetConfig+0xc8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d111      	bne.n	800378e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	621a      	str	r2, [r3, #32]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00

080037b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f023 0210 	bic.w	r2, r3, #16
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0320 	bic.w	r3, r3, #32
 8003802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <TIM_OC2_SetConfig+0xd0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d10d      	bne.n	8003834 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800381e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003832:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a14      	ldr	r2, [pc, #80]	; (8003888 <TIM_OC2_SetConfig+0xd0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00

0800388c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1d      	ldr	r2, [pc, #116]	; (800395c <TIM_OC3_SetConfig+0xd0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10d      	bne.n	8003906 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a14      	ldr	r2, [pc, #80]	; (800395c <TIM_OC3_SetConfig+0xd0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d113      	bne.n	8003936 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800391c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00

08003960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	031b      	lsls	r3, r3, #12
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <TIM_OC4_SetConfig+0x98>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d109      	bne.n	80039d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	40012c00 	.word	0x40012c00

080039fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f023 0201 	bic.w	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 030a 	bic.w	r3, r3, #10
 8003a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f023 0210 	bic.w	r2, r3, #16
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	031b      	lsls	r3, r3, #12
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	621a      	str	r2, [r3, #32]
}
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b085      	sub	sp, #20
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f043 0307 	orr.w	r3, r3, #7
 8003ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	609a      	str	r2, [r3, #8]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr

08003aea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b087      	sub	sp, #28
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	021a      	lsls	r2, r3, #8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	609a      	str	r2, [r3, #8]
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 031f 	and.w	r3, r3, #31
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1a      	ldr	r2, [r3, #32]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e041      	b.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d009      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd4:	d004      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a10      	ldr	r2, [pc, #64]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10c      	bne.n	8003bfa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40000400 	.word	0x40000400

08003c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e042      	b.n	8003cdc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd ff04 	bl	8001a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2224      	movs	r2, #36	; 0x24
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fdc5 	bl	8004818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	; 0x28
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d16d      	bne.n	8003de0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_UART_Transmit+0x2c>
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e066      	b.n	8003de2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2221      	movs	r2, #33	; 0x21
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d22:	f7fe f883 	bl	8001e2c <HAL_GetTick>
 8003d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	88fa      	ldrh	r2, [r7, #6]
 8003d2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	88fa      	ldrh	r2, [r7, #6]
 8003d32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3c:	d108      	bne.n	8003d50 <HAL_UART_Transmit+0x6c>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d104      	bne.n	8003d50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	e003      	b.n	8003d58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d58:	e02a      	b.n	8003db0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	2180      	movs	r1, #128	; 0x80
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fb14 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e036      	b.n	8003de2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10b      	bne.n	8003d92 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e007      	b.n	8003da2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1cf      	bne.n	8003d5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2140      	movs	r1, #64	; 0x40
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fae4 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e006      	b.n	8003de2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	4613      	mov	r3, r2
 8003df6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d112      	bne.n	8003e2a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_UART_Receive_IT+0x26>
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e00b      	b.n	8003e2c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fb24 	bl	800446e <UART_Start_Receive_IT>
 8003e26:	4603      	mov	r3, r0
 8003e28:	e000      	b.n	8003e2c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
  }
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b0ba      	sub	sp, #232	; 0xe8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_UART_IRQHandler+0x66>
 8003e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fc01 	bl	800469a <UART_Receive_IT>
      return;
 8003e98:	e25b      	b.n	8004352 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80de 	beq.w	8004060 <HAL_UART_IRQHandler+0x22c>
 8003ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80d1 	beq.w	8004060 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xae>
 8003eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d005      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	f043 0201 	orr.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00b      	beq.n	8003f06 <HAL_UART_IRQHandler+0xd2>
 8003eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	f043 0202 	orr.w	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HAL_UART_IRQHandler+0xf6>
 8003f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	f043 0204 	orr.w	r2, r3, #4
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d011      	beq.n	8003f5a <HAL_UART_IRQHandler+0x126>
 8003f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f043 0208 	orr.w	r2, r3, #8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 81f2 	beq.w	8004348 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_UART_IRQHandler+0x14e>
 8003f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fb8c 	bl	800469a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf14      	ite	ne
 8003f90:	2301      	movne	r3, #1
 8003f92:	2300      	moveq	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <HAL_UART_IRQHandler+0x17a>
 8003fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d04f      	beq.n	800404e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa96 	bl	80044e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d041      	beq.n	8004046 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3314      	adds	r3, #20
 8003fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1d9      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d013      	beq.n	800403e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	4a7e      	ldr	r2, [pc, #504]	; (8004214 <HAL_UART_IRQHandler+0x3e0>)
 800401c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe f878 	bl	8002118 <HAL_DMA_Abort_IT>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004038:	4610      	mov	r0, r2
 800403a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	e00e      	b.n	800405c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f993 	bl	800436a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004044:	e00a      	b.n	800405c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f98f 	bl	800436a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	e006      	b.n	800405c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f98b 	bl	800436a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800405a:	e175      	b.n	8004348 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	bf00      	nop
    return;
 800405e:	e173      	b.n	8004348 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	2b01      	cmp	r3, #1
 8004066:	f040 814f 	bne.w	8004308 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8148 	beq.w	8004308 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8141 	beq.w	8004308 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80b6 	beq.w	8004218 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8145 	beq.w	800434c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ca:	429a      	cmp	r2, r3
 80040cc:	f080 813e 	bcs.w	800434c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b20      	cmp	r3, #32
 80040e0:	f000 8088 	beq.w	80041f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004102:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004110:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004114:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800411c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004128:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1d9      	bne.n	80040e4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3314      	adds	r3, #20
 8004150:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004154:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004158:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800415c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e1      	bne.n	8004130 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3314      	adds	r3, #20
 8004172:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800417c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800417e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004190:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004192:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004196:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800419e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e3      	bne.n	800416c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	330c      	adds	r3, #12
 80041b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c4:	f023 0310 	bic.w	r3, r3, #16
 80041c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80041d8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e3      	bne.n	80041b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fd ff57 	bl	80020a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004202:	b29b      	uxth	r3, r3
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	b29b      	uxth	r3, r3
 8004208:	4619      	mov	r1, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f8b6 	bl	800437c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004210:	e09c      	b.n	800434c <HAL_UART_IRQHandler+0x518>
 8004212:	bf00      	nop
 8004214:	080045a5 	.word	0x080045a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004220:	b29b      	uxth	r3, r3
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 808e 	beq.w	8004350 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004234:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8089 	beq.w	8004350 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800424e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004262:	647a      	str	r2, [r7, #68]	; 0x44
 8004264:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004268:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e3      	bne.n	800423e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3314      	adds	r3, #20
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	623b      	str	r3, [r7, #32]
   return(result);
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3314      	adds	r3, #20
 8004296:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800429a:	633a      	str	r2, [r7, #48]	; 0x30
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e3      	bne.n	8004276 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0310 	bic.w	r3, r3, #16
 80042d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042e0:	61fa      	str	r2, [r7, #28]
 80042e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	69b9      	ldr	r1, [r7, #24]
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	617b      	str	r3, [r7, #20]
   return(result);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e3      	bne.n	80042bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042fe:	4619      	mov	r1, r3
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f83b 	bl	800437c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004306:	e023      	b.n	8004350 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004310:	2b00      	cmp	r3, #0
 8004312:	d009      	beq.n	8004328 <HAL_UART_IRQHandler+0x4f4>
 8004314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f953 	bl	80045cc <UART_Transmit_IT>
    return;
 8004326:	e014      	b.n	8004352 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00e      	beq.n	8004352 <HAL_UART_IRQHandler+0x51e>
 8004334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f992 	bl	800466a <UART_EndTransmit_IT>
    return;
 8004346:	e004      	b.n	8004352 <HAL_UART_IRQHandler+0x51e>
    return;
 8004348:	bf00      	nop
 800434a:	e002      	b.n	8004352 <HAL_UART_IRQHandler+0x51e>
      return;
 800434c:	bf00      	nop
 800434e:	e000      	b.n	8004352 <HAL_UART_IRQHandler+0x51e>
      return;
 8004350:	bf00      	nop
  }
}
 8004352:	37e8      	adds	r7, #232	; 0xe8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr

0800436a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b090      	sub	sp, #64	; 0x40
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	4613      	mov	r3, r2
 80043a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a2:	e050      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	d04c      	beq.n	8004446 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80043b2:	f7fd fd3b 	bl	8001e2c <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043be:	429a      	cmp	r2, r3
 80043c0:	d241      	bcs.n	8004446 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	330c      	adds	r3, #12
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	330c      	adds	r3, #12
 80043e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043e2:	637a      	str	r2, [r7, #52]	; 0x34
 80043e4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e5      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3314      	adds	r3, #20
 80043fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	613b      	str	r3, [r7, #16]
   return(result);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	63bb      	str	r3, [r7, #56]	; 0x38
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3314      	adds	r3, #20
 8004414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004416:	623a      	str	r2, [r7, #32]
 8004418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	69f9      	ldr	r1, [r7, #28]
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	61bb      	str	r3, [r7, #24]
   return(result);
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e00f      	b.n	8004466 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4013      	ands	r3, r2
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	429a      	cmp	r2, r3
 8004454:	bf0c      	ite	eq
 8004456:	2301      	moveq	r3, #1
 8004458:	2300      	movne	r3, #0
 800445a:	b2db      	uxtb	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	429a      	cmp	r2, r3
 8004462:	d09f      	beq.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3740      	adds	r7, #64	; 0x40
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800446e:	b480      	push	{r7}
 8004470:	b085      	sub	sp, #20
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	4613      	mov	r3, r2
 800447a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2222      	movs	r2, #34	; 0x22
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0220 	orr.w	r2, r2, #32
 80044d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b095      	sub	sp, #84	; 0x54
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004508:	643a      	str	r2, [r7, #64]	; 0x40
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800450e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e5      	bne.n	80044e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3314      	adds	r3, #20
 8004522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	61fb      	str	r3, [r7, #28]
   return(result);
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	64bb      	str	r3, [r7, #72]	; 0x48
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800453c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800453e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e5      	bne.n	800451c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	2b01      	cmp	r3, #1
 8004556:	d119      	bne.n	800458c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	60bb      	str	r3, [r7, #8]
   return(result);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 0310 	bic.w	r3, r3, #16
 800456e:	647b      	str	r3, [r7, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004578:	61ba      	str	r2, [r7, #24]
 800457a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	6979      	ldr	r1, [r7, #20]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	613b      	str	r3, [r7, #16]
   return(result);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
}
 800459a:	bf00      	nop
 800459c:	3754      	adds	r7, #84	; 0x54
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff fed3 	bl	800436a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b21      	cmp	r3, #33	; 0x21
 80045de:	d13e      	bne.n	800465e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e8:	d114      	bne.n	8004614 <UART_Transmit_IT+0x48>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d110      	bne.n	8004614 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004606:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	1c9a      	adds	r2, r3, #2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	621a      	str	r2, [r3, #32]
 8004612:	e008      	b.n	8004626 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	1c59      	adds	r1, r3, #1
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6211      	str	r1, [r2, #32]
 800461e:	781a      	ldrb	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29b      	uxth	r3, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	4619      	mov	r1, r3
 8004634:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10f      	bne.n	800465a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004648:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004658:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	e000      	b.n	8004660 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
  }
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr

0800466a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004680:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff fe64 	bl	8004358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b08c      	sub	sp, #48	; 0x30
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b22      	cmp	r3, #34	; 0x22
 80046ac:	f040 80ae 	bne.w	800480c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b8:	d117      	bne.n	80046ea <UART_Receive_IT+0x50>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d113      	bne.n	80046ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d8:	b29a      	uxth	r2, r3
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	1c9a      	adds	r2, r3, #2
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
 80046e8:	e026      	b.n	8004738 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fc:	d007      	beq.n	800470e <UART_Receive_IT+0x74>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <UART_Receive_IT+0x82>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e008      	b.n	800472e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004728:	b2da      	uxtb	r2, r3
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29b      	uxth	r3, r3
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4619      	mov	r1, r3
 8004746:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004748:	2b00      	cmp	r3, #0
 800474a:	d15d      	bne.n	8004808 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0220 	bic.w	r2, r2, #32
 800475a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800476a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	2b01      	cmp	r3, #1
 8004790:	d135      	bne.n	80047fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	613b      	str	r3, [r7, #16]
   return(result);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f023 0310 	bic.w	r3, r3, #16
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b8:	623a      	str	r2, [r7, #32]
 80047ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	69f9      	ldr	r1, [r7, #28]
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e5      	bne.n	8004798 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d10a      	bne.n	80047f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff fdc0 	bl	800437c <HAL_UARTEx_RxEventCallback>
 80047fc:	e002      	b.n	8004804 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fc fe14 	bl	800142c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e002      	b.n	800480e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	e000      	b.n	800480e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800480c:	2302      	movs	r3, #2
  }
}
 800480e:	4618      	mov	r0, r3
 8004810:	3730      	adds	r7, #48	; 0x30
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004852:	f023 030c 	bic.w	r3, r3, #12
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	430b      	orrs	r3, r1
 800485e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a2c      	ldr	r2, [pc, #176]	; (800492c <UART_SetConfig+0x114>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d103      	bne.n	8004888 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004880:	f7fe fa64 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	e002      	b.n	800488e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004888:	f7fe fa4c 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 800488c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009a      	lsls	r2, r3, #2
 8004898:	441a      	add	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	4a22      	ldr	r2, [pc, #136]	; (8004930 <UART_SetConfig+0x118>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	0119      	lsls	r1, r3, #4
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009a      	lsls	r2, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048c4:	4b1a      	ldr	r3, [pc, #104]	; (8004930 <UART_SetConfig+0x118>)
 80048c6:	fba3 0302 	umull	r0, r3, r3, r2
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	2064      	movs	r0, #100	; 0x64
 80048ce:	fb00 f303 	mul.w	r3, r0, r3
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	3332      	adds	r3, #50	; 0x32
 80048d8:	4a15      	ldr	r2, [pc, #84]	; (8004930 <UART_SetConfig+0x118>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e4:	4419      	add	r1, r3
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	009a      	lsls	r2, r3, #2
 80048f0:	441a      	add	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <UART_SetConfig+0x118>)
 80048fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	2064      	movs	r0, #100	; 0x64
 8004906:	fb00 f303 	mul.w	r3, r0, r3
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	3332      	adds	r3, #50	; 0x32
 8004910:	4a07      	ldr	r2, [pc, #28]	; (8004930 <UART_SetConfig+0x118>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	f003 020f 	and.w	r2, r3, #15
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	440a      	add	r2, r1
 8004922:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40013800 	.word	0x40013800
 8004930:	51eb851f 	.word	0x51eb851f

08004934 <__cvt>:
 8004934:	2b00      	cmp	r3, #0
 8004936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800493a:	461f      	mov	r7, r3
 800493c:	bfbb      	ittet	lt
 800493e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004942:	461f      	movlt	r7, r3
 8004944:	2300      	movge	r3, #0
 8004946:	232d      	movlt	r3, #45	; 0x2d
 8004948:	b088      	sub	sp, #32
 800494a:	4614      	mov	r4, r2
 800494c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800494e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004950:	7013      	strb	r3, [r2, #0]
 8004952:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004954:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004958:	f023 0820 	bic.w	r8, r3, #32
 800495c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004960:	d005      	beq.n	800496e <__cvt+0x3a>
 8004962:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004966:	d100      	bne.n	800496a <__cvt+0x36>
 8004968:	3501      	adds	r5, #1
 800496a:	2302      	movs	r3, #2
 800496c:	e000      	b.n	8004970 <__cvt+0x3c>
 800496e:	2303      	movs	r3, #3
 8004970:	aa07      	add	r2, sp, #28
 8004972:	9204      	str	r2, [sp, #16]
 8004974:	aa06      	add	r2, sp, #24
 8004976:	e9cd a202 	strd	sl, r2, [sp, #8]
 800497a:	e9cd 3500 	strd	r3, r5, [sp]
 800497e:	4622      	mov	r2, r4
 8004980:	463b      	mov	r3, r7
 8004982:	f000 fe71 	bl	8005668 <_dtoa_r>
 8004986:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800498a:	4606      	mov	r6, r0
 800498c:	d102      	bne.n	8004994 <__cvt+0x60>
 800498e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004990:	07db      	lsls	r3, r3, #31
 8004992:	d522      	bpl.n	80049da <__cvt+0xa6>
 8004994:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004998:	eb06 0905 	add.w	r9, r6, r5
 800499c:	d110      	bne.n	80049c0 <__cvt+0x8c>
 800499e:	7833      	ldrb	r3, [r6, #0]
 80049a0:	2b30      	cmp	r3, #48	; 0x30
 80049a2:	d10a      	bne.n	80049ba <__cvt+0x86>
 80049a4:	2200      	movs	r2, #0
 80049a6:	2300      	movs	r3, #0
 80049a8:	4620      	mov	r0, r4
 80049aa:	4639      	mov	r1, r7
 80049ac:	f7fb fffc 	bl	80009a8 <__aeabi_dcmpeq>
 80049b0:	b918      	cbnz	r0, 80049ba <__cvt+0x86>
 80049b2:	f1c5 0501 	rsb	r5, r5, #1
 80049b6:	f8ca 5000 	str.w	r5, [sl]
 80049ba:	f8da 3000 	ldr.w	r3, [sl]
 80049be:	4499      	add	r9, r3
 80049c0:	2200      	movs	r2, #0
 80049c2:	2300      	movs	r3, #0
 80049c4:	4620      	mov	r0, r4
 80049c6:	4639      	mov	r1, r7
 80049c8:	f7fb ffee 	bl	80009a8 <__aeabi_dcmpeq>
 80049cc:	b108      	cbz	r0, 80049d2 <__cvt+0x9e>
 80049ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80049d2:	2230      	movs	r2, #48	; 0x30
 80049d4:	9b07      	ldr	r3, [sp, #28]
 80049d6:	454b      	cmp	r3, r9
 80049d8:	d307      	bcc.n	80049ea <__cvt+0xb6>
 80049da:	4630      	mov	r0, r6
 80049dc:	9b07      	ldr	r3, [sp, #28]
 80049de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80049e0:	1b9b      	subs	r3, r3, r6
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	b008      	add	sp, #32
 80049e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ea:	1c59      	adds	r1, r3, #1
 80049ec:	9107      	str	r1, [sp, #28]
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e7f0      	b.n	80049d4 <__cvt+0xa0>

080049f2 <__exponent>:
 80049f2:	4603      	mov	r3, r0
 80049f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049f6:	2900      	cmp	r1, #0
 80049f8:	f803 2b02 	strb.w	r2, [r3], #2
 80049fc:	bfb6      	itet	lt
 80049fe:	222d      	movlt	r2, #45	; 0x2d
 8004a00:	222b      	movge	r2, #43	; 0x2b
 8004a02:	4249      	neglt	r1, r1
 8004a04:	2909      	cmp	r1, #9
 8004a06:	7042      	strb	r2, [r0, #1]
 8004a08:	dd2a      	ble.n	8004a60 <__exponent+0x6e>
 8004a0a:	f10d 0207 	add.w	r2, sp, #7
 8004a0e:	4617      	mov	r7, r2
 8004a10:	260a      	movs	r6, #10
 8004a12:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a16:	4694      	mov	ip, r2
 8004a18:	fb06 1415 	mls	r4, r6, r5, r1
 8004a1c:	3430      	adds	r4, #48	; 0x30
 8004a1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004a22:	460c      	mov	r4, r1
 8004a24:	2c63      	cmp	r4, #99	; 0x63
 8004a26:	4629      	mov	r1, r5
 8004a28:	f102 32ff 	add.w	r2, r2, #4294967295
 8004a2c:	dcf1      	bgt.n	8004a12 <__exponent+0x20>
 8004a2e:	3130      	adds	r1, #48	; 0x30
 8004a30:	f1ac 0402 	sub.w	r4, ip, #2
 8004a34:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a38:	4622      	mov	r2, r4
 8004a3a:	1c41      	adds	r1, r0, #1
 8004a3c:	42ba      	cmp	r2, r7
 8004a3e:	d30a      	bcc.n	8004a56 <__exponent+0x64>
 8004a40:	f10d 0209 	add.w	r2, sp, #9
 8004a44:	eba2 020c 	sub.w	r2, r2, ip
 8004a48:	42bc      	cmp	r4, r7
 8004a4a:	bf88      	it	hi
 8004a4c:	2200      	movhi	r2, #0
 8004a4e:	4413      	add	r3, r2
 8004a50:	1a18      	subs	r0, r3, r0
 8004a52:	b003      	add	sp, #12
 8004a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a56:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a5e:	e7ed      	b.n	8004a3c <__exponent+0x4a>
 8004a60:	2330      	movs	r3, #48	; 0x30
 8004a62:	3130      	adds	r1, #48	; 0x30
 8004a64:	7083      	strb	r3, [r0, #2]
 8004a66:	70c1      	strb	r1, [r0, #3]
 8004a68:	1d03      	adds	r3, r0, #4
 8004a6a:	e7f1      	b.n	8004a50 <__exponent+0x5e>

08004a6c <_printf_float>:
 8004a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a70:	b091      	sub	sp, #68	; 0x44
 8004a72:	460c      	mov	r4, r1
 8004a74:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a78:	4616      	mov	r6, r2
 8004a7a:	461f      	mov	r7, r3
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	f000 fce5 	bl	800544c <_localeconv_r>
 8004a82:	6803      	ldr	r3, [r0, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	9309      	str	r3, [sp, #36]	; 0x24
 8004a88:	f7fb fb62 	bl	8000150 <strlen>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	930e      	str	r3, [sp, #56]	; 0x38
 8004a90:	f8d8 3000 	ldr.w	r3, [r8]
 8004a94:	900a      	str	r0, [sp, #40]	; 0x28
 8004a96:	3307      	adds	r3, #7
 8004a98:	f023 0307 	bic.w	r3, r3, #7
 8004a9c:	f103 0208 	add.w	r2, r3, #8
 8004aa0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004aa4:	f8d4 b000 	ldr.w	fp, [r4]
 8004aa8:	f8c8 2000 	str.w	r2, [r8]
 8004aac:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004ab0:	4652      	mov	r2, sl
 8004ab2:	4643      	mov	r3, r8
 8004ab4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ab8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	4650      	mov	r0, sl
 8004ac4:	4b9c      	ldr	r3, [pc, #624]	; (8004d38 <_printf_float+0x2cc>)
 8004ac6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ac8:	f7fb ffa0 	bl	8000a0c <__aeabi_dcmpun>
 8004acc:	bb70      	cbnz	r0, 8004b2c <_printf_float+0xc0>
 8004ace:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad2:	4650      	mov	r0, sl
 8004ad4:	4b98      	ldr	r3, [pc, #608]	; (8004d38 <_printf_float+0x2cc>)
 8004ad6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ad8:	f7fb ff7a 	bl	80009d0 <__aeabi_dcmple>
 8004adc:	bb30      	cbnz	r0, 8004b2c <_printf_float+0xc0>
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4650      	mov	r0, sl
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	f7fb ff69 	bl	80009bc <__aeabi_dcmplt>
 8004aea:	b110      	cbz	r0, 8004af2 <_printf_float+0x86>
 8004aec:	232d      	movs	r3, #45	; 0x2d
 8004aee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004af2:	4a92      	ldr	r2, [pc, #584]	; (8004d3c <_printf_float+0x2d0>)
 8004af4:	4b92      	ldr	r3, [pc, #584]	; (8004d40 <_printf_float+0x2d4>)
 8004af6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004afa:	bf94      	ite	ls
 8004afc:	4690      	movls	r8, r2
 8004afe:	4698      	movhi	r8, r3
 8004b00:	2303      	movs	r3, #3
 8004b02:	f04f 0a00 	mov.w	sl, #0
 8004b06:	6123      	str	r3, [r4, #16]
 8004b08:	f02b 0304 	bic.w	r3, fp, #4
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	4633      	mov	r3, r6
 8004b10:	4621      	mov	r1, r4
 8004b12:	4628      	mov	r0, r5
 8004b14:	9700      	str	r7, [sp, #0]
 8004b16:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b18:	f000 f9d6 	bl	8004ec8 <_printf_common>
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	f040 8090 	bne.w	8004c42 <_printf_float+0x1d6>
 8004b22:	f04f 30ff 	mov.w	r0, #4294967295
 8004b26:	b011      	add	sp, #68	; 0x44
 8004b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b2c:	4652      	mov	r2, sl
 8004b2e:	4643      	mov	r3, r8
 8004b30:	4650      	mov	r0, sl
 8004b32:	4641      	mov	r1, r8
 8004b34:	f7fb ff6a 	bl	8000a0c <__aeabi_dcmpun>
 8004b38:	b148      	cbz	r0, 8004b4e <_printf_float+0xe2>
 8004b3a:	f1b8 0f00 	cmp.w	r8, #0
 8004b3e:	bfb8      	it	lt
 8004b40:	232d      	movlt	r3, #45	; 0x2d
 8004b42:	4a80      	ldr	r2, [pc, #512]	; (8004d44 <_printf_float+0x2d8>)
 8004b44:	bfb8      	it	lt
 8004b46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b4a:	4b7f      	ldr	r3, [pc, #508]	; (8004d48 <_printf_float+0x2dc>)
 8004b4c:	e7d3      	b.n	8004af6 <_printf_float+0x8a>
 8004b4e:	6863      	ldr	r3, [r4, #4]
 8004b50:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	d142      	bne.n	8004bde <_printf_float+0x172>
 8004b58:	2306      	movs	r3, #6
 8004b5a:	6063      	str	r3, [r4, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	9206      	str	r2, [sp, #24]
 8004b60:	aa0e      	add	r2, sp, #56	; 0x38
 8004b62:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004b66:	aa0d      	add	r2, sp, #52	; 0x34
 8004b68:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004b6c:	9203      	str	r2, [sp, #12]
 8004b6e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b72:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	6863      	ldr	r3, [r4, #4]
 8004b7a:	4652      	mov	r2, sl
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	4628      	mov	r0, r5
 8004b80:	4643      	mov	r3, r8
 8004b82:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b84:	f7ff fed6 	bl	8004934 <__cvt>
 8004b88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b8a:	4680      	mov	r8, r0
 8004b8c:	2947      	cmp	r1, #71	; 0x47
 8004b8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b90:	d108      	bne.n	8004ba4 <_printf_float+0x138>
 8004b92:	1cc8      	adds	r0, r1, #3
 8004b94:	db02      	blt.n	8004b9c <_printf_float+0x130>
 8004b96:	6863      	ldr	r3, [r4, #4]
 8004b98:	4299      	cmp	r1, r3
 8004b9a:	dd40      	ble.n	8004c1e <_printf_float+0x1b2>
 8004b9c:	f1a9 0902 	sub.w	r9, r9, #2
 8004ba0:	fa5f f989 	uxtb.w	r9, r9
 8004ba4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ba8:	d81f      	bhi.n	8004bea <_printf_float+0x17e>
 8004baa:	464a      	mov	r2, r9
 8004bac:	3901      	subs	r1, #1
 8004bae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bb2:	910d      	str	r1, [sp, #52]	; 0x34
 8004bb4:	f7ff ff1d 	bl	80049f2 <__exponent>
 8004bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bba:	4682      	mov	sl, r0
 8004bbc:	1813      	adds	r3, r2, r0
 8004bbe:	2a01      	cmp	r2, #1
 8004bc0:	6123      	str	r3, [r4, #16]
 8004bc2:	dc02      	bgt.n	8004bca <_printf_float+0x15e>
 8004bc4:	6822      	ldr	r2, [r4, #0]
 8004bc6:	07d2      	lsls	r2, r2, #31
 8004bc8:	d501      	bpl.n	8004bce <_printf_float+0x162>
 8004bca:	3301      	adds	r3, #1
 8004bcc:	6123      	str	r3, [r4, #16]
 8004bce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d09b      	beq.n	8004b0e <_printf_float+0xa2>
 8004bd6:	232d      	movs	r3, #45	; 0x2d
 8004bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bdc:	e797      	b.n	8004b0e <_printf_float+0xa2>
 8004bde:	2947      	cmp	r1, #71	; 0x47
 8004be0:	d1bc      	bne.n	8004b5c <_printf_float+0xf0>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1ba      	bne.n	8004b5c <_printf_float+0xf0>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e7b7      	b.n	8004b5a <_printf_float+0xee>
 8004bea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004bee:	d118      	bne.n	8004c22 <_printf_float+0x1b6>
 8004bf0:	2900      	cmp	r1, #0
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	dd0b      	ble.n	8004c0e <_printf_float+0x1a2>
 8004bf6:	6121      	str	r1, [r4, #16]
 8004bf8:	b913      	cbnz	r3, 8004c00 <_printf_float+0x194>
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	07d0      	lsls	r0, r2, #31
 8004bfe:	d502      	bpl.n	8004c06 <_printf_float+0x19a>
 8004c00:	3301      	adds	r3, #1
 8004c02:	440b      	add	r3, r1
 8004c04:	6123      	str	r3, [r4, #16]
 8004c06:	f04f 0a00 	mov.w	sl, #0
 8004c0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c0c:	e7df      	b.n	8004bce <_printf_float+0x162>
 8004c0e:	b913      	cbnz	r3, 8004c16 <_printf_float+0x1aa>
 8004c10:	6822      	ldr	r2, [r4, #0]
 8004c12:	07d2      	lsls	r2, r2, #31
 8004c14:	d501      	bpl.n	8004c1a <_printf_float+0x1ae>
 8004c16:	3302      	adds	r3, #2
 8004c18:	e7f4      	b.n	8004c04 <_printf_float+0x198>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e7f2      	b.n	8004c04 <_printf_float+0x198>
 8004c1e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c24:	4299      	cmp	r1, r3
 8004c26:	db05      	blt.n	8004c34 <_printf_float+0x1c8>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	6121      	str	r1, [r4, #16]
 8004c2c:	07d8      	lsls	r0, r3, #31
 8004c2e:	d5ea      	bpl.n	8004c06 <_printf_float+0x19a>
 8004c30:	1c4b      	adds	r3, r1, #1
 8004c32:	e7e7      	b.n	8004c04 <_printf_float+0x198>
 8004c34:	2900      	cmp	r1, #0
 8004c36:	bfcc      	ite	gt
 8004c38:	2201      	movgt	r2, #1
 8004c3a:	f1c1 0202 	rsble	r2, r1, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	e7e0      	b.n	8004c04 <_printf_float+0x198>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	055a      	lsls	r2, r3, #21
 8004c46:	d407      	bmi.n	8004c58 <_printf_float+0x1ec>
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	4642      	mov	r2, r8
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	d12b      	bne.n	8004cae <_printf_float+0x242>
 8004c56:	e764      	b.n	8004b22 <_printf_float+0xb6>
 8004c58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c5c:	f240 80dd 	bls.w	8004e1a <_printf_float+0x3ae>
 8004c60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c64:	2200      	movs	r2, #0
 8004c66:	2300      	movs	r3, #0
 8004c68:	f7fb fe9e 	bl	80009a8 <__aeabi_dcmpeq>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	d033      	beq.n	8004cd8 <_printf_float+0x26c>
 8004c70:	2301      	movs	r3, #1
 8004c72:	4631      	mov	r1, r6
 8004c74:	4628      	mov	r0, r5
 8004c76:	4a35      	ldr	r2, [pc, #212]	; (8004d4c <_printf_float+0x2e0>)
 8004c78:	47b8      	blx	r7
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	f43f af51 	beq.w	8004b22 <_printf_float+0xb6>
 8004c80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c84:	429a      	cmp	r2, r3
 8004c86:	db02      	blt.n	8004c8e <_printf_float+0x222>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	07d8      	lsls	r0, r3, #31
 8004c8c:	d50f      	bpl.n	8004cae <_printf_float+0x242>
 8004c8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c92:	4631      	mov	r1, r6
 8004c94:	4628      	mov	r0, r5
 8004c96:	47b8      	blx	r7
 8004c98:	3001      	adds	r0, #1
 8004c9a:	f43f af42 	beq.w	8004b22 <_printf_float+0xb6>
 8004c9e:	f04f 0800 	mov.w	r8, #0
 8004ca2:	f104 091a 	add.w	r9, r4, #26
 8004ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	4543      	cmp	r3, r8
 8004cac:	dc09      	bgt.n	8004cc2 <_printf_float+0x256>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	079b      	lsls	r3, r3, #30
 8004cb2:	f100 8104 	bmi.w	8004ebe <_printf_float+0x452>
 8004cb6:	68e0      	ldr	r0, [r4, #12]
 8004cb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cba:	4298      	cmp	r0, r3
 8004cbc:	bfb8      	it	lt
 8004cbe:	4618      	movlt	r0, r3
 8004cc0:	e731      	b.n	8004b26 <_printf_float+0xba>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	464a      	mov	r2, r9
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4628      	mov	r0, r5
 8004cca:	47b8      	blx	r7
 8004ccc:	3001      	adds	r0, #1
 8004cce:	f43f af28 	beq.w	8004b22 <_printf_float+0xb6>
 8004cd2:	f108 0801 	add.w	r8, r8, #1
 8004cd6:	e7e6      	b.n	8004ca6 <_printf_float+0x23a>
 8004cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	dc38      	bgt.n	8004d50 <_printf_float+0x2e4>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	4a19      	ldr	r2, [pc, #100]	; (8004d4c <_printf_float+0x2e0>)
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	f43f af1a 	beq.w	8004b22 <_printf_float+0xb6>
 8004cee:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	d102      	bne.n	8004cfc <_printf_float+0x290>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	07d9      	lsls	r1, r3, #31
 8004cfa:	d5d8      	bpl.n	8004cae <_printf_float+0x242>
 8004cfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d00:	4631      	mov	r1, r6
 8004d02:	4628      	mov	r0, r5
 8004d04:	47b8      	blx	r7
 8004d06:	3001      	adds	r0, #1
 8004d08:	f43f af0b 	beq.w	8004b22 <_printf_float+0xb6>
 8004d0c:	f04f 0900 	mov.w	r9, #0
 8004d10:	f104 0a1a 	add.w	sl, r4, #26
 8004d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d16:	425b      	negs	r3, r3
 8004d18:	454b      	cmp	r3, r9
 8004d1a:	dc01      	bgt.n	8004d20 <_printf_float+0x2b4>
 8004d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d1e:	e794      	b.n	8004c4a <_printf_float+0x1de>
 8004d20:	2301      	movs	r3, #1
 8004d22:	4652      	mov	r2, sl
 8004d24:	4631      	mov	r1, r6
 8004d26:	4628      	mov	r0, r5
 8004d28:	47b8      	blx	r7
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	f43f aef9 	beq.w	8004b22 <_printf_float+0xb6>
 8004d30:	f109 0901 	add.w	r9, r9, #1
 8004d34:	e7ee      	b.n	8004d14 <_printf_float+0x2a8>
 8004d36:	bf00      	nop
 8004d38:	7fefffff 	.word	0x7fefffff
 8004d3c:	0800765e 	.word	0x0800765e
 8004d40:	08007662 	.word	0x08007662
 8004d44:	08007666 	.word	0x08007666
 8004d48:	0800766a 	.word	0x0800766a
 8004d4c:	0800766e 	.word	0x0800766e
 8004d50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d54:	429a      	cmp	r2, r3
 8004d56:	bfa8      	it	ge
 8004d58:	461a      	movge	r2, r3
 8004d5a:	2a00      	cmp	r2, #0
 8004d5c:	4691      	mov	r9, r2
 8004d5e:	dc37      	bgt.n	8004dd0 <_printf_float+0x364>
 8004d60:	f04f 0b00 	mov.w	fp, #0
 8004d64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d68:	f104 021a 	add.w	r2, r4, #26
 8004d6c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d70:	ebaa 0309 	sub.w	r3, sl, r9
 8004d74:	455b      	cmp	r3, fp
 8004d76:	dc33      	bgt.n	8004de0 <_printf_float+0x374>
 8004d78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	db3b      	blt.n	8004df8 <_printf_float+0x38c>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	07da      	lsls	r2, r3, #31
 8004d84:	d438      	bmi.n	8004df8 <_printf_float+0x38c>
 8004d86:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d8a:	eba2 0903 	sub.w	r9, r2, r3
 8004d8e:	eba2 020a 	sub.w	r2, r2, sl
 8004d92:	4591      	cmp	r9, r2
 8004d94:	bfa8      	it	ge
 8004d96:	4691      	movge	r9, r2
 8004d98:	f1b9 0f00 	cmp.w	r9, #0
 8004d9c:	dc34      	bgt.n	8004e08 <_printf_float+0x39c>
 8004d9e:	f04f 0800 	mov.w	r8, #0
 8004da2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004da6:	f104 0a1a 	add.w	sl, r4, #26
 8004daa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	eba3 0309 	sub.w	r3, r3, r9
 8004db4:	4543      	cmp	r3, r8
 8004db6:	f77f af7a 	ble.w	8004cae <_printf_float+0x242>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4652      	mov	r2, sl
 8004dbe:	4631      	mov	r1, r6
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	47b8      	blx	r7
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	f43f aeac 	beq.w	8004b22 <_printf_float+0xb6>
 8004dca:	f108 0801 	add.w	r8, r8, #1
 8004dce:	e7ec      	b.n	8004daa <_printf_float+0x33e>
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d1c0      	bne.n	8004d60 <_printf_float+0x2f4>
 8004dde:	e6a0      	b.n	8004b22 <_printf_float+0xb6>
 8004de0:	2301      	movs	r3, #1
 8004de2:	4631      	mov	r1, r6
 8004de4:	4628      	mov	r0, r5
 8004de6:	920b      	str	r2, [sp, #44]	; 0x2c
 8004de8:	47b8      	blx	r7
 8004dea:	3001      	adds	r0, #1
 8004dec:	f43f ae99 	beq.w	8004b22 <_printf_float+0xb6>
 8004df0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004df2:	f10b 0b01 	add.w	fp, fp, #1
 8004df6:	e7b9      	b.n	8004d6c <_printf_float+0x300>
 8004df8:	4631      	mov	r1, r6
 8004dfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dfe:	4628      	mov	r0, r5
 8004e00:	47b8      	blx	r7
 8004e02:	3001      	adds	r0, #1
 8004e04:	d1bf      	bne.n	8004d86 <_printf_float+0x31a>
 8004e06:	e68c      	b.n	8004b22 <_printf_float+0xb6>
 8004e08:	464b      	mov	r3, r9
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	eb08 020a 	add.w	r2, r8, sl
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	d1c2      	bne.n	8004d9e <_printf_float+0x332>
 8004e18:	e683      	b.n	8004b22 <_printf_float+0xb6>
 8004e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e1c:	2a01      	cmp	r2, #1
 8004e1e:	dc01      	bgt.n	8004e24 <_printf_float+0x3b8>
 8004e20:	07db      	lsls	r3, r3, #31
 8004e22:	d539      	bpl.n	8004e98 <_printf_float+0x42c>
 8004e24:	2301      	movs	r3, #1
 8004e26:	4642      	mov	r2, r8
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f ae77 	beq.w	8004b22 <_printf_float+0xb6>
 8004e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e38:	4631      	mov	r1, r6
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b8      	blx	r7
 8004e3e:	3001      	adds	r0, #1
 8004e40:	f43f ae6f 	beq.w	8004b22 <_printf_float+0xb6>
 8004e44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004e50:	f7fb fdaa 	bl	80009a8 <__aeabi_dcmpeq>
 8004e54:	b9d8      	cbnz	r0, 8004e8e <_printf_float+0x422>
 8004e56:	f109 33ff 	add.w	r3, r9, #4294967295
 8004e5a:	f108 0201 	add.w	r2, r8, #1
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4628      	mov	r0, r5
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	d10e      	bne.n	8004e86 <_printf_float+0x41a>
 8004e68:	e65b      	b.n	8004b22 <_printf_float+0xb6>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	464a      	mov	r2, r9
 8004e6e:	4631      	mov	r1, r6
 8004e70:	4628      	mov	r0, r5
 8004e72:	47b8      	blx	r7
 8004e74:	3001      	adds	r0, #1
 8004e76:	f43f ae54 	beq.w	8004b22 <_printf_float+0xb6>
 8004e7a:	f108 0801 	add.w	r8, r8, #1
 8004e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e80:	3b01      	subs	r3, #1
 8004e82:	4543      	cmp	r3, r8
 8004e84:	dcf1      	bgt.n	8004e6a <_printf_float+0x3fe>
 8004e86:	4653      	mov	r3, sl
 8004e88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e8c:	e6de      	b.n	8004c4c <_printf_float+0x1e0>
 8004e8e:	f04f 0800 	mov.w	r8, #0
 8004e92:	f104 091a 	add.w	r9, r4, #26
 8004e96:	e7f2      	b.n	8004e7e <_printf_float+0x412>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	4642      	mov	r2, r8
 8004e9c:	e7df      	b.n	8004e5e <_printf_float+0x3f2>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	464a      	mov	r2, r9
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f43f ae3a 	beq.w	8004b22 <_printf_float+0xb6>
 8004eae:	f108 0801 	add.w	r8, r8, #1
 8004eb2:	68e3      	ldr	r3, [r4, #12]
 8004eb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004eb6:	1a5b      	subs	r3, r3, r1
 8004eb8:	4543      	cmp	r3, r8
 8004eba:	dcf0      	bgt.n	8004e9e <_printf_float+0x432>
 8004ebc:	e6fb      	b.n	8004cb6 <_printf_float+0x24a>
 8004ebe:	f04f 0800 	mov.w	r8, #0
 8004ec2:	f104 0919 	add.w	r9, r4, #25
 8004ec6:	e7f4      	b.n	8004eb2 <_printf_float+0x446>

08004ec8 <_printf_common>:
 8004ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ecc:	4616      	mov	r6, r2
 8004ece:	4699      	mov	r9, r3
 8004ed0:	688a      	ldr	r2, [r1, #8]
 8004ed2:	690b      	ldr	r3, [r1, #16]
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	bfb8      	it	lt
 8004eda:	4613      	movlt	r3, r2
 8004edc:	6033      	str	r3, [r6, #0]
 8004ede:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ee8:	b10a      	cbz	r2, 8004eee <_printf_common+0x26>
 8004eea:	3301      	adds	r3, #1
 8004eec:	6033      	str	r3, [r6, #0]
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	0699      	lsls	r1, r3, #26
 8004ef2:	bf42      	ittt	mi
 8004ef4:	6833      	ldrmi	r3, [r6, #0]
 8004ef6:	3302      	addmi	r3, #2
 8004ef8:	6033      	strmi	r3, [r6, #0]
 8004efa:	6825      	ldr	r5, [r4, #0]
 8004efc:	f015 0506 	ands.w	r5, r5, #6
 8004f00:	d106      	bne.n	8004f10 <_printf_common+0x48>
 8004f02:	f104 0a19 	add.w	sl, r4, #25
 8004f06:	68e3      	ldr	r3, [r4, #12]
 8004f08:	6832      	ldr	r2, [r6, #0]
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	42ab      	cmp	r3, r5
 8004f0e:	dc2b      	bgt.n	8004f68 <_printf_common+0xa0>
 8004f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f14:	1e13      	subs	r3, r2, #0
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	bf18      	it	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	0692      	lsls	r2, r2, #26
 8004f1e:	d430      	bmi.n	8004f82 <_printf_common+0xba>
 8004f20:	4649      	mov	r1, r9
 8004f22:	4638      	mov	r0, r7
 8004f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f28:	47c0      	blx	r8
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d023      	beq.n	8004f76 <_printf_common+0xae>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	6922      	ldr	r2, [r4, #16]
 8004f32:	f003 0306 	and.w	r3, r3, #6
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	bf14      	ite	ne
 8004f3a:	2500      	movne	r5, #0
 8004f3c:	6833      	ldreq	r3, [r6, #0]
 8004f3e:	f04f 0600 	mov.w	r6, #0
 8004f42:	bf08      	it	eq
 8004f44:	68e5      	ldreq	r5, [r4, #12]
 8004f46:	f104 041a 	add.w	r4, r4, #26
 8004f4a:	bf08      	it	eq
 8004f4c:	1aed      	subeq	r5, r5, r3
 8004f4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f52:	bf08      	it	eq
 8004f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	bfc4      	itt	gt
 8004f5c:	1a9b      	subgt	r3, r3, r2
 8004f5e:	18ed      	addgt	r5, r5, r3
 8004f60:	42b5      	cmp	r5, r6
 8004f62:	d11a      	bne.n	8004f9a <_printf_common+0xd2>
 8004f64:	2000      	movs	r0, #0
 8004f66:	e008      	b.n	8004f7a <_printf_common+0xb2>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	4652      	mov	r2, sl
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	4638      	mov	r0, r7
 8004f70:	47c0      	blx	r8
 8004f72:	3001      	adds	r0, #1
 8004f74:	d103      	bne.n	8004f7e <_printf_common+0xb6>
 8004f76:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7e:	3501      	adds	r5, #1
 8004f80:	e7c1      	b.n	8004f06 <_printf_common+0x3e>
 8004f82:	2030      	movs	r0, #48	; 0x30
 8004f84:	18e1      	adds	r1, r4, r3
 8004f86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f90:	4422      	add	r2, r4
 8004f92:	3302      	adds	r3, #2
 8004f94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f98:	e7c2      	b.n	8004f20 <_printf_common+0x58>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	47c0      	blx	r8
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d0e6      	beq.n	8004f76 <_printf_common+0xae>
 8004fa8:	3601      	adds	r6, #1
 8004faa:	e7d9      	b.n	8004f60 <_printf_common+0x98>

08004fac <_printf_i>:
 8004fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb0:	7e0f      	ldrb	r7, [r1, #24]
 8004fb2:	4691      	mov	r9, r2
 8004fb4:	2f78      	cmp	r7, #120	; 0x78
 8004fb6:	4680      	mov	r8, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	469a      	mov	sl, r3
 8004fbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fc2:	d807      	bhi.n	8004fd4 <_printf_i+0x28>
 8004fc4:	2f62      	cmp	r7, #98	; 0x62
 8004fc6:	d80a      	bhi.n	8004fde <_printf_i+0x32>
 8004fc8:	2f00      	cmp	r7, #0
 8004fca:	f000 80d5 	beq.w	8005178 <_printf_i+0x1cc>
 8004fce:	2f58      	cmp	r7, #88	; 0x58
 8004fd0:	f000 80c1 	beq.w	8005156 <_printf_i+0x1aa>
 8004fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fdc:	e03a      	b.n	8005054 <_printf_i+0xa8>
 8004fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fe2:	2b15      	cmp	r3, #21
 8004fe4:	d8f6      	bhi.n	8004fd4 <_printf_i+0x28>
 8004fe6:	a101      	add	r1, pc, #4	; (adr r1, 8004fec <_printf_i+0x40>)
 8004fe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fec:	08005045 	.word	0x08005045
 8004ff0:	08005059 	.word	0x08005059
 8004ff4:	08004fd5 	.word	0x08004fd5
 8004ff8:	08004fd5 	.word	0x08004fd5
 8004ffc:	08004fd5 	.word	0x08004fd5
 8005000:	08004fd5 	.word	0x08004fd5
 8005004:	08005059 	.word	0x08005059
 8005008:	08004fd5 	.word	0x08004fd5
 800500c:	08004fd5 	.word	0x08004fd5
 8005010:	08004fd5 	.word	0x08004fd5
 8005014:	08004fd5 	.word	0x08004fd5
 8005018:	0800515f 	.word	0x0800515f
 800501c:	08005085 	.word	0x08005085
 8005020:	08005119 	.word	0x08005119
 8005024:	08004fd5 	.word	0x08004fd5
 8005028:	08004fd5 	.word	0x08004fd5
 800502c:	08005181 	.word	0x08005181
 8005030:	08004fd5 	.word	0x08004fd5
 8005034:	08005085 	.word	0x08005085
 8005038:	08004fd5 	.word	0x08004fd5
 800503c:	08004fd5 	.word	0x08004fd5
 8005040:	08005121 	.word	0x08005121
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	1d1a      	adds	r2, r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	602a      	str	r2, [r5, #0]
 800504c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005054:	2301      	movs	r3, #1
 8005056:	e0a0      	b.n	800519a <_printf_i+0x1ee>
 8005058:	6820      	ldr	r0, [r4, #0]
 800505a:	682b      	ldr	r3, [r5, #0]
 800505c:	0607      	lsls	r7, r0, #24
 800505e:	f103 0104 	add.w	r1, r3, #4
 8005062:	6029      	str	r1, [r5, #0]
 8005064:	d501      	bpl.n	800506a <_printf_i+0xbe>
 8005066:	681e      	ldr	r6, [r3, #0]
 8005068:	e003      	b.n	8005072 <_printf_i+0xc6>
 800506a:	0646      	lsls	r6, r0, #25
 800506c:	d5fb      	bpl.n	8005066 <_printf_i+0xba>
 800506e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005072:	2e00      	cmp	r6, #0
 8005074:	da03      	bge.n	800507e <_printf_i+0xd2>
 8005076:	232d      	movs	r3, #45	; 0x2d
 8005078:	4276      	negs	r6, r6
 800507a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800507e:	230a      	movs	r3, #10
 8005080:	4859      	ldr	r0, [pc, #356]	; (80051e8 <_printf_i+0x23c>)
 8005082:	e012      	b.n	80050aa <_printf_i+0xfe>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	6820      	ldr	r0, [r4, #0]
 8005088:	1d19      	adds	r1, r3, #4
 800508a:	6029      	str	r1, [r5, #0]
 800508c:	0605      	lsls	r5, r0, #24
 800508e:	d501      	bpl.n	8005094 <_printf_i+0xe8>
 8005090:	681e      	ldr	r6, [r3, #0]
 8005092:	e002      	b.n	800509a <_printf_i+0xee>
 8005094:	0641      	lsls	r1, r0, #25
 8005096:	d5fb      	bpl.n	8005090 <_printf_i+0xe4>
 8005098:	881e      	ldrh	r6, [r3, #0]
 800509a:	2f6f      	cmp	r7, #111	; 0x6f
 800509c:	bf0c      	ite	eq
 800509e:	2308      	moveq	r3, #8
 80050a0:	230a      	movne	r3, #10
 80050a2:	4851      	ldr	r0, [pc, #324]	; (80051e8 <_printf_i+0x23c>)
 80050a4:	2100      	movs	r1, #0
 80050a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050aa:	6865      	ldr	r5, [r4, #4]
 80050ac:	2d00      	cmp	r5, #0
 80050ae:	bfa8      	it	ge
 80050b0:	6821      	ldrge	r1, [r4, #0]
 80050b2:	60a5      	str	r5, [r4, #8]
 80050b4:	bfa4      	itt	ge
 80050b6:	f021 0104 	bicge.w	r1, r1, #4
 80050ba:	6021      	strge	r1, [r4, #0]
 80050bc:	b90e      	cbnz	r6, 80050c2 <_printf_i+0x116>
 80050be:	2d00      	cmp	r5, #0
 80050c0:	d04b      	beq.n	800515a <_printf_i+0x1ae>
 80050c2:	4615      	mov	r5, r2
 80050c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80050c8:	fb03 6711 	mls	r7, r3, r1, r6
 80050cc:	5dc7      	ldrb	r7, [r0, r7]
 80050ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050d2:	4637      	mov	r7, r6
 80050d4:	42bb      	cmp	r3, r7
 80050d6:	460e      	mov	r6, r1
 80050d8:	d9f4      	bls.n	80050c4 <_printf_i+0x118>
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d10b      	bne.n	80050f6 <_printf_i+0x14a>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	07de      	lsls	r6, r3, #31
 80050e2:	d508      	bpl.n	80050f6 <_printf_i+0x14a>
 80050e4:	6923      	ldr	r3, [r4, #16]
 80050e6:	6861      	ldr	r1, [r4, #4]
 80050e8:	4299      	cmp	r1, r3
 80050ea:	bfde      	ittt	le
 80050ec:	2330      	movle	r3, #48	; 0x30
 80050ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050f6:	1b52      	subs	r2, r2, r5
 80050f8:	6122      	str	r2, [r4, #16]
 80050fa:	464b      	mov	r3, r9
 80050fc:	4621      	mov	r1, r4
 80050fe:	4640      	mov	r0, r8
 8005100:	f8cd a000 	str.w	sl, [sp]
 8005104:	aa03      	add	r2, sp, #12
 8005106:	f7ff fedf 	bl	8004ec8 <_printf_common>
 800510a:	3001      	adds	r0, #1
 800510c:	d14a      	bne.n	80051a4 <_printf_i+0x1f8>
 800510e:	f04f 30ff 	mov.w	r0, #4294967295
 8005112:	b004      	add	sp, #16
 8005114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	f043 0320 	orr.w	r3, r3, #32
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	2778      	movs	r7, #120	; 0x78
 8005122:	4832      	ldr	r0, [pc, #200]	; (80051ec <_printf_i+0x240>)
 8005124:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	6829      	ldr	r1, [r5, #0]
 800512c:	061f      	lsls	r7, r3, #24
 800512e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005132:	d402      	bmi.n	800513a <_printf_i+0x18e>
 8005134:	065f      	lsls	r7, r3, #25
 8005136:	bf48      	it	mi
 8005138:	b2b6      	uxthmi	r6, r6
 800513a:	07df      	lsls	r7, r3, #31
 800513c:	bf48      	it	mi
 800513e:	f043 0320 	orrmi.w	r3, r3, #32
 8005142:	6029      	str	r1, [r5, #0]
 8005144:	bf48      	it	mi
 8005146:	6023      	strmi	r3, [r4, #0]
 8005148:	b91e      	cbnz	r6, 8005152 <_printf_i+0x1a6>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	f023 0320 	bic.w	r3, r3, #32
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	2310      	movs	r3, #16
 8005154:	e7a6      	b.n	80050a4 <_printf_i+0xf8>
 8005156:	4824      	ldr	r0, [pc, #144]	; (80051e8 <_printf_i+0x23c>)
 8005158:	e7e4      	b.n	8005124 <_printf_i+0x178>
 800515a:	4615      	mov	r5, r2
 800515c:	e7bd      	b.n	80050da <_printf_i+0x12e>
 800515e:	682b      	ldr	r3, [r5, #0]
 8005160:	6826      	ldr	r6, [r4, #0]
 8005162:	1d18      	adds	r0, r3, #4
 8005164:	6961      	ldr	r1, [r4, #20]
 8005166:	6028      	str	r0, [r5, #0]
 8005168:	0635      	lsls	r5, r6, #24
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	d501      	bpl.n	8005172 <_printf_i+0x1c6>
 800516e:	6019      	str	r1, [r3, #0]
 8005170:	e002      	b.n	8005178 <_printf_i+0x1cc>
 8005172:	0670      	lsls	r0, r6, #25
 8005174:	d5fb      	bpl.n	800516e <_printf_i+0x1c2>
 8005176:	8019      	strh	r1, [r3, #0]
 8005178:	2300      	movs	r3, #0
 800517a:	4615      	mov	r5, r2
 800517c:	6123      	str	r3, [r4, #16]
 800517e:	e7bc      	b.n	80050fa <_printf_i+0x14e>
 8005180:	682b      	ldr	r3, [r5, #0]
 8005182:	2100      	movs	r1, #0
 8005184:	1d1a      	adds	r2, r3, #4
 8005186:	602a      	str	r2, [r5, #0]
 8005188:	681d      	ldr	r5, [r3, #0]
 800518a:	6862      	ldr	r2, [r4, #4]
 800518c:	4628      	mov	r0, r5
 800518e:	f000 f9d4 	bl	800553a <memchr>
 8005192:	b108      	cbz	r0, 8005198 <_printf_i+0x1ec>
 8005194:	1b40      	subs	r0, r0, r5
 8005196:	6060      	str	r0, [r4, #4]
 8005198:	6863      	ldr	r3, [r4, #4]
 800519a:	6123      	str	r3, [r4, #16]
 800519c:	2300      	movs	r3, #0
 800519e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a2:	e7aa      	b.n	80050fa <_printf_i+0x14e>
 80051a4:	462a      	mov	r2, r5
 80051a6:	4649      	mov	r1, r9
 80051a8:	4640      	mov	r0, r8
 80051aa:	6923      	ldr	r3, [r4, #16]
 80051ac:	47d0      	blx	sl
 80051ae:	3001      	adds	r0, #1
 80051b0:	d0ad      	beq.n	800510e <_printf_i+0x162>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	079b      	lsls	r3, r3, #30
 80051b6:	d413      	bmi.n	80051e0 <_printf_i+0x234>
 80051b8:	68e0      	ldr	r0, [r4, #12]
 80051ba:	9b03      	ldr	r3, [sp, #12]
 80051bc:	4298      	cmp	r0, r3
 80051be:	bfb8      	it	lt
 80051c0:	4618      	movlt	r0, r3
 80051c2:	e7a6      	b.n	8005112 <_printf_i+0x166>
 80051c4:	2301      	movs	r3, #1
 80051c6:	4632      	mov	r2, r6
 80051c8:	4649      	mov	r1, r9
 80051ca:	4640      	mov	r0, r8
 80051cc:	47d0      	blx	sl
 80051ce:	3001      	adds	r0, #1
 80051d0:	d09d      	beq.n	800510e <_printf_i+0x162>
 80051d2:	3501      	adds	r5, #1
 80051d4:	68e3      	ldr	r3, [r4, #12]
 80051d6:	9903      	ldr	r1, [sp, #12]
 80051d8:	1a5b      	subs	r3, r3, r1
 80051da:	42ab      	cmp	r3, r5
 80051dc:	dcf2      	bgt.n	80051c4 <_printf_i+0x218>
 80051de:	e7eb      	b.n	80051b8 <_printf_i+0x20c>
 80051e0:	2500      	movs	r5, #0
 80051e2:	f104 0619 	add.w	r6, r4, #25
 80051e6:	e7f5      	b.n	80051d4 <_printf_i+0x228>
 80051e8:	08007670 	.word	0x08007670
 80051ec:	08007681 	.word	0x08007681

080051f0 <std>:
 80051f0:	2300      	movs	r3, #0
 80051f2:	b510      	push	{r4, lr}
 80051f4:	4604      	mov	r4, r0
 80051f6:	e9c0 3300 	strd	r3, r3, [r0]
 80051fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051fe:	6083      	str	r3, [r0, #8]
 8005200:	8181      	strh	r1, [r0, #12]
 8005202:	6643      	str	r3, [r0, #100]	; 0x64
 8005204:	81c2      	strh	r2, [r0, #14]
 8005206:	6183      	str	r3, [r0, #24]
 8005208:	4619      	mov	r1, r3
 800520a:	2208      	movs	r2, #8
 800520c:	305c      	adds	r0, #92	; 0x5c
 800520e:	f000 f914 	bl	800543a <memset>
 8005212:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <std+0x58>)
 8005214:	6224      	str	r4, [r4, #32]
 8005216:	6263      	str	r3, [r4, #36]	; 0x24
 8005218:	4b0c      	ldr	r3, [pc, #48]	; (800524c <std+0x5c>)
 800521a:	62a3      	str	r3, [r4, #40]	; 0x28
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <std+0x60>)
 800521e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <std+0x64>)
 8005222:	6323      	str	r3, [r4, #48]	; 0x30
 8005224:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <std+0x68>)
 8005226:	429c      	cmp	r4, r3
 8005228:	d006      	beq.n	8005238 <std+0x48>
 800522a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800522e:	4294      	cmp	r4, r2
 8005230:	d002      	beq.n	8005238 <std+0x48>
 8005232:	33d0      	adds	r3, #208	; 0xd0
 8005234:	429c      	cmp	r4, r3
 8005236:	d105      	bne.n	8005244 <std+0x54>
 8005238:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800523c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005240:	f000 b978 	b.w	8005534 <__retarget_lock_init_recursive>
 8005244:	bd10      	pop	{r4, pc}
 8005246:	bf00      	nop
 8005248:	080053b5 	.word	0x080053b5
 800524c:	080053d7 	.word	0x080053d7
 8005250:	0800540f 	.word	0x0800540f
 8005254:	08005433 	.word	0x08005433
 8005258:	2000036c 	.word	0x2000036c

0800525c <stdio_exit_handler>:
 800525c:	4a02      	ldr	r2, [pc, #8]	; (8005268 <stdio_exit_handler+0xc>)
 800525e:	4903      	ldr	r1, [pc, #12]	; (800526c <stdio_exit_handler+0x10>)
 8005260:	4803      	ldr	r0, [pc, #12]	; (8005270 <stdio_exit_handler+0x14>)
 8005262:	f000 b869 	b.w	8005338 <_fwalk_sglue>
 8005266:	bf00      	nop
 8005268:	20000010 	.word	0x20000010
 800526c:	08006ecd 	.word	0x08006ecd
 8005270:	2000001c 	.word	0x2000001c

08005274 <cleanup_stdio>:
 8005274:	6841      	ldr	r1, [r0, #4]
 8005276:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <cleanup_stdio+0x34>)
 8005278:	b510      	push	{r4, lr}
 800527a:	4299      	cmp	r1, r3
 800527c:	4604      	mov	r4, r0
 800527e:	d001      	beq.n	8005284 <cleanup_stdio+0x10>
 8005280:	f001 fe24 	bl	8006ecc <_fflush_r>
 8005284:	68a1      	ldr	r1, [r4, #8]
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <cleanup_stdio+0x38>)
 8005288:	4299      	cmp	r1, r3
 800528a:	d002      	beq.n	8005292 <cleanup_stdio+0x1e>
 800528c:	4620      	mov	r0, r4
 800528e:	f001 fe1d 	bl	8006ecc <_fflush_r>
 8005292:	68e1      	ldr	r1, [r4, #12]
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <cleanup_stdio+0x3c>)
 8005296:	4299      	cmp	r1, r3
 8005298:	d004      	beq.n	80052a4 <cleanup_stdio+0x30>
 800529a:	4620      	mov	r0, r4
 800529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a0:	f001 be14 	b.w	8006ecc <_fflush_r>
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	bf00      	nop
 80052a8:	2000036c 	.word	0x2000036c
 80052ac:	200003d4 	.word	0x200003d4
 80052b0:	2000043c 	.word	0x2000043c

080052b4 <global_stdio_init.part.0>:
 80052b4:	b510      	push	{r4, lr}
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <global_stdio_init.part.0+0x30>)
 80052b8:	4c0b      	ldr	r4, [pc, #44]	; (80052e8 <global_stdio_init.part.0+0x34>)
 80052ba:	4a0c      	ldr	r2, [pc, #48]	; (80052ec <global_stdio_init.part.0+0x38>)
 80052bc:	4620      	mov	r0, r4
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	2104      	movs	r1, #4
 80052c2:	2200      	movs	r2, #0
 80052c4:	f7ff ff94 	bl	80051f0 <std>
 80052c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052cc:	2201      	movs	r2, #1
 80052ce:	2109      	movs	r1, #9
 80052d0:	f7ff ff8e 	bl	80051f0 <std>
 80052d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052d8:	2202      	movs	r2, #2
 80052da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052de:	2112      	movs	r1, #18
 80052e0:	f7ff bf86 	b.w	80051f0 <std>
 80052e4:	200004a4 	.word	0x200004a4
 80052e8:	2000036c 	.word	0x2000036c
 80052ec:	0800525d 	.word	0x0800525d

080052f0 <__sfp_lock_acquire>:
 80052f0:	4801      	ldr	r0, [pc, #4]	; (80052f8 <__sfp_lock_acquire+0x8>)
 80052f2:	f000 b920 	b.w	8005536 <__retarget_lock_acquire_recursive>
 80052f6:	bf00      	nop
 80052f8:	200004ad 	.word	0x200004ad

080052fc <__sfp_lock_release>:
 80052fc:	4801      	ldr	r0, [pc, #4]	; (8005304 <__sfp_lock_release+0x8>)
 80052fe:	f000 b91b 	b.w	8005538 <__retarget_lock_release_recursive>
 8005302:	bf00      	nop
 8005304:	200004ad 	.word	0x200004ad

08005308 <__sinit>:
 8005308:	b510      	push	{r4, lr}
 800530a:	4604      	mov	r4, r0
 800530c:	f7ff fff0 	bl	80052f0 <__sfp_lock_acquire>
 8005310:	6a23      	ldr	r3, [r4, #32]
 8005312:	b11b      	cbz	r3, 800531c <__sinit+0x14>
 8005314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005318:	f7ff bff0 	b.w	80052fc <__sfp_lock_release>
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <__sinit+0x28>)
 800531e:	6223      	str	r3, [r4, #32]
 8005320:	4b04      	ldr	r3, [pc, #16]	; (8005334 <__sinit+0x2c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f5      	bne.n	8005314 <__sinit+0xc>
 8005328:	f7ff ffc4 	bl	80052b4 <global_stdio_init.part.0>
 800532c:	e7f2      	b.n	8005314 <__sinit+0xc>
 800532e:	bf00      	nop
 8005330:	08005275 	.word	0x08005275
 8005334:	200004a4 	.word	0x200004a4

08005338 <_fwalk_sglue>:
 8005338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800533c:	4607      	mov	r7, r0
 800533e:	4688      	mov	r8, r1
 8005340:	4614      	mov	r4, r2
 8005342:	2600      	movs	r6, #0
 8005344:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005348:	f1b9 0901 	subs.w	r9, r9, #1
 800534c:	d505      	bpl.n	800535a <_fwalk_sglue+0x22>
 800534e:	6824      	ldr	r4, [r4, #0]
 8005350:	2c00      	cmp	r4, #0
 8005352:	d1f7      	bne.n	8005344 <_fwalk_sglue+0xc>
 8005354:	4630      	mov	r0, r6
 8005356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800535a:	89ab      	ldrh	r3, [r5, #12]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d907      	bls.n	8005370 <_fwalk_sglue+0x38>
 8005360:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005364:	3301      	adds	r3, #1
 8005366:	d003      	beq.n	8005370 <_fwalk_sglue+0x38>
 8005368:	4629      	mov	r1, r5
 800536a:	4638      	mov	r0, r7
 800536c:	47c0      	blx	r8
 800536e:	4306      	orrs	r6, r0
 8005370:	3568      	adds	r5, #104	; 0x68
 8005372:	e7e9      	b.n	8005348 <_fwalk_sglue+0x10>

08005374 <siprintf>:
 8005374:	b40e      	push	{r1, r2, r3}
 8005376:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800537a:	b500      	push	{lr}
 800537c:	b09c      	sub	sp, #112	; 0x70
 800537e:	ab1d      	add	r3, sp, #116	; 0x74
 8005380:	9002      	str	r0, [sp, #8]
 8005382:	9006      	str	r0, [sp, #24]
 8005384:	9107      	str	r1, [sp, #28]
 8005386:	9104      	str	r1, [sp, #16]
 8005388:	4808      	ldr	r0, [pc, #32]	; (80053ac <siprintf+0x38>)
 800538a:	4909      	ldr	r1, [pc, #36]	; (80053b0 <siprintf+0x3c>)
 800538c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005390:	9105      	str	r1, [sp, #20]
 8005392:	6800      	ldr	r0, [r0, #0]
 8005394:	a902      	add	r1, sp, #8
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	f001 fc18 	bl	8006bcc <_svfiprintf_r>
 800539c:	2200      	movs	r2, #0
 800539e:	9b02      	ldr	r3, [sp, #8]
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	b01c      	add	sp, #112	; 0x70
 80053a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053a8:	b003      	add	sp, #12
 80053aa:	4770      	bx	lr
 80053ac:	20000068 	.word	0x20000068
 80053b0:	ffff0208 	.word	0xffff0208

080053b4 <__sread>:
 80053b4:	b510      	push	{r4, lr}
 80053b6:	460c      	mov	r4, r1
 80053b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053bc:	f000 f86c 	bl	8005498 <_read_r>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	bfab      	itete	ge
 80053c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053c6:	89a3      	ldrhlt	r3, [r4, #12]
 80053c8:	181b      	addge	r3, r3, r0
 80053ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053ce:	bfac      	ite	ge
 80053d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80053d2:	81a3      	strhlt	r3, [r4, #12]
 80053d4:	bd10      	pop	{r4, pc}

080053d6 <__swrite>:
 80053d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053da:	461f      	mov	r7, r3
 80053dc:	898b      	ldrh	r3, [r1, #12]
 80053de:	4605      	mov	r5, r0
 80053e0:	05db      	lsls	r3, r3, #23
 80053e2:	460c      	mov	r4, r1
 80053e4:	4616      	mov	r6, r2
 80053e6:	d505      	bpl.n	80053f4 <__swrite+0x1e>
 80053e8:	2302      	movs	r3, #2
 80053ea:	2200      	movs	r2, #0
 80053ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f0:	f000 f840 	bl	8005474 <_lseek_r>
 80053f4:	89a3      	ldrh	r3, [r4, #12]
 80053f6:	4632      	mov	r2, r6
 80053f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	4628      	mov	r0, r5
 8005400:	463b      	mov	r3, r7
 8005402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800540a:	f000 b857 	b.w	80054bc <_write_r>

0800540e <__sseek>:
 800540e:	b510      	push	{r4, lr}
 8005410:	460c      	mov	r4, r1
 8005412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005416:	f000 f82d 	bl	8005474 <_lseek_r>
 800541a:	1c43      	adds	r3, r0, #1
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	bf15      	itete	ne
 8005420:	6560      	strne	r0, [r4, #84]	; 0x54
 8005422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800542a:	81a3      	strheq	r3, [r4, #12]
 800542c:	bf18      	it	ne
 800542e:	81a3      	strhne	r3, [r4, #12]
 8005430:	bd10      	pop	{r4, pc}

08005432 <__sclose>:
 8005432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005436:	f000 b80d 	b.w	8005454 <_close_r>

0800543a <memset>:
 800543a:	4603      	mov	r3, r0
 800543c:	4402      	add	r2, r0
 800543e:	4293      	cmp	r3, r2
 8005440:	d100      	bne.n	8005444 <memset+0xa>
 8005442:	4770      	bx	lr
 8005444:	f803 1b01 	strb.w	r1, [r3], #1
 8005448:	e7f9      	b.n	800543e <memset+0x4>
	...

0800544c <_localeconv_r>:
 800544c:	4800      	ldr	r0, [pc, #0]	; (8005450 <_localeconv_r+0x4>)
 800544e:	4770      	bx	lr
 8005450:	2000015c 	.word	0x2000015c

08005454 <_close_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	2300      	movs	r3, #0
 8005458:	4d05      	ldr	r5, [pc, #20]	; (8005470 <_close_r+0x1c>)
 800545a:	4604      	mov	r4, r0
 800545c:	4608      	mov	r0, r1
 800545e:	602b      	str	r3, [r5, #0]
 8005460:	f7fc fbfa 	bl	8001c58 <_close>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	d102      	bne.n	800546e <_close_r+0x1a>
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	b103      	cbz	r3, 800546e <_close_r+0x1a>
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	200004a8 	.word	0x200004a8

08005474 <_lseek_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	4611      	mov	r1, r2
 800547c:	2200      	movs	r2, #0
 800547e:	4d05      	ldr	r5, [pc, #20]	; (8005494 <_lseek_r+0x20>)
 8005480:	602a      	str	r2, [r5, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	f7fc fc0c 	bl	8001ca0 <_lseek>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_lseek_r+0x1e>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_lseek_r+0x1e>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	200004a8 	.word	0x200004a8

08005498 <_read_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4604      	mov	r4, r0
 800549c:	4608      	mov	r0, r1
 800549e:	4611      	mov	r1, r2
 80054a0:	2200      	movs	r2, #0
 80054a2:	4d05      	ldr	r5, [pc, #20]	; (80054b8 <_read_r+0x20>)
 80054a4:	602a      	str	r2, [r5, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	f7fc fb9d 	bl	8001be6 <_read>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d102      	bne.n	80054b6 <_read_r+0x1e>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	b103      	cbz	r3, 80054b6 <_read_r+0x1e>
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	200004a8 	.word	0x200004a8

080054bc <_write_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4604      	mov	r4, r0
 80054c0:	4608      	mov	r0, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	2200      	movs	r2, #0
 80054c6:	4d05      	ldr	r5, [pc, #20]	; (80054dc <_write_r+0x20>)
 80054c8:	602a      	str	r2, [r5, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f7fc fba8 	bl	8001c20 <_write>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_write_r+0x1e>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b103      	cbz	r3, 80054da <_write_r+0x1e>
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	200004a8 	.word	0x200004a8

080054e0 <__errno>:
 80054e0:	4b01      	ldr	r3, [pc, #4]	; (80054e8 <__errno+0x8>)
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000068 	.word	0x20000068

080054ec <__libc_init_array>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	2600      	movs	r6, #0
 80054f0:	4d0c      	ldr	r5, [pc, #48]	; (8005524 <__libc_init_array+0x38>)
 80054f2:	4c0d      	ldr	r4, [pc, #52]	; (8005528 <__libc_init_array+0x3c>)
 80054f4:	1b64      	subs	r4, r4, r5
 80054f6:	10a4      	asrs	r4, r4, #2
 80054f8:	42a6      	cmp	r6, r4
 80054fa:	d109      	bne.n	8005510 <__libc_init_array+0x24>
 80054fc:	f002 f886 	bl	800760c <_init>
 8005500:	2600      	movs	r6, #0
 8005502:	4d0a      	ldr	r5, [pc, #40]	; (800552c <__libc_init_array+0x40>)
 8005504:	4c0a      	ldr	r4, [pc, #40]	; (8005530 <__libc_init_array+0x44>)
 8005506:	1b64      	subs	r4, r4, r5
 8005508:	10a4      	asrs	r4, r4, #2
 800550a:	42a6      	cmp	r6, r4
 800550c:	d105      	bne.n	800551a <__libc_init_array+0x2e>
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	f855 3b04 	ldr.w	r3, [r5], #4
 8005514:	4798      	blx	r3
 8005516:	3601      	adds	r6, #1
 8005518:	e7ee      	b.n	80054f8 <__libc_init_array+0xc>
 800551a:	f855 3b04 	ldr.w	r3, [r5], #4
 800551e:	4798      	blx	r3
 8005520:	3601      	adds	r6, #1
 8005522:	e7f2      	b.n	800550a <__libc_init_array+0x1e>
 8005524:	080079cc 	.word	0x080079cc
 8005528:	080079cc 	.word	0x080079cc
 800552c:	080079cc 	.word	0x080079cc
 8005530:	080079d0 	.word	0x080079d0

08005534 <__retarget_lock_init_recursive>:
 8005534:	4770      	bx	lr

08005536 <__retarget_lock_acquire_recursive>:
 8005536:	4770      	bx	lr

08005538 <__retarget_lock_release_recursive>:
 8005538:	4770      	bx	lr

0800553a <memchr>:
 800553a:	4603      	mov	r3, r0
 800553c:	b510      	push	{r4, lr}
 800553e:	b2c9      	uxtb	r1, r1
 8005540:	4402      	add	r2, r0
 8005542:	4293      	cmp	r3, r2
 8005544:	4618      	mov	r0, r3
 8005546:	d101      	bne.n	800554c <memchr+0x12>
 8005548:	2000      	movs	r0, #0
 800554a:	e003      	b.n	8005554 <memchr+0x1a>
 800554c:	7804      	ldrb	r4, [r0, #0]
 800554e:	3301      	adds	r3, #1
 8005550:	428c      	cmp	r4, r1
 8005552:	d1f6      	bne.n	8005542 <memchr+0x8>
 8005554:	bd10      	pop	{r4, pc}

08005556 <quorem>:
 8005556:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555a:	6903      	ldr	r3, [r0, #16]
 800555c:	690c      	ldr	r4, [r1, #16]
 800555e:	4607      	mov	r7, r0
 8005560:	42a3      	cmp	r3, r4
 8005562:	db7f      	blt.n	8005664 <quorem+0x10e>
 8005564:	3c01      	subs	r4, #1
 8005566:	f100 0514 	add.w	r5, r0, #20
 800556a:	f101 0814 	add.w	r8, r1, #20
 800556e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005572:	9301      	str	r3, [sp, #4]
 8005574:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005578:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800557c:	3301      	adds	r3, #1
 800557e:	429a      	cmp	r2, r3
 8005580:	fbb2 f6f3 	udiv	r6, r2, r3
 8005584:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005588:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800558c:	d331      	bcc.n	80055f2 <quorem+0x9c>
 800558e:	f04f 0e00 	mov.w	lr, #0
 8005592:	4640      	mov	r0, r8
 8005594:	46ac      	mov	ip, r5
 8005596:	46f2      	mov	sl, lr
 8005598:	f850 2b04 	ldr.w	r2, [r0], #4
 800559c:	b293      	uxth	r3, r2
 800559e:	fb06 e303 	mla	r3, r6, r3, lr
 80055a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055a6:	0c1a      	lsrs	r2, r3, #16
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	fb06 220e 	mla	r2, r6, lr, r2
 80055ae:	ebaa 0303 	sub.w	r3, sl, r3
 80055b2:	f8dc a000 	ldr.w	sl, [ip]
 80055b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055ba:	fa1f fa8a 	uxth.w	sl, sl
 80055be:	4453      	add	r3, sl
 80055c0:	f8dc a000 	ldr.w	sl, [ip]
 80055c4:	b292      	uxth	r2, r2
 80055c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055d4:	4581      	cmp	r9, r0
 80055d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055da:	f84c 3b04 	str.w	r3, [ip], #4
 80055de:	d2db      	bcs.n	8005598 <quorem+0x42>
 80055e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80055e4:	b92b      	cbnz	r3, 80055f2 <quorem+0x9c>
 80055e6:	9b01      	ldr	r3, [sp, #4]
 80055e8:	3b04      	subs	r3, #4
 80055ea:	429d      	cmp	r5, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	d32d      	bcc.n	800564c <quorem+0xf6>
 80055f0:	613c      	str	r4, [r7, #16]
 80055f2:	4638      	mov	r0, r7
 80055f4:	f001 f992 	bl	800691c <__mcmp>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	db23      	blt.n	8005644 <quorem+0xee>
 80055fc:	4629      	mov	r1, r5
 80055fe:	2000      	movs	r0, #0
 8005600:	3601      	adds	r6, #1
 8005602:	f858 2b04 	ldr.w	r2, [r8], #4
 8005606:	f8d1 c000 	ldr.w	ip, [r1]
 800560a:	b293      	uxth	r3, r2
 800560c:	1ac3      	subs	r3, r0, r3
 800560e:	0c12      	lsrs	r2, r2, #16
 8005610:	fa1f f08c 	uxth.w	r0, ip
 8005614:	4403      	add	r3, r0
 8005616:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800561a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800561e:	b29b      	uxth	r3, r3
 8005620:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005624:	45c1      	cmp	r9, r8
 8005626:	ea4f 4022 	mov.w	r0, r2, asr #16
 800562a:	f841 3b04 	str.w	r3, [r1], #4
 800562e:	d2e8      	bcs.n	8005602 <quorem+0xac>
 8005630:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005634:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005638:	b922      	cbnz	r2, 8005644 <quorem+0xee>
 800563a:	3b04      	subs	r3, #4
 800563c:	429d      	cmp	r5, r3
 800563e:	461a      	mov	r2, r3
 8005640:	d30a      	bcc.n	8005658 <quorem+0x102>
 8005642:	613c      	str	r4, [r7, #16]
 8005644:	4630      	mov	r0, r6
 8005646:	b003      	add	sp, #12
 8005648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564c:	6812      	ldr	r2, [r2, #0]
 800564e:	3b04      	subs	r3, #4
 8005650:	2a00      	cmp	r2, #0
 8005652:	d1cd      	bne.n	80055f0 <quorem+0x9a>
 8005654:	3c01      	subs	r4, #1
 8005656:	e7c8      	b.n	80055ea <quorem+0x94>
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	3b04      	subs	r3, #4
 800565c:	2a00      	cmp	r2, #0
 800565e:	d1f0      	bne.n	8005642 <quorem+0xec>
 8005660:	3c01      	subs	r4, #1
 8005662:	e7eb      	b.n	800563c <quorem+0xe6>
 8005664:	2000      	movs	r0, #0
 8005666:	e7ee      	b.n	8005646 <quorem+0xf0>

08005668 <_dtoa_r>:
 8005668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566c:	4616      	mov	r6, r2
 800566e:	461f      	mov	r7, r3
 8005670:	69c4      	ldr	r4, [r0, #28]
 8005672:	b099      	sub	sp, #100	; 0x64
 8005674:	4605      	mov	r5, r0
 8005676:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800567a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800567e:	b974      	cbnz	r4, 800569e <_dtoa_r+0x36>
 8005680:	2010      	movs	r0, #16
 8005682:	f000 fe1d 	bl	80062c0 <malloc>
 8005686:	4602      	mov	r2, r0
 8005688:	61e8      	str	r0, [r5, #28]
 800568a:	b920      	cbnz	r0, 8005696 <_dtoa_r+0x2e>
 800568c:	21ef      	movs	r1, #239	; 0xef
 800568e:	4bac      	ldr	r3, [pc, #688]	; (8005940 <_dtoa_r+0x2d8>)
 8005690:	48ac      	ldr	r0, [pc, #688]	; (8005944 <_dtoa_r+0x2dc>)
 8005692:	f001 fc7b 	bl	8006f8c <__assert_func>
 8005696:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800569a:	6004      	str	r4, [r0, #0]
 800569c:	60c4      	str	r4, [r0, #12]
 800569e:	69eb      	ldr	r3, [r5, #28]
 80056a0:	6819      	ldr	r1, [r3, #0]
 80056a2:	b151      	cbz	r1, 80056ba <_dtoa_r+0x52>
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	2301      	movs	r3, #1
 80056a8:	4093      	lsls	r3, r2
 80056aa:	604a      	str	r2, [r1, #4]
 80056ac:	608b      	str	r3, [r1, #8]
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 fefa 	bl	80064a8 <_Bfree>
 80056b4:	2200      	movs	r2, #0
 80056b6:	69eb      	ldr	r3, [r5, #28]
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	1e3b      	subs	r3, r7, #0
 80056bc:	bfaf      	iteee	ge
 80056be:	2300      	movge	r3, #0
 80056c0:	2201      	movlt	r2, #1
 80056c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056c6:	9305      	strlt	r3, [sp, #20]
 80056c8:	bfa8      	it	ge
 80056ca:	f8c8 3000 	strge.w	r3, [r8]
 80056ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80056d2:	4b9d      	ldr	r3, [pc, #628]	; (8005948 <_dtoa_r+0x2e0>)
 80056d4:	bfb8      	it	lt
 80056d6:	f8c8 2000 	strlt.w	r2, [r8]
 80056da:	ea33 0309 	bics.w	r3, r3, r9
 80056de:	d119      	bne.n	8005714 <_dtoa_r+0xac>
 80056e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80056e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80056ec:	4333      	orrs	r3, r6
 80056ee:	f000 8589 	beq.w	8006204 <_dtoa_r+0xb9c>
 80056f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056f4:	b953      	cbnz	r3, 800570c <_dtoa_r+0xa4>
 80056f6:	4b95      	ldr	r3, [pc, #596]	; (800594c <_dtoa_r+0x2e4>)
 80056f8:	e023      	b.n	8005742 <_dtoa_r+0xda>
 80056fa:	4b95      	ldr	r3, [pc, #596]	; (8005950 <_dtoa_r+0x2e8>)
 80056fc:	9303      	str	r3, [sp, #12]
 80056fe:	3308      	adds	r3, #8
 8005700:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	9803      	ldr	r0, [sp, #12]
 8005706:	b019      	add	sp, #100	; 0x64
 8005708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570c:	4b8f      	ldr	r3, [pc, #572]	; (800594c <_dtoa_r+0x2e4>)
 800570e:	9303      	str	r3, [sp, #12]
 8005710:	3303      	adds	r3, #3
 8005712:	e7f5      	b.n	8005700 <_dtoa_r+0x98>
 8005714:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005718:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800571c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005720:	2200      	movs	r2, #0
 8005722:	2300      	movs	r3, #0
 8005724:	f7fb f940 	bl	80009a8 <__aeabi_dcmpeq>
 8005728:	4680      	mov	r8, r0
 800572a:	b160      	cbz	r0, 8005746 <_dtoa_r+0xde>
 800572c:	2301      	movs	r3, #1
 800572e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 8562 	beq.w	80061fe <_dtoa_r+0xb96>
 800573a:	4b86      	ldr	r3, [pc, #536]	; (8005954 <_dtoa_r+0x2ec>)
 800573c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	3b01      	subs	r3, #1
 8005742:	9303      	str	r3, [sp, #12]
 8005744:	e7de      	b.n	8005704 <_dtoa_r+0x9c>
 8005746:	ab16      	add	r3, sp, #88	; 0x58
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	ab17      	add	r3, sp, #92	; 0x5c
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	4628      	mov	r0, r5
 8005750:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005754:	f001 f98a 	bl	8006a6c <__d2b>
 8005758:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800575c:	4682      	mov	sl, r0
 800575e:	2c00      	cmp	r4, #0
 8005760:	d07e      	beq.n	8005860 <_dtoa_r+0x1f8>
 8005762:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005768:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800576c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005770:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005774:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005778:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800577c:	4619      	mov	r1, r3
 800577e:	2200      	movs	r2, #0
 8005780:	4b75      	ldr	r3, [pc, #468]	; (8005958 <_dtoa_r+0x2f0>)
 8005782:	f7fa fcf1 	bl	8000168 <__aeabi_dsub>
 8005786:	a368      	add	r3, pc, #416	; (adr r3, 8005928 <_dtoa_r+0x2c0>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f7fa fea4 	bl	80004d8 <__aeabi_dmul>
 8005790:	a367      	add	r3, pc, #412	; (adr r3, 8005930 <_dtoa_r+0x2c8>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa fce9 	bl	800016c <__adddf3>
 800579a:	4606      	mov	r6, r0
 800579c:	4620      	mov	r0, r4
 800579e:	460f      	mov	r7, r1
 80057a0:	f7fa fe30 	bl	8000404 <__aeabi_i2d>
 80057a4:	a364      	add	r3, pc, #400	; (adr r3, 8005938 <_dtoa_r+0x2d0>)
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f7fa fe95 	bl	80004d8 <__aeabi_dmul>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4630      	mov	r0, r6
 80057b4:	4639      	mov	r1, r7
 80057b6:	f7fa fcd9 	bl	800016c <__adddf3>
 80057ba:	4606      	mov	r6, r0
 80057bc:	460f      	mov	r7, r1
 80057be:	f7fb f93b 	bl	8000a38 <__aeabi_d2iz>
 80057c2:	2200      	movs	r2, #0
 80057c4:	4683      	mov	fp, r0
 80057c6:	2300      	movs	r3, #0
 80057c8:	4630      	mov	r0, r6
 80057ca:	4639      	mov	r1, r7
 80057cc:	f7fb f8f6 	bl	80009bc <__aeabi_dcmplt>
 80057d0:	b148      	cbz	r0, 80057e6 <_dtoa_r+0x17e>
 80057d2:	4658      	mov	r0, fp
 80057d4:	f7fa fe16 	bl	8000404 <__aeabi_i2d>
 80057d8:	4632      	mov	r2, r6
 80057da:	463b      	mov	r3, r7
 80057dc:	f7fb f8e4 	bl	80009a8 <__aeabi_dcmpeq>
 80057e0:	b908      	cbnz	r0, 80057e6 <_dtoa_r+0x17e>
 80057e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057e6:	f1bb 0f16 	cmp.w	fp, #22
 80057ea:	d857      	bhi.n	800589c <_dtoa_r+0x234>
 80057ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057f0:	4b5a      	ldr	r3, [pc, #360]	; (800595c <_dtoa_r+0x2f4>)
 80057f2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f7fb f8df 	bl	80009bc <__aeabi_dcmplt>
 80057fe:	2800      	cmp	r0, #0
 8005800:	d04e      	beq.n	80058a0 <_dtoa_r+0x238>
 8005802:	2300      	movs	r3, #0
 8005804:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005808:	930f      	str	r3, [sp, #60]	; 0x3c
 800580a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800580c:	1b1b      	subs	r3, r3, r4
 800580e:	1e5a      	subs	r2, r3, #1
 8005810:	bf46      	itte	mi
 8005812:	f1c3 0901 	rsbmi	r9, r3, #1
 8005816:	2300      	movmi	r3, #0
 8005818:	f04f 0900 	movpl.w	r9, #0
 800581c:	9209      	str	r2, [sp, #36]	; 0x24
 800581e:	bf48      	it	mi
 8005820:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005822:	f1bb 0f00 	cmp.w	fp, #0
 8005826:	db3d      	blt.n	80058a4 <_dtoa_r+0x23c>
 8005828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800582e:	445b      	add	r3, fp
 8005830:	9309      	str	r3, [sp, #36]	; 0x24
 8005832:	2300      	movs	r3, #0
 8005834:	930a      	str	r3, [sp, #40]	; 0x28
 8005836:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005838:	2b09      	cmp	r3, #9
 800583a:	d867      	bhi.n	800590c <_dtoa_r+0x2a4>
 800583c:	2b05      	cmp	r3, #5
 800583e:	bfc4      	itt	gt
 8005840:	3b04      	subgt	r3, #4
 8005842:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005844:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005846:	bfc8      	it	gt
 8005848:	2400      	movgt	r4, #0
 800584a:	f1a3 0302 	sub.w	r3, r3, #2
 800584e:	bfd8      	it	le
 8005850:	2401      	movle	r4, #1
 8005852:	2b03      	cmp	r3, #3
 8005854:	f200 8086 	bhi.w	8005964 <_dtoa_r+0x2fc>
 8005858:	e8df f003 	tbb	[pc, r3]
 800585c:	5637392c 	.word	0x5637392c
 8005860:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005864:	441c      	add	r4, r3
 8005866:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800586a:	2b20      	cmp	r3, #32
 800586c:	bfc1      	itttt	gt
 800586e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005872:	fa09 f903 	lslgt.w	r9, r9, r3
 8005876:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800587a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800587e:	bfd6      	itet	le
 8005880:	f1c3 0320 	rsble	r3, r3, #32
 8005884:	ea49 0003 	orrgt.w	r0, r9, r3
 8005888:	fa06 f003 	lslle.w	r0, r6, r3
 800588c:	f7fa fdaa 	bl	80003e4 <__aeabi_ui2d>
 8005890:	2201      	movs	r2, #1
 8005892:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005896:	3c01      	subs	r4, #1
 8005898:	9213      	str	r2, [sp, #76]	; 0x4c
 800589a:	e76f      	b.n	800577c <_dtoa_r+0x114>
 800589c:	2301      	movs	r3, #1
 800589e:	e7b3      	b.n	8005808 <_dtoa_r+0x1a0>
 80058a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80058a2:	e7b2      	b.n	800580a <_dtoa_r+0x1a2>
 80058a4:	f1cb 0300 	rsb	r3, fp, #0
 80058a8:	930a      	str	r3, [sp, #40]	; 0x28
 80058aa:	2300      	movs	r3, #0
 80058ac:	eba9 090b 	sub.w	r9, r9, fp
 80058b0:	930e      	str	r3, [sp, #56]	; 0x38
 80058b2:	e7c0      	b.n	8005836 <_dtoa_r+0x1ce>
 80058b4:	2300      	movs	r3, #0
 80058b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	dc55      	bgt.n	800596a <_dtoa_r+0x302>
 80058be:	2301      	movs	r3, #1
 80058c0:	461a      	mov	r2, r3
 80058c2:	9306      	str	r3, [sp, #24]
 80058c4:	9308      	str	r3, [sp, #32]
 80058c6:	9223      	str	r2, [sp, #140]	; 0x8c
 80058c8:	e00b      	b.n	80058e2 <_dtoa_r+0x27a>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e7f3      	b.n	80058b6 <_dtoa_r+0x24e>
 80058ce:	2300      	movs	r3, #0
 80058d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80058d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058d4:	445b      	add	r3, fp
 80058d6:	9306      	str	r3, [sp, #24]
 80058d8:	3301      	adds	r3, #1
 80058da:	2b01      	cmp	r3, #1
 80058dc:	9308      	str	r3, [sp, #32]
 80058de:	bfb8      	it	lt
 80058e0:	2301      	movlt	r3, #1
 80058e2:	2100      	movs	r1, #0
 80058e4:	2204      	movs	r2, #4
 80058e6:	69e8      	ldr	r0, [r5, #28]
 80058e8:	f102 0614 	add.w	r6, r2, #20
 80058ec:	429e      	cmp	r6, r3
 80058ee:	d940      	bls.n	8005972 <_dtoa_r+0x30a>
 80058f0:	6041      	str	r1, [r0, #4]
 80058f2:	4628      	mov	r0, r5
 80058f4:	f000 fd98 	bl	8006428 <_Balloc>
 80058f8:	9003      	str	r0, [sp, #12]
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d13c      	bne.n	8005978 <_dtoa_r+0x310>
 80058fe:	4602      	mov	r2, r0
 8005900:	f240 11af 	movw	r1, #431	; 0x1af
 8005904:	4b16      	ldr	r3, [pc, #88]	; (8005960 <_dtoa_r+0x2f8>)
 8005906:	e6c3      	b.n	8005690 <_dtoa_r+0x28>
 8005908:	2301      	movs	r3, #1
 800590a:	e7e1      	b.n	80058d0 <_dtoa_r+0x268>
 800590c:	2401      	movs	r4, #1
 800590e:	2300      	movs	r3, #0
 8005910:	940b      	str	r4, [sp, #44]	; 0x2c
 8005912:	9322      	str	r3, [sp, #136]	; 0x88
 8005914:	f04f 33ff 	mov.w	r3, #4294967295
 8005918:	2200      	movs	r2, #0
 800591a:	9306      	str	r3, [sp, #24]
 800591c:	9308      	str	r3, [sp, #32]
 800591e:	2312      	movs	r3, #18
 8005920:	e7d1      	b.n	80058c6 <_dtoa_r+0x25e>
 8005922:	bf00      	nop
 8005924:	f3af 8000 	nop.w
 8005928:	636f4361 	.word	0x636f4361
 800592c:	3fd287a7 	.word	0x3fd287a7
 8005930:	8b60c8b3 	.word	0x8b60c8b3
 8005934:	3fc68a28 	.word	0x3fc68a28
 8005938:	509f79fb 	.word	0x509f79fb
 800593c:	3fd34413 	.word	0x3fd34413
 8005940:	0800769f 	.word	0x0800769f
 8005944:	080076b6 	.word	0x080076b6
 8005948:	7ff00000 	.word	0x7ff00000
 800594c:	0800769b 	.word	0x0800769b
 8005950:	08007692 	.word	0x08007692
 8005954:	0800766f 	.word	0x0800766f
 8005958:	3ff80000 	.word	0x3ff80000
 800595c:	080077a0 	.word	0x080077a0
 8005960:	0800770e 	.word	0x0800770e
 8005964:	2301      	movs	r3, #1
 8005966:	930b      	str	r3, [sp, #44]	; 0x2c
 8005968:	e7d4      	b.n	8005914 <_dtoa_r+0x2ac>
 800596a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800596c:	9306      	str	r3, [sp, #24]
 800596e:	9308      	str	r3, [sp, #32]
 8005970:	e7b7      	b.n	80058e2 <_dtoa_r+0x27a>
 8005972:	3101      	adds	r1, #1
 8005974:	0052      	lsls	r2, r2, #1
 8005976:	e7b7      	b.n	80058e8 <_dtoa_r+0x280>
 8005978:	69eb      	ldr	r3, [r5, #28]
 800597a:	9a03      	ldr	r2, [sp, #12]
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	9b08      	ldr	r3, [sp, #32]
 8005980:	2b0e      	cmp	r3, #14
 8005982:	f200 80a8 	bhi.w	8005ad6 <_dtoa_r+0x46e>
 8005986:	2c00      	cmp	r4, #0
 8005988:	f000 80a5 	beq.w	8005ad6 <_dtoa_r+0x46e>
 800598c:	f1bb 0f00 	cmp.w	fp, #0
 8005990:	dd34      	ble.n	80059fc <_dtoa_r+0x394>
 8005992:	4b9a      	ldr	r3, [pc, #616]	; (8005bfc <_dtoa_r+0x594>)
 8005994:	f00b 020f 	and.w	r2, fp, #15
 8005998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800599c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80059a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80059a8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80059ac:	d016      	beq.n	80059dc <_dtoa_r+0x374>
 80059ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059b2:	4b93      	ldr	r3, [pc, #588]	; (8005c00 <_dtoa_r+0x598>)
 80059b4:	2703      	movs	r7, #3
 80059b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059ba:	f7fa feb7 	bl	800072c <__aeabi_ddiv>
 80059be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059c2:	f004 040f 	and.w	r4, r4, #15
 80059c6:	4e8e      	ldr	r6, [pc, #568]	; (8005c00 <_dtoa_r+0x598>)
 80059c8:	b954      	cbnz	r4, 80059e0 <_dtoa_r+0x378>
 80059ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d2:	f7fa feab 	bl	800072c <__aeabi_ddiv>
 80059d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059da:	e029      	b.n	8005a30 <_dtoa_r+0x3c8>
 80059dc:	2702      	movs	r7, #2
 80059de:	e7f2      	b.n	80059c6 <_dtoa_r+0x35e>
 80059e0:	07e1      	lsls	r1, r4, #31
 80059e2:	d508      	bpl.n	80059f6 <_dtoa_r+0x38e>
 80059e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059ec:	f7fa fd74 	bl	80004d8 <__aeabi_dmul>
 80059f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059f4:	3701      	adds	r7, #1
 80059f6:	1064      	asrs	r4, r4, #1
 80059f8:	3608      	adds	r6, #8
 80059fa:	e7e5      	b.n	80059c8 <_dtoa_r+0x360>
 80059fc:	f000 80a5 	beq.w	8005b4a <_dtoa_r+0x4e2>
 8005a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a04:	f1cb 0400 	rsb	r4, fp, #0
 8005a08:	4b7c      	ldr	r3, [pc, #496]	; (8005bfc <_dtoa_r+0x594>)
 8005a0a:	f004 020f 	and.w	r2, r4, #15
 8005a0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f7fa fd5f 	bl	80004d8 <__aeabi_dmul>
 8005a1a:	2702      	movs	r7, #2
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a22:	4e77      	ldr	r6, [pc, #476]	; (8005c00 <_dtoa_r+0x598>)
 8005a24:	1124      	asrs	r4, r4, #4
 8005a26:	2c00      	cmp	r4, #0
 8005a28:	f040 8084 	bne.w	8005b34 <_dtoa_r+0x4cc>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1d2      	bne.n	80059d6 <_dtoa_r+0x36e>
 8005a30:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a34:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8087 	beq.w	8005b4e <_dtoa_r+0x4e6>
 8005a40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a44:	2200      	movs	r2, #0
 8005a46:	4b6f      	ldr	r3, [pc, #444]	; (8005c04 <_dtoa_r+0x59c>)
 8005a48:	f7fa ffb8 	bl	80009bc <__aeabi_dcmplt>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d07e      	beq.n	8005b4e <_dtoa_r+0x4e6>
 8005a50:	9b08      	ldr	r3, [sp, #32]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d07b      	beq.n	8005b4e <_dtoa_r+0x4e6>
 8005a56:	9b06      	ldr	r3, [sp, #24]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	dd38      	ble.n	8005ace <_dtoa_r+0x466>
 8005a5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a60:	2200      	movs	r2, #0
 8005a62:	4b69      	ldr	r3, [pc, #420]	; (8005c08 <_dtoa_r+0x5a0>)
 8005a64:	f7fa fd38 	bl	80004d8 <__aeabi_dmul>
 8005a68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a6c:	9c06      	ldr	r4, [sp, #24]
 8005a6e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005a72:	3701      	adds	r7, #1
 8005a74:	4638      	mov	r0, r7
 8005a76:	f7fa fcc5 	bl	8000404 <__aeabi_i2d>
 8005a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a7e:	f7fa fd2b 	bl	80004d8 <__aeabi_dmul>
 8005a82:	2200      	movs	r2, #0
 8005a84:	4b61      	ldr	r3, [pc, #388]	; (8005c0c <_dtoa_r+0x5a4>)
 8005a86:	f7fa fb71 	bl	800016c <__adddf3>
 8005a8a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005a8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a92:	9611      	str	r6, [sp, #68]	; 0x44
 8005a94:	2c00      	cmp	r4, #0
 8005a96:	d15d      	bne.n	8005b54 <_dtoa_r+0x4ec>
 8005a98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4b5c      	ldr	r3, [pc, #368]	; (8005c10 <_dtoa_r+0x5a8>)
 8005aa0:	f7fa fb62 	bl	8000168 <__aeabi_dsub>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005aac:	4633      	mov	r3, r6
 8005aae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ab0:	f7fa ffa2 	bl	80009f8 <__aeabi_dcmpgt>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	f040 8295 	bne.w	8005fe4 <_dtoa_r+0x97c>
 8005aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005abe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ac0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005ac4:	f7fa ff7a 	bl	80009bc <__aeabi_dcmplt>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	f040 8289 	bne.w	8005fe0 <_dtoa_r+0x978>
 8005ace:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005ad2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ad6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f2c0 8151 	blt.w	8005d80 <_dtoa_r+0x718>
 8005ade:	f1bb 0f0e 	cmp.w	fp, #14
 8005ae2:	f300 814d 	bgt.w	8005d80 <_dtoa_r+0x718>
 8005ae6:	4b45      	ldr	r3, [pc, #276]	; (8005bfc <_dtoa_r+0x594>)
 8005ae8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005aec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005af0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005af4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f280 80da 	bge.w	8005cb0 <_dtoa_r+0x648>
 8005afc:	9b08      	ldr	r3, [sp, #32]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f300 80d6 	bgt.w	8005cb0 <_dtoa_r+0x648>
 8005b04:	f040 826b 	bne.w	8005fde <_dtoa_r+0x976>
 8005b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4b40      	ldr	r3, [pc, #256]	; (8005c10 <_dtoa_r+0x5a8>)
 8005b10:	f7fa fce2 	bl	80004d8 <__aeabi_dmul>
 8005b14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b18:	f7fa ff64 	bl	80009e4 <__aeabi_dcmpge>
 8005b1c:	9c08      	ldr	r4, [sp, #32]
 8005b1e:	4626      	mov	r6, r4
 8005b20:	2800      	cmp	r0, #0
 8005b22:	f040 8241 	bne.w	8005fa8 <_dtoa_r+0x940>
 8005b26:	2331      	movs	r3, #49	; 0x31
 8005b28:	9f03      	ldr	r7, [sp, #12]
 8005b2a:	f10b 0b01 	add.w	fp, fp, #1
 8005b2e:	f807 3b01 	strb.w	r3, [r7], #1
 8005b32:	e23d      	b.n	8005fb0 <_dtoa_r+0x948>
 8005b34:	07e2      	lsls	r2, r4, #31
 8005b36:	d505      	bpl.n	8005b44 <_dtoa_r+0x4dc>
 8005b38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b3c:	f7fa fccc 	bl	80004d8 <__aeabi_dmul>
 8005b40:	2301      	movs	r3, #1
 8005b42:	3701      	adds	r7, #1
 8005b44:	1064      	asrs	r4, r4, #1
 8005b46:	3608      	adds	r6, #8
 8005b48:	e76d      	b.n	8005a26 <_dtoa_r+0x3be>
 8005b4a:	2702      	movs	r7, #2
 8005b4c:	e770      	b.n	8005a30 <_dtoa_r+0x3c8>
 8005b4e:	46d8      	mov	r8, fp
 8005b50:	9c08      	ldr	r4, [sp, #32]
 8005b52:	e78f      	b.n	8005a74 <_dtoa_r+0x40c>
 8005b54:	9903      	ldr	r1, [sp, #12]
 8005b56:	4b29      	ldr	r3, [pc, #164]	; (8005bfc <_dtoa_r+0x594>)
 8005b58:	4421      	add	r1, r4
 8005b5a:	9112      	str	r1, [sp, #72]	; 0x48
 8005b5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b62:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005b66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b6a:	2900      	cmp	r1, #0
 8005b6c:	d054      	beq.n	8005c18 <_dtoa_r+0x5b0>
 8005b6e:	2000      	movs	r0, #0
 8005b70:	4928      	ldr	r1, [pc, #160]	; (8005c14 <_dtoa_r+0x5ac>)
 8005b72:	f7fa fddb 	bl	800072c <__aeabi_ddiv>
 8005b76:	463b      	mov	r3, r7
 8005b78:	4632      	mov	r2, r6
 8005b7a:	f7fa faf5 	bl	8000168 <__aeabi_dsub>
 8005b7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b82:	9f03      	ldr	r7, [sp, #12]
 8005b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b88:	f7fa ff56 	bl	8000a38 <__aeabi_d2iz>
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	f7fa fc39 	bl	8000404 <__aeabi_i2d>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b9a:	f7fa fae5 	bl	8000168 <__aeabi_dsub>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	3430      	adds	r4, #48	; 0x30
 8005ba4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ba8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005bac:	f807 4b01 	strb.w	r4, [r7], #1
 8005bb0:	f7fa ff04 	bl	80009bc <__aeabi_dcmplt>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d173      	bne.n	8005ca0 <_dtoa_r+0x638>
 8005bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	4911      	ldr	r1, [pc, #68]	; (8005c04 <_dtoa_r+0x59c>)
 8005bc0:	f7fa fad2 	bl	8000168 <__aeabi_dsub>
 8005bc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005bc8:	f7fa fef8 	bl	80009bc <__aeabi_dcmplt>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	f040 80b6 	bne.w	8005d3e <_dtoa_r+0x6d6>
 8005bd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bd4:	429f      	cmp	r7, r3
 8005bd6:	f43f af7a 	beq.w	8005ace <_dtoa_r+0x466>
 8005bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bde:	2200      	movs	r2, #0
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <_dtoa_r+0x5a0>)
 8005be2:	f7fa fc79 	bl	80004d8 <__aeabi_dmul>
 8005be6:	2200      	movs	r2, #0
 8005be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bf0:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <_dtoa_r+0x5a0>)
 8005bf2:	f7fa fc71 	bl	80004d8 <__aeabi_dmul>
 8005bf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bfa:	e7c3      	b.n	8005b84 <_dtoa_r+0x51c>
 8005bfc:	080077a0 	.word	0x080077a0
 8005c00:	08007778 	.word	0x08007778
 8005c04:	3ff00000 	.word	0x3ff00000
 8005c08:	40240000 	.word	0x40240000
 8005c0c:	401c0000 	.word	0x401c0000
 8005c10:	40140000 	.word	0x40140000
 8005c14:	3fe00000 	.word	0x3fe00000
 8005c18:	4630      	mov	r0, r6
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	f7fa fc5c 	bl	80004d8 <__aeabi_dmul>
 8005c20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c26:	9c03      	ldr	r4, [sp, #12]
 8005c28:	9314      	str	r3, [sp, #80]	; 0x50
 8005c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c2e:	f7fa ff03 	bl	8000a38 <__aeabi_d2iz>
 8005c32:	9015      	str	r0, [sp, #84]	; 0x54
 8005c34:	f7fa fbe6 	bl	8000404 <__aeabi_i2d>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c40:	f7fa fa92 	bl	8000168 <__aeabi_dsub>
 8005c44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c46:	4606      	mov	r6, r0
 8005c48:	3330      	adds	r3, #48	; 0x30
 8005c4a:	f804 3b01 	strb.w	r3, [r4], #1
 8005c4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c50:	460f      	mov	r7, r1
 8005c52:	429c      	cmp	r4, r3
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	d124      	bne.n	8005ca4 <_dtoa_r+0x63c>
 8005c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c5e:	4baf      	ldr	r3, [pc, #700]	; (8005f1c <_dtoa_r+0x8b4>)
 8005c60:	f7fa fa84 	bl	800016c <__adddf3>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4630      	mov	r0, r6
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	f7fa fec4 	bl	80009f8 <__aeabi_dcmpgt>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	d163      	bne.n	8005d3c <_dtoa_r+0x6d4>
 8005c74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c78:	2000      	movs	r0, #0
 8005c7a:	49a8      	ldr	r1, [pc, #672]	; (8005f1c <_dtoa_r+0x8b4>)
 8005c7c:	f7fa fa74 	bl	8000168 <__aeabi_dsub>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4630      	mov	r0, r6
 8005c86:	4639      	mov	r1, r7
 8005c88:	f7fa fe98 	bl	80009bc <__aeabi_dcmplt>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	f43f af1e 	beq.w	8005ace <_dtoa_r+0x466>
 8005c92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c94:	1e7b      	subs	r3, r7, #1
 8005c96:	9314      	str	r3, [sp, #80]	; 0x50
 8005c98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005c9c:	2b30      	cmp	r3, #48	; 0x30
 8005c9e:	d0f8      	beq.n	8005c92 <_dtoa_r+0x62a>
 8005ca0:	46c3      	mov	fp, r8
 8005ca2:	e03b      	b.n	8005d1c <_dtoa_r+0x6b4>
 8005ca4:	4b9e      	ldr	r3, [pc, #632]	; (8005f20 <_dtoa_r+0x8b8>)
 8005ca6:	f7fa fc17 	bl	80004d8 <__aeabi_dmul>
 8005caa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cae:	e7bc      	b.n	8005c2a <_dtoa_r+0x5c2>
 8005cb0:	9f03      	ldr	r7, [sp, #12]
 8005cb2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005cb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cba:	4640      	mov	r0, r8
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	f7fa fd35 	bl	800072c <__aeabi_ddiv>
 8005cc2:	f7fa feb9 	bl	8000a38 <__aeabi_d2iz>
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	f7fa fb9c 	bl	8000404 <__aeabi_i2d>
 8005ccc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cd0:	f7fa fc02 	bl	80004d8 <__aeabi_dmul>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4640      	mov	r0, r8
 8005cda:	4649      	mov	r1, r9
 8005cdc:	f7fa fa44 	bl	8000168 <__aeabi_dsub>
 8005ce0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005ce4:	f807 6b01 	strb.w	r6, [r7], #1
 8005ce8:	9e03      	ldr	r6, [sp, #12]
 8005cea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005cee:	1bbe      	subs	r6, r7, r6
 8005cf0:	45b4      	cmp	ip, r6
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	d136      	bne.n	8005d66 <_dtoa_r+0x6fe>
 8005cf8:	f7fa fa38 	bl	800016c <__adddf3>
 8005cfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d00:	4680      	mov	r8, r0
 8005d02:	4689      	mov	r9, r1
 8005d04:	f7fa fe78 	bl	80009f8 <__aeabi_dcmpgt>
 8005d08:	bb58      	cbnz	r0, 8005d62 <_dtoa_r+0x6fa>
 8005d0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d0e:	4640      	mov	r0, r8
 8005d10:	4649      	mov	r1, r9
 8005d12:	f7fa fe49 	bl	80009a8 <__aeabi_dcmpeq>
 8005d16:	b108      	cbz	r0, 8005d1c <_dtoa_r+0x6b4>
 8005d18:	07e3      	lsls	r3, r4, #31
 8005d1a:	d422      	bmi.n	8005d62 <_dtoa_r+0x6fa>
 8005d1c:	4651      	mov	r1, sl
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 fbc2 	bl	80064a8 <_Bfree>
 8005d24:	2300      	movs	r3, #0
 8005d26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d28:	703b      	strb	r3, [r7, #0]
 8005d2a:	f10b 0301 	add.w	r3, fp, #1
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f43f ace6 	beq.w	8005704 <_dtoa_r+0x9c>
 8005d38:	601f      	str	r7, [r3, #0]
 8005d3a:	e4e3      	b.n	8005704 <_dtoa_r+0x9c>
 8005d3c:	4627      	mov	r7, r4
 8005d3e:	463b      	mov	r3, r7
 8005d40:	461f      	mov	r7, r3
 8005d42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d46:	2a39      	cmp	r2, #57	; 0x39
 8005d48:	d107      	bne.n	8005d5a <_dtoa_r+0x6f2>
 8005d4a:	9a03      	ldr	r2, [sp, #12]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d1f7      	bne.n	8005d40 <_dtoa_r+0x6d8>
 8005d50:	2230      	movs	r2, #48	; 0x30
 8005d52:	9903      	ldr	r1, [sp, #12]
 8005d54:	f108 0801 	add.w	r8, r8, #1
 8005d58:	700a      	strb	r2, [r1, #0]
 8005d5a:	781a      	ldrb	r2, [r3, #0]
 8005d5c:	3201      	adds	r2, #1
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	e79e      	b.n	8005ca0 <_dtoa_r+0x638>
 8005d62:	46d8      	mov	r8, fp
 8005d64:	e7eb      	b.n	8005d3e <_dtoa_r+0x6d6>
 8005d66:	2200      	movs	r2, #0
 8005d68:	4b6d      	ldr	r3, [pc, #436]	; (8005f20 <_dtoa_r+0x8b8>)
 8005d6a:	f7fa fbb5 	bl	80004d8 <__aeabi_dmul>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2300      	movs	r3, #0
 8005d72:	4680      	mov	r8, r0
 8005d74:	4689      	mov	r9, r1
 8005d76:	f7fa fe17 	bl	80009a8 <__aeabi_dcmpeq>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d09b      	beq.n	8005cb6 <_dtoa_r+0x64e>
 8005d7e:	e7cd      	b.n	8005d1c <_dtoa_r+0x6b4>
 8005d80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d82:	2a00      	cmp	r2, #0
 8005d84:	f000 80c4 	beq.w	8005f10 <_dtoa_r+0x8a8>
 8005d88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d8a:	2a01      	cmp	r2, #1
 8005d8c:	f300 80a8 	bgt.w	8005ee0 <_dtoa_r+0x878>
 8005d90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	f000 80a0 	beq.w	8005ed8 <_dtoa_r+0x870>
 8005d98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d9c:	464f      	mov	r7, r9
 8005d9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005da2:	2101      	movs	r1, #1
 8005da4:	441a      	add	r2, r3
 8005da6:	4628      	mov	r0, r5
 8005da8:	4499      	add	r9, r3
 8005daa:	9209      	str	r2, [sp, #36]	; 0x24
 8005dac:	f000 fc32 	bl	8006614 <__i2b>
 8005db0:	4606      	mov	r6, r0
 8005db2:	b15f      	cbz	r7, 8005dcc <_dtoa_r+0x764>
 8005db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	dd08      	ble.n	8005dcc <_dtoa_r+0x764>
 8005dba:	42bb      	cmp	r3, r7
 8005dbc:	bfa8      	it	ge
 8005dbe:	463b      	movge	r3, r7
 8005dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dc2:	eba9 0903 	sub.w	r9, r9, r3
 8005dc6:	1aff      	subs	r7, r7, r3
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	9309      	str	r3, [sp, #36]	; 0x24
 8005dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dce:	b1f3      	cbz	r3, 8005e0e <_dtoa_r+0x7a6>
 8005dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 80a0 	beq.w	8005f18 <_dtoa_r+0x8b0>
 8005dd8:	2c00      	cmp	r4, #0
 8005dda:	dd10      	ble.n	8005dfe <_dtoa_r+0x796>
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4622      	mov	r2, r4
 8005de0:	4628      	mov	r0, r5
 8005de2:	f000 fcd5 	bl	8006790 <__pow5mult>
 8005de6:	4652      	mov	r2, sl
 8005de8:	4601      	mov	r1, r0
 8005dea:	4606      	mov	r6, r0
 8005dec:	4628      	mov	r0, r5
 8005dee:	f000 fc27 	bl	8006640 <__multiply>
 8005df2:	4680      	mov	r8, r0
 8005df4:	4651      	mov	r1, sl
 8005df6:	4628      	mov	r0, r5
 8005df8:	f000 fb56 	bl	80064a8 <_Bfree>
 8005dfc:	46c2      	mov	sl, r8
 8005dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e00:	1b1a      	subs	r2, r3, r4
 8005e02:	d004      	beq.n	8005e0e <_dtoa_r+0x7a6>
 8005e04:	4651      	mov	r1, sl
 8005e06:	4628      	mov	r0, r5
 8005e08:	f000 fcc2 	bl	8006790 <__pow5mult>
 8005e0c:	4682      	mov	sl, r0
 8005e0e:	2101      	movs	r1, #1
 8005e10:	4628      	mov	r0, r5
 8005e12:	f000 fbff 	bl	8006614 <__i2b>
 8005e16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e18:	4604      	mov	r4, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f340 8082 	ble.w	8005f24 <_dtoa_r+0x8bc>
 8005e20:	461a      	mov	r2, r3
 8005e22:	4601      	mov	r1, r0
 8005e24:	4628      	mov	r0, r5
 8005e26:	f000 fcb3 	bl	8006790 <__pow5mult>
 8005e2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	dd7b      	ble.n	8005f2a <_dtoa_r+0x8c2>
 8005e32:	f04f 0800 	mov.w	r8, #0
 8005e36:	6923      	ldr	r3, [r4, #16]
 8005e38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e3c:	6918      	ldr	r0, [r3, #16]
 8005e3e:	f000 fb9b 	bl	8006578 <__hi0bits>
 8005e42:	f1c0 0020 	rsb	r0, r0, #32
 8005e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e48:	4418      	add	r0, r3
 8005e4a:	f010 001f 	ands.w	r0, r0, #31
 8005e4e:	f000 8092 	beq.w	8005f76 <_dtoa_r+0x90e>
 8005e52:	f1c0 0320 	rsb	r3, r0, #32
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	f340 8085 	ble.w	8005f66 <_dtoa_r+0x8fe>
 8005e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5e:	f1c0 001c 	rsb	r0, r0, #28
 8005e62:	4403      	add	r3, r0
 8005e64:	4481      	add	r9, r0
 8005e66:	4407      	add	r7, r0
 8005e68:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6a:	f1b9 0f00 	cmp.w	r9, #0
 8005e6e:	dd05      	ble.n	8005e7c <_dtoa_r+0x814>
 8005e70:	4651      	mov	r1, sl
 8005e72:	464a      	mov	r2, r9
 8005e74:	4628      	mov	r0, r5
 8005e76:	f000 fce5 	bl	8006844 <__lshift>
 8005e7a:	4682      	mov	sl, r0
 8005e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	dd05      	ble.n	8005e8e <_dtoa_r+0x826>
 8005e82:	4621      	mov	r1, r4
 8005e84:	461a      	mov	r2, r3
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 fcdc 	bl	8006844 <__lshift>
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d072      	beq.n	8005f7a <_dtoa_r+0x912>
 8005e94:	4621      	mov	r1, r4
 8005e96:	4650      	mov	r0, sl
 8005e98:	f000 fd40 	bl	800691c <__mcmp>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	da6c      	bge.n	8005f7a <_dtoa_r+0x912>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4651      	mov	r1, sl
 8005ea4:	220a      	movs	r2, #10
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f000 fb20 	bl	80064ec <__multadd>
 8005eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eae:	4682      	mov	sl, r0
 8005eb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 81ac 	beq.w	8006212 <_dtoa_r+0xbaa>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	220a      	movs	r2, #10
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 fb13 	bl	80064ec <__multadd>
 8005ec6:	9b06      	ldr	r3, [sp, #24]
 8005ec8:	4606      	mov	r6, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f300 8093 	bgt.w	8005ff6 <_dtoa_r+0x98e>
 8005ed0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	dc59      	bgt.n	8005f8a <_dtoa_r+0x922>
 8005ed6:	e08e      	b.n	8005ff6 <_dtoa_r+0x98e>
 8005ed8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005eda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ede:	e75d      	b.n	8005d9c <_dtoa_r+0x734>
 8005ee0:	9b08      	ldr	r3, [sp, #32]
 8005ee2:	1e5c      	subs	r4, r3, #1
 8005ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee6:	42a3      	cmp	r3, r4
 8005ee8:	bfbf      	itttt	lt
 8005eea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005eec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005eee:	1ae3      	sublt	r3, r4, r3
 8005ef0:	18d2      	addlt	r2, r2, r3
 8005ef2:	bfa8      	it	ge
 8005ef4:	1b1c      	subge	r4, r3, r4
 8005ef6:	9b08      	ldr	r3, [sp, #32]
 8005ef8:	bfbe      	ittt	lt
 8005efa:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005efc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005efe:	2400      	movlt	r4, #0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	bfb5      	itete	lt
 8005f04:	eba9 0703 	sublt.w	r7, r9, r3
 8005f08:	464f      	movge	r7, r9
 8005f0a:	2300      	movlt	r3, #0
 8005f0c:	9b08      	ldrge	r3, [sp, #32]
 8005f0e:	e747      	b.n	8005da0 <_dtoa_r+0x738>
 8005f10:	464f      	mov	r7, r9
 8005f12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005f16:	e74c      	b.n	8005db2 <_dtoa_r+0x74a>
 8005f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f1a:	e773      	b.n	8005e04 <_dtoa_r+0x79c>
 8005f1c:	3fe00000 	.word	0x3fe00000
 8005f20:	40240000 	.word	0x40240000
 8005f24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	dc18      	bgt.n	8005f5c <_dtoa_r+0x8f4>
 8005f2a:	9b04      	ldr	r3, [sp, #16]
 8005f2c:	b9b3      	cbnz	r3, 8005f5c <_dtoa_r+0x8f4>
 8005f2e:	9b05      	ldr	r3, [sp, #20]
 8005f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f34:	b993      	cbnz	r3, 8005f5c <_dtoa_r+0x8f4>
 8005f36:	9b05      	ldr	r3, [sp, #20]
 8005f38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f3c:	0d1b      	lsrs	r3, r3, #20
 8005f3e:	051b      	lsls	r3, r3, #20
 8005f40:	b17b      	cbz	r3, 8005f62 <_dtoa_r+0x8fa>
 8005f42:	f04f 0801 	mov.w	r8, #1
 8005f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f48:	f109 0901 	add.w	r9, r9, #1
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f47f af6f 	bne.w	8005e36 <_dtoa_r+0x7ce>
 8005f58:	2001      	movs	r0, #1
 8005f5a:	e774      	b.n	8005e46 <_dtoa_r+0x7de>
 8005f5c:	f04f 0800 	mov.w	r8, #0
 8005f60:	e7f6      	b.n	8005f50 <_dtoa_r+0x8e8>
 8005f62:	4698      	mov	r8, r3
 8005f64:	e7f4      	b.n	8005f50 <_dtoa_r+0x8e8>
 8005f66:	d080      	beq.n	8005e6a <_dtoa_r+0x802>
 8005f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f6a:	331c      	adds	r3, #28
 8005f6c:	441a      	add	r2, r3
 8005f6e:	4499      	add	r9, r3
 8005f70:	441f      	add	r7, r3
 8005f72:	9209      	str	r2, [sp, #36]	; 0x24
 8005f74:	e779      	b.n	8005e6a <_dtoa_r+0x802>
 8005f76:	4603      	mov	r3, r0
 8005f78:	e7f6      	b.n	8005f68 <_dtoa_r+0x900>
 8005f7a:	9b08      	ldr	r3, [sp, #32]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	dc34      	bgt.n	8005fea <_dtoa_r+0x982>
 8005f80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	dd31      	ble.n	8005fea <_dtoa_r+0x982>
 8005f86:	9b08      	ldr	r3, [sp, #32]
 8005f88:	9306      	str	r3, [sp, #24]
 8005f8a:	9b06      	ldr	r3, [sp, #24]
 8005f8c:	b963      	cbnz	r3, 8005fa8 <_dtoa_r+0x940>
 8005f8e:	4621      	mov	r1, r4
 8005f90:	2205      	movs	r2, #5
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 faaa 	bl	80064ec <__multadd>
 8005f98:	4601      	mov	r1, r0
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	4650      	mov	r0, sl
 8005f9e:	f000 fcbd 	bl	800691c <__mcmp>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	f73f adbf 	bgt.w	8005b26 <_dtoa_r+0x4be>
 8005fa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005faa:	9f03      	ldr	r7, [sp, #12]
 8005fac:	ea6f 0b03 	mvn.w	fp, r3
 8005fb0:	f04f 0800 	mov.w	r8, #0
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f000 fa76 	bl	80064a8 <_Bfree>
 8005fbc:	2e00      	cmp	r6, #0
 8005fbe:	f43f aead 	beq.w	8005d1c <_dtoa_r+0x6b4>
 8005fc2:	f1b8 0f00 	cmp.w	r8, #0
 8005fc6:	d005      	beq.n	8005fd4 <_dtoa_r+0x96c>
 8005fc8:	45b0      	cmp	r8, r6
 8005fca:	d003      	beq.n	8005fd4 <_dtoa_r+0x96c>
 8005fcc:	4641      	mov	r1, r8
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 fa6a 	bl	80064a8 <_Bfree>
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 fa66 	bl	80064a8 <_Bfree>
 8005fdc:	e69e      	b.n	8005d1c <_dtoa_r+0x6b4>
 8005fde:	2400      	movs	r4, #0
 8005fe0:	4626      	mov	r6, r4
 8005fe2:	e7e1      	b.n	8005fa8 <_dtoa_r+0x940>
 8005fe4:	46c3      	mov	fp, r8
 8005fe6:	4626      	mov	r6, r4
 8005fe8:	e59d      	b.n	8005b26 <_dtoa_r+0x4be>
 8005fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 80c8 	beq.w	8006182 <_dtoa_r+0xb1a>
 8005ff2:	9b08      	ldr	r3, [sp, #32]
 8005ff4:	9306      	str	r3, [sp, #24]
 8005ff6:	2f00      	cmp	r7, #0
 8005ff8:	dd05      	ble.n	8006006 <_dtoa_r+0x99e>
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	463a      	mov	r2, r7
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 fc20 	bl	8006844 <__lshift>
 8006004:	4606      	mov	r6, r0
 8006006:	f1b8 0f00 	cmp.w	r8, #0
 800600a:	d05b      	beq.n	80060c4 <_dtoa_r+0xa5c>
 800600c:	4628      	mov	r0, r5
 800600e:	6871      	ldr	r1, [r6, #4]
 8006010:	f000 fa0a 	bl	8006428 <_Balloc>
 8006014:	4607      	mov	r7, r0
 8006016:	b928      	cbnz	r0, 8006024 <_dtoa_r+0x9bc>
 8006018:	4602      	mov	r2, r0
 800601a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800601e:	4b81      	ldr	r3, [pc, #516]	; (8006224 <_dtoa_r+0xbbc>)
 8006020:	f7ff bb36 	b.w	8005690 <_dtoa_r+0x28>
 8006024:	6932      	ldr	r2, [r6, #16]
 8006026:	f106 010c 	add.w	r1, r6, #12
 800602a:	3202      	adds	r2, #2
 800602c:	0092      	lsls	r2, r2, #2
 800602e:	300c      	adds	r0, #12
 8006030:	f000 ff9e 	bl	8006f70 <memcpy>
 8006034:	2201      	movs	r2, #1
 8006036:	4639      	mov	r1, r7
 8006038:	4628      	mov	r0, r5
 800603a:	f000 fc03 	bl	8006844 <__lshift>
 800603e:	46b0      	mov	r8, r6
 8006040:	4606      	mov	r6, r0
 8006042:	9b03      	ldr	r3, [sp, #12]
 8006044:	9a03      	ldr	r2, [sp, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	9308      	str	r3, [sp, #32]
 800604a:	9b06      	ldr	r3, [sp, #24]
 800604c:	4413      	add	r3, r2
 800604e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006050:	9b04      	ldr	r3, [sp, #16]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	930a      	str	r3, [sp, #40]	; 0x28
 8006058:	9b08      	ldr	r3, [sp, #32]
 800605a:	4621      	mov	r1, r4
 800605c:	3b01      	subs	r3, #1
 800605e:	4650      	mov	r0, sl
 8006060:	9304      	str	r3, [sp, #16]
 8006062:	f7ff fa78 	bl	8005556 <quorem>
 8006066:	4641      	mov	r1, r8
 8006068:	9006      	str	r0, [sp, #24]
 800606a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800606e:	4650      	mov	r0, sl
 8006070:	f000 fc54 	bl	800691c <__mcmp>
 8006074:	4632      	mov	r2, r6
 8006076:	9009      	str	r0, [sp, #36]	; 0x24
 8006078:	4621      	mov	r1, r4
 800607a:	4628      	mov	r0, r5
 800607c:	f000 fc6a 	bl	8006954 <__mdiff>
 8006080:	68c2      	ldr	r2, [r0, #12]
 8006082:	4607      	mov	r7, r0
 8006084:	bb02      	cbnz	r2, 80060c8 <_dtoa_r+0xa60>
 8006086:	4601      	mov	r1, r0
 8006088:	4650      	mov	r0, sl
 800608a:	f000 fc47 	bl	800691c <__mcmp>
 800608e:	4602      	mov	r2, r0
 8006090:	4639      	mov	r1, r7
 8006092:	4628      	mov	r0, r5
 8006094:	920c      	str	r2, [sp, #48]	; 0x30
 8006096:	f000 fa07 	bl	80064a8 <_Bfree>
 800609a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800609c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800609e:	9f08      	ldr	r7, [sp, #32]
 80060a0:	ea43 0102 	orr.w	r1, r3, r2
 80060a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a6:	4319      	orrs	r1, r3
 80060a8:	d110      	bne.n	80060cc <_dtoa_r+0xa64>
 80060aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060ae:	d029      	beq.n	8006104 <_dtoa_r+0xa9c>
 80060b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	dd02      	ble.n	80060bc <_dtoa_r+0xa54>
 80060b6:	9b06      	ldr	r3, [sp, #24]
 80060b8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	f883 9000 	strb.w	r9, [r3]
 80060c2:	e777      	b.n	8005fb4 <_dtoa_r+0x94c>
 80060c4:	4630      	mov	r0, r6
 80060c6:	e7ba      	b.n	800603e <_dtoa_r+0x9d6>
 80060c8:	2201      	movs	r2, #1
 80060ca:	e7e1      	b.n	8006090 <_dtoa_r+0xa28>
 80060cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	db04      	blt.n	80060dc <_dtoa_r+0xa74>
 80060d2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80060d4:	430b      	orrs	r3, r1
 80060d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060d8:	430b      	orrs	r3, r1
 80060da:	d120      	bne.n	800611e <_dtoa_r+0xab6>
 80060dc:	2a00      	cmp	r2, #0
 80060de:	dded      	ble.n	80060bc <_dtoa_r+0xa54>
 80060e0:	4651      	mov	r1, sl
 80060e2:	2201      	movs	r2, #1
 80060e4:	4628      	mov	r0, r5
 80060e6:	f000 fbad 	bl	8006844 <__lshift>
 80060ea:	4621      	mov	r1, r4
 80060ec:	4682      	mov	sl, r0
 80060ee:	f000 fc15 	bl	800691c <__mcmp>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	dc03      	bgt.n	80060fe <_dtoa_r+0xa96>
 80060f6:	d1e1      	bne.n	80060bc <_dtoa_r+0xa54>
 80060f8:	f019 0f01 	tst.w	r9, #1
 80060fc:	d0de      	beq.n	80060bc <_dtoa_r+0xa54>
 80060fe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006102:	d1d8      	bne.n	80060b6 <_dtoa_r+0xa4e>
 8006104:	2339      	movs	r3, #57	; 0x39
 8006106:	9a04      	ldr	r2, [sp, #16]
 8006108:	7013      	strb	r3, [r2, #0]
 800610a:	463b      	mov	r3, r7
 800610c:	461f      	mov	r7, r3
 800610e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006112:	3b01      	subs	r3, #1
 8006114:	2a39      	cmp	r2, #57	; 0x39
 8006116:	d06b      	beq.n	80061f0 <_dtoa_r+0xb88>
 8006118:	3201      	adds	r2, #1
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e74a      	b.n	8005fb4 <_dtoa_r+0x94c>
 800611e:	2a00      	cmp	r2, #0
 8006120:	dd07      	ble.n	8006132 <_dtoa_r+0xaca>
 8006122:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006126:	d0ed      	beq.n	8006104 <_dtoa_r+0xa9c>
 8006128:	9a04      	ldr	r2, [sp, #16]
 800612a:	f109 0301 	add.w	r3, r9, #1
 800612e:	7013      	strb	r3, [r2, #0]
 8006130:	e740      	b.n	8005fb4 <_dtoa_r+0x94c>
 8006132:	9b08      	ldr	r3, [sp, #32]
 8006134:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006136:	f803 9c01 	strb.w	r9, [r3, #-1]
 800613a:	4293      	cmp	r3, r2
 800613c:	d042      	beq.n	80061c4 <_dtoa_r+0xb5c>
 800613e:	4651      	mov	r1, sl
 8006140:	2300      	movs	r3, #0
 8006142:	220a      	movs	r2, #10
 8006144:	4628      	mov	r0, r5
 8006146:	f000 f9d1 	bl	80064ec <__multadd>
 800614a:	45b0      	cmp	r8, r6
 800614c:	4682      	mov	sl, r0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	f04f 020a 	mov.w	r2, #10
 8006156:	4641      	mov	r1, r8
 8006158:	4628      	mov	r0, r5
 800615a:	d107      	bne.n	800616c <_dtoa_r+0xb04>
 800615c:	f000 f9c6 	bl	80064ec <__multadd>
 8006160:	4680      	mov	r8, r0
 8006162:	4606      	mov	r6, r0
 8006164:	9b08      	ldr	r3, [sp, #32]
 8006166:	3301      	adds	r3, #1
 8006168:	9308      	str	r3, [sp, #32]
 800616a:	e775      	b.n	8006058 <_dtoa_r+0x9f0>
 800616c:	f000 f9be 	bl	80064ec <__multadd>
 8006170:	4631      	mov	r1, r6
 8006172:	4680      	mov	r8, r0
 8006174:	2300      	movs	r3, #0
 8006176:	220a      	movs	r2, #10
 8006178:	4628      	mov	r0, r5
 800617a:	f000 f9b7 	bl	80064ec <__multadd>
 800617e:	4606      	mov	r6, r0
 8006180:	e7f0      	b.n	8006164 <_dtoa_r+0xafc>
 8006182:	9b08      	ldr	r3, [sp, #32]
 8006184:	9306      	str	r3, [sp, #24]
 8006186:	9f03      	ldr	r7, [sp, #12]
 8006188:	4621      	mov	r1, r4
 800618a:	4650      	mov	r0, sl
 800618c:	f7ff f9e3 	bl	8005556 <quorem>
 8006190:	9b03      	ldr	r3, [sp, #12]
 8006192:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006196:	f807 9b01 	strb.w	r9, [r7], #1
 800619a:	1afa      	subs	r2, r7, r3
 800619c:	9b06      	ldr	r3, [sp, #24]
 800619e:	4293      	cmp	r3, r2
 80061a0:	dd07      	ble.n	80061b2 <_dtoa_r+0xb4a>
 80061a2:	4651      	mov	r1, sl
 80061a4:	2300      	movs	r3, #0
 80061a6:	220a      	movs	r2, #10
 80061a8:	4628      	mov	r0, r5
 80061aa:	f000 f99f 	bl	80064ec <__multadd>
 80061ae:	4682      	mov	sl, r0
 80061b0:	e7ea      	b.n	8006188 <_dtoa_r+0xb20>
 80061b2:	9b06      	ldr	r3, [sp, #24]
 80061b4:	f04f 0800 	mov.w	r8, #0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	bfcc      	ite	gt
 80061bc:	461f      	movgt	r7, r3
 80061be:	2701      	movle	r7, #1
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	441f      	add	r7, r3
 80061c4:	4651      	mov	r1, sl
 80061c6:	2201      	movs	r2, #1
 80061c8:	4628      	mov	r0, r5
 80061ca:	f000 fb3b 	bl	8006844 <__lshift>
 80061ce:	4621      	mov	r1, r4
 80061d0:	4682      	mov	sl, r0
 80061d2:	f000 fba3 	bl	800691c <__mcmp>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	dc97      	bgt.n	800610a <_dtoa_r+0xaa2>
 80061da:	d102      	bne.n	80061e2 <_dtoa_r+0xb7a>
 80061dc:	f019 0f01 	tst.w	r9, #1
 80061e0:	d193      	bne.n	800610a <_dtoa_r+0xaa2>
 80061e2:	463b      	mov	r3, r7
 80061e4:	461f      	mov	r7, r3
 80061e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ea:	2a30      	cmp	r2, #48	; 0x30
 80061ec:	d0fa      	beq.n	80061e4 <_dtoa_r+0xb7c>
 80061ee:	e6e1      	b.n	8005fb4 <_dtoa_r+0x94c>
 80061f0:	9a03      	ldr	r2, [sp, #12]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d18a      	bne.n	800610c <_dtoa_r+0xaa4>
 80061f6:	2331      	movs	r3, #49	; 0x31
 80061f8:	f10b 0b01 	add.w	fp, fp, #1
 80061fc:	e797      	b.n	800612e <_dtoa_r+0xac6>
 80061fe:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <_dtoa_r+0xbc0>)
 8006200:	f7ff ba9f 	b.w	8005742 <_dtoa_r+0xda>
 8006204:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006206:	2b00      	cmp	r3, #0
 8006208:	f47f aa77 	bne.w	80056fa <_dtoa_r+0x92>
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <_dtoa_r+0xbc4>)
 800620e:	f7ff ba98 	b.w	8005742 <_dtoa_r+0xda>
 8006212:	9b06      	ldr	r3, [sp, #24]
 8006214:	2b00      	cmp	r3, #0
 8006216:	dcb6      	bgt.n	8006186 <_dtoa_r+0xb1e>
 8006218:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800621a:	2b02      	cmp	r3, #2
 800621c:	f73f aeb5 	bgt.w	8005f8a <_dtoa_r+0x922>
 8006220:	e7b1      	b.n	8006186 <_dtoa_r+0xb1e>
 8006222:	bf00      	nop
 8006224:	0800770e 	.word	0x0800770e
 8006228:	0800766e 	.word	0x0800766e
 800622c:	08007692 	.word	0x08007692

08006230 <_free_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4605      	mov	r5, r0
 8006234:	2900      	cmp	r1, #0
 8006236:	d040      	beq.n	80062ba <_free_r+0x8a>
 8006238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800623c:	1f0c      	subs	r4, r1, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	bfb8      	it	lt
 8006242:	18e4      	addlt	r4, r4, r3
 8006244:	f000 f8e4 	bl	8006410 <__malloc_lock>
 8006248:	4a1c      	ldr	r2, [pc, #112]	; (80062bc <_free_r+0x8c>)
 800624a:	6813      	ldr	r3, [r2, #0]
 800624c:	b933      	cbnz	r3, 800625c <_free_r+0x2c>
 800624e:	6063      	str	r3, [r4, #4]
 8006250:	6014      	str	r4, [r2, #0]
 8006252:	4628      	mov	r0, r5
 8006254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006258:	f000 b8e0 	b.w	800641c <__malloc_unlock>
 800625c:	42a3      	cmp	r3, r4
 800625e:	d908      	bls.n	8006272 <_free_r+0x42>
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	1821      	adds	r1, r4, r0
 8006264:	428b      	cmp	r3, r1
 8006266:	bf01      	itttt	eq
 8006268:	6819      	ldreq	r1, [r3, #0]
 800626a:	685b      	ldreq	r3, [r3, #4]
 800626c:	1809      	addeq	r1, r1, r0
 800626e:	6021      	streq	r1, [r4, #0]
 8006270:	e7ed      	b.n	800624e <_free_r+0x1e>
 8006272:	461a      	mov	r2, r3
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	b10b      	cbz	r3, 800627c <_free_r+0x4c>
 8006278:	42a3      	cmp	r3, r4
 800627a:	d9fa      	bls.n	8006272 <_free_r+0x42>
 800627c:	6811      	ldr	r1, [r2, #0]
 800627e:	1850      	adds	r0, r2, r1
 8006280:	42a0      	cmp	r0, r4
 8006282:	d10b      	bne.n	800629c <_free_r+0x6c>
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	4401      	add	r1, r0
 8006288:	1850      	adds	r0, r2, r1
 800628a:	4283      	cmp	r3, r0
 800628c:	6011      	str	r1, [r2, #0]
 800628e:	d1e0      	bne.n	8006252 <_free_r+0x22>
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	4408      	add	r0, r1
 8006296:	6010      	str	r0, [r2, #0]
 8006298:	6053      	str	r3, [r2, #4]
 800629a:	e7da      	b.n	8006252 <_free_r+0x22>
 800629c:	d902      	bls.n	80062a4 <_free_r+0x74>
 800629e:	230c      	movs	r3, #12
 80062a0:	602b      	str	r3, [r5, #0]
 80062a2:	e7d6      	b.n	8006252 <_free_r+0x22>
 80062a4:	6820      	ldr	r0, [r4, #0]
 80062a6:	1821      	adds	r1, r4, r0
 80062a8:	428b      	cmp	r3, r1
 80062aa:	bf01      	itttt	eq
 80062ac:	6819      	ldreq	r1, [r3, #0]
 80062ae:	685b      	ldreq	r3, [r3, #4]
 80062b0:	1809      	addeq	r1, r1, r0
 80062b2:	6021      	streq	r1, [r4, #0]
 80062b4:	6063      	str	r3, [r4, #4]
 80062b6:	6054      	str	r4, [r2, #4]
 80062b8:	e7cb      	b.n	8006252 <_free_r+0x22>
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	200004b0 	.word	0x200004b0

080062c0 <malloc>:
 80062c0:	4b02      	ldr	r3, [pc, #8]	; (80062cc <malloc+0xc>)
 80062c2:	4601      	mov	r1, r0
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	f000 b823 	b.w	8006310 <_malloc_r>
 80062ca:	bf00      	nop
 80062cc:	20000068 	.word	0x20000068

080062d0 <sbrk_aligned>:
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	4e0e      	ldr	r6, [pc, #56]	; (800630c <sbrk_aligned+0x3c>)
 80062d4:	460c      	mov	r4, r1
 80062d6:	6831      	ldr	r1, [r6, #0]
 80062d8:	4605      	mov	r5, r0
 80062da:	b911      	cbnz	r1, 80062e2 <sbrk_aligned+0x12>
 80062dc:	f000 fe38 	bl	8006f50 <_sbrk_r>
 80062e0:	6030      	str	r0, [r6, #0]
 80062e2:	4621      	mov	r1, r4
 80062e4:	4628      	mov	r0, r5
 80062e6:	f000 fe33 	bl	8006f50 <_sbrk_r>
 80062ea:	1c43      	adds	r3, r0, #1
 80062ec:	d00a      	beq.n	8006304 <sbrk_aligned+0x34>
 80062ee:	1cc4      	adds	r4, r0, #3
 80062f0:	f024 0403 	bic.w	r4, r4, #3
 80062f4:	42a0      	cmp	r0, r4
 80062f6:	d007      	beq.n	8006308 <sbrk_aligned+0x38>
 80062f8:	1a21      	subs	r1, r4, r0
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 fe28 	bl	8006f50 <_sbrk_r>
 8006300:	3001      	adds	r0, #1
 8006302:	d101      	bne.n	8006308 <sbrk_aligned+0x38>
 8006304:	f04f 34ff 	mov.w	r4, #4294967295
 8006308:	4620      	mov	r0, r4
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	200004b4 	.word	0x200004b4

08006310 <_malloc_r>:
 8006310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006314:	1ccd      	adds	r5, r1, #3
 8006316:	f025 0503 	bic.w	r5, r5, #3
 800631a:	3508      	adds	r5, #8
 800631c:	2d0c      	cmp	r5, #12
 800631e:	bf38      	it	cc
 8006320:	250c      	movcc	r5, #12
 8006322:	2d00      	cmp	r5, #0
 8006324:	4607      	mov	r7, r0
 8006326:	db01      	blt.n	800632c <_malloc_r+0x1c>
 8006328:	42a9      	cmp	r1, r5
 800632a:	d905      	bls.n	8006338 <_malloc_r+0x28>
 800632c:	230c      	movs	r3, #12
 800632e:	2600      	movs	r6, #0
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	4630      	mov	r0, r6
 8006334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006338:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800640c <_malloc_r+0xfc>
 800633c:	f000 f868 	bl	8006410 <__malloc_lock>
 8006340:	f8d8 3000 	ldr.w	r3, [r8]
 8006344:	461c      	mov	r4, r3
 8006346:	bb5c      	cbnz	r4, 80063a0 <_malloc_r+0x90>
 8006348:	4629      	mov	r1, r5
 800634a:	4638      	mov	r0, r7
 800634c:	f7ff ffc0 	bl	80062d0 <sbrk_aligned>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	4604      	mov	r4, r0
 8006354:	d155      	bne.n	8006402 <_malloc_r+0xf2>
 8006356:	f8d8 4000 	ldr.w	r4, [r8]
 800635a:	4626      	mov	r6, r4
 800635c:	2e00      	cmp	r6, #0
 800635e:	d145      	bne.n	80063ec <_malloc_r+0xdc>
 8006360:	2c00      	cmp	r4, #0
 8006362:	d048      	beq.n	80063f6 <_malloc_r+0xe6>
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	4631      	mov	r1, r6
 8006368:	4638      	mov	r0, r7
 800636a:	eb04 0903 	add.w	r9, r4, r3
 800636e:	f000 fdef 	bl	8006f50 <_sbrk_r>
 8006372:	4581      	cmp	r9, r0
 8006374:	d13f      	bne.n	80063f6 <_malloc_r+0xe6>
 8006376:	6821      	ldr	r1, [r4, #0]
 8006378:	4638      	mov	r0, r7
 800637a:	1a6d      	subs	r5, r5, r1
 800637c:	4629      	mov	r1, r5
 800637e:	f7ff ffa7 	bl	80062d0 <sbrk_aligned>
 8006382:	3001      	adds	r0, #1
 8006384:	d037      	beq.n	80063f6 <_malloc_r+0xe6>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	442b      	add	r3, r5
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	f8d8 3000 	ldr.w	r3, [r8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d038      	beq.n	8006406 <_malloc_r+0xf6>
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	42a2      	cmp	r2, r4
 8006398:	d12b      	bne.n	80063f2 <_malloc_r+0xe2>
 800639a:	2200      	movs	r2, #0
 800639c:	605a      	str	r2, [r3, #4]
 800639e:	e00f      	b.n	80063c0 <_malloc_r+0xb0>
 80063a0:	6822      	ldr	r2, [r4, #0]
 80063a2:	1b52      	subs	r2, r2, r5
 80063a4:	d41f      	bmi.n	80063e6 <_malloc_r+0xd6>
 80063a6:	2a0b      	cmp	r2, #11
 80063a8:	d917      	bls.n	80063da <_malloc_r+0xca>
 80063aa:	1961      	adds	r1, r4, r5
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	6025      	str	r5, [r4, #0]
 80063b0:	bf18      	it	ne
 80063b2:	6059      	strne	r1, [r3, #4]
 80063b4:	6863      	ldr	r3, [r4, #4]
 80063b6:	bf08      	it	eq
 80063b8:	f8c8 1000 	streq.w	r1, [r8]
 80063bc:	5162      	str	r2, [r4, r5]
 80063be:	604b      	str	r3, [r1, #4]
 80063c0:	4638      	mov	r0, r7
 80063c2:	f104 060b 	add.w	r6, r4, #11
 80063c6:	f000 f829 	bl	800641c <__malloc_unlock>
 80063ca:	f026 0607 	bic.w	r6, r6, #7
 80063ce:	1d23      	adds	r3, r4, #4
 80063d0:	1af2      	subs	r2, r6, r3
 80063d2:	d0ae      	beq.n	8006332 <_malloc_r+0x22>
 80063d4:	1b9b      	subs	r3, r3, r6
 80063d6:	50a3      	str	r3, [r4, r2]
 80063d8:	e7ab      	b.n	8006332 <_malloc_r+0x22>
 80063da:	42a3      	cmp	r3, r4
 80063dc:	6862      	ldr	r2, [r4, #4]
 80063de:	d1dd      	bne.n	800639c <_malloc_r+0x8c>
 80063e0:	f8c8 2000 	str.w	r2, [r8]
 80063e4:	e7ec      	b.n	80063c0 <_malloc_r+0xb0>
 80063e6:	4623      	mov	r3, r4
 80063e8:	6864      	ldr	r4, [r4, #4]
 80063ea:	e7ac      	b.n	8006346 <_malloc_r+0x36>
 80063ec:	4634      	mov	r4, r6
 80063ee:	6876      	ldr	r6, [r6, #4]
 80063f0:	e7b4      	b.n	800635c <_malloc_r+0x4c>
 80063f2:	4613      	mov	r3, r2
 80063f4:	e7cc      	b.n	8006390 <_malloc_r+0x80>
 80063f6:	230c      	movs	r3, #12
 80063f8:	4638      	mov	r0, r7
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	f000 f80e 	bl	800641c <__malloc_unlock>
 8006400:	e797      	b.n	8006332 <_malloc_r+0x22>
 8006402:	6025      	str	r5, [r4, #0]
 8006404:	e7dc      	b.n	80063c0 <_malloc_r+0xb0>
 8006406:	605b      	str	r3, [r3, #4]
 8006408:	deff      	udf	#255	; 0xff
 800640a:	bf00      	nop
 800640c:	200004b0 	.word	0x200004b0

08006410 <__malloc_lock>:
 8006410:	4801      	ldr	r0, [pc, #4]	; (8006418 <__malloc_lock+0x8>)
 8006412:	f7ff b890 	b.w	8005536 <__retarget_lock_acquire_recursive>
 8006416:	bf00      	nop
 8006418:	200004ac 	.word	0x200004ac

0800641c <__malloc_unlock>:
 800641c:	4801      	ldr	r0, [pc, #4]	; (8006424 <__malloc_unlock+0x8>)
 800641e:	f7ff b88b 	b.w	8005538 <__retarget_lock_release_recursive>
 8006422:	bf00      	nop
 8006424:	200004ac 	.word	0x200004ac

08006428 <_Balloc>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	69c6      	ldr	r6, [r0, #28]
 800642c:	4604      	mov	r4, r0
 800642e:	460d      	mov	r5, r1
 8006430:	b976      	cbnz	r6, 8006450 <_Balloc+0x28>
 8006432:	2010      	movs	r0, #16
 8006434:	f7ff ff44 	bl	80062c0 <malloc>
 8006438:	4602      	mov	r2, r0
 800643a:	61e0      	str	r0, [r4, #28]
 800643c:	b920      	cbnz	r0, 8006448 <_Balloc+0x20>
 800643e:	216b      	movs	r1, #107	; 0x6b
 8006440:	4b17      	ldr	r3, [pc, #92]	; (80064a0 <_Balloc+0x78>)
 8006442:	4818      	ldr	r0, [pc, #96]	; (80064a4 <_Balloc+0x7c>)
 8006444:	f000 fda2 	bl	8006f8c <__assert_func>
 8006448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800644c:	6006      	str	r6, [r0, #0]
 800644e:	60c6      	str	r6, [r0, #12]
 8006450:	69e6      	ldr	r6, [r4, #28]
 8006452:	68f3      	ldr	r3, [r6, #12]
 8006454:	b183      	cbz	r3, 8006478 <_Balloc+0x50>
 8006456:	69e3      	ldr	r3, [r4, #28]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800645e:	b9b8      	cbnz	r0, 8006490 <_Balloc+0x68>
 8006460:	2101      	movs	r1, #1
 8006462:	fa01 f605 	lsl.w	r6, r1, r5
 8006466:	1d72      	adds	r2, r6, #5
 8006468:	4620      	mov	r0, r4
 800646a:	0092      	lsls	r2, r2, #2
 800646c:	f000 fdac 	bl	8006fc8 <_calloc_r>
 8006470:	b160      	cbz	r0, 800648c <_Balloc+0x64>
 8006472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006476:	e00e      	b.n	8006496 <_Balloc+0x6e>
 8006478:	2221      	movs	r2, #33	; 0x21
 800647a:	2104      	movs	r1, #4
 800647c:	4620      	mov	r0, r4
 800647e:	f000 fda3 	bl	8006fc8 <_calloc_r>
 8006482:	69e3      	ldr	r3, [r4, #28]
 8006484:	60f0      	str	r0, [r6, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e4      	bne.n	8006456 <_Balloc+0x2e>
 800648c:	2000      	movs	r0, #0
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	6802      	ldr	r2, [r0, #0]
 8006492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006496:	2300      	movs	r3, #0
 8006498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800649c:	e7f7      	b.n	800648e <_Balloc+0x66>
 800649e:	bf00      	nop
 80064a0:	0800769f 	.word	0x0800769f
 80064a4:	0800771f 	.word	0x0800771f

080064a8 <_Bfree>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	69c6      	ldr	r6, [r0, #28]
 80064ac:	4605      	mov	r5, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	b976      	cbnz	r6, 80064d0 <_Bfree+0x28>
 80064b2:	2010      	movs	r0, #16
 80064b4:	f7ff ff04 	bl	80062c0 <malloc>
 80064b8:	4602      	mov	r2, r0
 80064ba:	61e8      	str	r0, [r5, #28]
 80064bc:	b920      	cbnz	r0, 80064c8 <_Bfree+0x20>
 80064be:	218f      	movs	r1, #143	; 0x8f
 80064c0:	4b08      	ldr	r3, [pc, #32]	; (80064e4 <_Bfree+0x3c>)
 80064c2:	4809      	ldr	r0, [pc, #36]	; (80064e8 <_Bfree+0x40>)
 80064c4:	f000 fd62 	bl	8006f8c <__assert_func>
 80064c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064cc:	6006      	str	r6, [r0, #0]
 80064ce:	60c6      	str	r6, [r0, #12]
 80064d0:	b13c      	cbz	r4, 80064e2 <_Bfree+0x3a>
 80064d2:	69eb      	ldr	r3, [r5, #28]
 80064d4:	6862      	ldr	r2, [r4, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064dc:	6021      	str	r1, [r4, #0]
 80064de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	0800769f 	.word	0x0800769f
 80064e8:	0800771f 	.word	0x0800771f

080064ec <__multadd>:
 80064ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f0:	4607      	mov	r7, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	461e      	mov	r6, r3
 80064f6:	2000      	movs	r0, #0
 80064f8:	690d      	ldr	r5, [r1, #16]
 80064fa:	f101 0c14 	add.w	ip, r1, #20
 80064fe:	f8dc 3000 	ldr.w	r3, [ip]
 8006502:	3001      	adds	r0, #1
 8006504:	b299      	uxth	r1, r3
 8006506:	fb02 6101 	mla	r1, r2, r1, r6
 800650a:	0c1e      	lsrs	r6, r3, #16
 800650c:	0c0b      	lsrs	r3, r1, #16
 800650e:	fb02 3306 	mla	r3, r2, r6, r3
 8006512:	b289      	uxth	r1, r1
 8006514:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006518:	4285      	cmp	r5, r0
 800651a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800651e:	f84c 1b04 	str.w	r1, [ip], #4
 8006522:	dcec      	bgt.n	80064fe <__multadd+0x12>
 8006524:	b30e      	cbz	r6, 800656a <__multadd+0x7e>
 8006526:	68a3      	ldr	r3, [r4, #8]
 8006528:	42ab      	cmp	r3, r5
 800652a:	dc19      	bgt.n	8006560 <__multadd+0x74>
 800652c:	6861      	ldr	r1, [r4, #4]
 800652e:	4638      	mov	r0, r7
 8006530:	3101      	adds	r1, #1
 8006532:	f7ff ff79 	bl	8006428 <_Balloc>
 8006536:	4680      	mov	r8, r0
 8006538:	b928      	cbnz	r0, 8006546 <__multadd+0x5a>
 800653a:	4602      	mov	r2, r0
 800653c:	21ba      	movs	r1, #186	; 0xba
 800653e:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <__multadd+0x84>)
 8006540:	480c      	ldr	r0, [pc, #48]	; (8006574 <__multadd+0x88>)
 8006542:	f000 fd23 	bl	8006f8c <__assert_func>
 8006546:	6922      	ldr	r2, [r4, #16]
 8006548:	f104 010c 	add.w	r1, r4, #12
 800654c:	3202      	adds	r2, #2
 800654e:	0092      	lsls	r2, r2, #2
 8006550:	300c      	adds	r0, #12
 8006552:	f000 fd0d 	bl	8006f70 <memcpy>
 8006556:	4621      	mov	r1, r4
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff ffa5 	bl	80064a8 <_Bfree>
 800655e:	4644      	mov	r4, r8
 8006560:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006564:	3501      	adds	r5, #1
 8006566:	615e      	str	r6, [r3, #20]
 8006568:	6125      	str	r5, [r4, #16]
 800656a:	4620      	mov	r0, r4
 800656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006570:	0800770e 	.word	0x0800770e
 8006574:	0800771f 	.word	0x0800771f

08006578 <__hi0bits>:
 8006578:	0c02      	lsrs	r2, r0, #16
 800657a:	0412      	lsls	r2, r2, #16
 800657c:	4603      	mov	r3, r0
 800657e:	b9ca      	cbnz	r2, 80065b4 <__hi0bits+0x3c>
 8006580:	0403      	lsls	r3, r0, #16
 8006582:	2010      	movs	r0, #16
 8006584:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006588:	bf04      	itt	eq
 800658a:	021b      	lsleq	r3, r3, #8
 800658c:	3008      	addeq	r0, #8
 800658e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006592:	bf04      	itt	eq
 8006594:	011b      	lsleq	r3, r3, #4
 8006596:	3004      	addeq	r0, #4
 8006598:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800659c:	bf04      	itt	eq
 800659e:	009b      	lsleq	r3, r3, #2
 80065a0:	3002      	addeq	r0, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	db05      	blt.n	80065b2 <__hi0bits+0x3a>
 80065a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80065aa:	f100 0001 	add.w	r0, r0, #1
 80065ae:	bf08      	it	eq
 80065b0:	2020      	moveq	r0, #32
 80065b2:	4770      	bx	lr
 80065b4:	2000      	movs	r0, #0
 80065b6:	e7e5      	b.n	8006584 <__hi0bits+0xc>

080065b8 <__lo0bits>:
 80065b8:	6803      	ldr	r3, [r0, #0]
 80065ba:	4602      	mov	r2, r0
 80065bc:	f013 0007 	ands.w	r0, r3, #7
 80065c0:	d00b      	beq.n	80065da <__lo0bits+0x22>
 80065c2:	07d9      	lsls	r1, r3, #31
 80065c4:	d421      	bmi.n	800660a <__lo0bits+0x52>
 80065c6:	0798      	lsls	r0, r3, #30
 80065c8:	bf49      	itett	mi
 80065ca:	085b      	lsrmi	r3, r3, #1
 80065cc:	089b      	lsrpl	r3, r3, #2
 80065ce:	2001      	movmi	r0, #1
 80065d0:	6013      	strmi	r3, [r2, #0]
 80065d2:	bf5c      	itt	pl
 80065d4:	2002      	movpl	r0, #2
 80065d6:	6013      	strpl	r3, [r2, #0]
 80065d8:	4770      	bx	lr
 80065da:	b299      	uxth	r1, r3
 80065dc:	b909      	cbnz	r1, 80065e2 <__lo0bits+0x2a>
 80065de:	2010      	movs	r0, #16
 80065e0:	0c1b      	lsrs	r3, r3, #16
 80065e2:	b2d9      	uxtb	r1, r3
 80065e4:	b909      	cbnz	r1, 80065ea <__lo0bits+0x32>
 80065e6:	3008      	adds	r0, #8
 80065e8:	0a1b      	lsrs	r3, r3, #8
 80065ea:	0719      	lsls	r1, r3, #28
 80065ec:	bf04      	itt	eq
 80065ee:	091b      	lsreq	r3, r3, #4
 80065f0:	3004      	addeq	r0, #4
 80065f2:	0799      	lsls	r1, r3, #30
 80065f4:	bf04      	itt	eq
 80065f6:	089b      	lsreq	r3, r3, #2
 80065f8:	3002      	addeq	r0, #2
 80065fa:	07d9      	lsls	r1, r3, #31
 80065fc:	d403      	bmi.n	8006606 <__lo0bits+0x4e>
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	f100 0001 	add.w	r0, r0, #1
 8006604:	d003      	beq.n	800660e <__lo0bits+0x56>
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	4770      	bx	lr
 800660a:	2000      	movs	r0, #0
 800660c:	4770      	bx	lr
 800660e:	2020      	movs	r0, #32
 8006610:	4770      	bx	lr
	...

08006614 <__i2b>:
 8006614:	b510      	push	{r4, lr}
 8006616:	460c      	mov	r4, r1
 8006618:	2101      	movs	r1, #1
 800661a:	f7ff ff05 	bl	8006428 <_Balloc>
 800661e:	4602      	mov	r2, r0
 8006620:	b928      	cbnz	r0, 800662e <__i2b+0x1a>
 8006622:	f240 1145 	movw	r1, #325	; 0x145
 8006626:	4b04      	ldr	r3, [pc, #16]	; (8006638 <__i2b+0x24>)
 8006628:	4804      	ldr	r0, [pc, #16]	; (800663c <__i2b+0x28>)
 800662a:	f000 fcaf 	bl	8006f8c <__assert_func>
 800662e:	2301      	movs	r3, #1
 8006630:	6144      	str	r4, [r0, #20]
 8006632:	6103      	str	r3, [r0, #16]
 8006634:	bd10      	pop	{r4, pc}
 8006636:	bf00      	nop
 8006638:	0800770e 	.word	0x0800770e
 800663c:	0800771f 	.word	0x0800771f

08006640 <__multiply>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	4691      	mov	r9, r2
 8006646:	690a      	ldr	r2, [r1, #16]
 8006648:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800664c:	460c      	mov	r4, r1
 800664e:	429a      	cmp	r2, r3
 8006650:	bfbe      	ittt	lt
 8006652:	460b      	movlt	r3, r1
 8006654:	464c      	movlt	r4, r9
 8006656:	4699      	movlt	r9, r3
 8006658:	6927      	ldr	r7, [r4, #16]
 800665a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800665e:	68a3      	ldr	r3, [r4, #8]
 8006660:	6861      	ldr	r1, [r4, #4]
 8006662:	eb07 060a 	add.w	r6, r7, sl
 8006666:	42b3      	cmp	r3, r6
 8006668:	b085      	sub	sp, #20
 800666a:	bfb8      	it	lt
 800666c:	3101      	addlt	r1, #1
 800666e:	f7ff fedb 	bl	8006428 <_Balloc>
 8006672:	b930      	cbnz	r0, 8006682 <__multiply+0x42>
 8006674:	4602      	mov	r2, r0
 8006676:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800667a:	4b43      	ldr	r3, [pc, #268]	; (8006788 <__multiply+0x148>)
 800667c:	4843      	ldr	r0, [pc, #268]	; (800678c <__multiply+0x14c>)
 800667e:	f000 fc85 	bl	8006f8c <__assert_func>
 8006682:	f100 0514 	add.w	r5, r0, #20
 8006686:	462b      	mov	r3, r5
 8006688:	2200      	movs	r2, #0
 800668a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800668e:	4543      	cmp	r3, r8
 8006690:	d321      	bcc.n	80066d6 <__multiply+0x96>
 8006692:	f104 0314 	add.w	r3, r4, #20
 8006696:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800669a:	f109 0314 	add.w	r3, r9, #20
 800669e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066a2:	9202      	str	r2, [sp, #8]
 80066a4:	1b3a      	subs	r2, r7, r4
 80066a6:	3a15      	subs	r2, #21
 80066a8:	f022 0203 	bic.w	r2, r2, #3
 80066ac:	3204      	adds	r2, #4
 80066ae:	f104 0115 	add.w	r1, r4, #21
 80066b2:	428f      	cmp	r7, r1
 80066b4:	bf38      	it	cc
 80066b6:	2204      	movcc	r2, #4
 80066b8:	9201      	str	r2, [sp, #4]
 80066ba:	9a02      	ldr	r2, [sp, #8]
 80066bc:	9303      	str	r3, [sp, #12]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d80c      	bhi.n	80066dc <__multiply+0x9c>
 80066c2:	2e00      	cmp	r6, #0
 80066c4:	dd03      	ble.n	80066ce <__multiply+0x8e>
 80066c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d05a      	beq.n	8006784 <__multiply+0x144>
 80066ce:	6106      	str	r6, [r0, #16]
 80066d0:	b005      	add	sp, #20
 80066d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d6:	f843 2b04 	str.w	r2, [r3], #4
 80066da:	e7d8      	b.n	800668e <__multiply+0x4e>
 80066dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80066e0:	f1ba 0f00 	cmp.w	sl, #0
 80066e4:	d023      	beq.n	800672e <__multiply+0xee>
 80066e6:	46a9      	mov	r9, r5
 80066e8:	f04f 0c00 	mov.w	ip, #0
 80066ec:	f104 0e14 	add.w	lr, r4, #20
 80066f0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80066f4:	f8d9 1000 	ldr.w	r1, [r9]
 80066f8:	fa1f fb82 	uxth.w	fp, r2
 80066fc:	b289      	uxth	r1, r1
 80066fe:	fb0a 110b 	mla	r1, sl, fp, r1
 8006702:	4461      	add	r1, ip
 8006704:	f8d9 c000 	ldr.w	ip, [r9]
 8006708:	0c12      	lsrs	r2, r2, #16
 800670a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800670e:	fb0a c202 	mla	r2, sl, r2, ip
 8006712:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006716:	b289      	uxth	r1, r1
 8006718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800671c:	4577      	cmp	r7, lr
 800671e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006722:	f849 1b04 	str.w	r1, [r9], #4
 8006726:	d8e3      	bhi.n	80066f0 <__multiply+0xb0>
 8006728:	9a01      	ldr	r2, [sp, #4]
 800672a:	f845 c002 	str.w	ip, [r5, r2]
 800672e:	9a03      	ldr	r2, [sp, #12]
 8006730:	3304      	adds	r3, #4
 8006732:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006736:	f1b9 0f00 	cmp.w	r9, #0
 800673a:	d021      	beq.n	8006780 <__multiply+0x140>
 800673c:	46ae      	mov	lr, r5
 800673e:	f04f 0a00 	mov.w	sl, #0
 8006742:	6829      	ldr	r1, [r5, #0]
 8006744:	f104 0c14 	add.w	ip, r4, #20
 8006748:	f8bc b000 	ldrh.w	fp, [ip]
 800674c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006750:	b289      	uxth	r1, r1
 8006752:	fb09 220b 	mla	r2, r9, fp, r2
 8006756:	4452      	add	r2, sl
 8006758:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800675c:	f84e 1b04 	str.w	r1, [lr], #4
 8006760:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006764:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006768:	f8be 1000 	ldrh.w	r1, [lr]
 800676c:	4567      	cmp	r7, ip
 800676e:	fb09 110a 	mla	r1, r9, sl, r1
 8006772:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006776:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800677a:	d8e5      	bhi.n	8006748 <__multiply+0x108>
 800677c:	9a01      	ldr	r2, [sp, #4]
 800677e:	50a9      	str	r1, [r5, r2]
 8006780:	3504      	adds	r5, #4
 8006782:	e79a      	b.n	80066ba <__multiply+0x7a>
 8006784:	3e01      	subs	r6, #1
 8006786:	e79c      	b.n	80066c2 <__multiply+0x82>
 8006788:	0800770e 	.word	0x0800770e
 800678c:	0800771f 	.word	0x0800771f

08006790 <__pow5mult>:
 8006790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006794:	4615      	mov	r5, r2
 8006796:	f012 0203 	ands.w	r2, r2, #3
 800679a:	4606      	mov	r6, r0
 800679c:	460f      	mov	r7, r1
 800679e:	d007      	beq.n	80067b0 <__pow5mult+0x20>
 80067a0:	4c25      	ldr	r4, [pc, #148]	; (8006838 <__pow5mult+0xa8>)
 80067a2:	3a01      	subs	r2, #1
 80067a4:	2300      	movs	r3, #0
 80067a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067aa:	f7ff fe9f 	bl	80064ec <__multadd>
 80067ae:	4607      	mov	r7, r0
 80067b0:	10ad      	asrs	r5, r5, #2
 80067b2:	d03d      	beq.n	8006830 <__pow5mult+0xa0>
 80067b4:	69f4      	ldr	r4, [r6, #28]
 80067b6:	b97c      	cbnz	r4, 80067d8 <__pow5mult+0x48>
 80067b8:	2010      	movs	r0, #16
 80067ba:	f7ff fd81 	bl	80062c0 <malloc>
 80067be:	4602      	mov	r2, r0
 80067c0:	61f0      	str	r0, [r6, #28]
 80067c2:	b928      	cbnz	r0, 80067d0 <__pow5mult+0x40>
 80067c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80067c8:	4b1c      	ldr	r3, [pc, #112]	; (800683c <__pow5mult+0xac>)
 80067ca:	481d      	ldr	r0, [pc, #116]	; (8006840 <__pow5mult+0xb0>)
 80067cc:	f000 fbde 	bl	8006f8c <__assert_func>
 80067d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067d4:	6004      	str	r4, [r0, #0]
 80067d6:	60c4      	str	r4, [r0, #12]
 80067d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80067dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067e0:	b94c      	cbnz	r4, 80067f6 <__pow5mult+0x66>
 80067e2:	f240 2171 	movw	r1, #625	; 0x271
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff ff14 	bl	8006614 <__i2b>
 80067ec:	2300      	movs	r3, #0
 80067ee:	4604      	mov	r4, r0
 80067f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80067f4:	6003      	str	r3, [r0, #0]
 80067f6:	f04f 0900 	mov.w	r9, #0
 80067fa:	07eb      	lsls	r3, r5, #31
 80067fc:	d50a      	bpl.n	8006814 <__pow5mult+0x84>
 80067fe:	4639      	mov	r1, r7
 8006800:	4622      	mov	r2, r4
 8006802:	4630      	mov	r0, r6
 8006804:	f7ff ff1c 	bl	8006640 <__multiply>
 8006808:	4680      	mov	r8, r0
 800680a:	4639      	mov	r1, r7
 800680c:	4630      	mov	r0, r6
 800680e:	f7ff fe4b 	bl	80064a8 <_Bfree>
 8006812:	4647      	mov	r7, r8
 8006814:	106d      	asrs	r5, r5, #1
 8006816:	d00b      	beq.n	8006830 <__pow5mult+0xa0>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	b938      	cbnz	r0, 800682c <__pow5mult+0x9c>
 800681c:	4622      	mov	r2, r4
 800681e:	4621      	mov	r1, r4
 8006820:	4630      	mov	r0, r6
 8006822:	f7ff ff0d 	bl	8006640 <__multiply>
 8006826:	6020      	str	r0, [r4, #0]
 8006828:	f8c0 9000 	str.w	r9, [r0]
 800682c:	4604      	mov	r4, r0
 800682e:	e7e4      	b.n	80067fa <__pow5mult+0x6a>
 8006830:	4638      	mov	r0, r7
 8006832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006836:	bf00      	nop
 8006838:	08007868 	.word	0x08007868
 800683c:	0800769f 	.word	0x0800769f
 8006840:	0800771f 	.word	0x0800771f

08006844 <__lshift>:
 8006844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	460c      	mov	r4, r1
 800684a:	4607      	mov	r7, r0
 800684c:	4691      	mov	r9, r2
 800684e:	6923      	ldr	r3, [r4, #16]
 8006850:	6849      	ldr	r1, [r1, #4]
 8006852:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006856:	68a3      	ldr	r3, [r4, #8]
 8006858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800685c:	f108 0601 	add.w	r6, r8, #1
 8006860:	42b3      	cmp	r3, r6
 8006862:	db0b      	blt.n	800687c <__lshift+0x38>
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff fddf 	bl	8006428 <_Balloc>
 800686a:	4605      	mov	r5, r0
 800686c:	b948      	cbnz	r0, 8006882 <__lshift+0x3e>
 800686e:	4602      	mov	r2, r0
 8006870:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006874:	4b27      	ldr	r3, [pc, #156]	; (8006914 <__lshift+0xd0>)
 8006876:	4828      	ldr	r0, [pc, #160]	; (8006918 <__lshift+0xd4>)
 8006878:	f000 fb88 	bl	8006f8c <__assert_func>
 800687c:	3101      	adds	r1, #1
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	e7ee      	b.n	8006860 <__lshift+0x1c>
 8006882:	2300      	movs	r3, #0
 8006884:	f100 0114 	add.w	r1, r0, #20
 8006888:	f100 0210 	add.w	r2, r0, #16
 800688c:	4618      	mov	r0, r3
 800688e:	4553      	cmp	r3, sl
 8006890:	db33      	blt.n	80068fa <__lshift+0xb6>
 8006892:	6920      	ldr	r0, [r4, #16]
 8006894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006898:	f104 0314 	add.w	r3, r4, #20
 800689c:	f019 091f 	ands.w	r9, r9, #31
 80068a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068a8:	d02b      	beq.n	8006902 <__lshift+0xbe>
 80068aa:	468a      	mov	sl, r1
 80068ac:	2200      	movs	r2, #0
 80068ae:	f1c9 0e20 	rsb	lr, r9, #32
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	fa00 f009 	lsl.w	r0, r0, r9
 80068b8:	4310      	orrs	r0, r2
 80068ba:	f84a 0b04 	str.w	r0, [sl], #4
 80068be:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c2:	459c      	cmp	ip, r3
 80068c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80068c8:	d8f3      	bhi.n	80068b2 <__lshift+0x6e>
 80068ca:	ebac 0304 	sub.w	r3, ip, r4
 80068ce:	3b15      	subs	r3, #21
 80068d0:	f023 0303 	bic.w	r3, r3, #3
 80068d4:	3304      	adds	r3, #4
 80068d6:	f104 0015 	add.w	r0, r4, #21
 80068da:	4584      	cmp	ip, r0
 80068dc:	bf38      	it	cc
 80068de:	2304      	movcc	r3, #4
 80068e0:	50ca      	str	r2, [r1, r3]
 80068e2:	b10a      	cbz	r2, 80068e8 <__lshift+0xa4>
 80068e4:	f108 0602 	add.w	r6, r8, #2
 80068e8:	3e01      	subs	r6, #1
 80068ea:	4638      	mov	r0, r7
 80068ec:	4621      	mov	r1, r4
 80068ee:	612e      	str	r6, [r5, #16]
 80068f0:	f7ff fdda 	bl	80064a8 <_Bfree>
 80068f4:	4628      	mov	r0, r5
 80068f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80068fe:	3301      	adds	r3, #1
 8006900:	e7c5      	b.n	800688e <__lshift+0x4a>
 8006902:	3904      	subs	r1, #4
 8006904:	f853 2b04 	ldr.w	r2, [r3], #4
 8006908:	459c      	cmp	ip, r3
 800690a:	f841 2f04 	str.w	r2, [r1, #4]!
 800690e:	d8f9      	bhi.n	8006904 <__lshift+0xc0>
 8006910:	e7ea      	b.n	80068e8 <__lshift+0xa4>
 8006912:	bf00      	nop
 8006914:	0800770e 	.word	0x0800770e
 8006918:	0800771f 	.word	0x0800771f

0800691c <__mcmp>:
 800691c:	4603      	mov	r3, r0
 800691e:	690a      	ldr	r2, [r1, #16]
 8006920:	6900      	ldr	r0, [r0, #16]
 8006922:	b530      	push	{r4, r5, lr}
 8006924:	1a80      	subs	r0, r0, r2
 8006926:	d10d      	bne.n	8006944 <__mcmp+0x28>
 8006928:	3314      	adds	r3, #20
 800692a:	3114      	adds	r1, #20
 800692c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006930:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006934:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006938:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800693c:	4295      	cmp	r5, r2
 800693e:	d002      	beq.n	8006946 <__mcmp+0x2a>
 8006940:	d304      	bcc.n	800694c <__mcmp+0x30>
 8006942:	2001      	movs	r0, #1
 8006944:	bd30      	pop	{r4, r5, pc}
 8006946:	42a3      	cmp	r3, r4
 8006948:	d3f4      	bcc.n	8006934 <__mcmp+0x18>
 800694a:	e7fb      	b.n	8006944 <__mcmp+0x28>
 800694c:	f04f 30ff 	mov.w	r0, #4294967295
 8006950:	e7f8      	b.n	8006944 <__mcmp+0x28>
	...

08006954 <__mdiff>:
 8006954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006958:	460d      	mov	r5, r1
 800695a:	4607      	mov	r7, r0
 800695c:	4611      	mov	r1, r2
 800695e:	4628      	mov	r0, r5
 8006960:	4614      	mov	r4, r2
 8006962:	f7ff ffdb 	bl	800691c <__mcmp>
 8006966:	1e06      	subs	r6, r0, #0
 8006968:	d111      	bne.n	800698e <__mdiff+0x3a>
 800696a:	4631      	mov	r1, r6
 800696c:	4638      	mov	r0, r7
 800696e:	f7ff fd5b 	bl	8006428 <_Balloc>
 8006972:	4602      	mov	r2, r0
 8006974:	b928      	cbnz	r0, 8006982 <__mdiff+0x2e>
 8006976:	f240 2137 	movw	r1, #567	; 0x237
 800697a:	4b3a      	ldr	r3, [pc, #232]	; (8006a64 <__mdiff+0x110>)
 800697c:	483a      	ldr	r0, [pc, #232]	; (8006a68 <__mdiff+0x114>)
 800697e:	f000 fb05 	bl	8006f8c <__assert_func>
 8006982:	2301      	movs	r3, #1
 8006984:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006988:	4610      	mov	r0, r2
 800698a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698e:	bfa4      	itt	ge
 8006990:	4623      	movge	r3, r4
 8006992:	462c      	movge	r4, r5
 8006994:	4638      	mov	r0, r7
 8006996:	6861      	ldr	r1, [r4, #4]
 8006998:	bfa6      	itte	ge
 800699a:	461d      	movge	r5, r3
 800699c:	2600      	movge	r6, #0
 800699e:	2601      	movlt	r6, #1
 80069a0:	f7ff fd42 	bl	8006428 <_Balloc>
 80069a4:	4602      	mov	r2, r0
 80069a6:	b918      	cbnz	r0, 80069b0 <__mdiff+0x5c>
 80069a8:	f240 2145 	movw	r1, #581	; 0x245
 80069ac:	4b2d      	ldr	r3, [pc, #180]	; (8006a64 <__mdiff+0x110>)
 80069ae:	e7e5      	b.n	800697c <__mdiff+0x28>
 80069b0:	f102 0814 	add.w	r8, r2, #20
 80069b4:	46c2      	mov	sl, r8
 80069b6:	f04f 0c00 	mov.w	ip, #0
 80069ba:	6927      	ldr	r7, [r4, #16]
 80069bc:	60c6      	str	r6, [r0, #12]
 80069be:	692e      	ldr	r6, [r5, #16]
 80069c0:	f104 0014 	add.w	r0, r4, #20
 80069c4:	f105 0914 	add.w	r9, r5, #20
 80069c8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80069cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80069d0:	3410      	adds	r4, #16
 80069d2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80069d6:	f859 3b04 	ldr.w	r3, [r9], #4
 80069da:	fa1f f18b 	uxth.w	r1, fp
 80069de:	4461      	add	r1, ip
 80069e0:	fa1f fc83 	uxth.w	ip, r3
 80069e4:	0c1b      	lsrs	r3, r3, #16
 80069e6:	eba1 010c 	sub.w	r1, r1, ip
 80069ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80069f2:	b289      	uxth	r1, r1
 80069f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80069f8:	454e      	cmp	r6, r9
 80069fa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80069fe:	f84a 1b04 	str.w	r1, [sl], #4
 8006a02:	d8e6      	bhi.n	80069d2 <__mdiff+0x7e>
 8006a04:	1b73      	subs	r3, r6, r5
 8006a06:	3b15      	subs	r3, #21
 8006a08:	f023 0303 	bic.w	r3, r3, #3
 8006a0c:	3515      	adds	r5, #21
 8006a0e:	3304      	adds	r3, #4
 8006a10:	42ae      	cmp	r6, r5
 8006a12:	bf38      	it	cc
 8006a14:	2304      	movcc	r3, #4
 8006a16:	4418      	add	r0, r3
 8006a18:	4443      	add	r3, r8
 8006a1a:	461e      	mov	r6, r3
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	4575      	cmp	r5, lr
 8006a20:	d30e      	bcc.n	8006a40 <__mdiff+0xec>
 8006a22:	f10e 0103 	add.w	r1, lr, #3
 8006a26:	1a09      	subs	r1, r1, r0
 8006a28:	f021 0103 	bic.w	r1, r1, #3
 8006a2c:	3803      	subs	r0, #3
 8006a2e:	4586      	cmp	lr, r0
 8006a30:	bf38      	it	cc
 8006a32:	2100      	movcc	r1, #0
 8006a34:	440b      	add	r3, r1
 8006a36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a3a:	b189      	cbz	r1, 8006a60 <__mdiff+0x10c>
 8006a3c:	6117      	str	r7, [r2, #16]
 8006a3e:	e7a3      	b.n	8006988 <__mdiff+0x34>
 8006a40:	f855 8b04 	ldr.w	r8, [r5], #4
 8006a44:	fa1f f188 	uxth.w	r1, r8
 8006a48:	4461      	add	r1, ip
 8006a4a:	140c      	asrs	r4, r1, #16
 8006a4c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a50:	b289      	uxth	r1, r1
 8006a52:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006a56:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006a5a:	f846 1b04 	str.w	r1, [r6], #4
 8006a5e:	e7de      	b.n	8006a1e <__mdiff+0xca>
 8006a60:	3f01      	subs	r7, #1
 8006a62:	e7e8      	b.n	8006a36 <__mdiff+0xe2>
 8006a64:	0800770e 	.word	0x0800770e
 8006a68:	0800771f 	.word	0x0800771f

08006a6c <__d2b>:
 8006a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4617      	mov	r7, r2
 8006a72:	461c      	mov	r4, r3
 8006a74:	9e08      	ldr	r6, [sp, #32]
 8006a76:	f7ff fcd7 	bl	8006428 <_Balloc>
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	b930      	cbnz	r0, 8006a8c <__d2b+0x20>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	f240 310f 	movw	r1, #783	; 0x30f
 8006a84:	4b22      	ldr	r3, [pc, #136]	; (8006b10 <__d2b+0xa4>)
 8006a86:	4823      	ldr	r0, [pc, #140]	; (8006b14 <__d2b+0xa8>)
 8006a88:	f000 fa80 	bl	8006f8c <__assert_func>
 8006a8c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006a90:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006a94:	bb24      	cbnz	r4, 8006ae0 <__d2b+0x74>
 8006a96:	2f00      	cmp	r7, #0
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	d026      	beq.n	8006aea <__d2b+0x7e>
 8006a9c:	4668      	mov	r0, sp
 8006a9e:	9700      	str	r7, [sp, #0]
 8006aa0:	f7ff fd8a 	bl	80065b8 <__lo0bits>
 8006aa4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006aa8:	b1e8      	cbz	r0, 8006ae6 <__d2b+0x7a>
 8006aaa:	f1c0 0320 	rsb	r3, r0, #32
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	430b      	orrs	r3, r1
 8006ab4:	40c2      	lsrs	r2, r0
 8006ab6:	616b      	str	r3, [r5, #20]
 8006ab8:	9201      	str	r2, [sp, #4]
 8006aba:	9b01      	ldr	r3, [sp, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bf14      	ite	ne
 8006ac0:	2102      	movne	r1, #2
 8006ac2:	2101      	moveq	r1, #1
 8006ac4:	61ab      	str	r3, [r5, #24]
 8006ac6:	6129      	str	r1, [r5, #16]
 8006ac8:	b1bc      	cbz	r4, 8006afa <__d2b+0x8e>
 8006aca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006ace:	4404      	add	r4, r0
 8006ad0:	6034      	str	r4, [r6, #0]
 8006ad2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad8:	6018      	str	r0, [r3, #0]
 8006ada:	4628      	mov	r0, r5
 8006adc:	b003      	add	sp, #12
 8006ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ae4:	e7d7      	b.n	8006a96 <__d2b+0x2a>
 8006ae6:	6169      	str	r1, [r5, #20]
 8006ae8:	e7e7      	b.n	8006aba <__d2b+0x4e>
 8006aea:	a801      	add	r0, sp, #4
 8006aec:	f7ff fd64 	bl	80065b8 <__lo0bits>
 8006af0:	9b01      	ldr	r3, [sp, #4]
 8006af2:	2101      	movs	r1, #1
 8006af4:	616b      	str	r3, [r5, #20]
 8006af6:	3020      	adds	r0, #32
 8006af8:	e7e5      	b.n	8006ac6 <__d2b+0x5a>
 8006afa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006afe:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006b02:	6030      	str	r0, [r6, #0]
 8006b04:	6918      	ldr	r0, [r3, #16]
 8006b06:	f7ff fd37 	bl	8006578 <__hi0bits>
 8006b0a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b0e:	e7e2      	b.n	8006ad6 <__d2b+0x6a>
 8006b10:	0800770e 	.word	0x0800770e
 8006b14:	0800771f 	.word	0x0800771f

08006b18 <__ssputs_r>:
 8006b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1c:	461f      	mov	r7, r3
 8006b1e:	688e      	ldr	r6, [r1, #8]
 8006b20:	4682      	mov	sl, r0
 8006b22:	42be      	cmp	r6, r7
 8006b24:	460c      	mov	r4, r1
 8006b26:	4690      	mov	r8, r2
 8006b28:	680b      	ldr	r3, [r1, #0]
 8006b2a:	d82c      	bhi.n	8006b86 <__ssputs_r+0x6e>
 8006b2c:	898a      	ldrh	r2, [r1, #12]
 8006b2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b32:	d026      	beq.n	8006b82 <__ssputs_r+0x6a>
 8006b34:	6965      	ldr	r5, [r4, #20]
 8006b36:	6909      	ldr	r1, [r1, #16]
 8006b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b3c:	eba3 0901 	sub.w	r9, r3, r1
 8006b40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b44:	1c7b      	adds	r3, r7, #1
 8006b46:	444b      	add	r3, r9
 8006b48:	106d      	asrs	r5, r5, #1
 8006b4a:	429d      	cmp	r5, r3
 8006b4c:	bf38      	it	cc
 8006b4e:	461d      	movcc	r5, r3
 8006b50:	0553      	lsls	r3, r2, #21
 8006b52:	d527      	bpl.n	8006ba4 <__ssputs_r+0x8c>
 8006b54:	4629      	mov	r1, r5
 8006b56:	f7ff fbdb 	bl	8006310 <_malloc_r>
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	b360      	cbz	r0, 8006bb8 <__ssputs_r+0xa0>
 8006b5e:	464a      	mov	r2, r9
 8006b60:	6921      	ldr	r1, [r4, #16]
 8006b62:	f000 fa05 	bl	8006f70 <memcpy>
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b70:	81a3      	strh	r3, [r4, #12]
 8006b72:	6126      	str	r6, [r4, #16]
 8006b74:	444e      	add	r6, r9
 8006b76:	6026      	str	r6, [r4, #0]
 8006b78:	463e      	mov	r6, r7
 8006b7a:	6165      	str	r5, [r4, #20]
 8006b7c:	eba5 0509 	sub.w	r5, r5, r9
 8006b80:	60a5      	str	r5, [r4, #8]
 8006b82:	42be      	cmp	r6, r7
 8006b84:	d900      	bls.n	8006b88 <__ssputs_r+0x70>
 8006b86:	463e      	mov	r6, r7
 8006b88:	4632      	mov	r2, r6
 8006b8a:	4641      	mov	r1, r8
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	f000 f9c5 	bl	8006f1c <memmove>
 8006b92:	2000      	movs	r0, #0
 8006b94:	68a3      	ldr	r3, [r4, #8]
 8006b96:	1b9b      	subs	r3, r3, r6
 8006b98:	60a3      	str	r3, [r4, #8]
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	4433      	add	r3, r6
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba4:	462a      	mov	r2, r5
 8006ba6:	f000 fa35 	bl	8007014 <_realloc_r>
 8006baa:	4606      	mov	r6, r0
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d1e0      	bne.n	8006b72 <__ssputs_r+0x5a>
 8006bb0:	4650      	mov	r0, sl
 8006bb2:	6921      	ldr	r1, [r4, #16]
 8006bb4:	f7ff fb3c 	bl	8006230 <_free_r>
 8006bb8:	230c      	movs	r3, #12
 8006bba:	f8ca 3000 	str.w	r3, [sl]
 8006bbe:	89a3      	ldrh	r3, [r4, #12]
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc8:	81a3      	strh	r3, [r4, #12]
 8006bca:	e7e9      	b.n	8006ba0 <__ssputs_r+0x88>

08006bcc <_svfiprintf_r>:
 8006bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd0:	4698      	mov	r8, r3
 8006bd2:	898b      	ldrh	r3, [r1, #12]
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	061b      	lsls	r3, r3, #24
 8006bd8:	460d      	mov	r5, r1
 8006bda:	4614      	mov	r4, r2
 8006bdc:	b09d      	sub	sp, #116	; 0x74
 8006bde:	d50e      	bpl.n	8006bfe <_svfiprintf_r+0x32>
 8006be0:	690b      	ldr	r3, [r1, #16]
 8006be2:	b963      	cbnz	r3, 8006bfe <_svfiprintf_r+0x32>
 8006be4:	2140      	movs	r1, #64	; 0x40
 8006be6:	f7ff fb93 	bl	8006310 <_malloc_r>
 8006bea:	6028      	str	r0, [r5, #0]
 8006bec:	6128      	str	r0, [r5, #16]
 8006bee:	b920      	cbnz	r0, 8006bfa <_svfiprintf_r+0x2e>
 8006bf0:	230c      	movs	r3, #12
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf8:	e0d0      	b.n	8006d9c <_svfiprintf_r+0x1d0>
 8006bfa:	2340      	movs	r3, #64	; 0x40
 8006bfc:	616b      	str	r3, [r5, #20]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9309      	str	r3, [sp, #36]	; 0x24
 8006c02:	2320      	movs	r3, #32
 8006c04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c08:	2330      	movs	r3, #48	; 0x30
 8006c0a:	f04f 0901 	mov.w	r9, #1
 8006c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c12:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006db4 <_svfiprintf_r+0x1e8>
 8006c16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	469a      	mov	sl, r3
 8006c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c22:	b10a      	cbz	r2, 8006c28 <_svfiprintf_r+0x5c>
 8006c24:	2a25      	cmp	r2, #37	; 0x25
 8006c26:	d1f9      	bne.n	8006c1c <_svfiprintf_r+0x50>
 8006c28:	ebba 0b04 	subs.w	fp, sl, r4
 8006c2c:	d00b      	beq.n	8006c46 <_svfiprintf_r+0x7a>
 8006c2e:	465b      	mov	r3, fp
 8006c30:	4622      	mov	r2, r4
 8006c32:	4629      	mov	r1, r5
 8006c34:	4638      	mov	r0, r7
 8006c36:	f7ff ff6f 	bl	8006b18 <__ssputs_r>
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	f000 80a9 	beq.w	8006d92 <_svfiprintf_r+0x1c6>
 8006c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c42:	445a      	add	r2, fp
 8006c44:	9209      	str	r2, [sp, #36]	; 0x24
 8006c46:	f89a 3000 	ldrb.w	r3, [sl]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 80a1 	beq.w	8006d92 <_svfiprintf_r+0x1c6>
 8006c50:	2300      	movs	r3, #0
 8006c52:	f04f 32ff 	mov.w	r2, #4294967295
 8006c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c5a:	f10a 0a01 	add.w	sl, sl, #1
 8006c5e:	9304      	str	r3, [sp, #16]
 8006c60:	9307      	str	r3, [sp, #28]
 8006c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c66:	931a      	str	r3, [sp, #104]	; 0x68
 8006c68:	4654      	mov	r4, sl
 8006c6a:	2205      	movs	r2, #5
 8006c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c70:	4850      	ldr	r0, [pc, #320]	; (8006db4 <_svfiprintf_r+0x1e8>)
 8006c72:	f7fe fc62 	bl	800553a <memchr>
 8006c76:	9a04      	ldr	r2, [sp, #16]
 8006c78:	b9d8      	cbnz	r0, 8006cb2 <_svfiprintf_r+0xe6>
 8006c7a:	06d0      	lsls	r0, r2, #27
 8006c7c:	bf44      	itt	mi
 8006c7e:	2320      	movmi	r3, #32
 8006c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c84:	0711      	lsls	r1, r2, #28
 8006c86:	bf44      	itt	mi
 8006c88:	232b      	movmi	r3, #43	; 0x2b
 8006c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c92:	2b2a      	cmp	r3, #42	; 0x2a
 8006c94:	d015      	beq.n	8006cc2 <_svfiprintf_r+0xf6>
 8006c96:	4654      	mov	r4, sl
 8006c98:	2000      	movs	r0, #0
 8006c9a:	f04f 0c0a 	mov.w	ip, #10
 8006c9e:	9a07      	ldr	r2, [sp, #28]
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ca6:	3b30      	subs	r3, #48	; 0x30
 8006ca8:	2b09      	cmp	r3, #9
 8006caa:	d94d      	bls.n	8006d48 <_svfiprintf_r+0x17c>
 8006cac:	b1b0      	cbz	r0, 8006cdc <_svfiprintf_r+0x110>
 8006cae:	9207      	str	r2, [sp, #28]
 8006cb0:	e014      	b.n	8006cdc <_svfiprintf_r+0x110>
 8006cb2:	eba0 0308 	sub.w	r3, r0, r8
 8006cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	46a2      	mov	sl, r4
 8006cbe:	9304      	str	r3, [sp, #16]
 8006cc0:	e7d2      	b.n	8006c68 <_svfiprintf_r+0x9c>
 8006cc2:	9b03      	ldr	r3, [sp, #12]
 8006cc4:	1d19      	adds	r1, r3, #4
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	9103      	str	r1, [sp, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bfbb      	ittet	lt
 8006cce:	425b      	neglt	r3, r3
 8006cd0:	f042 0202 	orrlt.w	r2, r2, #2
 8006cd4:	9307      	strge	r3, [sp, #28]
 8006cd6:	9307      	strlt	r3, [sp, #28]
 8006cd8:	bfb8      	it	lt
 8006cda:	9204      	strlt	r2, [sp, #16]
 8006cdc:	7823      	ldrb	r3, [r4, #0]
 8006cde:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce0:	d10c      	bne.n	8006cfc <_svfiprintf_r+0x130>
 8006ce2:	7863      	ldrb	r3, [r4, #1]
 8006ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce6:	d134      	bne.n	8006d52 <_svfiprintf_r+0x186>
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	3402      	adds	r4, #2
 8006cec:	1d1a      	adds	r2, r3, #4
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	9203      	str	r2, [sp, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	bfb8      	it	lt
 8006cf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cfa:	9305      	str	r3, [sp, #20]
 8006cfc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006db8 <_svfiprintf_r+0x1ec>
 8006d00:	2203      	movs	r2, #3
 8006d02:	4650      	mov	r0, sl
 8006d04:	7821      	ldrb	r1, [r4, #0]
 8006d06:	f7fe fc18 	bl	800553a <memchr>
 8006d0a:	b138      	cbz	r0, 8006d1c <_svfiprintf_r+0x150>
 8006d0c:	2240      	movs	r2, #64	; 0x40
 8006d0e:	9b04      	ldr	r3, [sp, #16]
 8006d10:	eba0 000a 	sub.w	r0, r0, sl
 8006d14:	4082      	lsls	r2, r0
 8006d16:	4313      	orrs	r3, r2
 8006d18:	3401      	adds	r4, #1
 8006d1a:	9304      	str	r3, [sp, #16]
 8006d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d20:	2206      	movs	r2, #6
 8006d22:	4826      	ldr	r0, [pc, #152]	; (8006dbc <_svfiprintf_r+0x1f0>)
 8006d24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d28:	f7fe fc07 	bl	800553a <memchr>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d038      	beq.n	8006da2 <_svfiprintf_r+0x1d6>
 8006d30:	4b23      	ldr	r3, [pc, #140]	; (8006dc0 <_svfiprintf_r+0x1f4>)
 8006d32:	bb1b      	cbnz	r3, 8006d7c <_svfiprintf_r+0x1b0>
 8006d34:	9b03      	ldr	r3, [sp, #12]
 8006d36:	3307      	adds	r3, #7
 8006d38:	f023 0307 	bic.w	r3, r3, #7
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	9303      	str	r3, [sp, #12]
 8006d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d42:	4433      	add	r3, r6
 8006d44:	9309      	str	r3, [sp, #36]	; 0x24
 8006d46:	e768      	b.n	8006c1a <_svfiprintf_r+0x4e>
 8006d48:	460c      	mov	r4, r1
 8006d4a:	2001      	movs	r0, #1
 8006d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d50:	e7a6      	b.n	8006ca0 <_svfiprintf_r+0xd4>
 8006d52:	2300      	movs	r3, #0
 8006d54:	f04f 0c0a 	mov.w	ip, #10
 8006d58:	4619      	mov	r1, r3
 8006d5a:	3401      	adds	r4, #1
 8006d5c:	9305      	str	r3, [sp, #20]
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d64:	3a30      	subs	r2, #48	; 0x30
 8006d66:	2a09      	cmp	r2, #9
 8006d68:	d903      	bls.n	8006d72 <_svfiprintf_r+0x1a6>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0c6      	beq.n	8006cfc <_svfiprintf_r+0x130>
 8006d6e:	9105      	str	r1, [sp, #20]
 8006d70:	e7c4      	b.n	8006cfc <_svfiprintf_r+0x130>
 8006d72:	4604      	mov	r4, r0
 8006d74:	2301      	movs	r3, #1
 8006d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d7a:	e7f0      	b.n	8006d5e <_svfiprintf_r+0x192>
 8006d7c:	ab03      	add	r3, sp, #12
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	462a      	mov	r2, r5
 8006d82:	4638      	mov	r0, r7
 8006d84:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <_svfiprintf_r+0x1f8>)
 8006d86:	a904      	add	r1, sp, #16
 8006d88:	f7fd fe70 	bl	8004a6c <_printf_float>
 8006d8c:	1c42      	adds	r2, r0, #1
 8006d8e:	4606      	mov	r6, r0
 8006d90:	d1d6      	bne.n	8006d40 <_svfiprintf_r+0x174>
 8006d92:	89ab      	ldrh	r3, [r5, #12]
 8006d94:	065b      	lsls	r3, r3, #25
 8006d96:	f53f af2d 	bmi.w	8006bf4 <_svfiprintf_r+0x28>
 8006d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d9c:	b01d      	add	sp, #116	; 0x74
 8006d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da2:	ab03      	add	r3, sp, #12
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	462a      	mov	r2, r5
 8006da8:	4638      	mov	r0, r7
 8006daa:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <_svfiprintf_r+0x1f8>)
 8006dac:	a904      	add	r1, sp, #16
 8006dae:	f7fe f8fd 	bl	8004fac <_printf_i>
 8006db2:	e7eb      	b.n	8006d8c <_svfiprintf_r+0x1c0>
 8006db4:	08007874 	.word	0x08007874
 8006db8:	0800787a 	.word	0x0800787a
 8006dbc:	0800787e 	.word	0x0800787e
 8006dc0:	08004a6d 	.word	0x08004a6d
 8006dc4:	08006b19 	.word	0x08006b19

08006dc8 <__sflush_r>:
 8006dc8:	898a      	ldrh	r2, [r1, #12]
 8006dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dcc:	4605      	mov	r5, r0
 8006dce:	0710      	lsls	r0, r2, #28
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	d457      	bmi.n	8006e84 <__sflush_r+0xbc>
 8006dd4:	684b      	ldr	r3, [r1, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dc04      	bgt.n	8006de4 <__sflush_r+0x1c>
 8006dda:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	dc01      	bgt.n	8006de4 <__sflush_r+0x1c>
 8006de0:	2000      	movs	r0, #0
 8006de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006de6:	2e00      	cmp	r6, #0
 8006de8:	d0fa      	beq.n	8006de0 <__sflush_r+0x18>
 8006dea:	2300      	movs	r3, #0
 8006dec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006df0:	682f      	ldr	r7, [r5, #0]
 8006df2:	6a21      	ldr	r1, [r4, #32]
 8006df4:	602b      	str	r3, [r5, #0]
 8006df6:	d032      	beq.n	8006e5e <__sflush_r+0x96>
 8006df8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dfa:	89a3      	ldrh	r3, [r4, #12]
 8006dfc:	075a      	lsls	r2, r3, #29
 8006dfe:	d505      	bpl.n	8006e0c <__sflush_r+0x44>
 8006e00:	6863      	ldr	r3, [r4, #4]
 8006e02:	1ac0      	subs	r0, r0, r3
 8006e04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e06:	b10b      	cbz	r3, 8006e0c <__sflush_r+0x44>
 8006e08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e0a:	1ac0      	subs	r0, r0, r3
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	4602      	mov	r2, r0
 8006e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e12:	4628      	mov	r0, r5
 8006e14:	6a21      	ldr	r1, [r4, #32]
 8006e16:	47b0      	blx	r6
 8006e18:	1c43      	adds	r3, r0, #1
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	d106      	bne.n	8006e2c <__sflush_r+0x64>
 8006e1e:	6829      	ldr	r1, [r5, #0]
 8006e20:	291d      	cmp	r1, #29
 8006e22:	d82b      	bhi.n	8006e7c <__sflush_r+0xb4>
 8006e24:	4a28      	ldr	r2, [pc, #160]	; (8006ec8 <__sflush_r+0x100>)
 8006e26:	410a      	asrs	r2, r1
 8006e28:	07d6      	lsls	r6, r2, #31
 8006e2a:	d427      	bmi.n	8006e7c <__sflush_r+0xb4>
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	6062      	str	r2, [r4, #4]
 8006e30:	6922      	ldr	r2, [r4, #16]
 8006e32:	04d9      	lsls	r1, r3, #19
 8006e34:	6022      	str	r2, [r4, #0]
 8006e36:	d504      	bpl.n	8006e42 <__sflush_r+0x7a>
 8006e38:	1c42      	adds	r2, r0, #1
 8006e3a:	d101      	bne.n	8006e40 <__sflush_r+0x78>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b903      	cbnz	r3, 8006e42 <__sflush_r+0x7a>
 8006e40:	6560      	str	r0, [r4, #84]	; 0x54
 8006e42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e44:	602f      	str	r7, [r5, #0]
 8006e46:	2900      	cmp	r1, #0
 8006e48:	d0ca      	beq.n	8006de0 <__sflush_r+0x18>
 8006e4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	d002      	beq.n	8006e58 <__sflush_r+0x90>
 8006e52:	4628      	mov	r0, r5
 8006e54:	f7ff f9ec 	bl	8006230 <_free_r>
 8006e58:	2000      	movs	r0, #0
 8006e5a:	6360      	str	r0, [r4, #52]	; 0x34
 8006e5c:	e7c1      	b.n	8006de2 <__sflush_r+0x1a>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4628      	mov	r0, r5
 8006e62:	47b0      	blx	r6
 8006e64:	1c41      	adds	r1, r0, #1
 8006e66:	d1c8      	bne.n	8006dfa <__sflush_r+0x32>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0c5      	beq.n	8006dfa <__sflush_r+0x32>
 8006e6e:	2b1d      	cmp	r3, #29
 8006e70:	d001      	beq.n	8006e76 <__sflush_r+0xae>
 8006e72:	2b16      	cmp	r3, #22
 8006e74:	d101      	bne.n	8006e7a <__sflush_r+0xb2>
 8006e76:	602f      	str	r7, [r5, #0]
 8006e78:	e7b2      	b.n	8006de0 <__sflush_r+0x18>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	e7ae      	b.n	8006de2 <__sflush_r+0x1a>
 8006e84:	690f      	ldr	r7, [r1, #16]
 8006e86:	2f00      	cmp	r7, #0
 8006e88:	d0aa      	beq.n	8006de0 <__sflush_r+0x18>
 8006e8a:	0793      	lsls	r3, r2, #30
 8006e8c:	bf18      	it	ne
 8006e8e:	2300      	movne	r3, #0
 8006e90:	680e      	ldr	r6, [r1, #0]
 8006e92:	bf08      	it	eq
 8006e94:	694b      	ldreq	r3, [r1, #20]
 8006e96:	1bf6      	subs	r6, r6, r7
 8006e98:	600f      	str	r7, [r1, #0]
 8006e9a:	608b      	str	r3, [r1, #8]
 8006e9c:	2e00      	cmp	r6, #0
 8006e9e:	dd9f      	ble.n	8006de0 <__sflush_r+0x18>
 8006ea0:	4633      	mov	r3, r6
 8006ea2:	463a      	mov	r2, r7
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	6a21      	ldr	r1, [r4, #32]
 8006ea8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006eac:	47e0      	blx	ip
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	dc06      	bgt.n	8006ec0 <__sflush_r+0xf8>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ebc:	81a3      	strh	r3, [r4, #12]
 8006ebe:	e790      	b.n	8006de2 <__sflush_r+0x1a>
 8006ec0:	4407      	add	r7, r0
 8006ec2:	1a36      	subs	r6, r6, r0
 8006ec4:	e7ea      	b.n	8006e9c <__sflush_r+0xd4>
 8006ec6:	bf00      	nop
 8006ec8:	dfbffffe 	.word	0xdfbffffe

08006ecc <_fflush_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	690b      	ldr	r3, [r1, #16]
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	b913      	cbnz	r3, 8006edc <_fflush_r+0x10>
 8006ed6:	2500      	movs	r5, #0
 8006ed8:	4628      	mov	r0, r5
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	b118      	cbz	r0, 8006ee6 <_fflush_r+0x1a>
 8006ede:	6a03      	ldr	r3, [r0, #32]
 8006ee0:	b90b      	cbnz	r3, 8006ee6 <_fflush_r+0x1a>
 8006ee2:	f7fe fa11 	bl	8005308 <__sinit>
 8006ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f3      	beq.n	8006ed6 <_fflush_r+0xa>
 8006eee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ef0:	07d0      	lsls	r0, r2, #31
 8006ef2:	d404      	bmi.n	8006efe <_fflush_r+0x32>
 8006ef4:	0599      	lsls	r1, r3, #22
 8006ef6:	d402      	bmi.n	8006efe <_fflush_r+0x32>
 8006ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006efa:	f7fe fb1c 	bl	8005536 <__retarget_lock_acquire_recursive>
 8006efe:	4628      	mov	r0, r5
 8006f00:	4621      	mov	r1, r4
 8006f02:	f7ff ff61 	bl	8006dc8 <__sflush_r>
 8006f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f08:	4605      	mov	r5, r0
 8006f0a:	07da      	lsls	r2, r3, #31
 8006f0c:	d4e4      	bmi.n	8006ed8 <_fflush_r+0xc>
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	059b      	lsls	r3, r3, #22
 8006f12:	d4e1      	bmi.n	8006ed8 <_fflush_r+0xc>
 8006f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f16:	f7fe fb0f 	bl	8005538 <__retarget_lock_release_recursive>
 8006f1a:	e7dd      	b.n	8006ed8 <_fflush_r+0xc>

08006f1c <memmove>:
 8006f1c:	4288      	cmp	r0, r1
 8006f1e:	b510      	push	{r4, lr}
 8006f20:	eb01 0402 	add.w	r4, r1, r2
 8006f24:	d902      	bls.n	8006f2c <memmove+0x10>
 8006f26:	4284      	cmp	r4, r0
 8006f28:	4623      	mov	r3, r4
 8006f2a:	d807      	bhi.n	8006f3c <memmove+0x20>
 8006f2c:	1e43      	subs	r3, r0, #1
 8006f2e:	42a1      	cmp	r1, r4
 8006f30:	d008      	beq.n	8006f44 <memmove+0x28>
 8006f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f3a:	e7f8      	b.n	8006f2e <memmove+0x12>
 8006f3c:	4601      	mov	r1, r0
 8006f3e:	4402      	add	r2, r0
 8006f40:	428a      	cmp	r2, r1
 8006f42:	d100      	bne.n	8006f46 <memmove+0x2a>
 8006f44:	bd10      	pop	{r4, pc}
 8006f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f4e:	e7f7      	b.n	8006f40 <memmove+0x24>

08006f50 <_sbrk_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	2300      	movs	r3, #0
 8006f54:	4d05      	ldr	r5, [pc, #20]	; (8006f6c <_sbrk_r+0x1c>)
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	602b      	str	r3, [r5, #0]
 8006f5c:	f7fa feac 	bl	8001cb8 <_sbrk>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_sbrk_r+0x1a>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_sbrk_r+0x1a>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	200004a8 	.word	0x200004a8

08006f70 <memcpy>:
 8006f70:	440a      	add	r2, r1
 8006f72:	4291      	cmp	r1, r2
 8006f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f78:	d100      	bne.n	8006f7c <memcpy+0xc>
 8006f7a:	4770      	bx	lr
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f82:	4291      	cmp	r1, r2
 8006f84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f88:	d1f9      	bne.n	8006f7e <memcpy+0xe>
 8006f8a:	bd10      	pop	{r4, pc}

08006f8c <__assert_func>:
 8006f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f8e:	4614      	mov	r4, r2
 8006f90:	461a      	mov	r2, r3
 8006f92:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <__assert_func+0x2c>)
 8006f94:	4605      	mov	r5, r0
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68d8      	ldr	r0, [r3, #12]
 8006f9a:	b14c      	cbz	r4, 8006fb0 <__assert_func+0x24>
 8006f9c:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <__assert_func+0x30>)
 8006f9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fa2:	9100      	str	r1, [sp, #0]
 8006fa4:	462b      	mov	r3, r5
 8006fa6:	4906      	ldr	r1, [pc, #24]	; (8006fc0 <__assert_func+0x34>)
 8006fa8:	f000 f870 	bl	800708c <fiprintf>
 8006fac:	f000 f880 	bl	80070b0 <abort>
 8006fb0:	4b04      	ldr	r3, [pc, #16]	; (8006fc4 <__assert_func+0x38>)
 8006fb2:	461c      	mov	r4, r3
 8006fb4:	e7f3      	b.n	8006f9e <__assert_func+0x12>
 8006fb6:	bf00      	nop
 8006fb8:	20000068 	.word	0x20000068
 8006fbc:	0800788f 	.word	0x0800788f
 8006fc0:	0800789c 	.word	0x0800789c
 8006fc4:	080078ca 	.word	0x080078ca

08006fc8 <_calloc_r>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	fba1 5402 	umull	r5, r4, r1, r2
 8006fce:	b934      	cbnz	r4, 8006fde <_calloc_r+0x16>
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	f7ff f99d 	bl	8006310 <_malloc_r>
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	b928      	cbnz	r0, 8006fe6 <_calloc_r+0x1e>
 8006fda:	4630      	mov	r0, r6
 8006fdc:	bd70      	pop	{r4, r5, r6, pc}
 8006fde:	220c      	movs	r2, #12
 8006fe0:	2600      	movs	r6, #0
 8006fe2:	6002      	str	r2, [r0, #0]
 8006fe4:	e7f9      	b.n	8006fda <_calloc_r+0x12>
 8006fe6:	462a      	mov	r2, r5
 8006fe8:	4621      	mov	r1, r4
 8006fea:	f7fe fa26 	bl	800543a <memset>
 8006fee:	e7f4      	b.n	8006fda <_calloc_r+0x12>

08006ff0 <__ascii_mbtowc>:
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	b901      	cbnz	r1, 8006ff6 <__ascii_mbtowc+0x6>
 8006ff4:	a901      	add	r1, sp, #4
 8006ff6:	b142      	cbz	r2, 800700a <__ascii_mbtowc+0x1a>
 8006ff8:	b14b      	cbz	r3, 800700e <__ascii_mbtowc+0x1e>
 8006ffa:	7813      	ldrb	r3, [r2, #0]
 8006ffc:	600b      	str	r3, [r1, #0]
 8006ffe:	7812      	ldrb	r2, [r2, #0]
 8007000:	1e10      	subs	r0, r2, #0
 8007002:	bf18      	it	ne
 8007004:	2001      	movne	r0, #1
 8007006:	b002      	add	sp, #8
 8007008:	4770      	bx	lr
 800700a:	4610      	mov	r0, r2
 800700c:	e7fb      	b.n	8007006 <__ascii_mbtowc+0x16>
 800700e:	f06f 0001 	mvn.w	r0, #1
 8007012:	e7f8      	b.n	8007006 <__ascii_mbtowc+0x16>

08007014 <_realloc_r>:
 8007014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007018:	4680      	mov	r8, r0
 800701a:	4614      	mov	r4, r2
 800701c:	460e      	mov	r6, r1
 800701e:	b921      	cbnz	r1, 800702a <_realloc_r+0x16>
 8007020:	4611      	mov	r1, r2
 8007022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007026:	f7ff b973 	b.w	8006310 <_malloc_r>
 800702a:	b92a      	cbnz	r2, 8007038 <_realloc_r+0x24>
 800702c:	f7ff f900 	bl	8006230 <_free_r>
 8007030:	4625      	mov	r5, r4
 8007032:	4628      	mov	r0, r5
 8007034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007038:	f000 f841 	bl	80070be <_malloc_usable_size_r>
 800703c:	4284      	cmp	r4, r0
 800703e:	4607      	mov	r7, r0
 8007040:	d802      	bhi.n	8007048 <_realloc_r+0x34>
 8007042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007046:	d812      	bhi.n	800706e <_realloc_r+0x5a>
 8007048:	4621      	mov	r1, r4
 800704a:	4640      	mov	r0, r8
 800704c:	f7ff f960 	bl	8006310 <_malloc_r>
 8007050:	4605      	mov	r5, r0
 8007052:	2800      	cmp	r0, #0
 8007054:	d0ed      	beq.n	8007032 <_realloc_r+0x1e>
 8007056:	42bc      	cmp	r4, r7
 8007058:	4622      	mov	r2, r4
 800705a:	4631      	mov	r1, r6
 800705c:	bf28      	it	cs
 800705e:	463a      	movcs	r2, r7
 8007060:	f7ff ff86 	bl	8006f70 <memcpy>
 8007064:	4631      	mov	r1, r6
 8007066:	4640      	mov	r0, r8
 8007068:	f7ff f8e2 	bl	8006230 <_free_r>
 800706c:	e7e1      	b.n	8007032 <_realloc_r+0x1e>
 800706e:	4635      	mov	r5, r6
 8007070:	e7df      	b.n	8007032 <_realloc_r+0x1e>

08007072 <__ascii_wctomb>:
 8007072:	4603      	mov	r3, r0
 8007074:	4608      	mov	r0, r1
 8007076:	b141      	cbz	r1, 800708a <__ascii_wctomb+0x18>
 8007078:	2aff      	cmp	r2, #255	; 0xff
 800707a:	d904      	bls.n	8007086 <__ascii_wctomb+0x14>
 800707c:	228a      	movs	r2, #138	; 0x8a
 800707e:	f04f 30ff 	mov.w	r0, #4294967295
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	4770      	bx	lr
 8007086:	2001      	movs	r0, #1
 8007088:	700a      	strb	r2, [r1, #0]
 800708a:	4770      	bx	lr

0800708c <fiprintf>:
 800708c:	b40e      	push	{r1, r2, r3}
 800708e:	b503      	push	{r0, r1, lr}
 8007090:	4601      	mov	r1, r0
 8007092:	ab03      	add	r3, sp, #12
 8007094:	4805      	ldr	r0, [pc, #20]	; (80070ac <fiprintf+0x20>)
 8007096:	f853 2b04 	ldr.w	r2, [r3], #4
 800709a:	6800      	ldr	r0, [r0, #0]
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	f000 f83d 	bl	800711c <_vfiprintf_r>
 80070a2:	b002      	add	sp, #8
 80070a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a8:	b003      	add	sp, #12
 80070aa:	4770      	bx	lr
 80070ac:	20000068 	.word	0x20000068

080070b0 <abort>:
 80070b0:	2006      	movs	r0, #6
 80070b2:	b508      	push	{r3, lr}
 80070b4:	f000 fa0a 	bl	80074cc <raise>
 80070b8:	2001      	movs	r0, #1
 80070ba:	f7fa fd8a 	bl	8001bd2 <_exit>

080070be <_malloc_usable_size_r>:
 80070be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c2:	1f18      	subs	r0, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bfbc      	itt	lt
 80070c8:	580b      	ldrlt	r3, [r1, r0]
 80070ca:	18c0      	addlt	r0, r0, r3
 80070cc:	4770      	bx	lr

080070ce <__sfputc_r>:
 80070ce:	6893      	ldr	r3, [r2, #8]
 80070d0:	b410      	push	{r4}
 80070d2:	3b01      	subs	r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	6093      	str	r3, [r2, #8]
 80070d8:	da07      	bge.n	80070ea <__sfputc_r+0x1c>
 80070da:	6994      	ldr	r4, [r2, #24]
 80070dc:	42a3      	cmp	r3, r4
 80070de:	db01      	blt.n	80070e4 <__sfputc_r+0x16>
 80070e0:	290a      	cmp	r1, #10
 80070e2:	d102      	bne.n	80070ea <__sfputc_r+0x1c>
 80070e4:	bc10      	pop	{r4}
 80070e6:	f000 b933 	b.w	8007350 <__swbuf_r>
 80070ea:	6813      	ldr	r3, [r2, #0]
 80070ec:	1c58      	adds	r0, r3, #1
 80070ee:	6010      	str	r0, [r2, #0]
 80070f0:	7019      	strb	r1, [r3, #0]
 80070f2:	4608      	mov	r0, r1
 80070f4:	bc10      	pop	{r4}
 80070f6:	4770      	bx	lr

080070f8 <__sfputs_r>:
 80070f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fa:	4606      	mov	r6, r0
 80070fc:	460f      	mov	r7, r1
 80070fe:	4614      	mov	r4, r2
 8007100:	18d5      	adds	r5, r2, r3
 8007102:	42ac      	cmp	r4, r5
 8007104:	d101      	bne.n	800710a <__sfputs_r+0x12>
 8007106:	2000      	movs	r0, #0
 8007108:	e007      	b.n	800711a <__sfputs_r+0x22>
 800710a:	463a      	mov	r2, r7
 800710c:	4630      	mov	r0, r6
 800710e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007112:	f7ff ffdc 	bl	80070ce <__sfputc_r>
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	d1f3      	bne.n	8007102 <__sfputs_r+0xa>
 800711a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800711c <_vfiprintf_r>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	460d      	mov	r5, r1
 8007122:	4614      	mov	r4, r2
 8007124:	4698      	mov	r8, r3
 8007126:	4606      	mov	r6, r0
 8007128:	b09d      	sub	sp, #116	; 0x74
 800712a:	b118      	cbz	r0, 8007134 <_vfiprintf_r+0x18>
 800712c:	6a03      	ldr	r3, [r0, #32]
 800712e:	b90b      	cbnz	r3, 8007134 <_vfiprintf_r+0x18>
 8007130:	f7fe f8ea 	bl	8005308 <__sinit>
 8007134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007136:	07d9      	lsls	r1, r3, #31
 8007138:	d405      	bmi.n	8007146 <_vfiprintf_r+0x2a>
 800713a:	89ab      	ldrh	r3, [r5, #12]
 800713c:	059a      	lsls	r2, r3, #22
 800713e:	d402      	bmi.n	8007146 <_vfiprintf_r+0x2a>
 8007140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007142:	f7fe f9f8 	bl	8005536 <__retarget_lock_acquire_recursive>
 8007146:	89ab      	ldrh	r3, [r5, #12]
 8007148:	071b      	lsls	r3, r3, #28
 800714a:	d501      	bpl.n	8007150 <_vfiprintf_r+0x34>
 800714c:	692b      	ldr	r3, [r5, #16]
 800714e:	b99b      	cbnz	r3, 8007178 <_vfiprintf_r+0x5c>
 8007150:	4629      	mov	r1, r5
 8007152:	4630      	mov	r0, r6
 8007154:	f000 f93a 	bl	80073cc <__swsetup_r>
 8007158:	b170      	cbz	r0, 8007178 <_vfiprintf_r+0x5c>
 800715a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800715c:	07dc      	lsls	r4, r3, #31
 800715e:	d504      	bpl.n	800716a <_vfiprintf_r+0x4e>
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	b01d      	add	sp, #116	; 0x74
 8007166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716a:	89ab      	ldrh	r3, [r5, #12]
 800716c:	0598      	lsls	r0, r3, #22
 800716e:	d4f7      	bmi.n	8007160 <_vfiprintf_r+0x44>
 8007170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007172:	f7fe f9e1 	bl	8005538 <__retarget_lock_release_recursive>
 8007176:	e7f3      	b.n	8007160 <_vfiprintf_r+0x44>
 8007178:	2300      	movs	r3, #0
 800717a:	9309      	str	r3, [sp, #36]	; 0x24
 800717c:	2320      	movs	r3, #32
 800717e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007182:	2330      	movs	r3, #48	; 0x30
 8007184:	f04f 0901 	mov.w	r9, #1
 8007188:	f8cd 800c 	str.w	r8, [sp, #12]
 800718c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800733c <_vfiprintf_r+0x220>
 8007190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007194:	4623      	mov	r3, r4
 8007196:	469a      	mov	sl, r3
 8007198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800719c:	b10a      	cbz	r2, 80071a2 <_vfiprintf_r+0x86>
 800719e:	2a25      	cmp	r2, #37	; 0x25
 80071a0:	d1f9      	bne.n	8007196 <_vfiprintf_r+0x7a>
 80071a2:	ebba 0b04 	subs.w	fp, sl, r4
 80071a6:	d00b      	beq.n	80071c0 <_vfiprintf_r+0xa4>
 80071a8:	465b      	mov	r3, fp
 80071aa:	4622      	mov	r2, r4
 80071ac:	4629      	mov	r1, r5
 80071ae:	4630      	mov	r0, r6
 80071b0:	f7ff ffa2 	bl	80070f8 <__sfputs_r>
 80071b4:	3001      	adds	r0, #1
 80071b6:	f000 80a9 	beq.w	800730c <_vfiprintf_r+0x1f0>
 80071ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071bc:	445a      	add	r2, fp
 80071be:	9209      	str	r2, [sp, #36]	; 0x24
 80071c0:	f89a 3000 	ldrb.w	r3, [sl]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80a1 	beq.w	800730c <_vfiprintf_r+0x1f0>
 80071ca:	2300      	movs	r3, #0
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071d4:	f10a 0a01 	add.w	sl, sl, #1
 80071d8:	9304      	str	r3, [sp, #16]
 80071da:	9307      	str	r3, [sp, #28]
 80071dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071e0:	931a      	str	r3, [sp, #104]	; 0x68
 80071e2:	4654      	mov	r4, sl
 80071e4:	2205      	movs	r2, #5
 80071e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ea:	4854      	ldr	r0, [pc, #336]	; (800733c <_vfiprintf_r+0x220>)
 80071ec:	f7fe f9a5 	bl	800553a <memchr>
 80071f0:	9a04      	ldr	r2, [sp, #16]
 80071f2:	b9d8      	cbnz	r0, 800722c <_vfiprintf_r+0x110>
 80071f4:	06d1      	lsls	r1, r2, #27
 80071f6:	bf44      	itt	mi
 80071f8:	2320      	movmi	r3, #32
 80071fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071fe:	0713      	lsls	r3, r2, #28
 8007200:	bf44      	itt	mi
 8007202:	232b      	movmi	r3, #43	; 0x2b
 8007204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007208:	f89a 3000 	ldrb.w	r3, [sl]
 800720c:	2b2a      	cmp	r3, #42	; 0x2a
 800720e:	d015      	beq.n	800723c <_vfiprintf_r+0x120>
 8007210:	4654      	mov	r4, sl
 8007212:	2000      	movs	r0, #0
 8007214:	f04f 0c0a 	mov.w	ip, #10
 8007218:	9a07      	ldr	r2, [sp, #28]
 800721a:	4621      	mov	r1, r4
 800721c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007220:	3b30      	subs	r3, #48	; 0x30
 8007222:	2b09      	cmp	r3, #9
 8007224:	d94d      	bls.n	80072c2 <_vfiprintf_r+0x1a6>
 8007226:	b1b0      	cbz	r0, 8007256 <_vfiprintf_r+0x13a>
 8007228:	9207      	str	r2, [sp, #28]
 800722a:	e014      	b.n	8007256 <_vfiprintf_r+0x13a>
 800722c:	eba0 0308 	sub.w	r3, r0, r8
 8007230:	fa09 f303 	lsl.w	r3, r9, r3
 8007234:	4313      	orrs	r3, r2
 8007236:	46a2      	mov	sl, r4
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	e7d2      	b.n	80071e2 <_vfiprintf_r+0xc6>
 800723c:	9b03      	ldr	r3, [sp, #12]
 800723e:	1d19      	adds	r1, r3, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	9103      	str	r1, [sp, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	bfbb      	ittet	lt
 8007248:	425b      	neglt	r3, r3
 800724a:	f042 0202 	orrlt.w	r2, r2, #2
 800724e:	9307      	strge	r3, [sp, #28]
 8007250:	9307      	strlt	r3, [sp, #28]
 8007252:	bfb8      	it	lt
 8007254:	9204      	strlt	r2, [sp, #16]
 8007256:	7823      	ldrb	r3, [r4, #0]
 8007258:	2b2e      	cmp	r3, #46	; 0x2e
 800725a:	d10c      	bne.n	8007276 <_vfiprintf_r+0x15a>
 800725c:	7863      	ldrb	r3, [r4, #1]
 800725e:	2b2a      	cmp	r3, #42	; 0x2a
 8007260:	d134      	bne.n	80072cc <_vfiprintf_r+0x1b0>
 8007262:	9b03      	ldr	r3, [sp, #12]
 8007264:	3402      	adds	r4, #2
 8007266:	1d1a      	adds	r2, r3, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	9203      	str	r2, [sp, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	bfb8      	it	lt
 8007270:	f04f 33ff 	movlt.w	r3, #4294967295
 8007274:	9305      	str	r3, [sp, #20]
 8007276:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007340 <_vfiprintf_r+0x224>
 800727a:	2203      	movs	r2, #3
 800727c:	4650      	mov	r0, sl
 800727e:	7821      	ldrb	r1, [r4, #0]
 8007280:	f7fe f95b 	bl	800553a <memchr>
 8007284:	b138      	cbz	r0, 8007296 <_vfiprintf_r+0x17a>
 8007286:	2240      	movs	r2, #64	; 0x40
 8007288:	9b04      	ldr	r3, [sp, #16]
 800728a:	eba0 000a 	sub.w	r0, r0, sl
 800728e:	4082      	lsls	r2, r0
 8007290:	4313      	orrs	r3, r2
 8007292:	3401      	adds	r4, #1
 8007294:	9304      	str	r3, [sp, #16]
 8007296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800729a:	2206      	movs	r2, #6
 800729c:	4829      	ldr	r0, [pc, #164]	; (8007344 <_vfiprintf_r+0x228>)
 800729e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072a2:	f7fe f94a 	bl	800553a <memchr>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d03f      	beq.n	800732a <_vfiprintf_r+0x20e>
 80072aa:	4b27      	ldr	r3, [pc, #156]	; (8007348 <_vfiprintf_r+0x22c>)
 80072ac:	bb1b      	cbnz	r3, 80072f6 <_vfiprintf_r+0x1da>
 80072ae:	9b03      	ldr	r3, [sp, #12]
 80072b0:	3307      	adds	r3, #7
 80072b2:	f023 0307 	bic.w	r3, r3, #7
 80072b6:	3308      	adds	r3, #8
 80072b8:	9303      	str	r3, [sp, #12]
 80072ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072bc:	443b      	add	r3, r7
 80072be:	9309      	str	r3, [sp, #36]	; 0x24
 80072c0:	e768      	b.n	8007194 <_vfiprintf_r+0x78>
 80072c2:	460c      	mov	r4, r1
 80072c4:	2001      	movs	r0, #1
 80072c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ca:	e7a6      	b.n	800721a <_vfiprintf_r+0xfe>
 80072cc:	2300      	movs	r3, #0
 80072ce:	f04f 0c0a 	mov.w	ip, #10
 80072d2:	4619      	mov	r1, r3
 80072d4:	3401      	adds	r4, #1
 80072d6:	9305      	str	r3, [sp, #20]
 80072d8:	4620      	mov	r0, r4
 80072da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072de:	3a30      	subs	r2, #48	; 0x30
 80072e0:	2a09      	cmp	r2, #9
 80072e2:	d903      	bls.n	80072ec <_vfiprintf_r+0x1d0>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0c6      	beq.n	8007276 <_vfiprintf_r+0x15a>
 80072e8:	9105      	str	r1, [sp, #20]
 80072ea:	e7c4      	b.n	8007276 <_vfiprintf_r+0x15a>
 80072ec:	4604      	mov	r4, r0
 80072ee:	2301      	movs	r3, #1
 80072f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80072f4:	e7f0      	b.n	80072d8 <_vfiprintf_r+0x1bc>
 80072f6:	ab03      	add	r3, sp, #12
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	462a      	mov	r2, r5
 80072fc:	4630      	mov	r0, r6
 80072fe:	4b13      	ldr	r3, [pc, #76]	; (800734c <_vfiprintf_r+0x230>)
 8007300:	a904      	add	r1, sp, #16
 8007302:	f7fd fbb3 	bl	8004a6c <_printf_float>
 8007306:	4607      	mov	r7, r0
 8007308:	1c78      	adds	r0, r7, #1
 800730a:	d1d6      	bne.n	80072ba <_vfiprintf_r+0x19e>
 800730c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800730e:	07d9      	lsls	r1, r3, #31
 8007310:	d405      	bmi.n	800731e <_vfiprintf_r+0x202>
 8007312:	89ab      	ldrh	r3, [r5, #12]
 8007314:	059a      	lsls	r2, r3, #22
 8007316:	d402      	bmi.n	800731e <_vfiprintf_r+0x202>
 8007318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800731a:	f7fe f90d 	bl	8005538 <__retarget_lock_release_recursive>
 800731e:	89ab      	ldrh	r3, [r5, #12]
 8007320:	065b      	lsls	r3, r3, #25
 8007322:	f53f af1d 	bmi.w	8007160 <_vfiprintf_r+0x44>
 8007326:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007328:	e71c      	b.n	8007164 <_vfiprintf_r+0x48>
 800732a:	ab03      	add	r3, sp, #12
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	462a      	mov	r2, r5
 8007330:	4630      	mov	r0, r6
 8007332:	4b06      	ldr	r3, [pc, #24]	; (800734c <_vfiprintf_r+0x230>)
 8007334:	a904      	add	r1, sp, #16
 8007336:	f7fd fe39 	bl	8004fac <_printf_i>
 800733a:	e7e4      	b.n	8007306 <_vfiprintf_r+0x1ea>
 800733c:	08007874 	.word	0x08007874
 8007340:	0800787a 	.word	0x0800787a
 8007344:	0800787e 	.word	0x0800787e
 8007348:	08004a6d 	.word	0x08004a6d
 800734c:	080070f9 	.word	0x080070f9

08007350 <__swbuf_r>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	460e      	mov	r6, r1
 8007354:	4614      	mov	r4, r2
 8007356:	4605      	mov	r5, r0
 8007358:	b118      	cbz	r0, 8007362 <__swbuf_r+0x12>
 800735a:	6a03      	ldr	r3, [r0, #32]
 800735c:	b90b      	cbnz	r3, 8007362 <__swbuf_r+0x12>
 800735e:	f7fd ffd3 	bl	8005308 <__sinit>
 8007362:	69a3      	ldr	r3, [r4, #24]
 8007364:	60a3      	str	r3, [r4, #8]
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	071a      	lsls	r2, r3, #28
 800736a:	d525      	bpl.n	80073b8 <__swbuf_r+0x68>
 800736c:	6923      	ldr	r3, [r4, #16]
 800736e:	b31b      	cbz	r3, 80073b8 <__swbuf_r+0x68>
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	6922      	ldr	r2, [r4, #16]
 8007374:	b2f6      	uxtb	r6, r6
 8007376:	1a98      	subs	r0, r3, r2
 8007378:	6963      	ldr	r3, [r4, #20]
 800737a:	4637      	mov	r7, r6
 800737c:	4283      	cmp	r3, r0
 800737e:	dc04      	bgt.n	800738a <__swbuf_r+0x3a>
 8007380:	4621      	mov	r1, r4
 8007382:	4628      	mov	r0, r5
 8007384:	f7ff fda2 	bl	8006ecc <_fflush_r>
 8007388:	b9e0      	cbnz	r0, 80073c4 <__swbuf_r+0x74>
 800738a:	68a3      	ldr	r3, [r4, #8]
 800738c:	3b01      	subs	r3, #1
 800738e:	60a3      	str	r3, [r4, #8]
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	6022      	str	r2, [r4, #0]
 8007396:	701e      	strb	r6, [r3, #0]
 8007398:	6962      	ldr	r2, [r4, #20]
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	429a      	cmp	r2, r3
 800739e:	d004      	beq.n	80073aa <__swbuf_r+0x5a>
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	07db      	lsls	r3, r3, #31
 80073a4:	d506      	bpl.n	80073b4 <__swbuf_r+0x64>
 80073a6:	2e0a      	cmp	r6, #10
 80073a8:	d104      	bne.n	80073b4 <__swbuf_r+0x64>
 80073aa:	4621      	mov	r1, r4
 80073ac:	4628      	mov	r0, r5
 80073ae:	f7ff fd8d 	bl	8006ecc <_fflush_r>
 80073b2:	b938      	cbnz	r0, 80073c4 <__swbuf_r+0x74>
 80073b4:	4638      	mov	r0, r7
 80073b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073b8:	4621      	mov	r1, r4
 80073ba:	4628      	mov	r0, r5
 80073bc:	f000 f806 	bl	80073cc <__swsetup_r>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d0d5      	beq.n	8007370 <__swbuf_r+0x20>
 80073c4:	f04f 37ff 	mov.w	r7, #4294967295
 80073c8:	e7f4      	b.n	80073b4 <__swbuf_r+0x64>
	...

080073cc <__swsetup_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4b2a      	ldr	r3, [pc, #168]	; (8007478 <__swsetup_r+0xac>)
 80073d0:	4605      	mov	r5, r0
 80073d2:	6818      	ldr	r0, [r3, #0]
 80073d4:	460c      	mov	r4, r1
 80073d6:	b118      	cbz	r0, 80073e0 <__swsetup_r+0x14>
 80073d8:	6a03      	ldr	r3, [r0, #32]
 80073da:	b90b      	cbnz	r3, 80073e0 <__swsetup_r+0x14>
 80073dc:	f7fd ff94 	bl	8005308 <__sinit>
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073e6:	0718      	lsls	r0, r3, #28
 80073e8:	d422      	bmi.n	8007430 <__swsetup_r+0x64>
 80073ea:	06d9      	lsls	r1, r3, #27
 80073ec:	d407      	bmi.n	80073fe <__swsetup_r+0x32>
 80073ee:	2309      	movs	r3, #9
 80073f0:	602b      	str	r3, [r5, #0]
 80073f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073f6:	f04f 30ff 	mov.w	r0, #4294967295
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	e034      	b.n	8007468 <__swsetup_r+0x9c>
 80073fe:	0758      	lsls	r0, r3, #29
 8007400:	d512      	bpl.n	8007428 <__swsetup_r+0x5c>
 8007402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007404:	b141      	cbz	r1, 8007418 <__swsetup_r+0x4c>
 8007406:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800740a:	4299      	cmp	r1, r3
 800740c:	d002      	beq.n	8007414 <__swsetup_r+0x48>
 800740e:	4628      	mov	r0, r5
 8007410:	f7fe ff0e 	bl	8006230 <_free_r>
 8007414:	2300      	movs	r3, #0
 8007416:	6363      	str	r3, [r4, #52]	; 0x34
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800741e:	81a3      	strh	r3, [r4, #12]
 8007420:	2300      	movs	r3, #0
 8007422:	6063      	str	r3, [r4, #4]
 8007424:	6923      	ldr	r3, [r4, #16]
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	f043 0308 	orr.w	r3, r3, #8
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	b94b      	cbnz	r3, 8007448 <__swsetup_r+0x7c>
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800743a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800743e:	d003      	beq.n	8007448 <__swsetup_r+0x7c>
 8007440:	4621      	mov	r1, r4
 8007442:	4628      	mov	r0, r5
 8007444:	f000 f883 	bl	800754e <__smakebuf_r>
 8007448:	89a0      	ldrh	r0, [r4, #12]
 800744a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800744e:	f010 0301 	ands.w	r3, r0, #1
 8007452:	d00a      	beq.n	800746a <__swsetup_r+0x9e>
 8007454:	2300      	movs	r3, #0
 8007456:	60a3      	str	r3, [r4, #8]
 8007458:	6963      	ldr	r3, [r4, #20]
 800745a:	425b      	negs	r3, r3
 800745c:	61a3      	str	r3, [r4, #24]
 800745e:	6923      	ldr	r3, [r4, #16]
 8007460:	b943      	cbnz	r3, 8007474 <__swsetup_r+0xa8>
 8007462:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007466:	d1c4      	bne.n	80073f2 <__swsetup_r+0x26>
 8007468:	bd38      	pop	{r3, r4, r5, pc}
 800746a:	0781      	lsls	r1, r0, #30
 800746c:	bf58      	it	pl
 800746e:	6963      	ldrpl	r3, [r4, #20]
 8007470:	60a3      	str	r3, [r4, #8]
 8007472:	e7f4      	b.n	800745e <__swsetup_r+0x92>
 8007474:	2000      	movs	r0, #0
 8007476:	e7f7      	b.n	8007468 <__swsetup_r+0x9c>
 8007478:	20000068 	.word	0x20000068

0800747c <_raise_r>:
 800747c:	291f      	cmp	r1, #31
 800747e:	b538      	push	{r3, r4, r5, lr}
 8007480:	4604      	mov	r4, r0
 8007482:	460d      	mov	r5, r1
 8007484:	d904      	bls.n	8007490 <_raise_r+0x14>
 8007486:	2316      	movs	r3, #22
 8007488:	6003      	str	r3, [r0, #0]
 800748a:	f04f 30ff 	mov.w	r0, #4294967295
 800748e:	bd38      	pop	{r3, r4, r5, pc}
 8007490:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007492:	b112      	cbz	r2, 800749a <_raise_r+0x1e>
 8007494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007498:	b94b      	cbnz	r3, 80074ae <_raise_r+0x32>
 800749a:	4620      	mov	r0, r4
 800749c:	f000 f830 	bl	8007500 <_getpid_r>
 80074a0:	462a      	mov	r2, r5
 80074a2:	4601      	mov	r1, r0
 80074a4:	4620      	mov	r0, r4
 80074a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074aa:	f000 b817 	b.w	80074dc <_kill_r>
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d00a      	beq.n	80074c8 <_raise_r+0x4c>
 80074b2:	1c59      	adds	r1, r3, #1
 80074b4:	d103      	bne.n	80074be <_raise_r+0x42>
 80074b6:	2316      	movs	r3, #22
 80074b8:	6003      	str	r3, [r0, #0]
 80074ba:	2001      	movs	r0, #1
 80074bc:	e7e7      	b.n	800748e <_raise_r+0x12>
 80074be:	2400      	movs	r4, #0
 80074c0:	4628      	mov	r0, r5
 80074c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074c6:	4798      	blx	r3
 80074c8:	2000      	movs	r0, #0
 80074ca:	e7e0      	b.n	800748e <_raise_r+0x12>

080074cc <raise>:
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <raise+0xc>)
 80074ce:	4601      	mov	r1, r0
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	f7ff bfd3 	b.w	800747c <_raise_r>
 80074d6:	bf00      	nop
 80074d8:	20000068 	.word	0x20000068

080074dc <_kill_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	2300      	movs	r3, #0
 80074e0:	4d06      	ldr	r5, [pc, #24]	; (80074fc <_kill_r+0x20>)
 80074e2:	4604      	mov	r4, r0
 80074e4:	4608      	mov	r0, r1
 80074e6:	4611      	mov	r1, r2
 80074e8:	602b      	str	r3, [r5, #0]
 80074ea:	f7fa fb62 	bl	8001bb2 <_kill>
 80074ee:	1c43      	adds	r3, r0, #1
 80074f0:	d102      	bne.n	80074f8 <_kill_r+0x1c>
 80074f2:	682b      	ldr	r3, [r5, #0]
 80074f4:	b103      	cbz	r3, 80074f8 <_kill_r+0x1c>
 80074f6:	6023      	str	r3, [r4, #0]
 80074f8:	bd38      	pop	{r3, r4, r5, pc}
 80074fa:	bf00      	nop
 80074fc:	200004a8 	.word	0x200004a8

08007500 <_getpid_r>:
 8007500:	f7fa bb50 	b.w	8001ba4 <_getpid>

08007504 <__swhatbuf_r>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	460c      	mov	r4, r1
 8007508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750c:	4615      	mov	r5, r2
 800750e:	2900      	cmp	r1, #0
 8007510:	461e      	mov	r6, r3
 8007512:	b096      	sub	sp, #88	; 0x58
 8007514:	da0c      	bge.n	8007530 <__swhatbuf_r+0x2c>
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	2100      	movs	r1, #0
 800751a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800751e:	bf0c      	ite	eq
 8007520:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007524:	2340      	movne	r3, #64	; 0x40
 8007526:	2000      	movs	r0, #0
 8007528:	6031      	str	r1, [r6, #0]
 800752a:	602b      	str	r3, [r5, #0]
 800752c:	b016      	add	sp, #88	; 0x58
 800752e:	bd70      	pop	{r4, r5, r6, pc}
 8007530:	466a      	mov	r2, sp
 8007532:	f000 f849 	bl	80075c8 <_fstat_r>
 8007536:	2800      	cmp	r0, #0
 8007538:	dbed      	blt.n	8007516 <__swhatbuf_r+0x12>
 800753a:	9901      	ldr	r1, [sp, #4]
 800753c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007540:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007544:	4259      	negs	r1, r3
 8007546:	4159      	adcs	r1, r3
 8007548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800754c:	e7eb      	b.n	8007526 <__swhatbuf_r+0x22>

0800754e <__smakebuf_r>:
 800754e:	898b      	ldrh	r3, [r1, #12]
 8007550:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007552:	079d      	lsls	r5, r3, #30
 8007554:	4606      	mov	r6, r0
 8007556:	460c      	mov	r4, r1
 8007558:	d507      	bpl.n	800756a <__smakebuf_r+0x1c>
 800755a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	6123      	str	r3, [r4, #16]
 8007562:	2301      	movs	r3, #1
 8007564:	6163      	str	r3, [r4, #20]
 8007566:	b002      	add	sp, #8
 8007568:	bd70      	pop	{r4, r5, r6, pc}
 800756a:	466a      	mov	r2, sp
 800756c:	ab01      	add	r3, sp, #4
 800756e:	f7ff ffc9 	bl	8007504 <__swhatbuf_r>
 8007572:	9900      	ldr	r1, [sp, #0]
 8007574:	4605      	mov	r5, r0
 8007576:	4630      	mov	r0, r6
 8007578:	f7fe feca 	bl	8006310 <_malloc_r>
 800757c:	b948      	cbnz	r0, 8007592 <__smakebuf_r+0x44>
 800757e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007582:	059a      	lsls	r2, r3, #22
 8007584:	d4ef      	bmi.n	8007566 <__smakebuf_r+0x18>
 8007586:	f023 0303 	bic.w	r3, r3, #3
 800758a:	f043 0302 	orr.w	r3, r3, #2
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	e7e3      	b.n	800755a <__smakebuf_r+0xc>
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	6020      	str	r0, [r4, #0]
 8007596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759a:	81a3      	strh	r3, [r4, #12]
 800759c:	9b00      	ldr	r3, [sp, #0]
 800759e:	6120      	str	r0, [r4, #16]
 80075a0:	6163      	str	r3, [r4, #20]
 80075a2:	9b01      	ldr	r3, [sp, #4]
 80075a4:	b15b      	cbz	r3, 80075be <__smakebuf_r+0x70>
 80075a6:	4630      	mov	r0, r6
 80075a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ac:	f000 f81e 	bl	80075ec <_isatty_r>
 80075b0:	b128      	cbz	r0, 80075be <__smakebuf_r+0x70>
 80075b2:	89a3      	ldrh	r3, [r4, #12]
 80075b4:	f023 0303 	bic.w	r3, r3, #3
 80075b8:	f043 0301 	orr.w	r3, r3, #1
 80075bc:	81a3      	strh	r3, [r4, #12]
 80075be:	89a3      	ldrh	r3, [r4, #12]
 80075c0:	431d      	orrs	r5, r3
 80075c2:	81a5      	strh	r5, [r4, #12]
 80075c4:	e7cf      	b.n	8007566 <__smakebuf_r+0x18>
	...

080075c8 <_fstat_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	2300      	movs	r3, #0
 80075cc:	4d06      	ldr	r5, [pc, #24]	; (80075e8 <_fstat_r+0x20>)
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	4611      	mov	r1, r2
 80075d4:	602b      	str	r3, [r5, #0]
 80075d6:	f7fa fb4a 	bl	8001c6e <_fstat>
 80075da:	1c43      	adds	r3, r0, #1
 80075dc:	d102      	bne.n	80075e4 <_fstat_r+0x1c>
 80075de:	682b      	ldr	r3, [r5, #0]
 80075e0:	b103      	cbz	r3, 80075e4 <_fstat_r+0x1c>
 80075e2:	6023      	str	r3, [r4, #0]
 80075e4:	bd38      	pop	{r3, r4, r5, pc}
 80075e6:	bf00      	nop
 80075e8:	200004a8 	.word	0x200004a8

080075ec <_isatty_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	2300      	movs	r3, #0
 80075f0:	4d05      	ldr	r5, [pc, #20]	; (8007608 <_isatty_r+0x1c>)
 80075f2:	4604      	mov	r4, r0
 80075f4:	4608      	mov	r0, r1
 80075f6:	602b      	str	r3, [r5, #0]
 80075f8:	f7fa fb48 	bl	8001c8c <_isatty>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_isatty_r+0x1a>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_isatty_r+0x1a>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	200004a8 	.word	0x200004a8

0800760c <_init>:
 800760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760e:	bf00      	nop
 8007610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007612:	bc08      	pop	{r3}
 8007614:	469e      	mov	lr, r3
 8007616:	4770      	bx	lr

08007618 <_fini>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr
